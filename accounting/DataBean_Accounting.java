package com.hlpl.hazira.fms7.accounting;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

//DataBean Introduced By    : Samik Shah ...
//DataBean Introduced On    : 22nd June, 2010 ...
//Code Reviewed By			:  
//Code Reviewed Date		:  
//Code Review Status  		:
//Last Modified By			: Samik Shah ...
//Last Modified Date		: 20th May, 2011 ...
//last Modified By 			: Milan Dalsaniya
//Last Modified Date		: 29th Sept, 2011 ...

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import javax.mail.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.http.HttpServletRequest;
import javax.sql.DataSource;

import org.jfree.ui.Size2D;

import com.hlpl.hazira.fms7.util.RuntimeConf;
import com.hlpl.hazira.fms7.util.UtilBean;
//import com.itextpdf.text.pdf.PdfStructTreeController.returnType;


public class DataBean_Accounting
{
    Connection conn; 
	public Vector getCD_PAID_DOM() {
		return CD_PAID_DOM;
	}

	public void setCD_PAID_DOM(Vector cD_PAID_DOM) {
		CD_PAID_DOM = cD_PAID_DOM;
	}

	Statement stmt;
	Statement stmt1;
	public Vector getVOTH_CGST_TAX_RATE() {
		return VOTH_CGST_TAX_RATE;
	}

	public Vector getVOTH_IGST_TAX_RATE() {
		return VOTH_IGST_TAX_RATE;
	}

	public void setVOTH_CGST_TAX_RATE(Vector vOTH_CGST_TAX_RATE) {
		VOTH_CGST_TAX_RATE = vOTH_CGST_TAX_RATE;
	}

	public void setVOTH_IGST_TAX_RATE(Vector vOTH_IGST_TAX_RATE) {
		VOTH_IGST_TAX_RATE = vOTH_IGST_TAX_RATE;
	}
	public int getCnt() {
		return cnt;
	}

	public void setCnt(int cnt) {
		this.cnt = cnt;
	}

	Statement stmt2;
	Statement stmt3;
	Statement stmt4;
	Statement stmt5;
	Statement stmt6;
	
	ResultSet rset;
	ResultSet rset1;
	ResultSet rset2;
	ResultSet rset3;
	ResultSet rset4;
	ResultSet rset5;
	ResultSet rset6;
	
	String queryString = "";
	String queryString1 = "";
	String queryString2 = "";
	String queryString3 = "";
	String queryString4 = "";
	String queryString5 = "";
	String queryString6 = "";
	String callFlag = "";
	String financial_year = "";
	String month = "";
	String year = "";
	String to_month = "";
	String to_mon = "";
	String mon = "";
	String activity="";
	String from_dt = "";
	String to_dt = "";
	int tax_cform=15;
	double tds_limit_amt = 5000000; //Hiren_20210624
	Vector tax_diff_val=new Vector();
	Vector VADJUST_FLAG_SN=new Vector();
	Vector VCFORM_FLAG=new Vector();
	public Vector getVADJUST_FLAG_SN() {
		return VADJUST_FLAG_SN;
	}

	public void setVADJUST_FLAG_SN(Vector vADJUST_FLAG_SN) {
		VADJUST_FLAG_SN = vADJUST_FLAG_SN;
	}

	public Vector getVADJUST_AMT_SN() {
		return VADJUST_AMT_SN;
	}

	public void setVADJUST_AMT_SN(Vector vADJUST_AMT_SN) {
		VADJUST_AMT_SN = vADJUST_AMT_SN;
	}

	public Vector getVADJUST_CUR_SN() {
		return VADJUST_CUR_SN;
	}

	public void setVADJUST_CUR_SN(Vector vADJUST_CUR_SN) {
		VADJUST_CUR_SN = vADJUST_CUR_SN;
	}

	Vector VADJUST_AMT_SN=new Vector();
	Vector VADJUST_balc_SN=new Vector();
	public Vector getVADJUST_balc_SN() {
		return VADJUST_balc_SN;
	}

	public void setVADJUST_balc_SN(Vector vADJUST_balc_SN) {
		VADJUST_balc_SN = vADJUST_balc_SN;
	}

	Vector VADJUST_CUR_SN=new Vector();
	String to_year = "";
	String methodName = "";
	String databeanName = "DataBean_Accounting";
	
	//Following NumberFormat Object is defined by Samik Shah ... On 20th May, 2010 ...
	NumberFormat nf = new DecimalFormat("###########0.00");
	NumberFormat nf6 = new DecimalFormat("############.##");
	NumberFormat nf61 = new DecimalFormat("###########.00");
	NumberFormat nf1 = new DecimalFormat("###########0");
	NumberFormat nf2 = new DecimalFormat("#########0.0000"); //For Currency Purpose ... Defined By Samik Shah On 1st June, 2010 ...
	NumberFormat nf3 = new DecimalFormat("###,###,###,##0.00");
	NumberFormat nf4 = new DecimalFormat("############0.000");
//	NumberFormat nf5 = new DecimalFormat("###,###,###,##0");
	NumberFormat nf5 = new DecimalFormat("###########0");
	/*REGAS_HLPL_INV_SEQ_NO REGAS_INVOICE_DT REGAS_CUSTOMER_CD REGAS_TOTAL_QTY REGAS_EXCHG_RATE_VALUE REGAS_GROSS_AMT_USD REGAS_GROSS_AMT_INR REGAS_NET_AMT_INR
	REGAS_CONTRACT_TYPE REGAS_CONTACT_PERSON_CD REGAS_EXCHG_RATE_CD REGAS_EXCHG_RATE_DT REGAS_EXCHG_RATE_TYPE REGAS_PLANT_SEQ_NO REGAS_CUST_INV_SEQ_NO
	REGAS_SUN_APPROVAL*/
	//FOLLOWING VARIABLES ARE DECLARED BY MILAN DALSANIYA FOR REGAS REGISTER ON MD27092011
	public Vector REGAS_HLPL_INV_SEQ_NO= new Vector();
	public Vector REGAS_INVOICE_DT= new Vector();
	public Vector REGAS_INVOICE_MONTH= new Vector();
	public Vector REGAS_CUSTOMER_CD_INV= new Vector();
	
	public Vector REGAS_CUSTOMER_NM= new Vector();
	public Vector REGAS_CUSTOMER_ABBR= new Vector();
	
	public Vector REGAS_SUPPL_NM= new Vector();
	public Vector REGAS_SUPPL_ABBR= new Vector();
	
	public Vector REGAS_TOTAL_QTY= new Vector();
	public Vector REGAS_EXCHG_RATE_VALUE= new Vector();
	
	public Vector REGAS_GROSS_AMT_USD= new Vector();
	public Vector REGAS_GROSS_AMT_INR= new Vector();
	public Vector REGAS_NET_AMT_INR= new Vector();
	
	public Vector REGAS_CONTRACT_TYPE= new Vector();
	public Vector REGAS_CONTACT_PERSON_CD= new Vector();
	public Vector REGAS_EXCHG_RATE_CD= new Vector();
	
	public Vector REGAS_EXCHG_RATE_DT= new Vector();
	public Vector REGAS_EXCHG_RATE_TYPE= new Vector();
	public Vector REGAS_PLANT_SEQ_NO= new Vector();
	
	public Vector REGAS_CUST_INV_SEQ_NO = new Vector();
	public Vector REGAS_SUN_APPROVAL = new Vector();
	public Vector REGAS_FINANCIAL_YEAR = new Vector();
	public Vector REGAS_TAX_STRUCT_CD = new Vector();
	public Vector REGAS_TAX_SERVICE = new Vector();
	public Vector REGAS_TAX_EDU_CESS = new Vector();
	public Vector REGAS_TAX_HIEDU_CESS = new Vector();
	public Vector REGAS_TAX_SBC = new Vector();			//BK20151118
	   
	public Vector REGAS_SUG = new Vector();
	public Vector REGAS_CARGO_REF_NO = new Vector();
	public Vector REGAS_CARGO_REF_NO_ON_INV = new Vector();
	public Vector REGAS_ACTUAL_RECPT_DT = new Vector();
	public Vector REGAS_ADQ_QTY = new Vector();
	public Vector REGAS_GAS_TARIF = new Vector();
	public Vector REGAS_SUPP_CD = new Vector();
	public Vector REGAS_SHIP_NAME = new Vector();
	public Vector REGAS_CUSTOMER_CD_CARGO= new Vector();
	public Vector REGAS_CUSTOMER_ABBR_CARGO= new Vector();
	
	public Vector REGAS_OP_BAL_REGAS = new  Vector();
	public Vector REGAS_OP_BAL_REGAS_MONTH = new  Vector();
	public Vector REGAS_OP_BAL_REGAS_YEAR = new  Vector();
	public Vector REGAS_OFFSPEC_RATE  = new  Vector();
	public Vector REGAS_OFFSPEC_FLAG = new  Vector();
	public Vector REGAS_OFFSPEC_REJ_QTY = new  Vector();
	public Vector REGAS_OFFSPEC_ACC_QTY = new  Vector();
	
	
	public Vector REGAS_RECIEPT = new  Vector();
	public Vector REGAS_REGASSIFIED = new  Vector();
	public Vector REGAS_VARIABLE_COST = new  Vector();
	public Vector REGAS_CLOSING_STOCK = new  Vector();
	public Vector REGAS_TOT_INVOICE_VAL_INR = new  Vector();
	
	//FOR REGAS SUMMARY
	Vector REGAS_SUMRY_INVOICE_MONTH= new Vector();
	Vector REGAS_SUMRY_TOTAL_QTY= new Vector();
	Vector REGAS_SUMRY_EXCHG_RATE_VALUE= new Vector();
	Vector REGAS_SUMRY_GROSS_AMT_USD= new Vector();
	Vector REGAS_SUMRY_GROSS_AMT_INR= new Vector();
	Vector REGAS_SUMRY_TAX_SERVICE = new Vector();
	Vector REGAS_SUMRY_TAX_SBC = new Vector();			//BK20151118
	Vector REGAS_SUMRY_TAX_EDU_CESS = new Vector();
	Vector REGAS_SUMRY_TAX_HIEDU_CESS = new Vector();
	Vector REGAS_SUMRY_ADQ_QTY = new Vector();
	Vector REGAS_SUMRY_GAS_TARIF = new Vector();
	Vector REGAS_SUMRY_OFFSPEC_REJ_QTY = new  Vector();
	Vector REGAS_SUMRY_OFFSPEC_ACC_QTY = new  Vector();
	Vector REGAS_SUMRY_RECIEPT = new  Vector();
	Vector REGAS_SUMRY_REGASSIFIED = new  Vector();
	Vector REGAS_SUMRY_VARIABLE_COST = new  Vector();
	Vector REGAS_SUMRY_TOT_INVOICE_VAL_INR = new  Vector();
	Vector REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU = new  Vector();
	
	public Vector REGAS_SUMRY_OP_BAL_REGAS = new  Vector();
	public Vector REGAS_SUMRY_CL_BAL_REGAS = new  Vector();
	
	//FOR REGAS SUMMARY
	
	//Following util Object is defined by Samik Shah ... On 20th May, 2010 ...
	UtilBean util = new UtilBean();
	
	//Following  Vector Variable/s are defined by Achal pathak ... On 23rd june., 2010 ...
	public Vector TRADER_CD= new Vector();
	public Vector TRADER_NAME= new Vector();
	public Vector TRADER_ABBR= new Vector();
	public Vector CARGO_REF_CD_DOM = new Vector();
	Vector CARGO_REF_DOM_FLAG=new Vector();
	Vector Exchg_rt_Dt=new Vector();
	String all_exchg_rtdt="";
	String all_exchg_rtdt_drcr="";
	Vector PAY_EXCHG_RT_DT=new Vector();
	Vector PAY_EXCHG_RT_VAL=new Vector();
	public Vector Dist_CARGO_REF_CD_DOM = new Vector();
	
	Vector XML_GEN_FLAG_DOM=new Vector();
	Vector exchg_rt_val=new Vector();
	String exchgrt="";
	Vector Vexchg_rt_dt=new Vector();
	Vector SUN_APPROVAL_DOM=new Vector();
	Vector CUSTOM_JBB_DOM=new Vector();
	Vector CUSTOM_PROVISIONS_DOM=new Vector();
	Vector CD_PAID_DOM=new Vector();
	Vector CD_PAID_NUMERIC_DOM=new Vector();
	
	String flag_accounting="";
	Vector Vsupp_plant_Abbr=new Vector();
	String supplier_cd="1";
	Vector INR_PER_MMBTU_DOM=new Vector();
	Vector CUSTOM_DUTY_USD_DOM=new Vector();
	Vector INR_PER_MMBTU_NUMERIC_DOM=new Vector();
	Vector CUSTOM_DUTY_USD_NUMERIC_DOM=new Vector();
	Vector ADDL_CUSTOM_DUTY_USD_DOM=new Vector();
	public Vector getADDL_CUSTOM_DUTY_USD_DOM() {
		return ADDL_CUSTOM_DUTY_USD_DOM;
	}

	public void setADDL_CUSTOM_DUTY_USD_DOM(Vector aDDL_CUSTOM_DUTY_USD_DOM) {
		ADDL_CUSTOM_DUTY_USD_DOM = aDDL_CUSTOM_DUTY_USD_DOM;
	}
	Vector TCS_PERC_DOM_DRCR=new Vector();
	Vector TDS_PERC_DOM_DRCR=new Vector();
	Vector TCS_APP_FLAG_DRCR=new Vector();
	Vector TDS_APP_FLAG_DRCR=new Vector();
	Vector Gross_inr_DOM_DRCR=new Vector();
	Vector Tax_inr_DOM_DRCR=new Vector();
	Vector net_inr_DOM_DRCR=new Vector();
	Vector TCS_TDS_AMT_DOM_DRCR=new Vector();
	Vector payable_inr_DOM_DRCR=new Vector();
	Vector exchg_rt_val_DRCR=new Vector();
	Vector FINAL_SELLER_INV_AMT_INR_DOM_DRCR=new Vector();
	Vector CARGO_REF_CD_DOM_DRCR=new Vector();
	Vector Vsupp_plant_Abbr_DOM_DRCR=new Vector();
	Vector PAY_EXCHG_RT_DT_DRCR=new Vector();
	Vector PAY_EXCHG_RT_VAL_DRCR=new Vector();
	Vector VESSEL_NM_DOM_DRCR=new Vector();
	Vector inv_type_flag_DRCR=new Vector();
	Vector DR_CR_FLAG_DOM_DRCR=new Vector();
	Vector DR_CR_ORI_INV_NO=new Vector();
	Vector TRD_CD_DOM_DRCR=new Vector();
	Vector ACTUAL_UNLOADED_QTY_DOM_DRCR=new Vector();
	Vector CD_PAID_DOM_DRCR=new Vector();
	Vector CD_PAID_NUMERIC_DOM_DRCR=new Vector();
	Vector ACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR=new Vector();
	Vector TRADER_INV_CURRENCY_DRCR=new Vector();
	Vector CARGO_DOM_FLAG_DRCR=new Vector();
	Vector Exchg_rt_cd_DRCR=new Vector();
	Vector TRADER_PAY_CURRENCY_DRCR=new Vector();
	Vector EXCHG_RATE_VALUE_DOM_DRCR=new Vector();
	Vector INVOICE_AMT_DOM_DRCR=new Vector();
	Vector INVOICE_TAX_AMT_DOM_DRCR=new Vector();
	Vector ACT_ARRV_MONTH_DOM_DRCR=new Vector();
	Vector INVOICE_AMT_TDS_DOM_DRCR=new Vector();
	Vector ACT_ARRV_DT_DOM_DRCR=new Vector();
	Vector REMARK_DOM_DRCR=new Vector();
	Vector TAX_rmk_DOM_DRCR=new Vector();
	Vector TAX_amt_usd_DOM_DRCR=new Vector();
	Vector invoice_type_DOM_DRCR=new Vector();
	Vector INVOICE_NO_DOM_DRCR=new Vector();
	Vector INVOICE_DT_DOM_DRCR=new Vector();
	Vector CONF_PRICE_DOM_DRCR=new Vector();
	
	Vector CONF_PRICE_NUMERIC_DOM_DRCR=new Vector();
	Vector USD_VAL_INVOICE_DOM_DRCR=new Vector();
	Vector USD_VAL_INVOICE_NUMERIC_DOM_DRCR=new Vector();
	Vector DUE_DT_DOM_DRCR=new Vector();
	Vector Approve_flag_DOM_DRCR=new Vector();
	Vector duration_dom_DRCR=new Vector();
	Vector TRADER_NAME_DOM_DRCR=new Vector();
	Vector TRADER_ABBR_DOM_DRCR=new Vector();
	Vector INVOICE_TCS_AMT_DRCR=new Vector();
	Vector Exchg_rt_Dt_DRCR=new Vector();
	Vector XML_GEN_FLAG_DOM_DRCR=new Vector();
	Vector SUN_APPROVAL_DOM_DRCR=new Vector();
	Vector TRANSACTION_DT_DRCR=new Vector();
	Vector ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM=new Vector();
	Vector COST_OF_PURCHASE_USD_DOM=new Vector();
	Vector USD_PER_MMBTU_NUMERIC_DOM=new Vector();
	Vector COST_OF_PURCHASE_USD_NUMERIC_DOM=new Vector();
	Vector USD_PER_MMBTU_DOM=new Vector();
	Vector VESSEL_NM_DOM=new Vector();
	Vector contract_no_dom=new Vector();
	Vector contract_rev_no_dom=new Vector();
	Vector plant_cd_dom=new Vector();
	Vector inv_type_flag=new Vector(); 
	Vector INVOICE_NO_DOM=new Vector();
	Vector Dist_INVOICE_NO_DOM=new Vector();
	
	Vector INVOICE_AMT_DOM=new Vector();
	Vector INVOICE_AMT_TDS_DOM=new Vector();
	Vector INVOICE_TAX_AMT_DOM=new Vector();
	Vector Approve_flag_DOM=new Vector();
	Vector exchg_rt_dom=new Vector();
	Vector Authorize_flag_DOM=new Vector();
	Vector Check_flag_DOM=new Vector();
	Vector INVOICE_DT_DOM=new Vector();
	String ind="";
	Vector PROVISIONAL_QTY_DOM=new Vector();
	Vector CONF_PRICE_DOM=new Vector();
	Vector USD_VAL_INVOICE_DOM=new Vector();
	Vector DUE_DT_DOM=new Vector();
	Vector ACTUAL_UNLOADED_QTY_DOM=new Vector();
	Vector TRADER_INV_CURRENCY=new Vector();
	Vector TRADER_PAY_CURRENCY=new Vector();
	Vector Gross_inr_DOM=new Vector();
	Vector TCS_TDS_AMT_DOM=new Vector();
	Vector TCS_APP_FLAG=new Vector();
	Vector TCS_PERC_DOM=new Vector();
	Vector TDS_PERC_DOM=new Vector();
	Vector TDS_APP_FLAG=new Vector();
	Vector Tax_inr_DOM=new Vector();
	Vector net_inr_DOM=new Vector();
	Vector payable_inr_DOM=new Vector();
	Vector TAX_rmk_DOM=new Vector();
	Vector TAX_amt_usd_DOM=new Vector();
	Vector REMARK_DOM=new Vector();
	Vector ACTUAL_UNLOADED_QTY_NUMERIC_DOM=new Vector();
	Vector Exchg_rt_cd=new Vector();
	Vector CONF_PRICE_NUMERIC_DOM=new Vector();
	Vector USD_VAL_INVOICE_NUMERIC_DOM=new Vector();
	Vector CREDIT_NOTE_QTY_DOM=new Vector();
	Vector CERTIFIED_QTY_DOM=new Vector();
	Vector GROUP_FOREIGN_EXCHG_RATE_DOM=new Vector();
	Vector GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM=new Vector();
	Vector FINAL_SELLER_INV_AMT_INR_DOM=new Vector();
	
	Vector FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM=new Vector();
	Vector ARRIVAL_DATE_RATE_NOTE_DOM=new Vector();
	Vector EXCHG_RATE_VALUE_DOM=new Vector();
	Vector CUSTOM_DUTY_DATE_RATE_NOTE_DOM=new Vector();
	Vector TOTAL_CD_AMT_DOM=new Vector();
	Vector TOTAL_CD_AMT_NUMERIC_DOM=new Vector();
	Vector TOTAL_PAID_REFUND_DOM=new Vector();
	Vector CUSTOM_DUTY_INTEREST_DOM=new Vector();
	Vector CUSTOM_DUTY_INTEREST_NUMERIC_DOM=new Vector();
	Vector TOTAL_PAID_REFUND_NUMERIC_DOM=new Vector();
	Vector SPLIT_SEQ_DOM=new Vector();
	public Vector CARGO_REF_CD = new Vector();	
	public Vector EDQ = new Vector();
	public Vector CONFIRM_VOLUME = new Vector();		
	public Vector INVOICE_AMT = new Vector();	
	public Vector INVOICE_NO  = new Vector();	
	public Vector INVOICE_DT = new Vector();		
	public Vector CONF_PRICE = new Vector();	
	public Vector DUE_DT = new Vector();
	public Vector HEDGE_SEQ_NO = new Vector();
	Vector Check_flag=new Vector();
	Vector Authorize_flag=new Vector();
	Vector Approve_flag=new Vector();
	public Vector VESSEL_NM= new Vector();
	public Vector BE_NO= new Vector();
	public Vector SHIP_FLAG= new Vector();
	public Vector LOAD_PORT= new Vector();
	String exchg_rt_dt="";
	String exchg_rt_dt_drcr="";
	public Vector VOLUME_UNIT_ABBR = new Vector();
	
	//Following  Vector Variable/s are defined by Achal pathak ... On 24th june., 2010 ...PROVISIONAL_CUSTOM_DUTY
	public Vector FACTOR = new Vector();
	public Vector TAX_NAME = new Vector();
	public Vector TAX_CODE = new Vector();
	public Vector TAX_AMOUNT = new Vector();
	public Vector TAX_ON_TITLE = new Vector();	
	public Vector SALE_VAT_TAX_PERC = new Vector();	 //Hiren_20200806
	public Vector SALE_CST_TAX_PERC = new Vector();	 //Hiren_20200806
	
	
	//Following  Vector Variable/s are defined by Achal pathak ... On 25th june., 2010 ...FINAL_CUSTOM_DUTY
	public Vector FINAL_FACTOR = new Vector();
	public Vector FINAL_TAX_NAME = new Vector();
	public Vector FINAL_TAX_CODE = new Vector();
	public Vector FINAL_TAX_AMOUNT = new Vector();
	public Vector FINAL_TAX_ON_TITLE = new Vector();	
	
	//Following  Vector Variable/s are defined by Achal pathak ... On 28th june., 2010 ...FINAL_CUSTOM_DUTY	
	public Vector CUSTOMER_CD= new Vector();
	public Vector CUSTOMER_NAME= new Vector();
	public Vector CUSTOMER_ABBR= new Vector();
	
	//Following  Vector Variable/s are defined by Achal pathak ... On 29th june., 2010 ...SALES_ACCOUNT and on 3rd September 2010
	public Vector HLPL_INV_SEQ_NO= new Vector();
	public Vector HLPL_INV_SEQ= new Vector();
	public Vector PERIOD_START_DT= new Vector();	
	public Vector MONTH = new Vector();	
	public Vector YEAR = new Vector();	
	public Vector PERIOD_END_DT= new Vector();
	Vector cost_center_code_=new Vector();
	public Vector SALE_PRICE= new Vector();			
	public Vector TOTAL_QTY= new Vector();
	public Vector EXCHG_RATE_VALUE= new Vector();
	public Vector EXCHG_RATE= new Vector();
	public Vector GROSS_AMT_USD= new Vector();	
	public Vector GROSS_AMT_INR= new Vector();
	public Vector NET_AMT_INR= new Vector();	
	public Vector FINANCIAL_YEAR= new Vector();	
	public Vector TAX_STRUCT_CD= new Vector();
	public Vector TRANSPORTER_CD= new Vector();
	
	
	//Following (11) Vectors Are Defined By Achal On 3rd Sep., 2010 ...
	public Vector SN_NO = new Vector();	
	public Vector SN_SUMRY_CUSTOMER_NAME = new Vector(); //MD20111222
	public Vector SN_SUMRY_CUSTOMER_CD = new Vector();	//MD20111222
	
	public Vector SN_DTL_CUSTOMER_NAME = new Vector(); //MD20111222
	public Vector SN_DTL_CUSTOMER_CD = new Vector();	//MD20111222
	public String For1 = "";
	public Vector SN_REV_NO = new Vector();
	public Vector FGSA_NO = new Vector();
	public Vector FGSA_REV_NO = new Vector();
	public Vector START_DT = new Vector();
	public Vector END_DT = new Vector();
	public Vector TCQ = new Vector();
	public Vector SALES_TAX_AMT = new Vector();
	public Vector VAT_AMT = new Vector();
	public Vector ADD_TAX = new Vector();
	public Vector TOT_SALE_VAL = new Vector();

	Vector TCQ_ZERO_REV = new Vector();  //MD20111228
	Vector TCQ_APP_DT_MAX_REV = new Vector();	//MD20111228
	
	Vector START_DT_ZR_RV = new Vector(); //MD20111228
	Vector END_DT_ZR_RV = new Vector();  //MD20111228
	
	//Introduce by MIlan MD20111231 For Sales Register
	
	public Vector SUMMRY_MONTH = new Vector();
	public Vector SUMMRY_SEGMENT_NAME = new Vector();
	public Vector SUMMRY_TCQ = new Vector();
	public Vector SUMMRY_REM_SUPPLY = new Vector();
	public Vector SUMMRY_TOTAL_QTY = new Vector();
	public Vector SUMMRY_GROSS_AMT_USD = new Vector();
	public Vector SUMMRY_GROSS_AMT_INR = new Vector();
	//-	Transportation & Shrinkage
	//GROSS_AMT_INR
	public Vector SUMMRY_inr_per_mmbtu = new Vector();
	public Vector SUMMRY_VAT_AMT = new Vector();
	public Vector SUMMRY_ADD_TAX = new Vector();
	public Vector SUMMRY_SALES_TAX_AMT = new Vector();
	Vector SUMMRY_TAX_TCS_AMT=new Vector();
	public Vector SUMMRY_SERVICE_TAX = new Vector();
	public Vector SUMMRY_SBC_TAX = new Vector();		//BK20151125
	public Vector SUMMRY_EDU_CESS_TAX = new Vector();
	public Vector SUMMRY_HEDU_CESS_TAX = new Vector();
	public Vector SUMMRY_NET_AMT_INR = new Vector();
	Vector SUMMRY_TAX_AMT_INR=new Vector();
	public Vector getSUMMRY_TAX_AMT_INR() {
		return SUMMRY_TAX_AMT_INR;
	}

	public void setSUMMRY_TAX_AMT_INR(Vector sUMMRY_TAX_AMT_INR) {
		SUMMRY_TAX_AMT_INR = sUMMRY_TAX_AMT_INR;
	}

	//Usd>>
	public Vector SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = new Vector();
//	-	Transportation & Shrinkage
	//public Vector SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = new Vector();
	public Vector SUMMRY_SALE_PRICE = new Vector(); // USD/MMBTU 
	public Vector SUMMRY_VAT_AMT_USD = new Vector();
	public Vector SUMMRY_ADD_TAX_USD = new Vector();
	public Vector SUMMRY_SALES_TAX_AMT_USD = new Vector();
	public Vector SUMMRY_SERVICE_TAX_USD = new Vector();
	public Vector SUMMRY_SBC_TAX_USD = new Vector();		//BK20151125
	public Vector SUMMRY_EDU_CESS_TAX_USD = new Vector();
	public Vector SUMMRY_HEDU_CESS_TAX_USD = new Vector();
	public Vector SUMMRY_NET_AMT_USD = new Vector();
	public Vector SUMMRY_CONT_TYP = new Vector();
	
	public Vector SUMMRY_IGST_TAX_USD = new Vector();
	public Vector SUMMRY_CGST_TAX_USD = new Vector();
	public Vector SUMMRY_SGST_TAX_USD = new Vector();
	public Vector SUMMRY_ZGST_TAX_USD = new Vector();
	public Vector SUMMRY_IGST_TAX = new Vector();
	public Vector SUMMRY_CGST_TAX = new Vector();
	public Vector SUMMRY_SGST_TAX = new Vector();
	public Vector SUMMRY_ZGST_TAX = new Vector();
	

	long summry_start_index_1 = 0;
	long summry_end_index_1 = 0;
	long summry_start_index_2 = 0;
	long summry_end_index_2 = 0;
	 
	
	//Following Vectors Are Defined By Achal On 4th Sep., 2010 ...
	public Vector SERVICE_TAX = new Vector();
	public Vector EDU_CESS_TAX = new Vector();
	public Vector HEDU_CESS_TAX = new Vector();
	public Vector CONTRACT_TYPE = new Vector();
	public Vector SBC_TAX = new Vector();		//BK20151125
	public Vector KKC_TAX = new Vector();		//SB20160620
	public Vector IGST_TAX = new Vector();
	public Vector SGST_TAX = new Vector();
	public Vector CGST_TAX = new Vector();
	public Vector ZGST_TAX = new Vector();
	
	
	//Following TEN Vectors has been defined by Samik Shah On 21st October, 2010 ...
	public Vector SEGMENT_NAME = new Vector();
	public Vector TAX_AMT_INR = new Vector();
	public Vector SALES_TAX_AMT_USD = new Vector();
	public Vector VAT_AMT_USD = new Vector();
	public Vector ADD_TAX_USD = new Vector();
	public Vector SERVICE_TAX_USD = new Vector();
	public Vector SBC_TAX_USD = new Vector();		//BK20151125
	public Vector KKC_TAX_USD = new Vector();		//SB20160620
	public Vector EDU_CESS_TAX_USD = new Vector();
	public Vector HEDU_CESS_TAX_USD = new Vector();
	public Vector GROUP_FOREIGN_EXCHG_RATE = new Vector();
	public Vector GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = new Vector();
	
	Vector IGST_TAX_USD = new Vector();
	Vector SGST_TAX_USD = new Vector();
	Vector CGST_TAX_USD = new Vector();
	Vector ZGST_TAX_USD = new Vector();
	
	public Vector CUM_SUPPLY= new Vector();
	public Vector REM_SUPPLY= new Vector();
	
	public Vector TRANS_CHARGES= new Vector();
	
	public Vector AVG_PRICE_MMBTU= new Vector();
	public Vector TAX_AMT_USD = new Vector();	
	public Vector NET_AMT_USD = new Vector();	
	
	//Following Vectors Are Defined By Achal On 7th Sep., 2010 ...
	public Vector ACT_ARRV_DT = new Vector();
	public Vector ACT_ARRV_MONTH = new Vector();
	public Vector TRD_CD = new Vector();
	Vector SPLIT_SEQ=new Vector();
	Vector DOM_buy_flag=new Vector();
	public Vector ACTUAL_UNLOADED_ATY = new Vector();
	public Vector ACT_ARRV_DT_DOM = new Vector();
	Vector QTY_MSG_DOM = new Vector();
	Vector invoice_type_DOM = new Vector();
	public Vector ACT_ARRV_MONTH_DOM = new Vector();
	String tds_perc="0.1";
	Vector duration_dom=new Vector();
	public Vector TRD_CD_DOM = new Vector();
	Vector TRADER_NAME_DOM=new Vector();
	Vector Vtitle=new Vector();
	Vector TRADER_ABBR_DOM=new Vector();
	Vector INVOICE_TCS_AMT=new Vector();

	
	public Vector USD_VAL_JBB = new Vector(); //Should be in nf3 format(e.g $ 3,000,000)
	public Vector USD_VAL_INVOICE = new Vector();//Should be in nf3 format(e.g $ 3,000,000)
	public Vector USD_DR_CR = new Vector();//Should be in nf3 format(e.g $ 3,000,000)
	public Vector USD_BOOKS = new Vector();//Should be in nf3 format(e.g $ 3,000,000)
	
	public Vector TOTAL_CD_AMT = new Vector();
	public Vector TOTAL_PAID_REFUND = new Vector();
	public Vector DUTY_PER_JBB = new Vector();
	public Vector CD_PAID = new Vector();
	
	public Vector BANK_CD = new Vector();
	public Vector BANK_NAME = new Vector();
	public Vector CREDIT_RATING = new Vector();
	
	//Following Vectors Are Defined By Achal On 14th Sep., 2010 ...
	public Vector BANK_CONTR_NO = new Vector();						
	public Vector HEDGE_VALUE = new Vector();
	public Vector HEDGE_RATE_TOTAL = new Vector();
	public Vector HEDGE_CON_DT = new Vector();
	public Vector HEDGE_VAL_DT = new Vector();	
	public Vector DIFF_EXCHG = new Vector(); 
	public Vector HEDGE_PAYMENT = new Vector();
	
	public Vector REMITTANCE_DT = new Vector();
	public Vector BANK_CHARGES = new Vector();	
	public Vector TOTAL_PAYMENT = new Vector();
	public Vector PAYMENT_REF_NO = new Vector();
	
	public Vector SUN_APPROVAL = new Vector();

	//introduce by Milan for Purchage register summary on 20111230
	public Vector SUMMRY_CARGO_REF_CD = new Vector();
	public Vector SUMMRY_ACT_ARRV_MONTH = new Vector();
	Vector SUMMRY_ACT_ARRV_MONTH_DOM=new Vector();
	public Vector SUMMRY_ACTUAL_UNLOADED_QTY = new Vector();
	public Vector SUMMRY_ACTUAL_UNLOADED_QTY_DOM = new Vector();
	public Vector SUMMRY_TAX_AMT_INR_DOM = new Vector();
	Vector SUMMRY_TDS_AMT_INR_DOM=new Vector();
	public Vector SUMMRY_CARGO_REF_CD_DOM = new Vector();
	public Vector SUMMRY_USD_VAL_INVOICE_DOM = new Vector();
	Vector SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM= new Vector();
	public Vector SUMMRY_USD_VAL_INVOICE = new Vector();
	public Vector SUMMRY_FINAL_SELLER_INV_AMT_INR = new Vector();
	public Vector  SUMMRY_TOTAL_CD_AMT_DOM= new Vector();
	public Vector SUMMRY_TOTAL_CD_AMT = new Vector();
	public Vector SUMMRY_TOTAL_PAID_REFUND = new Vector();
	public Vector SUMMRY_TOTAL_PAID_REFUND_DOM = new Vector();
	public Vector SUMMRY_CD_PAID = new Vector();
	public Vector SUMMRY_CD_PAID_DOM = new Vector();
	public Vector SUMMRY_INR_PER_MMBTU = new Vector();
	public Vector SUMMRY_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_ADDL_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_COST_OF_PURCHASE_USD = new Vector();
	public Vector SUMMRY_USD_PER_MMBTU = new Vector();
	public Vector SUMMRY_INR_PER_MMBTU_DOM = new Vector();
	public Vector SUMMRY_CUSTOM_DUTY_USD_DOM = new Vector();
	public Vector SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM = new Vector();
	public Vector SUMMRY_COST_OF_PURCHASE_USD_DOM = new Vector();
	public Vector SUMMRY_USD_PER_MMBTU_DOM= new Vector();

	//Following  String Variable/s are defined by Achal pathak ... On 23rd june., 2010 ...
	public String trader_cd="";
	public String trader_abbr="";
	public String cargo_ref_cd="";	
	public String invoice_value="";
	public String actual_unloaded_qty="";
	
	public String inv_no="";
	public String inv_dt="";
	public String final_inv_no	="";
	public String final_inv_dt    ="";	
	
	public String cust_due_dt="";	
	public String conf_qty ="";
	public String conf_price ="";
	public String inc_dec_qty ="";
	public String inc_dec_amt ="";
	public String invoice_value_inr ="";
	public String due_dt="";
	
	public String int_val="";
	public String days="";
	public String tax_str_cd="";

	//Following  String Variable/s are defined by Achal pathak ... On 25th june., 2010 ... for Final_Custom_duty
	public String final_cif_val=""; 
	public String final_lading_val="";
	public String final_access_value="";
	public String final_total_cd_amt="";
	public String final_exchg_rate="";
	public String int_amt="";
	public String tot_paid_refund ="";
	public String final_tax_str_cd = "";
	public String final_inc_dec_amt="";
	

	//Following  String Variable/s are defined by Achal pathak ... On 25th june., 2010 ... for Provisonal_Custom_duty
	public String seller_inv_amt="";
	public String cif_val = ""; 
	public String lading_val = "";
	public String access_value 	= "";
	public String total_cd_amt 	="";
	public String exchg_rate="";
	public String pd_bond_value="";
	public String inv_amt="";
	public String survey_fee="";
	public String prov_cust_conf_qty="";
	public String prov_cust_conf_price="";

	//Following  String Variable/s are defined by Achal pathak ... On 30th june., 2010 ... for Sales_Details
	public String hlpl_inv_seq_no="";
	public String tax_struct_cd="";
	public String period_start_dt="";
	public String gross_amt_inr="";
	 
	public String customer_cd="";	
	public String hedge_seq="";
	public String hedge_no="";
	public String hedge_rollover_no="";

	//Following  String Variable/s are defined by Achal pathak ... On 1st July., 2010 ... for Sales_Details
	public String contact_person_cd ="";
	public String contract_type   	="";
	public String cust_inv_seq_no   ="";
	public String exchg_rate_cd	    ="";
	public String exchg_rate_dt    	="";
	public String exchg_rate_type	="";	
	public String fgsa_no	        ="";
	public String fgsa_rev_no     	="";
	public String plant_seq_no    	="";
	public String sn_no    	    	="";
	public String sn_rev_no       	="";
	public String tax_amt_inr	    ="";
	public String tax_flag    		="";
		
	public String sales_tax_amt="";
	public String vat_amt="";
	public String add_tax="";
	public String transporter_name = "";
	public String transporter_abbr = "";
	public String plant_name="";
	
	//Following String Variable/s are defined by Achal pathak ... On 14th July., 2010 ... for Hedge_register
	public String bank_cd		=  "";
	public String bank_name = "";
	public String credit_rate	=  "";
	public String bank_cont_no	=  "";
	public String hedge_value	=  "";
	public String hedge_payment = "";
	public String hedge_con_dt	=  "";
	public String hedge_val_dt	=  "";
	public String hedge_excg_dt	=  "";
	public String spot_rate		=  "";
	public String premium		=  "";
	public String margin		=  "";
	public String total			=  "";
	public String hedge_under	=  "";
	public String hedge_pos		=  "";
	public String diff_exchg	=  "";
	public String market2		=  "";
	public String exg_rt_on_prov_inv_dt	=  "";
	
	public String remit_dt		  =  "";					
	public String bank_charges	  =  "";	
	public String total_payment	  =  "";
	public String payment_ref_no  =  "";
	public String remark 		  =  "";
	public String remit_flag      =  "N";
	Vector SUMMRY_TAX_AMT_USD_DOM=new Vector();
	//Following 4 integer Variables Has Been Defined By Samik Shah On 22nd October, 2010 ...
	int start_index_10=0;
	public int end_index_10 = 0;
	public int start_index_1 = 0;
	public int start_index_2 = 0;
	public int end_index_1 = 0;
	public int end_index_2 = 0;
	int start_index_4=0;
	int end_index_4=0;
	
	//Following 56 double Variables Has Been Defined By Samik Shah On 22nd October, 2010 ...
	public double sales_qty_total = 0;
	double dlng_sales_qty_total=0;
	double dlng_sales_gross_amt_usd_total=0;
	double dlng_sales_qty_amt_inr_total=0;
	double dlng_sales_gross_amt_inr_total=0;
	double sum_tcq_dlng=0;
	public double sales_qty_amt_inr_total = 0;
	public double sales_transportation_cost_inr_total = 0;
	public double sales_gross_amt_inr_total = 0;
	public double sales_vat_inr_total = 0;
	double dlng_sales_vat_inr_total=0;
	double tcs_inr_total = 0;
	double dlng_tcs_inr_total=0;
	public double sales_addl_tax_inr_total = 0;
	double dlng_sales_addl_tax_inr_total=0;
	public double sales_sales_tax_inr_total = 0;
	double dlng_sales_tax_inr_total=0;
	double dlng_sales_sbc_tax_inr_total=0;
	double dlng_sales_service_tax_inr_total=0;
	public double sales_service_tax_inr_total = 0;
	public double IGX_sales_service_tax_inr_total = 0;
	public double sales_sbc_tax_inr_total = 0;			//BK20151125
	public double sales_kkc_tax_inr_total = 0;			//BK20160620
	public double sales_igst_tax_inr_total = 0;
	public double sales_sgst_tax_inr_total = 0;
	public double sales_cgst_tax_inr_total = 0;
	public double sales_zgst_tax_inr_total = 0;
	public double sales_edu_cess_inr_total = 0;
	public double sales_high_edu_cess_inr_total = 0;
	public double sales_other_tax1_inr_total = 0;
	public double sales_other_tax2_inr_total = 0;
	public double sales_total_tax_inr_total = 0;
	public double sales_net_amt_inr_total = 0;
	double dlng_sales_net_amt_inr_total=0;
	double dlng_sales_kkc_tax_inr_total=0;
	double dlng_sales_edu_cess_inr_total=0;
	double dlng_sales_cgst_tax_inr_total=0;
	double dlng_sales_high_edu_cess_inr_total=0;
	double dlng_sales_igst_tax_inr_total=0;
	public double sales_qty_amt_usd_total = 0;
	double dlng_sales_sgst_tax_inr_total=0;
	double dlng_sales_total_tax_inr_total=0;
	public double sales_transportation_cost_usd_total = 0;
	public double sales_gross_amt_usd_total = 0;
	public double sales_group_foreign_gross_amt_usd_total = 0;
	double dlng_sales_group_foreign_gross_amt_usd_total=0;
	public double sales_vat_usd_total = 0;
	double dlng_sales_vat_usd_total=0;
	public double sales_addl_tax_usd_total = 0;
	public double sales_sales_tax_usd_total = 0;
	double dlng_sales_sales_tax_usd_total=0;
	public double sales_service_tax_usd_total = 0;
	public double sales_sbc_tax_usd_total = 0;		//BK20151125
	public double sales_kkc_tax_usd_total = 0;		//SB20160620
	public double sales_igst_tax_usd_total = 0;
	public double sales_cgst_tax_usd_total = 0;
	public double sales_sgst_tax_usd_total = 0;
	public double sales_zgst_tax_usd_total = 0;
	public double sales_edu_cess_usd_total = 0;
	double dlng_sales_zgst_tax_usd_total=0;
	double dlng_sales_igst_tax_usd_total=0;
	double dlng_sales_cgst_tax_usd_total=0;
	public double sales_high_edu_cess_usd_total = 0;
	public double sales_other_tax1_usd_total = 0;
	public double sales_other_tax2_usd_total = 0;
	public double sales_total_tax_usd_total = 0;
	public double sales_net_amt_usd_total = 0;
	double dlng_sales_total_tax_usd_total=0;
	double dlng_sales_service_tax_usd_total=0;
	public double regas_qty_total = 0;
	double dlng_sales_high_edu_cess_usd_total=0;
	double dlng_sales_sbc_tax_usd_total=0;
	double dlng_sales_kkc_tax_usd_total=0;
	double dlng_sales_edu_cess_usd_total=0;
	double dlng_sales_sgst_tax_usd_total=0;
	double dlng_sales_net_amt_usd_total=0;
	double dlng_sales_addl_tax_usd_total=0;
	public double regas_qty_amt_inr_total = 0;
	public double regas_transportation_cost_inr_total = 0;
	public double regas_gross_amt_inr_total = 0;
	public double regas_vat_inr_total = 0;
	public double regas_addl_tax_inr_total = 0;
	public double regas_sales_tax_inr_total = 0;
	public double regas_service_tax_inr_total = 0;
	public double regas_sbc_tax_inr_total = 0;			//BK20151125
	public double regas_kkc_tax_inr_total = 0;			//BK20151125
	public double regas_igst_tax_inr_total = 0;
	public double regas_sgst_tax_inr_total = 0;
	public double regas_cgst_tax_inr_total = 0;
	public double regas_zgst_tax_inr_total = 0;
	public double regas_edu_cess_inr_total = 0;
	public double regas_high_edu_cess_inr_total = 0;
	public double regas_other_tax1_inr_total = 0;
	public double regas_other_tax2_inr_total = 0;
	public double regas_total_tax_inr_total = 0;
	public double regas_net_amt_inr_total = 0;
	
	public double regas_qty_amt_usd_total = 0;
	public double regas_transportation_cost_usd_total = 0;
	public double regas_gross_amt_usd_total = 0;
	public double regas_group_foreign_gross_amt_usd_total = 0;
	public double regas_vat_usd_total = 0;
	public double regas_addl_tax_usd_total = 0;
	public double regas_sales_tax_usd_total = 0;
	public double regas_service_tax_usd_total = 0;
	public double regas_sbc_tax_usd_total = 0;			//BK20151125
	public double regas_kkc_tax_usd_total = 0;			//SB20160620
	public double regas_igst_tax_usd_total = 0;
	public double regas_sgst_tax_usd_total = 0;
	public double regas_cgst_tax_usd_total = 0;
	public double regas_zgst_tax_usd_total = 0;
	public double regas_edu_cess_usd_total = 0;
	public double regas_high_edu_cess_usd_total = 0;
	public double regas_other_tax1_usd_total = 0;
	public double regas_other_tax2_usd_total = 0;
	public double regas_total_tax_usd_total = 0;
	public double regas_net_amt_usd_total = 0;
	
	//Following (6) Vectors Are Defined By Samik Shah On 25th October, 2010 ...
	public Vector ACTUAL_UNLOADED_QTY = new Vector();
	public Vector PROVISIONAL_QTY = new Vector();
	public Vector CREDIT_NOTE_QTY = new Vector();
	public Vector CERTIFIED_QTY = new Vector();
	public Vector FINAL_SELLER_INV_AMT_INR = new Vector();
	public Vector INR_PER_MMBTU = new Vector();
	
	//Following (2) Vectors Are Defined By Samik Shah On 26th October, 2010 ...
	public Vector GROSS_AMT_INR_2 = new Vector();
	public Vector GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2 = new Vector();
	
	//Following (4) Vectors Are Defined By Samik Shah On 26th October, 2010 ...
	public Vector CUSTOM_DUTY_USD = new Vector();
	public Vector ADDL_CUSTOM_DUTY_USD = new Vector();
	public Vector COST_OF_PURCHASE_USD = new Vector();
	public Vector USD_PER_MMBTU = new Vector();
	
	//Following (13) double Variables Has Been Defined By Samik Shah On 26th October, 2010 ...
	public double purchase_total_qty = 0;
	double purchase_total_qty_dom=0;
	
	double purchase_total_qty_dom_DRCR=0;
	public double purchase_total_invoice_value = 0;
	double purchase_total_invoice_value_dom=0;
	
	double purchase_total_invoice_value_dom_DRCR=0;
	public double purchase_prov_total_qty = 0;
	double purchase_prov_total_qty_dom=0;
	public double purchase_credit_note_total_qty = 0;
	double purchase_credit_note_total_qty_dom=0;
	public double purchase_certified_total_qty = 0;
	double purchase_certified_total_qty_dom=0;
	public double purchase_total_inv_value_inr = 0;
	public double purchase_total_inv_value_inr_dom = 0;
	
	double purchase_total_inv_value_inr_dom_DRCR=0;
	public double purchase_total_cd_inr = 0;
	public double purchase_total_addl_cd_inr = 0;
	double purchase_total_addl_cd_inr_dom=0;
	public double purchase_total_cost_inr = 0;
	double purchase_total_cd_inr_dom=0;
	double purchase_total_tax_inr_dom=0;
	
	double purchase_total_tax_usd_dom=0;
	public double purchase_total_cost_inr_dom = 0;
	double purchase_total_cost_inr_dom_DRCR=0;
	public double purchase_total_inv_value_usd = 0;
	public double purchase_total_cd_usd = 0;
	double purchase_total_cd_usd_dom=0;
	public double purchase_total_addl_cd_usd = 0;
	double purchase_total_addl_cd_usd_dom=0;
	public double purchase_total_cost_usd = 0;
	public double purchase_total_cost_usd_dom = 0;
	public double purchase_total_inv_value_usd_dom = 0;
	
	//Following (2) Vectors Has Been Defined By Samik Shah On 28th October, 2010 ...
	public Vector CUSTOM_PROVISIONS = new Vector();
	public Vector CUSTOM_JBB = new Vector();
	
	//Following (2) double Variables Has Been Defined By Samik Shah On 28th October, 2010 ...
	public double purchase_total_custom_provisions = 0;
	double purchase_total_custom_provisions_dom=0;
	public double purchase_total_custom_jbb = 0;
	double purchase_total_custom_jbb_dom=0;
	
	//Following (7) Vectors Has Been Defined By Samik Shah On 30th October, 2010 ...
	public Vector TRADER_CODE = new Vector();
	public Vector TRADER_ABR = new Vector();
	public Vector INV_NO = new Vector();
	public Vector INV_DT = new Vector();
	public Vector INV_DUE_DT = new Vector();
	public Vector INV_AMT = new Vector();
	public Vector CARGO_REF_NO_ARR = new Vector();
	//	Following Variables Has Been Defined By Achal Pathak On 21st Janaury, 2011 ...
	public Vector CUST_CD = new Vector();
	public Vector CUST_NM = new Vector();
	public Vector DR_CR_FLAG = new Vector();
	public Vector DR_CR_NO   = new Vector();
	public Vector DR_CR_NOTE = new Vector();
	public Vector DR_CR_GROSS_AMT_INR = new Vector();
	public Vector CRITERIA = new Vector();
	public Vector DR_CR_FIN_YEAR = new Vector();
	public Vector DR_CR_DT = new Vector();
	public Vector CRITERIA_TYPE = new Vector();
	public Vector PAY_AMT = new Vector();
	public Vector PAY_DT = new Vector();
	public String dr_cr_flag = "";

	//Following (2) String Variables Have Been Defined By Priyanka Sharma On 25th January, 2011 ...
	public String invoice_from_date = "";
	public String invoice_to_date = "";
	
	Vector CUSTOMER_CD2 = new Vector();
	Vector CUSTOMER_NAME2 = new Vector();
	Vector HLPL_INV_SEQ_NO_FINANCIAL_YEAR = new Vector();
	Vector CUSTOMER_ABBR2 = new Vector();
	Vector PLANT_SEQ_NO = new Vector();
	Vector EXCHG_RATE_CD = new Vector();
	Vector PLANT_NAME = new Vector();
	Vector CONTACT_PERSON_CD = new Vector();
	Vector CUST_INV_SEQ_NO = new Vector();
	Vector EXCHG_RATE_TYPE = new Vector();
	
	
	//Following (2) String Variables Have Been Defined By Priyanka Sharma On 31st January, 2011 ...
	public String eff_date = "";
	public String op_bal_trading = "";
	public String op_bal_regas = "";
	public String actual_tank_reading = "";
	public String remark1 = "";
	public String sug_percent = "";
	public String remark2 = "";
	
	//Following (3) String Variables Have Been Defined By Samik Shah On 13th July, 2011 ...
	public String closing_bal_trading = "";
	public String closing_bal_regas = "";
	public String closing_actual_tank_reading = "";
	
	Vector OP_BAL_TRADING = new Vector();
	Vector OP_BAL_REGAS = new Vector();
	Vector TOTAL = new Vector();
	Vector SUG_PERCENT = new Vector();
	Vector TRADING_QTY = new Vector();
	Vector REGAS_QTY = new Vector();
	Vector SALES_QTY = new Vector();
	Vector SALES_REGAS_QTY = new Vector();
	Vector REGAS_SUG_QTY = new Vector();
	
	//Defined by Priyanka Sharma on 2 feb., 2011.......
	Vector FLARING = new Vector();
	Vector AUXILIARY_CONSUMPTION = new Vector();
	Vector SCV_FUEL_CONSUMPTION = new Vector();
	Vector SUG = new Vector();
	Vector OTHER_CONSUMPTION = new Vector();
	Vector MASS_BALANCING = new Vector();
	
	Vector CLOSING_MONTH = new Vector();
	Vector CLOSING_BAL_TRADING = new Vector();
	Vector CLOSING_BAL_REGAS = new Vector();
	Vector CLOSING_TOTAL = new Vector();
	
	//Defined by Priyanka Sharma on 3 feb., 2011.......	
	Vector CONSUMPTION_FLARE = new Vector();
	Vector CONSUMPTION_POWER_FUEL = new Vector();
	Vector CONSUMPTION_SCV_FUEL = new Vector();
	Vector CONSUMPTION_UNACCOUNTED_LOSS = new Vector();
	//Introduce By Milan MD20110920
	Vector CONSUMPTION_REGAS_SUG = new Vector();
	public String Sum_Regas_sug_per = "";
	
	public String flaring = "";
	public String auxilary_consumption = "";
	public String scv_fuel_consumption = "";	
	public String sug = "";
	public String other_consumption = "";
	public String mass_balancing = "";
	//public String total_consumption = "";
	
	public String op_bal_trading_saved = "";
	public String op_bal_regas_saved = "";
	
	//Defined by Priyanka Sharma on 4 feb., 2011.......
	Vector SN_SIGNING_DT = new Vector();
	Vector RATE = new Vector();
	Vector PREV_YR_SUPPLY = new Vector();
	Vector CURR_YR_SUPPLY = new Vector();
	Vector REMAINING_SUPPLY = new Vector();
	Vector EXCESS_SUPPLY = new Vector();
	Vector DLNG_REMAINING_SUPPLY = new Vector();
	Vector DLNG_EXCESS_SUPPLY = new Vector();
	Vector DLNG_TCQ_tmp=new Vector();
	Vector REMARK = new Vector();
	
	Vector CHECK = new Vector();
	Vector CHECK_PURCHASES = new Vector();
	Vector CHECK_SALES = new Vector();
		
	//	Defined by Priyanka Sharma on 5 feb., 2011.......
	public String prev_yr = "";
	public String Opening_Stock = "";
	public String reciept = "";
	public String Closing_stock = "";
	public String Depletion = "";
	public String Export_gas = "";
	public String Total_Fuel_Gas = "";
	public String Flaring = "";
	public String Total_Consumption = "";
	public String Unaccounted_Consumption = "";
	public String Percent_unaccounted_gas = "";
	public String Scv_fuel_consumption = "";
	
    //Defined by Priyanka Sharma on 7 feb., 2011.......
	Vector SIGNING_DT = new Vector();
	Vector QTY_MMBTU = new Vector();
	Vector QTY = new Vector();
	Vector SALE_USD = new Vector();	
	Vector V_Export_gas = new Vector();
	Vector TOT_QTY = new Vector();
	Vector SN_RATE = new Vector();
	
    //Defined by Priyanka Sharma on 17 feb., 2011.......
	public String Total_send_out = "";
	Vector SALES_EX_VAT = new Vector();
	public String total_Gross_Amt = "";
	public String sales_Qty_Total = "";
	public String next_date = "";
	
	 //Defined by Priyanka Sharma on 18 feb., 2011.......
	Vector MAN_CONF_CD = new Vector();
	Vector CONFIRM_VOL = new Vector();
	Vector CONFIRM_PRICE = new Vector();
	Vector AMOUNT = new Vector();
	Vector PRICE = new Vector();
	Vector SHIP_NM = new Vector();
	
	public String Total_confirm_volume = "";
	public String Total_confirm_price = "";
	public String Total_amount = "";
	
	
	Vector CARGO_REF_CD_PURCHASE = new Vector();
	Vector MAN_CONF_CD_PURCHASE = new Vector();
	Vector CONFIRM_VOL_PURCHASE = new Vector();
	Vector CONFIRM_PRICE_PURCHASE = new Vector();
	Vector AMOUNT_PURCHASE = new Vector();
	Vector PRICE_PURCHASE = new Vector();
	Vector SHIP_NM_PURCHASE = new Vector();
		
	//Defined by Priyanka Sharma on 19 feb., 2011.......
	public String Total_confirm_volume_purchase = "";
	public String Total_confirm_price_purchase = "";
	public String Total_amount_purchase = "";
	
	public String Weighted_average_volume = "";
	public String Weighted_average_price = "";
	public String Weighted_average_amount = "";	
	
	Vector TOT_SALE_USD = new Vector();
	public String DLNG_Final_qty = "";	
	public String Final_qty = "";	
	public String Final_SN_rate = "";	
	public String Final_sale_USD = "";	
	public String DLNG_Final_sale_USD = "";	
	public String Expected_amount = "";
	public String Expected_rate = "";
	public String Closing_vol = "";
	public String Closing_rate = "";
	public String Closing_amount = "";
	
	public String Expected_margin_amount = "";
	public String Expected_margin_rate = "";
	
	//public Vector SUN_APPROVAL = new Vector();

	Vector customer_Invoice_Tax_Code = new Vector();
	Vector customer_Invoice_Tax_Rate = new Vector();
	Vector customer_Invoice_Tax_Amt = new Vector();
	
	Vector SELLER_INV_NO = new Vector();
	Vector SELLER_INV_DT = new Vector();
	Vector SELLER_INV_AMT = new Vector();
	Vector SELLER_DUE_DT = new Vector();
	Vector CUSTOM_DUTY_DT = new Vector();
	Vector SURVEY_FEE = new Vector();
	Vector LADING_CHARGES = new Vector();
	Vector TAX_STR_CD = new Vector();
	Vector PD_BOND_AMT = new Vector();
	Vector CHALLAN_NO = new Vector();
	Vector CUSTOM_CLEAR_DT = new Vector();
	Vector DIFF_CD = new Vector();
	Vector CIF_VALUE = new Vector();
	Vector ASSESSABLE_VALUE = new Vector();
	
    //Defined by Priyanka Sharma on 23 feb., 2011.......
	Vector CUSTOM_DUTY = new Vector();
	Vector VALUE_USD = new Vector();
	Vector VALUE_INR = new Vector();
	Vector INR_MMBTU = new Vector();
	
	Vector CARGO_REF_CD1 = new Vector();
	Vector INVOICE_NO1 = new Vector();
	Vector INVOICE_DT1 = new Vector();					
	Vector USD_VAL_INVOICE1 = new Vector();
	Vector DUE_DT1 = new Vector();
	Vector CONFIRM_VOL1 = new Vector();
	Vector CONFIRM_PRICE1 = new Vector();
	Vector GROUP_FOREIGN_EXCHG_RATE1 = new Vector();
	Vector TOTAL_PAID_REFUND1 = new Vector();
	Vector CUSTOM_DUTY1 = new Vector();
	Vector VALUE_USD1 = new Vector();
	Vector VALUE_INR1 = new Vector();
	Vector INR_MMBTU1 = new Vector();
	Vector SHIP_NM1 = new Vector();
	
    //Defined by Priyanka Sharma on 25 feb., 2011.......
	public String Total_vol = "";
	public String Total_value_usd = "";
	public String Total_usd_per_mmbtu = "";
	public String Total_value_inr = "";
	public String Total_inr_mmbtu = "";
	public String Total_inr_per_usd = "";
	public String Total_Closing_vol = "";
	public double closing_bal = 0;
	
	Vector CLOSING_CARGO_REF_CD = new Vector();
	Vector CLOSING_CONFIRM_VOL = new Vector();
	Vector CLOSING_CONFIRM_PRICE = new Vector();
	Vector CLOSING_SHIP_NM = new Vector();	
	Vector CLOSING_CUSTOM_DUTY = new Vector();
	Vector CLOSING_VALUE_USD = new Vector();
	Vector CLOSING_VALUE_INR = new Vector();	
	Vector CLOSING_GROUP_FOREIGN_EXCHG_RATE = new Vector();
	Vector CLOSING_INR_MMBTU = new Vector();
	
	public String Total_Closing_value_usd = "";
	public String Total_Closing_usd_mmbtu = "";
	public String Total_Closing_value_inr = "";
	public String Total_Closing_inr_per_usd = "";
	public String Total_Closing_inr_mmbtu = "";
	
	
	//Defined by Priyanka Sharma on 26 feb., 2011.......
	public String Variance_vol = "";
	public String Variance_value_usd = "";
	public String Variance_value_inr = "";
	
	public String Vessel_Nm = "";
	
	Vector NRV_CUSTOMER_CD = new Vector();
	Vector NRV_VALUE_USD = new Vector();
	Vector NRV_FOREIGN_EXCHG_RATE = new Vector();
	Vector NRV_VALUE_INR = new Vector();
	Vector NRV_INR_MMBTU = new Vector();
	
	//	Defined by Priyanka Sharma on 01 Mar., 2011.......
	public String Test_qty = "";
	public String Test_rate = "";
	public String Test_exch_rate = "";
	public String Test_sale_usd = "";
	public String Test_value_inr = "";
	public String Test_inr_mmbtu = "";
	public String Final_nrv_value_inr = "";
	
	public String Sum_qty = "";
	public String Nrv_rate = "";
	public String Sum_nrv_value_usd = "";
	public String Sum_nrv_value_inr = "";
	public String Nrv_foreign_exchange_rate = "";
	public String Sum_nrv_inr_mmbtu = "";
	
	public String Total_qty = "";
	public String Total_rate = "";
	public String Total_sum_value_usd = "";
	public String Total_sum_value_inr = "";
	public String Total_foreign_exchange_rate = "";
	public String Total_nrv_inr_mmbtu = "";  
	public String Total_sum_inr_mmbtu = "";  
	public String Temp_value_usd = ""; 
	public String Temp_value_inr = ""; 
	public String Sales_mmbtu_total = ""; 
	
    //Defined by Priyanka Sharma on 03 Mar., 2011.......
	public String Consumption_qty = ""; 
	public String Sales_Usage_qty = "";
	public String Margin_value_usd = "";
	public String Margin_value_inr = "";
	public String Margin_rate = "";
	public String Margin_inr_mmbtu = "";
	public String Sales_Usage_value_usd = "";
	public String Sales_Usage_value_inr = "";
	public String Sales_Usage_usd_mmbtu = "";
	public String Sales_Usage_inr_mmbtu = "";
	
	public String Consumption_value_usd = "";
	public String Consumption_value_inr = "";
	
	public String Cost_sales_usd = "";
	public String Cost_sales_inr = "";
	
	public String Margin_sales_value_usd = "";
	public String Margin_sales_rate = "";
	public String Margin_sales_inr = "";
	public String Margin_sales_inr_mmbtu = "";
	public String Gross_margin_value_usd = "";
	public String Gross_margin_rate = "";
	public String Gross_margin_value_inr = "";
	public String Gross_margin_inr_mmbtu = "";
	
	public String Auxiliary_Consumption = "";
	public String Sug = "";
	public String Other_Consumption = "";
	public String Mass_Balancing = "";
	public String Captive_consumption = "";
	
	public String Flaring_usd_mmbtu = "";
	public String Auxiliary_usd_mmbtu = "";
	public String Scv_fuel_usd_mmbtu = "";
	public String Mass_balancing_usd_mmbtu = "";
	public String Sug_usd_mmbtu = "";
	public String Other_usd_mmbtu = "";
	
	public String Flaring_inr_mmbtu = "";
	public String Auxiliary_inr_mmbtu = "";
	public String Scv_fuel_inr_mmbtu = "";
	public String Mass_balancing_inr_mmbtu = "";
	public String Sug_inr_mmbtu = "";
	public String Other_inr_mmbtu = "";
	
	public String Captive_usd_mmbtu = "";
	public String Captive_inr_mmbtu = "";
	public String Captive_value_usd = "";
	public String Captive_value_inr = "";
	public String Check_value_usd = "";
	public String Check_value_inr = "";
	
	public String Variance_value_usd1 = "";
	public String Variance_value_inr1 = "";
	
	public String Final_value_usd = "";
	public String Final_value_inr = "";	
	
	Vector CUSTOMER_CODE = new Vector();
	Vector CUSTOMER_NM = new Vector();
	Vector INVOICE_DT2 = new Vector();
	Vector SN_NO2 = new Vector();
	Vector SIGNING_DT2	 = new Vector();						
	Vector FGSA_NO2 = new Vector();
	Vector SN_REV_NO2 = new Vector();
	Vector FGSA_REV_NO2 = new Vector();
	
	//introduce by milan dalsaniya MD20111007
	Vector INVOICE_DT2_sq = new Vector();
	Vector INVOICE_DT1_sq = new Vector();
	Vector CLOSING_INVOICE_DT_sq = new Vector();
		
    //	Variables Declared by Achal on 01/03/2011
	public String approve_dt = "";
	Vector INV_CARGO_NO = new Vector();
	Vector JOURNAL_TYPE = new Vector();
	Vector T_CODE = new Vector();
	Vector APPROVAL_DT = new Vector();
	Vector LEDGER = new Vector();
	Vector ACCOUNT_CODE = new Vector();
	Vector ACCOUNT_PERIOD = new Vector();
	Vector BASE_AMT = new Vector();
	Vector DR_CR_MARKER = new Vector();
	Vector TRANSACTION_AMT = new Vector();
	Vector REPORT_AMT = new Vector();
	Vector MEMO_AMT = new Vector();
	Vector CURRENCY_CODE = new Vector();
	Vector CURRENCY_RATE = new Vector();
	Vector TRANSACTION_DT = new Vector();
	Vector JOURNAL_SOURCE = new Vector();
	Vector TRANSACTION_REF = new Vector();
	Vector DESCRIPTION = new Vector();
	Vector Vinvno=new Vector();		//BK20151130
					
	Vector COST_CENTER_CD = new Vector();
	Vector EMPLOYEE_CD = new Vector();
	Vector COA_CD = new Vector();
	Vector TDS_TAX_CD = new Vector();
	Vector BUSINESS_UNIT_CD = new Vector();
	Vector SUN_APPROVAL_DT = new Vector();

	//Following (9) Vector Variables Has Been Defined By Samik Shah On 4th March, 2011 ...
	public Vector HEDGE_ROLLOVER_NO = new Vector();
	public Vector HEDGE_SEQ_NUMBER = new Vector();
	public Vector HEDGE_FINANCIAL_YEAR = new Vector();
	public Vector HEDGE_ROLLOVER_NUMBER = new Vector();
	public Vector HEDGE_CONTRACT_DATE = new Vector();
	public Vector HEDGE_VALUE_DATE = new Vector();
	public Vector HEDGE_VALUE_AMOUNT = new Vector();
	public Vector HEDGE_CONTRACT_NUMBER = new Vector();
	public Vector HEDGE_CONTRACT_NO = new Vector();
	
	//Following (22) String Variables Has Been Defined By Priyanka Sharma On 5th March, 2011 ...
	public String Sum_opening_trading = "";
	public String Sum_opening_regas = "";
	public String Sum_opening_total = "";
	public String Sum_receipt_trading = "";
	public String Sum_receipt_regas = "";
	public String Sum_sales_qty = "";
	public String Sum_sales_regas = "";
	public String Sum_flaring = "";
	public String Sum_auxiliary = "";
	public String Sum_scv = "";
	public String Sum_sug = "";
	public String Sum_other = "";
	public String Sum_mass = "";
	public String Sum_consumption = "";
	public String Closing_trading = "";
	public String Closing_regas = "";
	public String Closing_total = "";
	public String Sum_check = "";
	public String Sum_flare_percent = "";
	public String Sum_scv_percent = "";
	public String Sum_power_percent = "";
	public String Sum_loss_percent = "";
	public String Sum_re_gas_sug_qty = "";
	
	
    //Following Vector Variables Has Been Defined By Priyanka Sharma On 14th March, 2011 ...
	public Vector HLPL_INV_SEQ_NO3 = new Vector();
	public Vector INVOICE_DT3 = new Vector();
	public Vector PERIOD_START_DT3 = new Vector();
	public Vector PERIOD_END_DT3 = new Vector();
	public Vector SALE_PRICE3 = new Vector();
	public Vector DUE_DT3 = new Vector();
	public Vector TOTAL_QTY3 = new Vector();
	public Vector EXCHG_RATE3 = new Vector();
	public Vector GROSS_AMT_USD3 = new Vector();
	public Vector COGS = new Vector();
	public Vector COGS_MMBTU = new Vector();
	public String Total_cogs = "";
	public String Cost_sales_usd1 = "";
	public String Total_margin = "";
	public Vector MARGIN = new Vector();
	public Vector MARGIN_PER_MMBTU = new Vector();
	public String Total_margin_per_mmbtu = "";
	
	//Following (4) String Variables Has Been Defined By Samik Shah On 5th March, 2011 ...
	//For Hedge Details ...
	public String final_inv_amt = "";
	public String final_inv_amt_gain_loss = "";
	public String hedge_gain_loss = "";
	public String hedge_m2m_die = "";
	
	//Following (2) Vectors Has Been Defined By Samik Shah On 7th March, 2011 ...
	public Vector FINAL_INV_AMT = new Vector();
	public Vector FINAL_INVOICE_AMT = new Vector();
	
	//Following (3) String Variables Has Been Defined By Samik Shah On 7th March, 2011 ...
	public String cancellation_dt = "";
	public String cancellation_flag = "N";
	public String cancel_remark = "";
	
	//Following Vector Has Been Defined By Samik Shah On 8th March, 2011 ...
	public Vector CANCELLATION_DT = new Vector();
	
	//Following (3) String Variables Has Been Defined By Priyanka On 26th March, 2011 ...
	public String Final_sum_tcq = "";
	String Final_sum_tcq_dlng="";
	public String Final_sum_regas_tcq = "";
	public String Sum_rem_supply = "";
	String Sum_rem_supply_dlng="";
	public String Sum_regas_rem_supply = "";
	
	public Vector JOURNAL_NO = new Vector();
	public Vector ALLOCATION_REF = new Vector();
	public Vector SEQ_NO = new Vector();
	public Vector PAY_MODE = new Vector();
	public Vector XML_GEN_FLAG = new Vector();
	Vector IGX_XML_GEN_FLAG=new Vector();
	Vector IGX_INV_TAX_AMT=new Vector();
	Vector IGX_SUMMRY_CONT_TYP=new Vector();
	Vector IGX_HLPL_INV_SEQ_NO=new Vector();
	Vector IGX_sac_code=new Vector();
	Vector IGX_INVOICE_DT=new Vector();
	Vector IGX_HLPL_INV_SEQ=new Vector();
	Vector IGX_TAX_CODE=new Vector();
	Vector IGX_FACTOR=new Vector();
	Vector IGX_TAX_AMOUNT=new Vector();
	Vector IGX_VAT_AMT=new Vector();
	Vector IGX_SALE_VAT_TAX_PERC=new Vector();
	Vector IGX_SALE_CST_TAX_PERC=new Vector();
	double IGX_sales_vat_inr_total=0;
	double IGX_tcs_inr_total=0;
	double IGX_sales_total_tax_inr_total=0;
	double IGX_sales_total_tax_usd_total=0;
	double IGX_sales_net_amt_usd_total=0;
	Vector IGX_NET_AMT_USD=new Vector();
	Vector IGX_NET_AMT_USD_NUMERIC=new Vector();
	Vector IGX_SALES_TAX_AMT_USD=new Vector();
	Vector IGX_VAT_AMT_USD=new Vector();
	Vector IGX_SALES_TAX_AMT_USD_NUMERIC=new Vector();
	Vector IGX_VAT_AMT_USD_NUMERIC=new Vector();
	Vector IGX_TAX_AMT_USD=new Vector();
	Vector IGX_TAX_AMT_INR=new Vector();
	Vector IGX_VAT_AMT_NUMERIC=new Vector();
	Vector IGX_SALES_TAX_AMT=new Vector();
	Vector IGX_GROUP_FOREIGN_EXCHG_RATE=new Vector();
	double IGX_sales_sales_tax_usd_total=0;
	double IGX_sales_vat_usd_total=0;
	Vector IGX_SALES_TAX_AMT_NUMERIC=new Vector();
	double IGX_sales_sales_tax_inr_total=0;
	Vector IGX_TAX_ON_TITLE=new Vector();
	Vector IGX_PERIOD_START_DT=new Vector();
	Vector IGX_PERIOD_END_DT=new Vector();
	Vector IGX_Currency=new Vector();
	Vector IGX_cost_center_code_=new Vector();
	Vector IGX_SALE_PRICE=new Vector();
	Vector IGX_SALE_PRICE_NUMERIC=new Vector();
	Vector IGX_DUE_DT=new Vector();
	Vector IGX_TOTAL_QTY=new Vector();
	Vector IGX_TOTAL_QTY_NUMERIC=new Vector();
	double IGX_sales_qty_total=0;
	Vector IGX_EXCHG_RATE=new Vector();
	Vector IGX_GROSS_AMT_USD=new Vector();
	Vector IGX_GROSS_AMT_USD_NUMERIC=new Vector();
	double IGX_sales_qty_amt_usd_total=0;
	double IGX_sales_gross_amt_usd_total=0;
	Vector IGX_GROSS_AMT_INR=new Vector();
	Vector IGX_GROSS_AMT_INR_2=new Vector();
	Vector IGX_GROSS_AMT_INR_NUMERIC=new Vector();
	double IGX_sales_qty_amt_inr_total=0;
	double IGX_sales_gross_amt_inr_total=0;
	Vector IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG=new Vector();
	Vector IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2=new Vector();
	Vector IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC=new Vector();
	Vector IGX_tmp_group_gross_usd_amt=new Vector();
	double IGX_sales_group_foreign_gross_amt_usd_total=0;
	Vector IGX_NET_AMT_INR=new Vector();
	Vector IGX_NET_AMT_INR_NUMERIC=new Vector();
	double IGX_sales_net_amt_inr_total=0;
	Vector IGX_FINANCIAL_YEAR=new Vector();
	Vector IGX_CUSTOMER_CD=new Vector();
	Vector IGX_CUSTOMER_ABBR=new Vector();
	Vector IGX_CUSTOMER_NAME=new Vector();
	Vector IGX_TAX_STRUCT_CD=new Vector();
	Vector IGX_SEGMENT_NAME=new Vector();
	Vector IGX_SN_NO=new Vector();
	Vector IGX_REM_SUPPLY=new Vector();
	Vector IGX_REM_SUPPLY_NUMERIC=new Vector();
	Vector IGX_CUM_SUPPLY=new Vector();
	Vector IGX_START_DT=new Vector();
	Vector IGX_END_DT=new Vector();
	Vector IGX_TCQ=new Vector();
	Vector IGX_TCQ_NUMERIC=new Vector();
	Vector IGX_RATE=new Vector();
	Vector IGX_RATE_NUMERIC=new Vector();
	
	Vector IGX_SN_REV_NO=new Vector();
	Vector IGX_FGSA_NO=new Vector();
	Vector IGX_FGSA_REV_NO=new Vector();
	Vector IGX_MONTH=new Vector();
	Vector IGX_CONTRACT_TYPE=new Vector();
	Vector IGX_PLANT_SEQ_NO=new Vector();
	Vector IGX_SUN_APPROVAL=new Vector();
	Vector IGX_Account_Mapping_id=new Vector();
	
	Vector IGX_NEW_INV_SEQ_NO=new Vector();
	Vector IGX_SUPPLIER_CD=new Vector();
	Vector IGX_AdvADJ_FLAG=new Vector();
	Vector IGX_Vtcs_amt=new Vector();
	Vector IGX_VSTATE_CD=new Vector();
	Vector IGX_VSTATE_NM=new Vector();
	Vector IGX_trans_gross_inr=new Vector();
	Vector IGX_VFinal_sum_tcq=new Vector();
	Vector IGX_VSum_rem_supply=new Vector();
	Vector IGX_Vsales_qty_total=new Vector();
	Vector IGX_Vsales_gross_amt_usd_total=new Vector();
	Vector IGX_Vsales_qty_amt_inr_total=new Vector();
	Vector IGX_Vtot_trans_grossinr=new Vector();
	Vector IGX_Vsales_gross_amt_inr_total=new Vector();
	Vector IGX_Vsales_vat_inr_total=new Vector();
	Vector IGX_Vsales_sales_tax_inr_total=new Vector();
	Vector IGX_Vsales_total_tax_inr_total=new Vector();
	Vector IGX_Vsales_net_amt_inr_total=new Vector();
	Vector IGX_Vsales_group_foreign_gross_amt_usd_total=new Vector();
	Vector IGX_Vsales_vat_usd_total=new Vector();
	Vector IGX_Vsales_sales_tax_usd_total=new Vector();
	Vector IGX_Vsales_other_tax1_usd_total=new Vector();
	Vector IGX_Vsales_net_amt_usd_total=new Vector();

	Vector IGX_VST_WISE_INDEX=new Vector();
	Vector IGX_trans_charges=new Vector();
	Vector IGX_AVG_PRICE_MMBTU=new Vector();
	Vector IGX_EXCHG_RATE_VALUE=new Vector();
	Vector IGX_EXCHG_RATE_VALUE_NUMERIC=new Vector();
	Vector IGX_vSTAT_NO=new Vector();
	Vector IGX_contact_Customer_GST_NO=new Vector();
	Vector IGX_contact_Customer_CST_NO=new Vector();
	Vector IGX_contact_Customer_GVAT_NO=new Vector();
	Vector IGX_contact_Customer_MVAT_NO=new Vector();
	public Vector XML_FILE = new Vector();
	public Vector XML_FILE_UPLOAD = new Vector();
	public Vector XML_GENERATED_JOURNAL_TYPE = new Vector(); //Introduced By Samik Shah On 1st August, 2011 ...
	
	public Object obj = new Object();
	public Class cls = obj.getClass(); 	
	public String cls_nm = ""+cls.getName();
	
	public String cust_cd = "0";
	
	//Following (4) String Variables Have Been Defined By Samik Shah On 20th July, 2011 ...
	public String Closing_Stock_USD = "0";
	public String Closing_stock_NRV_USD = "0";
	public String Closing_Stock_INR = "0";
	public String Closing_stock_NRV_INR = "0";
	
	//Following (2) String Variables Have Been Defined By Samik Shah On 21st July, 2011 ...
	public String Final_qty2 = "0";	
	public String Final_sale_USD2 = "0";
	public String DLNG_Final_qty2 = "0";	
	public String DLNG_Final_sale_USD2 = "0";
	String DLNG_Final_SN_rate="";
	//Following (3) Vector Variables Have Been Defined By Samik Shah On 3rd August, 2011 ...
	public Vector ARRIVAL_DATE_RATE_NOTE = new Vector();
	public Vector CUSTOM_DUTY_DATE_RATE_NOTE = new Vector();
	public Vector CUSTOM_DUTY_INTEREST = new Vector();
	
	//Following double Variable Has Been Introduced By Samik Shah On 4th August, 2011 ...
	public double custom_duty_interest_total_inr = 0;
	double custom_duty_interest_total_inr_dom=0;
	
	//Following (14) Vectors Have Been Introduced By Samik Shah On 9th August, 2011 ...
	public Vector ACTUAL_UNLOADED_QTY_NUMERIC =  new Vector();
	public Vector CONF_PRICE_NUMERIC =  new Vector();
	public Vector USD_VAL_INVOICE_NUMERIC =  new Vector();
	public Vector GROUP_FOREIGN_EXCHG_RATE_NUMERIC =  new Vector();
	public Vector FINAL_SELLER_INV_AMT_INR_NUMERIC =  new Vector();
	public Vector TOTAL_CD_AMT_NUMERIC =  new Vector();
	public Vector TOTAL_PAID_REFUND_NUMERIC =  new Vector();
	public Vector CUSTOM_DUTY_INTEREST_NUMERIC = new Vector();
	public Vector CD_PAID_NUMERIC =  new Vector();
	public Vector INR_PER_MMBTU_NUMERIC =  new Vector();
	public Vector CUSTOM_DUTY_USD_NUMERIC =  new Vector();
	public Vector ADDL_CUSTOM_DUTY_USD_NUMERIC =  new Vector();
	public Vector COST_OF_PURCHASE_USD_NUMERIC =  new Vector();
	public Vector USD_PER_MMBTU_NUMERIC =  new Vector();
	
	//Following (23) Vectors Have Been Introduced By Samik Shah On 10th August, 2011 ...
	public Vector TCQ_NUMERIC = new Vector();
	public Vector RATE_NUMERIC = new Vector();
	public Vector REM_SUPPLY_NUMERIC = new Vector();
	public Vector TOTAL_QTY_NUMERIC = new Vector();
	public Vector SALE_PRICE_NUMERIC = new Vector();
	Vector drcr_cost_center_code_=new Vector();
	public Vector GROSS_AMT_USD_NUMERIC = new Vector();
	public Vector EXCHG_RATE_VALUE_NUMERIC = new Vector();
	public Vector GROSS_AMT_INR_NUMERIC = new Vector();
	public Vector VAT_AMT_NUMERIC = new Vector();
	public Vector ADD_TAX_NUMERIC = new Vector();
	public Vector SALES_TAX_AMT_NUMERIC = new Vector();
	public Vector SERVICE_TAX_NUMERIC = new Vector();
	public Vector SBC_TAX_NUMERIC = new Vector();		//BK20151125
	public Vector KKC_TAX_NUMERIC = new Vector();		//BK20160620
	public Vector IGST_TAX_NUMERIC = new Vector();
	public Vector SGST_TAX_NUMERIC = new Vector();
	public Vector CGST_TAX_NUMERIC = new Vector();
	public Vector ZGST_TAX_NUMERIC = new Vector();
	public Vector EDU_CESS_TAX_NUMERIC = new Vector();
	public Vector HEDU_CESS_TAX_NUMERIC = new Vector();
	public Vector NET_AMT_INR_NUMERIC = new Vector();
	public Vector GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC = new Vector();
	public Vector VAT_AMT_USD_NUMERIC = new Vector();
	public Vector ADD_TAX_USD_NUMERIC = new Vector();
	public Vector SALES_TAX_AMT_USD_NUMERIC = new Vector();
	public Vector SERVICE_TAX_USD_NUMERIC = new Vector();
	public Vector SBC_TAX_USD_NUMERIC = new Vector();			//BK20151125
	public Vector KKC_TAX_USD_NUMERIC = new Vector();			//SB20160620
	public Vector IGST_TAX_USD_NUMERIC = new Vector();
	public Vector SGST_TAX_USD_NUMERIC = new Vector();
	public Vector CGST_TAX_USD_NUMERIC = new Vector();
	public Vector ZGST_TAX_USD_NUMERIC = new Vector();
	public Vector EDU_CESS_TAX_USD_NUMERIC = new Vector();
	public Vector HEDU_CESS_TAX_USD_NUMERIC = new Vector();
	public Vector NET_AMT_USD_NUMERIC = new Vector();
	
	//Following String Variable Has Been Introduced By Samik Shah On 25th August, 2011 ...
	public String xml_file_nm = "";
	
	//Following Vector Has Been Introduced By Samik Shah On 29th August, 2011 ...
	public Vector SN_REF_NO = new Vector();
	
	//introduce by milan dalsaniya MD2011 14 oct
	Vector LC_CUST_CD = new Vector();
	Vector LC_CUST_NM = new Vector();
	Vector LC_VALID_STR_DT = new Vector();
	Vector LC_VALID_END_DT = new Vector();
	Vector LC_BANK_AMOUNT = new Vector();
	Vector LC_REMARK = new Vector();
	Vector LC_SEQ_NO = new Vector();
	Vector LC_FIN_YEAR = new Vector();
	
	Vector LC_REGAS_CUST_CD = new Vector();
	Vector LC_REGAS_CUST_NM = new Vector();
	Vector LC_REGAS_VALID_STR_DT = new Vector();
	Vector LC_REGAS_VALID_END_DT = new Vector();
	Vector LC_REGAS_BANK_AMOUNT = new Vector();
	Vector LC_REGAS_REMARK = new Vector();
	Vector LC_REGAS_SEQ_NO = new Vector();
	Vector LC_REGAS_FIN_YEAR = new Vector();
	
//	FOR stockMarginGrossRpt()
	Vector LNG_MON_YR = new Vector();
	Vector LNG_SALES_GROSS_AMT_USD = new Vector();
	Vector LNG_SALES_GROSS_AMT_INR = new Vector();
	
	
	
	String LNG_margin_sales_usd = "";
	String LNG_margin_sales_inr = "";
	String LNG_margin_cost_of_sales_usd = "";
	String LNG_margin_cost_of_sales_inr = "";
	String LNG_margin_gross_usd = "";
	String LNG_margin_gross_inr = "";
	
	
	Vector VGross_margin_value_inr = new Vector();
	Vector VGross_margin_value_usd = new Vector();
	Vector VMargin_sales_inr = new Vector();
	Vector VMargin_sales_value_usd = new Vector();
	Vector VMargin_sales_value_usd_tmp = new Vector();
	Vector VMargin_value_inr = new Vector();
	Vector VMargin_value_usd = new Vector();
	Vector VSales_Usage_qty = new Vector();
	Vector Vmargin_per_mmBTU_usd = new Vector();
	Vector Vmargin_per_mmBTU_inr = new Vector();
	//Sales_Usage_qty
	//FOR stockMarginGrossRpt() END
	
	//monthly energy
	public String Diff="";
	public String Export_gas_own = "";
	public String Export_gas_re = "";
	Vector vess_nm=new Vector();
	
	//Hedge Register
	Vector Final_inv_no1=new Vector();
	Vector Final_inv_no11=new Vector();
	
	
//	Introdcue By Milan 20111018
	Vector LC_REGAS_NO = new Vector();
		Vector LC_REV_NO = new Vector();
		Vector LC_REGAS_CONT_TYPE = new Vector();
		Vector LC_REGAS_START_DT = new Vector();
		Vector LC_REGAS_END_DT = new Vector();
		Vector LC_REGAS_TCQ = new Vector();
		Vector LC_REGAS_DCQ = new Vector();
		Vector LC_REGAS_FINANCIAL_YR = new Vector();


//	Introdcue By Milan 20111018
		String lc_from_dt = "";
		String lc_to_dt = "";
		String lc_customer_cd = "";
		String lc_seq_no = "";
		String lc_fin_yr = "";
		
//		Introdcue By Milan 20111018
		
		
		Vector LC_FGSA_NO = new Vector();
		Vector LC_SN_NO = new Vector();
		Vector LC_CONT_TYPE = new Vector();
		Vector LC_SN_START_DT = new Vector();
		Vector LC_SN_END_DT = new Vector();
		Vector LC_TCQ = new Vector();
		Vector LC_DCQ = new Vector();
		Vector LC_FINANCIAL_YR = new Vector();
//Introduce By Jaimin 20120420		
	    Vector[] REGAS_QTY1;
	    Vector[] SALES_REGAS_QTY1;
	    Vector[] REGAS_SUG_QTY1;
	    Vector[] REGAS_OPENING;
	    Vector[] REGAS_CLOSING;
	    Vector custm_cd=new Vector();
	    Vector cust_nm=new Vector();		
		
	    
	    ////////ADDDED FOR LTCORA AND CN SALES APPROVAL
	    Vector Account_Mapping_id=new Vector();
	    Vector NEW_INV_SEQ_NO=new Vector();
	    Vector SUPPLIER_CD=new Vector();
	    Vector GSTIN_NO=new Vector();
	    Vector POS_STATE = new Vector();
		String Sum_LTCORA_CN_rem_supply="";
		double LTCORA_CN_sales_tax_inr_total=0;
		double LTCORA_CN_qty_amt_usd_total = 0;
		double LTCORA_CN_gross_amt_usd_total = 0;
		double LTCORA_CN_group_foreign_gross_amt_usd_total = 0;
		double LTCORA_CN_vat_usd_total = 0;
		double LTCORA_CN_addl_tax_usd_total = 0;
		double LTCORA_CN_sales_tax_usd_total = 0;
		double LTCORA_CN_service_tax_usd_total = 0;
		double LTCORA_CN_sbc_tax_usd_total = 0;			//BK20151125
		double LTCORA_CN_kkc_tax_usd_total = 0;			//BK20160620
		double LTCORA_CN_igst_tax_usd_total = 0;	
		double LTCORA_CN_sgst_tax_usd_total = 0;	
		double LTCORA_CN_cgst_tax_usd_total = 0;	
		double LTCORA_CN_zgst_tax_usd_total = 0;	
		double LTCORA_CN_edu_cess_usd_total = 0;
		double LTCORA_CN_high_edu_cess_usd_total = 0;
		double LTCORA_CN_total_tax_usd_total = 0;
		double LTCORA_CN_net_amt_usd_total = 0;
		double LTCORA_CN_qty_amt_inr_total = 0;
		double LTCORA_CN_gross_amt_inr_total = 0;
		double LTCORA_CN_vat_inr_total = 0;
		double LTCORA_CN_addl_tax_inr_total = 0;
		double LTCORA_CN_service_tax_inr_total = 0;
		double LTCORA_CN_sbc_tax_inr_total = 0;			//BK20151125
		double LTCORA_CN_kkc_tax_inr_total = 0;			//SB20160620
		double LTCORA_CN_igst_tax_inr_total = 0;
		double LTCORA_CN_sgst_tax_inr_total = 0;
		double LTCORA_CN_cgst_tax_inr_total = 0;
		double LTCORA_CN_zgst_tax_inr_total = 0;
		double LTCORA_CN_edu_cess_inr_total = 0;
		double LTCORA_CN_high_edu_cess_inr_total = 0;
		double LTCORA_CN_total_tax_inr_total = 0;
		double LTCORA_CN_net_amt_inr_total = 0;
		public double LTCORA_CN_qty_total = 0;
		public double LTCORA_CN_other_tax1_inr_total = 0;
		public double LTCORA_CN_other_tax2_inr_total = 0;
		public double LTCORA_CN_other_tax1_usd_total = 0;
		public double LTCORA_CN_other_tax2_usd_total = 0;
		String Final_sum_LTCORA_CN_tcq="";
		int start_index_3=0;
		int end_index_3=0;
		long summry_end_index_3 = 0;
		long summry_start_index_3 = 0;
		//END
		double DEF_qty_amt_inr_total = 0;
		double DEF_gross_amt_inr_total = 0;
		double DEF_net_amt_inr_total = 0;
		public double getDEF_net_amt_inr_total() {
			return DEF_net_amt_inr_total;
		}

		double DEF_qty_amt_usd_total = 0;
		double DEF_gross_amt_usd_total = 0;
		double DEF_qty_total = 0;
		double DEF_group_foreign_gross_amt_usd_total = 0;
		double DEF_total_tax_inr_total = 0;
		public double getDEF_total_tax_inr_total() {
			return DEF_total_tax_inr_total;
		}

		int start_index_5=0;
		int end_index_5=0;
		public int getEnd_index_5() {
			return end_index_5;
		}

		long summry_end_index_5 = 0;
		long summry_start_index_5 = 0;
		////////////////BK20160206//////////////////////
		
		public String invstatus="";		//BK20160206
		public String segment="";		//BK20160206
		
		Vector Vmonth=new Vector();
		Vector Vcustomer_cd=new Vector();
		Vector Vcustomer_abbr=new Vector();
		Vector Vcont_typ=new Vector();
		Vector Vcustomer_name=new Vector();
		Vector Vhlplinvseqno=new Vector();
		Vector Vfinancial_year=new Vector();
		Vector Vinv_dt=new Vector();
		Vector Vdue_dt=new Vector();
		Vector Vsales_value=new Vector();
		Vector Vtax_nm=new Vector();
		Vector Vtax_cd=new Vector();
		Vector Vinv_value=new Vector();
		Vector Vcont_type=new Vector();
		Vector Vxml_gen_flag=new Vector();
		Vector Vhlpl_inv_seq=new Vector();
		Vector Vtax_str_cd=new Vector();
		
		Vector tax_code=new Vector();
		Vector Vtax_on=new Vector();
		Vector tax_amount=new Vector();
		Vector tax_amount_usd=new Vector();
		
		Vector Vinvseqno=new Vector();		//BK20160208
		Vector Vtaxamtinr=new Vector();
		Vector Vinvamtinr=new Vector();
		
		Vector Vtax_code=new Vector();	//BK20160209
		Vector Vtax_amt=new Vector();
		Vector Vtaxnm=new Vector();
		Vector Vtaxcnt=new Vector();
		String allInvoiceCount="";
		String vat_code = "0";
		String cst_code = "0";
		String addl_code = "0";
		String st_code = "0";
		String sbc_code = "0";
		String ecs_code = "0";
		String hecs_code = "0";
		String zvat_code = "0";
		String igst_code = "0";
		String sgst_code = "0";
		String cgst_code = "0";
		String zgst_code = "0";
		Vector Vtcs_amt = new Vector();
		Vector flag_inv = new Vector();
		Vector VPAY_NEW_INV_SEQ_NO = new Vector();
		Vector Vdrcrcriteria=new Vector();
		Vector Vdrcrflag=new Vector();
		Vector Vgross_trans_inr = new Vector();
		Vector Vtds_tax_percent=new Vector();
		Vector Vtds_tax_amt=new Vector();
		Vector VAgreement_no = new Vector();
		Vector VAgreement_rev_no = new Vector();
		Vector Vgross_trans=new Vector();
		Vector Vcont_no=new Vector();
		Vector Vcont_rev_no=new Vector();
		Vector VPAY_FLAG = new Vector();
		Vector Vsup_state_cd = new Vector(); //Hiren_20210703
		//BK20160217
		Vector Vpay_actual_recv_amt=new Vector();
		Vector Vpay_recv_dt=new Vector();
		Vector Vpay_remark=new Vector();
		Vector Vpay_short_recv_amt=new Vector();
		Vector Vpayflag=new Vector();
		
		Vector Vinv_gen_by_cd=new Vector();
		Vector Vchecked_by_cd=new Vector();
		Vector Vapproved_by_cd=new Vector();
		
		Vector Vinv_gen_by_emailid=new Vector();
		Vector Vchecked_by_emailid=new Vector();
		Vector Vapproved_by_emailid=new Vector();
		
		Vector Vinv_gen_by_nm=new Vector();
		Vector Vchecked_by_nm=new Vector();
		Vector Vapproved_by_nm=new Vector();
		
		Vector Vpdf_inv_dtl=new Vector();
		Vector Vprint_by_cd=new Vector();
		Vector Vprint_by_emailid=new Vector();
		Vector Vprint_by_nm=new Vector();
		Vector Vtds_per=new Vector();
		
		//BK20160305
		Vector Vautomail_inv_no=new Vector();
		Vector Vautomail_inv_dt=new Vector();
		Vector Vautomail_due_dt=new Vector();
		Vector Vautomail_customer_abbr=new Vector();
		Vector Vautomail_inv_amt=new Vector();
		
		Vector Vautomail_inv_gen_by_emailid=new Vector();
		Vector Vautomail_checked_by_emailid=new Vector();
		Vector Vautomail_approved_by_emailid=new Vector();
		Vector Vautomail_print_by_emailid=new Vector();
		
		//String hostname="",userid="",password="";
		String emp_cd="";
		String update_flag="";
		
		Vector Vpay_update_dt=new Vector();
		Vector Vpay_update_cnt=new Vector();
		
		String logged_on_user_emailid="";
		String formname="",formcd="";
		Vector Vtottax=new Vector();
		
		//FGSA_NO,FGSA_REV_NO,SN_REV_NO,PLANT_SEQ_NO,PERIOD_START_DT,PERIOD_END_DT,EXCHG_RATE_CD,
		//EXCHG_RATE_TYPE,CUST_INV_SEQ_NO,APPROVED_FLAG
		
		Vector Vfgsa_no=new Vector();
		Vector Vfgsa_rev_no=new Vector();
		Vector Vsn_no=new Vector();
		Vector Vsn_rev_no=new Vector();
		Vector Vplant_seq_no=new Vector();
		Vector Vplant_seq_nm=new Vector();
		Vector Vperiod_st_dt=new Vector();
		Vector Vperiod_end_dt=new Vector();
		Vector Vexchg_rate_cd=new Vector();
		Vector Vexchg_rate_type=new Vector();
		Vector Vcust_inv_seq_no=new Vector();
		Vector Vapproved_flag=new Vector();
		Vector VAgreement_base=new Vector();
		Vector Vinv_adj_flag=new Vector();
		Vector Vtax_adj_flag=new Vector();
		String btnFlag="";
		//RG20200229
		public Vector Agreement_base= new Vector();
		public Vector trans_charges= new Vector();
		public Vector trans_gross_inr= new Vector();
		double tot_trans_grossinr=0.0;
		String agr_base="";
		String tcs_nm="";
		String tcs_cd="";
		String fact="";
		String tcs_sht_nm="";
		String tcs_fact="";
		Vector inv_flag=new Vector();
		
		public Vector DLNG_SUMMRY_CONT_TYP = new Vector();
		Vector DLNG_inv_flag=new Vector();
		Vector DLNG_HLPL_INV_SEQ_NO=new Vector();
		Vector DLNG_INVOICE_DT=new Vector();
		Vector DLNG_PERIOD_START_DT=new Vector();
		Vector DLNG_PERIOD_END_DT=new Vector();
		Vector DLNG_SALE_PRICE=new Vector();
		Vector DLNG_SALE_PRICE_NUMERIC=new Vector();
		Vector DLNG_DUE_DT=new Vector();
		Vector DLNG_TOTAL_QTY=new Vector();
		Vector DLNG_TOTAL_QTY_NUMERIC=new Vector();
		Vector DLNG_EXCHG_RATE=new Vector();
		Vector DLNG_GROSS_AMT_USD=new Vector();
		Vector DLNG_GROSS_AMT_USD_NUMERIC=new Vector();
		double DLNG_sales_qty_amt_usd_total=0;
		Vector DLNG_GROSS_AMT_INR=new Vector();
		Vector DLNG_GROSS_AMT_INR_2=new Vector();
		Vector DLNG_GROSS_AMT_INR_NUMERIC=new Vector();
		Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG=new Vector();
		Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2=new Vector();
		Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC=new Vector();
		Vector DLNG_tmp_group_gross_usd_amt=new Vector();
		Vector DLNG_NET_AMT_INR=new Vector();
		Vector DLNG_NET_AMT_INR_NUMERIC=new Vector();
		Vector DLNG_temp_net_amt=new Vector();
		Vector DLNG_FINANCIAL_YEAR=new Vector();
		Vector DLNG_CUSTOMER_CD=new Vector();
		Vector DLNG_TAX_STRUCT_CD=new Vector();
		Vector DLNG_cost_center_code_=new Vector();
		Vector DLNG_Agreement_base=new Vector();
		Vector DLNG_SEGMENT_NAME=new Vector();
		Vector DLNG_SN_NO=new Vector();
		Vector DLNG_SIGNING_DT=new Vector();
		Vector DLNG_REMARK=new Vector();
		Vector DLNG_temp_sn_no=new Vector();
		Vector DLNG_SN_REV_NO=new Vector();
		Vector DLNG_SN_SUMRY_CUSTOMER_CD=new Vector();
		Vector DLNG_FGSA_NO=new Vector();
		Vector DLNG_temp_fgsa_no=new Vector();
		Vector DLNG_SN_SIGNING_DT=new Vector();
		Vector DLNG_FGSA_REV_NO=new Vector();
		Vector DLNG_MONTH=new Vector();
		Vector DLNG_CONTRACT_TYPE=new Vector();
		Vector DLNG_PLANT_SEQ_NO=new Vector();
		Vector DLNG_SUN_APPROVAL=new Vector();
		Vector DLNG_Account_Mapping_id=new Vector();
		Vector DLNG_NEW_INV_SEQ_NO=new Vector();
		Vector DLNG_AdvADJ_FLAG=new Vector();
		Vector DLNG_Vtcs_amt=new Vector();
		Vector DLNG_trans_charges=new Vector();
		Vector DLNG_temp_gross_amt=new Vector();
		Vector DLNG_trans_gross_inr=new Vector();
		Vector DLNG_CUSTOMER_NAME=new Vector();
		Vector DLNG_CUSTOMER_ABBR=new Vector();
		Vector DLNG_AVG_PRICE_MMBTU=new Vector();
		Vector DLNG_EXCHG_RATE_VALUE=new Vector();
		Vector DLNG_START_DT=new Vector();
		Vector DLNG_START_DT_ZR_RV=new Vector();
		Vector DLNG_END_DT=new Vector();
		Vector DLNG_END_DT_ZR_RV=new Vector();
		Vector DLNG_TCQ=new Vector();
		Vector DLNG_TCQ_NUMERIC=new Vector();
		Vector DLNG_RATE=new Vector();
		
		Vector DLNG_RATE_NUMERIC=new Vector();
		Vector DLNG_CUM_SUPPLY=new Vector();
		Vector DLNG_REM_SUPPLY=new Vector();
		Vector DLNG_REM_SUPPLY_NUMERIC=new Vector();
		Vector DLNG_HLPL_INV_SEQ=new Vector();
		Vector DLNG_TAX_CODE=new Vector();
		Vector DLNG_FACTOR=new Vector();
		Vector DLNG_TAX_AMOUNT=new Vector();
		Vector DLNG_TAX_ON_TITLE=new Vector();
		Vector DLNG_SALES_TAX_AMT=new  Vector();
		Vector DLNG_SALES_TAX_AMT_NUMERIC=new  Vector();
		Vector DLNG_tmp_sales_tax=new  Vector();
		Vector DLNG_VAT_AMT=new  Vector();
		Vector DLNG_SALE_VAT_TAX_PERC=new  Vector();
		Vector DLNG_SALE_CST_TAX_PERC=new  Vector();
		Vector DLNG_ADD_TAX=new  Vector();
		Vector DLNG_TAX_AMT_INR=new Vector();
		Vector DLNG_TAX_AMT_USD=new Vector();
		Vector DLNG_NET_AMT_USD=new Vector();
		Vector DLNG_GROUP_FOREIGN_EXCHG_RATE=new Vector();
		Vector DLNG_SALES_TAX_AMT_USD=new Vector();
		Vector DLNG_VAT_AMT_USD=new Vector();
		Vector DLNG_tmp_addl_tax=new Vector();
		Vector DLNG_tmp_vat=new Vector();
		Vector DLNG_ADD_TAX_USD=new Vector();
		Vector DLNG_SERVICE_TAX_USD=new Vector();
		Vector DLNG_tmp_service_tax=new Vector();
		Vector DLNG_XML_GEN_FLAG=new Vector();
		Vector DLNG_TOT_QTY=new Vector();
		Vector DLNG_SN_RATE=new Vector();
		Vector DLNG_TOT_SALE_USD=new Vector();
		
		double DEF_igst_inr_total = 0;
		public double getDEF_igst_inr_total() {
			return DEF_igst_inr_total;
		}

		double DEF_cgst_inr_total = 0;
		double DEF_sgst_inr_total = 0;
		
		Vector Vtds_app_flag = new Vector(); 
		Vector Vtds_app_amt = new Vector();
		String tds_app_amt = "0";
		
	public void init()
	{
	    try
	    {
	    	Context initContext = new InitialContext();
	    	if(initContext == null)
	    	{
	    		throw new Exception("Boom - No Context");
	    	}
		  
	    	Context envContext  = (Context)initContext.lookup("java:/comp/env");
	    	DataSource ds = (DataSource)envContext.lookup(RuntimeConf.security_database);
	    	if(ds != null) 
	    	{
	    		conn = ds.getConnection();       
	    		if(conn != null)  
	    		{
	    			stmt = conn.createStatement();
	    			stmt1 = conn.createStatement();
	    			stmt2 = conn.createStatement();
	    			stmt3 = conn.createStatement();
	    			stmt4 = conn.createStatement();
	    			stmt5 = conn.createStatement();
	    			stmt6 = conn.createStatement();
	    			
	    			//	checkForColumn();
	    			if(callFlag.equalsIgnoreCase("PURCHASE_ACCOUNTING_DATA"))
					{
	    				fetch_Purchase_details();
					}
	    			else if(callFlag.equalsIgnoreCase("HEDGE_REGISTER"))
	    			{
	    				fetch_Hedge_details();
	    			}
	    			else if(callFlag.equalsIgnoreCase("DR_CR_REGISTER"))	    				
	    			{
	    				fetch_Dr_Cr_details();
	    				Customer_DTL();	    				
	    			}
	    			else if(callFlag.equalsIgnoreCase("BANK_REMITTANCE"))
	    			{
	    				fetch_Bank_Remmitance_Details();
	    			}
	    			else if(callFlag.equalsIgnoreCase("PURCHASE_ACCOUNTING"))
					{
	    				get_Purchase_dtls();
	    				get_Purchase_Summary(); //MD20111230
	    				get_Purchase_dtls_domestic();
	    				get_Purchase_Summary_domestic(); //MD20111230
	    				
					}
	    			else if(callFlag.equalsIgnoreCase("PURCHASE_ACCOUNTING_APPROVAL"))
					{
	    				get_Purchase_dtls_Approval();
	    				get_Purchase_Summary_Approval(); //MD20111230
	    				get_Purchase_dtls_domestic_Approval();
	    				get_Purchase_Summary_domestic_Approval(); //MD20111230
	    				get_Purchase_dtls_domestic_Approval_DRCR();
					}
	    			else if(callFlag.equalsIgnoreCase("FINAL_CUSTOM_DUTY")) //Introduced By Samik Shah On 11th August, 2011 ...
					{
	    				get_Final_CD_dtls();
					}
	    			else if(callFlag.equalsIgnoreCase("PROVISIONAL_PURCHASE_DETAILS"))
					{
	    				get_Provisional_Purchase_Details();
	    				get_Provisional_Purchase_Details_domestic();
					}	    			
	    			else if(callFlag.equalsIgnoreCase("ngNG_DATA"))  //	Fetching Sales Accounting Data
					{
	    				fetch_Seller_details();
					}
	    			else if(callFlag.equalsIgnoreCase("SALES_ACCOUNTING"))  // New Get and Fetch Sales Accounting Data
					{	    				
	    				get_Sales_dtlsNEW(); 	//BK20151125 
	    				getTotalGroupWiseOnlySalesInvoice(); //HARSH20210630 ADDED BY
	    				get_Sales_Summary();	//BK20151125
	    				GetCreditInvoice(); //SB20160404: For CREDIT NOTE Approval
	    				modifyColumn();
	    				get_SUG_dtl(); // RS03032017
	    				get_Advance_Invoice_dtl(); //RS18072017
	    				get_Storage_Invoice_dtl(); //RG20200518
	    				get_Latepayment_Invoice_dtl(); //RG20200518
	    				get_Dlng_Invoice_dtl(); //RG20200518
	    				GetCreditInvoice_DLNG(); //SB20160404: For CREDIT NOTE Approval
	    				get_Deficiency_dtl(); //SB20160404: For CREDIT NOTE Approval
	    				//get_service_Dlng_Invoice_dtl(); 
	    				//get_DLNG_Latepayment_Invoice_dtl();
					}
	    			else if(callFlag.equalsIgnoreCase("IGX_INVOICE")) //HARSH20210920
	    			{//System.out.println("HP :: DLNG Service START");
	    				get_IGX_dtls(); //HARSH20210920
	    				getTotalGroupWiseOnlyIGXInvoice();
	    				//System.out.println("HP :: DLNG Service STOP");
	    			}
	    			else if(callFlag.equalsIgnoreCase("DLNG_SERVICE_INVOICE")) //HARSH20210920
	    			{//System.out.println("HP :: DLNG Service START");
	    				get_service_Dlng_Invoice_dtl(); //HARSH20210920
	    				//System.out.println("HP :: DLNG Service STOP");
	    			}
	    			else if(callFlag.equalsIgnoreCase("DLNG_LATE_PAYMENT")) //HARSH20210920
	    			{//System.out.println("HP :: DLNG Service START");
	    				get_DLNG_Latepayment_Invoice_dtl(); //HARSH20210920
	    				//System.out.println("HP :: DLNG Service STOP");
	    			}
	    			else if(callFlag.equalsIgnoreCase("View_Storage_Invoice_Att1"))
	    			{
	    				View_Storage_Invoice_Att1();
	    			}
	    			else if(callFlag.equalsIgnoreCase("SALES_ACCOUNTING_REG"))  // New Get and Fetch Sales Accounting Data
					{	    				
	    				//get_Sales_dtlsNEW(); 	//BK20151125    	
	    				//get_Sales_Summary();	//BK20151125
	    				AllCrDrInvoice(); //SB20160404: For CREDIT NOTE Approval
					}
	    			else if(callFlag.equalsIgnoreCase("Search_Seller_Name"))
					{
	    				get_Seller_Name();
					}	
	    			else if(callFlag.equalsIgnoreCase("Search_Customer_Name"))   //	Customer for Sales Accounting 
					{
	    				get_Customer_Name();
					}
	    			else if(callFlag.equalsIgnoreCase("Search_purchase_account"))
					{
	    				get_Purchase_details();
					}
	    			else if(callFlag.equalsIgnoreCase("Search_sales_account"))  //	Search for Sales Accounting 
					{
	    				get_Sales_details();
					}
	    			else if(callFlag.equalsIgnoreCase("Search_hedge_register"))  //	Search for Sales Accounting 
					{
	    				get_Hedge_details();
					}
	    			else if(callFlag.equalsIgnoreCase("Search_bank_remittance"))  //	Search for Sales Accounting 
					{
	    				get_Bank_Remmitance_Details();
					}
	    			else if(callFlag.equalsIgnoreCase("INVOICE_TRACKING"))  //	Search for Invoice Tracking -- Priyanka 250111
					{
	    				get_Customer_Details();
	    				show_Invoice_Tracking_Details();
					}
	    			else if(callFlag.equalsIgnoreCase("LNG_QUANT_RECONCILIATION"))
					{
	    				get_Opening_Stock_Details(); //Last Modified By Samik Shah On 5th August, 2011 ...
	    				get_SUG_Percentage();
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_LNG_QUANT_RECONCILIATION"))
					{
	    				fetch_Stock_Details(); //Modified By Samik Shah On 11th August, 2011 ...
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_SN_SUMMARY"))  //Priyanka 030211
					{
	    				get_Customer_Details(); //MD20111222
	    				fetch_SN_Details();
	    				fetch_SN_Details_DLNG();
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_MONTHLY_ENERGY"))  //Priyanka 030211
					{
	    				fetch_Monthly_Energy(); //Modified By Samik Shah On 24th August, 2011 ...

						fetch_Monthly_Energy_rev();//Add By JHP On 2nd May, 2012....
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_SN_WISE_DTL"))  //Priyanka 030211
					{
	    				get_Customer_Details();	//MD20111222
	    				fetch_SN_Wise_Dtl(); //Last Modified By Samik Shah On 29th August, 2011 ...
	    				fetch_SN_Wise_Dtl_DLNG(); //Last Modified By Samik Shah On 29th August, 2011 ...
					}	
	    			else if(callFlag.equalsIgnoreCase("RPT_Margin_Analysis"))  //Priyanka 150211
					{
	    				fetch_Margin_Dtl(); //Last Modified By Samik Shah On 11th August, 2011 ...
					}
	    			else if(callFlag.equalsIgnoreCase("PROV_CUSTOM_INVOICE")) //Last Modified by Samik Shah On 23rd August, 2011 ...
					{
	    				get_Provision_Custom_Invoice();
					}
	    			else if(callFlag.equalsIgnoreCase("PROVISIONAL_INVOICE")) //Last Modified by Samik Shah On 23rd August, 2011 ...
					{
	    				get_Provisional_Invoice_Details();
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_Stock_Valuation"))  // by Priyanka on 15-02-2011
					{
	    				if(!month.trim().equals("") && !month.trim().equals("0") && !year.trim().equals("") && !year.trim().equals("0"))
	    				{
	    					//get_Stock_Valuation_OLD(); //Whole Method Has Been Modified By Samik Shah On 18th July, 2011 ...
	    					get_Stock_Valuation_NEW(); //Modified By Milan Dalsaniya MD20111007 
	    				}
					}
	    			else if(callFlag.equalsIgnoreCase("XML_GENERATING_PROV_PURCHASE")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_For_Prov_Purchase();
					}
	    			else if(callFlag.equalsIgnoreCase("XML_GENERATING_PROV_CD")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_For_Prov_CD();
					}
	    			else if(callFlag.equalsIgnoreCase("XML_GENERATING_FINAL_PURCHASE")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_For_Final_Purchase();
					}
	    			else if(callFlag.equalsIgnoreCase("XML_GENERATING_FINAL_CD")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_For_Final_CD();
					}
	    			else if(callFlag.equalsIgnoreCase("XML_GENERATING_FINAL_SALES")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_For_Final_Sales();
					}
	    			else if(callFlag.equalsIgnoreCase("XML_UPLOADING")) //Last Modified By Samik Shah On 16th August, 2011 ...
					{
	    				get_Xml_From_Accounting_For_Upload(); //Modified By Samik Shah On 19th July, 2011 ...
					}
	    			else if(callFlag.equalsIgnoreCase("XML_ADV_PAY"))  //Last Modified By Samik Shah On 19th July, 2011 ...
					{
	    				get_Xml_From_Adv_Pay();
					}
	    			else if(callFlag.equalsIgnoreCase("ADV_RECEIPT")) //Introduced By Samik Shah On 16th June, 2011 ...
	    			{
	    				fetchAdvanceAndInvoicePayment(); 
	    				//Introduce BY Milan Dalsaniya MD20111105
	    				fetchLCData();
	    				fetchLCREGASData();
	    			}
	    			else if(callFlag.equalsIgnoreCase("REGAS_REGISTER")) //Introduced By Milan Dalsaniya 2011
	    			{
	    				fetchReGasRegisterData();				//BK20151118 
	    				fetchReGasRegisterDataSummary();		//BK20151118
	    				
	    			}
	    			else if(callFlag.equalsIgnoreCase("LNG_Margin_Statement")) //Introduced By Milan Dalsaniya MD20111209
	    			{
	    				////System.out.println(callFlag);
	    				stockMarginGrossRpt();
	    				
	    				
	    			}
	    			else if(callFlag.equalsIgnoreCase("RPT_LNG_QUANT_RECONCILIATION_INR"))
					{
	    				fetch_Stock_Details_INR(); //JHP20120426
					}
	    			else if(callFlag.equalsIgnoreCase("RPT_LNG_QUANT_RECONCILIATION_USD"))
					{
	    				fetch_Stock_Details_USD(); //JHP20120426
					}
	    			/*else if(callFlag.equalsIgnoreCase("fetchInvoiceDetails"))
	    			{
	    				CREATE_COLUMN();
	    				Read_All_Roundoff();
	    				fetch_Invoice_Details();	//BK20160309
	    			}*/
	    			else if(callFlag.equals("GST_REGISTER")) {
	    				fetch_gst_register();
	    			}else if(callFlag.equals("LtcoraCnCargoDtlRpt")) {
	    				LtcoraCnCargoDtlRpt();
	    			}

	    			conn.close();
	    			conn = null;
	    		}
	    	}
	    }
	    catch(Exception e)
	    {
	    	////System.out.println("Exception In : ("+databeanName+") - (init()): "+e.getMessage());
	    	e.printStackTrace();
	    }
	    finally
	    {
	    	if(rset != null)
	    	{
				try
				{
					rset.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset is not close "+e);
				}
			}
	    	if(rset1 != null)
	    	{
				try
				{
					rset1.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset1 is not close "+e);
				}
			}
	    	if(rset2 != null)
	    	{
				try
				{
					rset2.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset2 is not close "+e);
				}
			}
	    	if(rset3 != null)
	    	{
				try
				{
					rset3.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset3 is not close "+e);
				}
			}
	    	if(rset4 != null)
	    	{
				try
				{
					rset4.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset4 is not close "+e);
				}
			}
	    	if(rset5 != null)
	    	{
				try
				{
					rset5.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset5 is not close "+e);
				}
			}
	    	if(rset6 != null)
	    	{
				try
				{
					rset6.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("rset6 is not close "+e);
				}
			}
			if(stmt != null)
			{
				try
				{
					stmt.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt is not close "+e);
				}
			}
			if(stmt1 != null)
			{
				try
				{
					stmt1.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt1 is not close "+e);
				}
			}
			if(stmt2 != null)
			{
				try
				{
					stmt2.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt2 is not close "+e);
				}
			}
			if(stmt3 != null)
			{
				try
				{
					stmt3.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt3 is not close "+e);
				}
			}
			if(stmt4 != null)
			{
				try
				{
					stmt4.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt4 is not close "+e);
				}
			}
			if(stmt5 != null)
			{
				try
				{
					stmt5.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt5 is not close "+e);
				}
			}
			if(stmt6 != null)
			{
				try
				{
					stmt6.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("stmt6 is not close "+e);
				}
			}
			if(conn != null)
			{
				try
				{
					conn.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					////System.out.println("conn is not close "+e);
				}
			}
	    }
	}
	//CREDIT DEBIT VECTORS
	Vector CR_DR_NEW_INV_SEQ_NO = new Vector();
	Vector InvDt = new Vector();
	Vector Vcrdr_doc_no = new Vector();
	Vector VCRDR_GSTIN_NO = new Vector();
	Vector IGST_TAX_RATE_CRDR = new Vector();
	Vector SGST_TAX_RATE_CRDR = new Vector();
	Vector CGST_TAX_RATE_CRDR = new Vector();
	Vector ZGST_TAX_RATE_CRDR = new Vector();
	Vector IGST_TAX_CRDR = new Vector();
	Vector SGST_TAX_CRDR = new Vector();
	Vector CGST_TAX_CRDR = new Vector();
	Vector ZGST_TAX_CRDR = new Vector();
	Vector Tax_struct_cd = new Vector();
	Vector VCRDR_DIFF_GROSS_AMT = new Vector();
	//ADVANCE INVOICE VECTORS
	Vector AHLPL_INV_SEQ_NO = new Vector();
	Vector ANEW_INV_SEQ_NO = new Vector();
	Vector AINVOICE_DT = new Vector();
	Vector ACUSTOMER_CD = new Vector();
	Vector APLANT_SEQ_NO = new Vector();
	Vector ATAX_STRUCT_CD = new Vector();
	Vector AGROSS_AMT_INR = new Vector();
	Vector AGROSS_AMT_USD = new Vector();
	Vector ATOTAL_QTY = new Vector();
	Vector APAY_TYPE = new Vector();
	Vector APRICE_UNIT = new Vector();
	Vector AGSTIN_NO = new Vector();
	Vector APLANT_STATE = new Vector();
	Vector ASAC_CODE = new Vector();
	Vector APLANT_NAME = new Vector();
	
	Vector IGST_TAX_RATE_A = new Vector();
	Vector SGST_TAX_RATE_A = new Vector();
	Vector CGST_TAX_RATE_A = new Vector();
	Vector ZGST_TAX_RATE_A = new Vector();
	Vector IGST_TAX_A = new Vector();
	Vector SGST_TAX_A = new Vector();
	Vector CGST_TAX_A = new Vector();
	Vector ZGST_TAX_A = new Vector();
	Vector AADV_INV_NO = new Vector();
	Vector AADV_INV_DT = new Vector();
	
	Vector UHLPL_INV_SEQ_NO = new Vector();
	Vector UNEW_INV_SEQ_NO = new Vector();
	Vector UINVOICE_DT = new Vector();
	Vector UCUSTOMER_CD = new Vector();
	Vector UPLANT_SEQ_NO = new Vector();
	Vector UTAX_STRUCT_CD = new Vector();
	Vector UGROSS_AMT_INR = new Vector();
	Vector UGROSS_AMT_USD = new Vector();
	Vector UTOTAL_QTY = new Vector();
	Vector UPAY_TYPE = new Vector();
	Vector UPRICE_UNIT = new Vector();
	Vector UGSTIN_NO = new Vector();
	Vector UPLANT_STATE = new Vector();
	Vector USAC_CODE = new Vector();
	Vector UPLANT_NAME = new Vector();
	Vector USUG_VAL = new Vector();
	Vector USUG_QTY = new Vector();
	
	Vector IGST_TAX_RATE_U = new Vector();
	Vector SGST_TAX_RATE_U = new Vector();
	Vector CGST_TAX_RATE_U = new Vector();
	Vector ZGST_TAX_RATE_U = new Vector();
	Vector IGST_TAX_U = new Vector();
	Vector SGST_TAX_U = new Vector();
	Vector CGST_TAX_U = new Vector();
	Vector ZGST_TAX_U = new Vector();
	
	Map OTH_HLPL_INV_SEQ_NO = new HashMap();
	Vector OTH_NEW_INV_SEQ_NO_X = new Vector();
	Vector OTH_NEW_INV_SEQ_NO_Y = new Vector();
	Vector OTH_NEW_INV_SEQ_NO_Z = new Vector();
	Vector OTH_NEW_INV_SEQ_NO_1 = new Vector();
	Vector OTH_NEW_INV_SEQ_NO_2 = new Vector();
	Vector OTH_NEW_INV_SEQ_NO_N = new Vector();
	Map OTH_CUSTOMER_CD = new HashMap();
	Map OTH_NET_AMT_INR = new HashMap();
	Map OTH_INVOICE_DT = new HashMap();
	Map OTH_INVOICE_TYPE = new HashMap();
	Map OTH_GROSS_AMT_INR = new HashMap();
	Map OTH_TAX_AMT = new HashMap();
	Map OTH_SUPPLIER_CD = new HashMap();
	Map OTH_SUPPLIER_NAME = new HashMap();
	Map OTH_TAX_STRUCT_CD = new HashMap();
	Map OTH_CUSTOMER_ABBR = new HashMap();
	Map OTH_IGST_TAX = new HashMap();
	Map OTH_IGST_TAX_RATE = new HashMap();
	Map OTH_CGST_TAX = new HashMap();
	Map OTH_CGST_TAX_RATE = new HashMap();
	Map OTH_SGST_TAX = new HashMap();
	Map OTH_SGST_TAX_RATE = new HashMap();
	Map OTH_ZGST_TAX = new HashMap();
	Map OTH_ZGST_TAX_RATE = new HashMap();
	Map OTH_ITEM_DESCRIPTION = new HashMap();
	Map OTH_SAC_CODE = new HashMap();
	Map OTH_CUSTOMER_STATE_CODE = new HashMap();
	Map OTH_SUPPLIER_STATE_CODE = new HashMap();
	Map OTH_TAX_CODE = new HashMap();
	Map OTH_GSTIN_NO = new HashMap();
	Map OTH_PACER_NO = new HashMap();
	Map OTH_VENDOR_SUPP_INV_REF_NO = new HashMap();
	Map OTH_HRS_BERTHING = new HashMap();
	Map OTH_SLOTS_BERTHING = new HashMap();
	Map OTH_GRT = new HashMap();
	Map OTH_DUE_DATE = new HashMap();
	Map OTH_SALE_PRICE = new HashMap();
	Map OTH_VESSEL_NM = new HashMap();
	Map OTH_VESSEL_FLAG = new HashMap();
	Map OTH_IMPORTER = new HashMap();
	Map OTH_QUANTITY = new HashMap();
	Vector VOTH_CGST_TAX_RATE = new Vector();
	Vector VOTH_IGST_TAX_RATE = new Vector();
	Vector VOTH_SGST_TAX_RATE = new Vector();
	Vector VOTH_SAC_CODE = new Vector();
	Vector VOTH_QUANTITY = new Vector();
	Vector VOTH_UAMNO=new Vector();
	public Vector getVOTH_QUANTITY() {
		return VOTH_QUANTITY;
	}

	public void setVOTH_QUANTITY(Vector vOTH_QUANTITY) {
		VOTH_QUANTITY = vOTH_QUANTITY;
	}

	public Vector getVOTH_SAC_CODE() {
		return VOTH_SAC_CODE;
	}

	public void setVOTH_SAC_CODE(Vector vOTH_SAC_CODE) {
		VOTH_SAC_CODE = vOTH_SAC_CODE;
	}

	int cnt=0;
	Vector VOTH_IGST_TAX = new Vector();
	Vector VOTH_CGST_TAX = new Vector();
	Vector VOTH_SGST_TAX = new Vector();
	
	
	Vector Vdiff_tcs = new Vector();
	Vector Vdiff_tcs_flg = new Vector();
	
	public void fetch_gst_register() throws Exception {
		try {

//			//System.out.println("1: GET CREDIT INVOICE ...........>>>>");
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			String igst_code="0", cgst_code="0",sgst_code="0",zgst_code="0";
			String sgst_code_6="0";
			String cgst_code_6="0";
			
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//RS23062017
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='Zero GST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(invoice_type.equals("C")) {
				int count=0; 
				Vector InvSeqNo= new Vector();
				queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID,NEW_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),financial_year " + //SB20160404
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (FLAG NOT IN ('U','A','O')) ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					queryString += "AND CUSTOMER_CD='"+customer_cd+"' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
				} else {
				  queryString += "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
				}
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					InvSeqNo.add(rset.getString(1));
					Vmapping_id.add(rset.getString(2)==null?"":rset.getString(2));
					String temp_no= rset.getString(3)==null?"":rset.getString(3);
					if(temp_no.equals("")) {
						temp_no = rset.getString(1);
						
						if(Integer.parseInt(""+temp_no)<10)
						{
							temp_no="00"+temp_no+"/"+rset.getString(5);
						}
						else if(Integer.parseInt(""+temp_no)<100) 
						{
							temp_no="0"+temp_no+"/"+rset.getString(5);
						}
						else
						{
							temp_no=temp_no+"/"+rset.getString(5);
						}
					}
					CR_DR_NEW_INV_SEQ_NO.add(temp_no);
					InvDt.add(rset.getString(4)==null?"":rset.getString(4));
				}
				for (int i=0; i<InvSeqNo.size(); i++)
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR, NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "PLANT_SEQ_NO,DR_CR_NO,FLAG,CRITERIA" +
					  ", SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'), DR_CR_FLAG,"
					  + " DR_CR_DOC_NO,TAX_STRUCT_CD,DR_CR_GROSS_AMT_INR "+
					  "FROM FMS7_DR_CR_NOTE WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) "
					  	+ "and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND FLAG ='Y' AND HLPL_INV_SEQ_NO= '"+InvSeqNo.elementAt(i)+"' " +
					  " AND APRV_BY IS NOT NULL " + 
					  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{										
						//SUMMRY_CONT_TYP.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
						//PERIOD_START_DT.add("");						
						//PERIOD_END_DT.add("");
						//SALE_PRICE.add(rset.getString(3)==null?"":rset.getString(3));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
						//DUE_DT.add(rset.getString(4)==null?"":rset.getString(4));	
						
						Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
						//TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0.00":rset.getString(5))));				
						//EXCHG_RATE.add(rset.getString(6)==null?"":rset.getString(6));				
						Vcrdr_inv_gross_amt_USD.add(rset.getString(7)==null?"":nf3.format(Double.parseDouble(rset.getString(7))));
						//GROSS_AMT_USD_NUMERIC.add(rset.getString(7)==null?"0.00":nf.format(Double.parseDouble(rset.getString(7))));
						String temp_gross_amt = rset.getString(8)==null?"0":rset.getString(8);
						Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
						//GROSS_AMT_INR_2.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
						//GROSS_AMT_INR_NUMERIC.add(rset.getString(8)==null?"0.00":nf.format(Double.parseDouble(rset.getString(8))));
						Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						//NET_AMT_INR_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						
						Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
						//CUSTOMER_CD.add(rset.getString(11)==null?"":rset.getString(11));
						//TAX_STRUCT_CD.add(rset.getString(12)==null?"":rset.getString(12));
						
						String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
						String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
						
	//					Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
	//					Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					//	temp_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
	//					Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					//	MONTH.add(rset.getString(17)==null?"":rset.getString(17));
					//	CONTRACT_TYPE.add(rset.getString(18)==null?"":rset.getString(18));
						Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
						//SEGMENT_NAME.add("Sales");
					//	PLANT_SEQ_NO.add(rset.getString(19));
					//	SUN_APPROVAL.add(rset.getString(21)==null?"":rset.getString(21));
						Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
					//	Account_Mapping_id.add(rset.getString(20)==null?"":rset.getString(20));
						Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));
						Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));
						Vcrdr_doc_no.add(rset.getString(27)==null?"":rset.getString(27));
						
						//FECHING GSTIN NO PLANT WISE
						String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(19)+"' "
								+ "AND CUSTOMER_CD='"+rset.getString(11)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
								+ "WHERE CUSTOMER_CD='"+rset.getString(11)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(19)+"' "
								+ " AND (EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//						System.out.println("=="+q_gstin);
						rset1 = stmt1.executeQuery(q_gstin);
						if(rset1.next()) {
							VCRDR_GSTIN_NO.add(rset1.getString(1));
						} else {
							VCRDR_GSTIN_NO.add("");
						}
						
						Tax_struct_cd.add(rset.getString(28)==null?"0":rset.getString(28));
						temp_gross_amt= rset.getString(29)==null?"0":rset.getString(29);
						if(rset.getString(22).equals("REV_INV")) {
							temp_gross_amt = rset.getString(8);
						}
						VCRDR_DIFF_GROSS_AMT.add(nf3.format(Double.parseDouble(temp_gross_amt)));
						//CALCULATE TAX
						
						Vector TAX_CODE_temp = new Vector();
						Vector FACTOR_temp = new Vector();
						Vector TAX_AMOUNT_temp = new Vector();
						TAX_CODE_temp.clear();
						FACTOR_temp.clear();
						TAX_AMOUNT_temp.clear();
						double tax_amt = 0;
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
					   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(28)+" AND " +
					   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(28)+" AND " +
					   			  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
					rset1=stmt.executeQuery(queryString);
					while(rset1.next())
					{			
						String tax_cd     = rset1.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));						
						double gross_amt=Double.parseDouble(temp_gross_amt);
						
						if(rset1.getString(3).equals("1"))
						{
							tax_amt   = (gross_amt*Double.parseDouble(rset1.getString(2)))/100;						
						}
						else if(rset1.getString(3).equals("2"))
						{
						    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(28)+" AND " +
											"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(28)+" AND " +
											"B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) AND A.tax_code="+tax_cd+"";
							//System.out.println("=="+queryString1);
						    rset2=stmt1.executeQuery(queryString1);
							if(rset2.next())
							{
								if(rset2.getString(3).equals("1"))
								{
									tax_amt = (gross_amt*Double.parseDouble(rset2.getString(2)))/100;
								}			
								tax_amt = (tax_amt*Double.parseDouble(rset1.getString(2)))/100;								
							}
						}
									
						TAX_CODE_temp.add(tax_cd);
						FACTOR_temp.add(tax_factor);						
						TAX_AMOUNT_temp.add(nf3.format(Math.round(tax_amt)));
						count++;
					}
					
						for(int ii=0;ii<TAX_CODE_temp.size();ii++) {
							if(TAX_CODE_temp.elementAt(ii).equals(igst_code)) {
								IGST_TAX_CRDR.add(TAX_AMOUNT_temp.elementAt(ii));
								IGST_TAX_RATE_CRDR.add(FACTOR_temp.elementAt(ii));
							} 
							if(TAX_CODE_temp.elementAt(ii).equals(cgst_code)) {
								CGST_TAX_CRDR.add(TAX_AMOUNT_temp.elementAt(ii));
								CGST_TAX_RATE_CRDR.add(FACTOR_temp.elementAt(ii));
							} 
							if(TAX_CODE_temp.elementAt(ii).equals(sgst_code)) {
								SGST_TAX_CRDR.add(TAX_AMOUNT_temp.elementAt(ii));
								SGST_TAX_RATE_CRDR.add(FACTOR_temp.elementAt(ii));
							} 
							if(TAX_CODE_temp.elementAt(ii).equals(zgst_code)) {
								ZGST_TAX_CRDR.add(TAX_AMOUNT_temp.elementAt(ii));
								ZGST_TAX_RATE_CRDR.add(FACTOR_temp.elementAt(ii));
							}
						}
						if(!TAX_CODE_temp.contains(igst_code)) {
							IGST_TAX_CRDR.add("-");
							IGST_TAX_RATE_CRDR.add("-");
						}
						if(!TAX_CODE_temp.contains(cgst_code)) {
							CGST_TAX_CRDR.add("-");
							CGST_TAX_RATE_CRDR.add("-");						
						}
						if(!TAX_CODE_temp.contains(sgst_code)) {
							SGST_TAX_CRDR.add("-");
							SGST_TAX_RATE_CRDR.add("-");
						}
						if(!TAX_CODE_temp.contains(zgst_code)) {
							ZGST_TAX_CRDR.add("-");
							ZGST_TAX_RATE_CRDR.add("-");
						}
					}
				}
			} else if(invoice_type.equals("A")) {
				//SAC CODE
				String sac_cod = "";
				String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='C' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					sac_cod = rset.getString(1)==null?"":rset.getString(1);
				} 
				
				queryString = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), "
						+ "CUSTOMER_CD,PLANT_SEQ_NO,TAX_STRUCT_CD,GROSS_AMT_INR,GROSS_AMT_USD,TOTAL_QTY, "
						+ "PAY_TYPE,PRICE_UNIT FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN "
						+ "TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND "
						+ "FLAG='A' ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					queryString += "AND CUSTOMER_CD='"+customer_cd+"' ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				} else {
				  queryString += "ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				}
//				System.out.println("Fetching Data for Advance Invoice--"+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					AHLPL_INV_SEQ_NO.add(rset.getString(1));
					ANEW_INV_SEQ_NO.add(rset.getString(2));
					AINVOICE_DT.add(rset.getString(3));
					ACUSTOMER_CD.add(rset.getString(4));
					APLANT_SEQ_NO.add(rset.getString(5));
					ATAX_STRUCT_CD.add(rset.getString(6)==null?"0":rset.getString(6));
					AGROSS_AMT_INR.add(rset.getString(7)==null?"0":rset.getString(7));
					AGROSS_AMT_USD.add(rset.getString(8)==null?"0":rset.getString(8));
					ATOTAL_QTY.add(rset.getString(9)==null?"0":nf3.format((Double.parseDouble(rset.getString(9)))));
					APAY_TYPE.add(rset.getString(10)==null?"":rset.getString(10));
					APRICE_UNIT.add(rset.getString(11)==null?"1":rset.getString(11));
					ASAC_CODE.add(sac_cod);
					String temp_gross_amt = rset.getString(7)==null?"0":rset.getString(7);
					
					//GET PARTY NAME
					queryString1 = "SELECT CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) ";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next()) {
						APLANT_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
					} else {
						APLANT_NAME.add("");
					}
					
					//FECHING GSTIN NO PLANT WISE
					String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(5)+"' "
							+ "AND CUSTOMER_CD='"+rset.getString(4)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
							+ "WHERE CUSTOMER_CD='"+rset.getString(4)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(5)+"' "
							+ " AND (EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//					System.out.println("=="+q_gstin);
					rset1 = stmt1.executeQuery(q_gstin);
					if(rset1.next()) {
						AGSTIN_NO.add(rset1.getString(1)==null?"":rset1.getString(1));
					} else {
						AGSTIN_NO.add("");
					}
					
					//FETCH STATE CODE
					queryString1 = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND SEQ_NO = '"+rset.getString(5)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL B "
							+ "WHERE B.SEQ_NO='"+rset.getString(5)+"' AND B.CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND B.EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY'))";
//					System.out.println("Fetchinng State-8888-"+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next()) {
						String plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							queryString1 = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(queryString1);
							if(rset1.next()) {
								APLANT_STATE.add(rset1.getString(1)==null?"":rset1.getString(1));
							} else {
								APLANT_STATE.add("");
							}
						} else {
							APLANT_STATE.add("");
						}
					} else {
						APLANT_STATE.add("");
					}
					
					//CALCULATE TAX
					Vector TAX_CODE_temp = new Vector();
					Vector FACTOR_temp = new Vector();
					Vector TAX_AMOUNT_temp = new Vector();
					TAX_CODE_temp.clear();
					FACTOR_temp.clear();
					TAX_AMOUNT_temp.clear();
					double tax_amt = 0;
				queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "B.app_date<=TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				rset1=stmt1.executeQuery(queryString1);
				while(rset1.next())
				{			
					String tax_cd     = rset1.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));						
					double gross_amt=Double.parseDouble(temp_gross_amt);
					
					if(rset1.getString(3).equals("1"))
					{
						tax_amt   = (gross_amt*Double.parseDouble(rset1.getString(2)))/100;						
					}
					else if(rset1.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
										"B.app_date<=TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) AND A.tax_code="+tax_cd+"";
					    rset2=stmt1.executeQuery(queryString1);
						if(rset2.next())
						{
							if(rset2.getString(3).equals("1"))
							{
								tax_amt = (gross_amt*Double.parseDouble(rset2.getString(2)))/100;
							}			
							tax_amt = (tax_amt*Double.parseDouble(rset1.getString(2)))/100;								
						}
					}
								
					TAX_CODE_temp.add(tax_cd);
					FACTOR_temp.add(tax_factor);						
					TAX_AMOUNT_temp.add(nf3.format(Math.round(tax_amt)));
				}
				
					for(int ii=0;ii<TAX_CODE_temp.size();ii++) {
						if(TAX_CODE_temp.elementAt(ii).equals(igst_code)) {
							IGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							IGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(cgst_code)) {
							CGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							CGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(sgst_code)) {
							SGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							SGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(zgst_code)) {
							ZGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							ZGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						}
					}
					if(!TAX_CODE_temp.contains(igst_code)) {
						IGST_TAX_A.add("-");
						IGST_TAX_RATE_A.add("-");
					}
					if(!TAX_CODE_temp.contains(cgst_code)) {
						CGST_TAX_A.add("-");
						CGST_TAX_RATE_A.add("-");						
					}
					if(!TAX_CODE_temp.contains(sgst_code)) {
						SGST_TAX_A.add("-");
						SGST_TAX_RATE_A.add("-");
					}
					if(!TAX_CODE_temp.contains(zgst_code)) {
						ZGST_TAX_A.add("-");
						ZGST_TAX_RATE_A.add("-");
					}
				}
			} else if(invoice_type.equals("AA")) {
				queryString = "SELECT HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), NEW_INV_SEQ_NO, "
						+ "CUSTOMER_CD,PLANT_SEQ_NO,TAX_STRUCT_CD,ADV_INV_NO,TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'), "
						+ "GROSS_AMT_INR,FINANCIAL_YEAR "
						+ "FROM FMS7_INVOICE_MST WHERE FLAG='Y' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') "
						+ "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND CONTRACT_TYPE='C' ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					queryString += "AND CUSTOMER_CD='"+customer_cd+"' ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				} else {
				  queryString += "ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				}
				rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					AHLPL_INV_SEQ_NO.add(rset.getString(1));
					AINVOICE_DT.add(rset.getString(2));
					int no = Integer.parseInt(rset.getString(1));
					String no_ = "";
					if(no<10) {
						no_ = "000"+no;
					} else if(no<100) {
						no_ = "00"+no;
					} else if(no<1000) {
						no_ = "0"+no;
					} else {
						no_ = ""+no;
					}
					String temp_data = no_+"/"+rset.getString(10).substring(0,5)+rset.getString(10).substring(7,9);
					ANEW_INV_SEQ_NO.add(rset.getString(3)==null?temp_data:rset.getString(3));
					ACUSTOMER_CD.add(rset.getString(4));
					APLANT_SEQ_NO.add(rset.getString(5));
					ATAX_STRUCT_CD.add(rset.getString(6));
					AADV_INV_NO.add(rset.getString(7)==null?"":rset.getString(7));
					AADV_INV_DT.add(rset.getString(8)==null?"":rset.getString(8));
					AGROSS_AMT_INR.add(rset.getString(9)==null?"0":rset.getString(9));
					String temp_gross_amt = rset.getString(9)==null?"0":rset.getString(9);
					
					//CALCULATE TAX
					Vector TAX_CODE_temp = new Vector();
					Vector FACTOR_temp = new Vector();
					Vector TAX_AMOUNT_temp = new Vector();
					TAX_CODE_temp.clear();
					FACTOR_temp.clear();
					TAX_AMOUNT_temp.clear();
					double tax_amt = 0;
				queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				rset1=stmt1.executeQuery(queryString1);
				while(rset1.next())
				{			
					String tax_cd     = rset1.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));						
					double gross_amt=Double.parseDouble(temp_gross_amt);
					
					if(rset1.getString(3).equals("1"))
					{
						tax_amt   = (gross_amt*Double.parseDouble(rset1.getString(2)))/100;						
					}
					else if(rset1.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
										"B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) AND A.tax_code="+tax_cd+"";
					    rset2=stmt1.executeQuery(queryString1);
						if(rset2.next())
						{
							if(rset2.getString(3).equals("1"))
							{
								tax_amt = (gross_amt*Double.parseDouble(rset2.getString(2)))/100;
							}			
							tax_amt = (tax_amt*Double.parseDouble(rset1.getString(2)))/100;								
						}
					}
								
					TAX_CODE_temp.add(tax_cd);
					FACTOR_temp.add(tax_factor);						
					TAX_AMOUNT_temp.add(nf3.format(Math.round(tax_amt)));
				}
				
					for(int ii=0;ii<TAX_CODE_temp.size();ii++) {
						if(TAX_CODE_temp.elementAt(ii).equals(igst_code)) {
							IGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							IGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(cgst_code)) {
							CGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							CGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(sgst_code)) {
							SGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							SGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(zgst_code)) {
							ZGST_TAX_A.add(TAX_AMOUNT_temp.elementAt(ii));
							ZGST_TAX_RATE_A.add(FACTOR_temp.elementAt(ii));
						}
					}
					if(!TAX_CODE_temp.contains(igst_code)) {
						IGST_TAX_A.add("-");
						IGST_TAX_RATE_A.add("-");
					}
					if(!TAX_CODE_temp.contains(cgst_code)) {
						CGST_TAX_A.add("-");
						CGST_TAX_RATE_A.add("-");						
					}
					if(!TAX_CODE_temp.contains(sgst_code)) {
						SGST_TAX_A.add("-");
						SGST_TAX_RATE_A.add("-");
					}
					if(!TAX_CODE_temp.contains(zgst_code)) {
						ZGST_TAX_A.add("-");
						ZGST_TAX_RATE_A.add("-");
					}
				}
			} else if(invoice_type.equals("U")) {
				//SAC CODE
				String sac_cod = "";
				String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='C' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					sac_cod = rset.getString(1)==null?"":rset.getString(1);
				} 
				
				queryString = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), "
						+ "CUSTOMER_CD,PLANT_SEQ_NO,TAX_STRUCT_CD,GROSS_AMT_INR,GROSS_AMT_USD,NVL(TOTAL_QTY,'0'), "
						+ "PAY_TYPE,PRICE_UNIT,SALE_PRICE,MAPPING_ID,SN_NO FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN "
						+ "TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND "
						+ "FLAG='U' ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					queryString += "AND CUSTOMER_CD='"+customer_cd+"' ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				} else {
				  queryString += "ORDER BY HLPL_INV_SEQ_NO,INVOICE_DT ";
				}
//				System.out.println("Fetching Data for Advance Invoice--"+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					UHLPL_INV_SEQ_NO.add(rset.getString(1));
					UNEW_INV_SEQ_NO.add(rset.getString(2));
					UINVOICE_DT.add(rset.getString(3));
					UCUSTOMER_CD.add(rset.getString(4));
					UPLANT_SEQ_NO.add(rset.getString(5));
					UTAX_STRUCT_CD.add(rset.getString(6)==null?"0":rset.getString(6));
					UGROSS_AMT_INR.add(rset.getString(7)==null?"0":nf3.format(Double.parseDouble(rset.getString(7))));
					UGROSS_AMT_USD.add(rset.getString(8)==null?"0":rset.getString(8));
					UTOTAL_QTY.add(rset.getString(9)==null?"0":nf3.format((Double.parseDouble(rset.getString(9)))));
					UPAY_TYPE.add(rset.getString(10)==null?"":rset.getString(10));
					UPRICE_UNIT.add(rset.getString(12)==null?"":rset.getString(12));
					USAC_CODE.add(sac_cod);
					String temp_gross_amt = rset.getString(7)==null?"0":rset.getString(7);
					
					
					//FETCH SUG
					queryString1 = "SELECT NVL(SYS_USE_GAS,1) FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+rset.getString(13)+"' "
							+ " AND CARGO_SEQ_NO='"+rset.getString(14)+"' ";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next()) {
						USUG_VAL.add(rset1.getString(1)==null?"0.66":rset1.getString(1));
						double sug_qty = (Double.parseDouble(rset.getString(9)) * Double.parseDouble(rset1.getString(1)))/100;
						USUG_QTY.add(nf3.format(sug_qty));
					} else {
						USUG_VAL.add("");
						USUG_QTY.add("");
					}
					
					//GET PARTY NAME
					queryString1 = "SELECT CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) ";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next()) {
						UPLANT_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
					} else {
						UPLANT_NAME.add("");
					}
					
					//FECHING GSTIN NO PLANT WISE
					String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(5)+"' "
							+ "AND CUSTOMER_CD='"+rset.getString(4)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
							+ "WHERE CUSTOMER_CD='"+rset.getString(4)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(5)+"' "
							+ " AND (EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//					System.out.println("=="+q_gstin);
					rset1 = stmt1.executeQuery(q_gstin);
					if(rset1.next()) {
						UGSTIN_NO.add(rset1.getString(1)==null?"":rset1.getString(1));
					} else {
						UGSTIN_NO.add("");
					}
					
					//FETCH STATE CODE
					queryString1 = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND SEQ_NO = '"+rset.getString(5)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL B "
							+ "WHERE B.SEQ_NO='"+rset.getString(5)+"' AND B.CUSTOMER_CD='"+rset.getString(4)+"' "
							+ "AND B.EFF_DT <= TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY'))";
//					System.out.println("Fetchinng State-8888-"+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next()) {
						String plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							queryString1 = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(queryString1);
							if(rset1.next()) {
								UPLANT_STATE.add(rset1.getString(1)==null?"":rset1.getString(1));
							} else {
								UPLANT_STATE.add("");
							}
						} else {
							UPLANT_STATE.add("");
						}
					} else {
						UPLANT_STATE.add("");
					}
					
					//CALCULATE TAX
					Vector TAX_CODE_temp = new Vector();
					Vector FACTOR_temp = new Vector();
					Vector TAX_AMOUNT_temp = new Vector();
					TAX_CODE_temp.clear();
					FACTOR_temp.clear();
					TAX_AMOUNT_temp.clear();
					double tax_amt = 0;
				queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
				   			  "B.app_date<=TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				rset1=stmt1.executeQuery(queryString1);
				while(rset1.next())
				{			
					String tax_cd     = rset1.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));						
					double gross_amt=Double.parseDouble(temp_gross_amt);
					
					if(rset1.getString(3).equals("1"))
					{
						tax_amt   = (gross_amt*Double.parseDouble(rset1.getString(2)))/100;						
					}
					else if(rset1.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+rset.getString(6)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+rset.getString(6)+" AND " +
										"B.app_date<=TO_DATE('"+rset.getString(3)+"','DD/MM/YYYY')) AND A.tax_code="+tax_cd+"";
					    rset2=stmt1.executeQuery(queryString1);
						if(rset2.next())
						{
							if(rset2.getString(3).equals("1"))
							{
								tax_amt = (gross_amt*Double.parseDouble(rset2.getString(2)))/100;
							}			
							tax_amt = (tax_amt*Double.parseDouble(rset1.getString(2)))/100;								
						}
					}
								
					TAX_CODE_temp.add(tax_cd);
					FACTOR_temp.add(tax_factor);						
					TAX_AMOUNT_temp.add(nf3.format(Math.round(tax_amt)));
				}
				//System.out.println("TAX_CODE_temp--"+TAX_CODE_temp);
					for(int ii=0;ii<TAX_CODE_temp.size();ii++) {
						if(TAX_CODE_temp.elementAt(ii).equals(igst_code)) {
							IGST_TAX_U.add(TAX_AMOUNT_temp.elementAt(ii));
							IGST_TAX_RATE_U.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(cgst_code) || TAX_CODE_temp.elementAt(ii).equals(cgst_code_6)) {
							CGST_TAX_U.add(TAX_AMOUNT_temp.elementAt(ii));
							CGST_TAX_RATE_U.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(sgst_code) || TAX_CODE_temp.elementAt(ii).equals(sgst_code_6)) {
							SGST_TAX_U.add(TAX_AMOUNT_temp.elementAt(ii));
							SGST_TAX_RATE_U.add(FACTOR_temp.elementAt(ii));
						} 
						if(TAX_CODE_temp.elementAt(ii).equals(zgst_code)) {
							ZGST_TAX_U.add(TAX_AMOUNT_temp.elementAt(ii));
							ZGST_TAX_RATE_U.add(FACTOR_temp.elementAt(ii));
						}
					}
					if(!TAX_CODE_temp.contains(igst_code)) {
						IGST_TAX_U.add("-");
						IGST_TAX_RATE_U.add("-");
					}
					if(!TAX_CODE_temp.contains(cgst_code) && (!TAX_CODE_temp.contains(cgst_code_6))) {
						CGST_TAX_U.add("-");
						CGST_TAX_RATE_U.add("-");						
					}
					if(!TAX_CODE_temp.contains(sgst_code) && (!TAX_CODE_temp.contains(sgst_code_6))) {
						SGST_TAX_U.add("-");
						SGST_TAX_RATE_U.add("-");
					}
					if(!TAX_CODE_temp.contains(zgst_code)) {
						ZGST_TAX_U.add("-");
						ZGST_TAX_RATE_U.add("-");
					}
				}
			} else if(invoice_type.equals("O")) {

				//X-->REVERSE CHARGE...
				String query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
						+ "B.PACER_NO,B.VENDOR_SUPP_INV_REF "
						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('X') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO AND A.SUPPLIER_CD=B.SUPPLIER_CD ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
				//System.out.println("Fetching Data-11111-"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String new_no = "";
					if(rset.getString(18).equals("1"))
						new_no = "X"+":RCL"+rset.getString(2);
					else if(rset.getString(18).equals("2"))
						new_no = "X"+":RCP"+rset.getString(2);
					else
						new_no = "X"+":"+rset.getString(2);
					OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
					if(rset.getString(18).equals("1"))
						OTH_NEW_INV_SEQ_NO_X.add(rset.getString(2)==null?"":"RCL"+rset.getString(2));
					else if(rset.getString(18).equals("2"))
						OTH_NEW_INV_SEQ_NO_X.add(rset.getString(2)==null?"":"RCP"+rset.getString(2));
					else
						OTH_NEW_INV_SEQ_NO_X.add(rset.getString(2)==null?"":""+rset.getString(2));
					OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
					OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
					OTH_INVOICE_DT.put(new_no,rset.getString(8));
					OTH_INVOICE_TYPE.put(new_no,"REVERSE CHARGE");
					OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(5))));
					double gross_amt = Double.parseDouble(rset.getString(5));
					OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
					OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
					OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
					OTH_ITEM_DESCRIPTION.put(new_no,rset.getString(20)==null?"":rset.getString(20));
					OTH_SAC_CODE.put(new_no,rset.getString(21)==null?"":rset.getString(21));
					OTH_CUSTOMER_ABBR.put(new_no,rset.getString(22)==null?"":rset.getString(22).trim());
					OTH_CUSTOMER_STATE_CODE.put(new_no,rset.getString(23)==null?"":rset.getString(23));
					OTH_SUPPLIER_STATE_CODE.put(new_no,rset.getString(24)==null?"":rset.getString(24));
					OTH_TAX_CODE.put(new_no,rset.getString(28)==null?"":rset.getString(28));
					String tax_cd = rset.getString(28)==null?"":rset.getString(28);
					OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
					OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
					OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
					
					String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					if(rset1.next()) {
						OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
					} else {
						OTH_SUPPLIER_NAME.put(new_no,"");
					}
					
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_IGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_IGST_TAX.put(new_no,"-");
						OTH_IGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("C")) {
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_CGST_TAX_RATE.put(new_no,tax_rate);
						
						tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_SGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_CGST_TAX.put(new_no,"-");
						OTH_CGST_TAX_RATE.put(new_no,"-");
						OTH_SGST_TAX.put(new_no,"-");
						OTH_SGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("U")) {
						double tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_ZGST_TAX.put(new_no,"-");
						OTH_ZGST_TAX_RATE.put(new_no,"-");
					}
						
				}
				
				//N --> NPR...
				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
						+ "B.PACER_NO,B.VENDOR_SUPP_INV_REF "
						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('N') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO AND A.SUPPLIER_CD=B.SUPPLIER_CD ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
//				System.out.println("Fetching Data--"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String new_no = "N"+":"+rset.getString(2);
					OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
					OTH_NEW_INV_SEQ_NO_N.add(rset.getString(2)==null?"":""+rset.getString(2));
					OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
					OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
					OTH_INVOICE_DT.put(new_no,rset.getString(8));
					OTH_INVOICE_TYPE.put(new_no,"NPR");
					OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(5))));
					double gross_amt = Double.parseDouble(rset.getString(5));
					OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
					OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
					OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
					OTH_ITEM_DESCRIPTION.put(new_no,rset.getString(20)==null?"":rset.getString(20));
					OTH_SAC_CODE.put(new_no,rset.getString(21)==null?"":rset.getString(21));
					OTH_CUSTOMER_ABBR.put(new_no,rset.getString(22)==null?"":rset.getString(22).trim());
					OTH_CUSTOMER_STATE_CODE.put(new_no,rset.getString(23)==null?"":rset.getString(23));
					OTH_SUPPLIER_STATE_CODE.put(new_no,rset.getString(24)==null?"":rset.getString(24));
					OTH_TAX_CODE.put(new_no,rset.getString(28)==null?"":rset.getString(28));
					String tax_cd = rset.getString(28)==null?"":rset.getString(28);
					OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
					OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
					OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
					
					String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					if(rset1.next()) {
						OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
					} else {
						OTH_SUPPLIER_NAME.put(new_no,"");
					}
					
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_IGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_IGST_TAX.put(new_no,"-");
						OTH_IGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("C")) {
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_CGST_TAX_RATE.put(new_no,tax_rate);
						
						tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_SGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_CGST_TAX.put(new_no,"-");
						OTH_CGST_TAX_RATE.put(new_no,"-");
						OTH_SGST_TAX.put(new_no,"-");
						OTH_SGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("U")) {
						double tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_ZGST_TAX.put(new_no,"-");
						OTH_ZGST_TAX_RATE.put(new_no,"-");
					}
						
				}
				
				//1-->HPPL SHIPPING AGENT...
				
				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
						+ "B.PACER_NO,B.VENDOR_SUPP_INV_REF,B.HRS_BERTHING,B.TIME_SLOTS_BERTHING,"
						+ "B.GRT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),B.RATE,TO_CHAR(A.INVOICE_DT,'YYYYMMDD'),QUANTITY,IMPORTER,VESSEL_FLAG,VESSEL_CD "
						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('1') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
//				System.out.println("Fetching Data--"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String date=rset.getString(37)==null?"":rset.getString(37);
					String svessel_cd=rset.getString(41)==null?"":rset.getString(41);
					String date_flag="N";
					int newdt=Integer.parseInt(date);
					 int date_latest=20200401;
					 if(newdt<date_latest){
						 date_flag="Y";
					 }
					 String new_no="";
					if(date_flag.equalsIgnoreCase("Y")){
						OTH_NEW_INV_SEQ_NO_1.add(rset.getString(2)==null?"":rset.getString(2)+"/P");
						 new_no = "1"+":"+rset.getString(2)+"/P";
					}else{
						OTH_NEW_INV_SEQ_NO_1.add(rset.getString(2)==null?"":rset.getString(2));
						 new_no = "1"+":"+rset.getString(2)+"";
					}
					OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
					OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
					OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
					OTH_INVOICE_DT.put(new_no,rset.getString(8));
					OTH_INVOICE_TYPE.put(new_no,"HPPL SHIPPING AGENT");
					OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(13))));
					double gross_amt = Double.parseDouble(rset.getString(13));
					OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
					OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
					OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
					OTH_ITEM_DESCRIPTION.put(new_no,rset.getString(20)==null?"":rset.getString(20));
					OTH_SAC_CODE.put(new_no,rset.getString(21)==null?"":rset.getString(21));
					OTH_CUSTOMER_ABBR.put(new_no,rset.getString(22)==null?"":rset.getString(22));
					OTH_CUSTOMER_STATE_CODE.put(new_no,rset.getString(23)==null?"":rset.getString(23));
					OTH_SUPPLIER_STATE_CODE.put(new_no,rset.getString(24)==null?"":rset.getString(24));
					OTH_TAX_CODE.put(new_no,rset.getString(28)==null?"":rset.getString(28));
					String tax_cd = rset.getString(28)==null?"":rset.getString(28);
					OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
					OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
					OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
					OTH_HRS_BERTHING.put(new_no,rset.getString(32)==null?"":rset.getString(32));
					OTH_SLOTS_BERTHING.put(new_no,rset.getString(33)==null?"":rset.getString(33));
					OTH_GRT.put(new_no,rset.getString(34)==null?"":rset.getString(34));
					OTH_DUE_DATE.put(new_no,rset.getString(35)==null?"":rset.getString(35));
					OTH_SALE_PRICE.put(new_no,rset.getString(36)==null?"":nf2.format(Double.parseDouble(rset.getString(36))));
					OTH_QUANTITY.put(new_no,rset.getString(38)==null?"":rset.getString(38));
					OTH_IMPORTER.put(new_no,rset.getString(39)==null?"":rset.getString(39));
					OTH_VESSEL_FLAG.put(new_no,rset.getString(40)==null?"":rset.getString(40));
					
					
					String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					if(rset1.next()) {
						OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
					} else {
						OTH_SUPPLIER_NAME.put(new_no,"");
					}
					
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_IGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_IGST_TAX.put(new_no,"-");
						OTH_IGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("C")) {
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_CGST_TAX_RATE.put(new_no,tax_rate);
						
						tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_SGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_CGST_TAX.put(new_no,"-");
						OTH_CGST_TAX_RATE.put(new_no,"-");
						OTH_SGST_TAX.put(new_no,"-");
						OTH_SGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("U")) {
						double tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_ZGST_TAX.put(new_no,"-");
						OTH_ZGST_TAX_RATE.put(new_no,"-");
					}
					//fOR GETTING VESSEL NAME
					String queryStringc="SELECT ship_name FROM fms7_ship_mst WHERE ship_cd='"+svessel_cd+"' ";
//					System.out.println("---sdvjsd--"+queryStringc);
					rset1=stmt1.executeQuery(queryStringc);
					if(rset1.next())
					{
						OTH_VESSEL_NM.put(new_no,rset1.getString(1)==null?"":rset1.getString(1));
					}else{
						OTH_VESSEL_NM.put(new_no,"");
					}
					//
						
				}
				
				//2-->HPPL-HLPL...
//				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
//						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
//						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
//						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
//						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
//						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
//						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
//						+ "B.PACER_NO,B.VENDOR_SUPP_INV_REF,B.HRS_BERTHING,B.TIME_SLOTS_BERTHING,"
//						+ "B.CARGO_AMOUNT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),B.RATE,TO_CHAR(A.INVOICE_DT,'YYYYMMDD') "
//						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
//						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
//						+ "AND A.CONTRACT_TYPE IN ('2') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
//						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO ";
				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),TO_CHAR(A.INVOICE_DT,'YYYYMMDD') "
						+ "FROM FMS7_INVOICE_MST A WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('2') AND A.FLAG!='A' ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
				//System.out.println("Fetching Data--"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String date=rset.getString(21)==null?"":rset.getString(21);
					String date_flag="N";
					int newdt=Integer.parseInt(date);
					 int date_latest=20200401;
					 if(newdt<date_latest){
						 date_flag="Y";
					 }
					String new_no ="";
					
					String query1 = "SELECT  B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
							+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,B.rate "
							+ "FROM FMS8_OTHER_INVOICE_DTL B WHERE B.CONTRACT_TYPE IN ('2')  "
							+ "AND INV_SEQ_NO='"+rset.getString(1)+"' AND FINANCIAL_YEAR='"+rset.getString(11)+"' ";
					//System.out.println("Fetching Data--"+query1);
					rset2 = stmt2.executeQuery(query1);
					if(rset2.next()){
						if(date_flag.equalsIgnoreCase("Y")){
							OTH_NEW_INV_SEQ_NO_2.add(rset.getString(2)==null?"":rset.getString(2)+"/P");
							new_no = "2"+":"+rset.getString(2)+"/P";
						}else{
							OTH_NEW_INV_SEQ_NO_2.add(rset.getString(2)==null?"":rset.getString(2)+"");
							new_no = "2"+":"+rset.getString(2)+"";
						}
						OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
						OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
						OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
						OTH_INVOICE_DT.put(new_no,rset.getString(8));
						OTH_INVOICE_TYPE.put(new_no,"HPPL-HLPL");
						OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(5))));
						double gross_amt = Double.parseDouble(rset.getString(5));
						OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
						OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
						OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
						//OTH_ITEM_DESCRIPTION.put(new_no,rset1.getString(1)==null?"":rset1.getString(1));
						OTH_SAC_CODE.put(new_no,rset2.getString(1)==null?"":rset2.getString(1));
						OTH_CUSTOMER_ABBR.put(new_no,rset2.getString(2)==null?"":rset2.getString(2));
						OTH_CUSTOMER_STATE_CODE.put(new_no,rset2.getString(3)==null?"":rset2.getString(3));
						OTH_SUPPLIER_STATE_CODE.put(new_no,rset2.getString(4)==null?"":rset2.getString(4));
						OTH_TAX_CODE.put(new_no,rset2.getString(8)==null?"":rset2.getString(8));
						String tax_cd = rset2.getString(8)==null?"":rset2.getString(8);
//						OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
						/*OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
						OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
						OTH_HRS_BERTHING.put(new_no,rset.getString(32)==null?"":rset.getString(32));
						OTH_SLOTS_BERTHING.put(new_no,rset.getString(33)==null?"":rset.getString(33));*/
						OTH_GRT.put(new_no,rset.getString(13)==null?"":nf3.format(Double.parseDouble(rset.getString(13))));
						OTH_DUE_DATE.put(new_no,rset.getString(20)==null?"":rset.getString(20));
						OTH_SALE_PRICE.put(new_no,"-");
						
						String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
								+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
								+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
						rset1 = stmt1.executeQuery(supp_nm);
						if(rset1.next()) {
							OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
						} else {
							OTH_SUPPLIER_NAME.put(new_no,"");
						}
						
						supp_nm = "SELECT GSTIN_NO FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(4)+"' "
								+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
								+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(4)+"' )";
						rset1 = stmt1.executeQuery(supp_nm);
						if(rset1.next()) {
							OTH_GSTIN_NO.put(new_no,rset1.getString(1)==null?"":rset1.getString(1));
						} else {
							OTH_GSTIN_NO.put(new_no,"");
						}
						
						if(tax_cd.equals("I")) {
							double tax_rate = Double.parseDouble(rset2.getString(7)==null?"1":rset2.getString(7));
							double tax_amt = Math.round((gross_amt * tax_rate)/100);
							
							OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
							OTH_IGST_TAX_RATE.put(new_no,tax_rate);
						} else {
							OTH_IGST_TAX.put(new_no,"-");
							OTH_IGST_TAX_RATE.put(new_no,"-");
						}
						if(tax_cd.equals("C")) {
							double tax_rate = Double.parseDouble(rset2.getString(5)==null?"1":rset2.getString(5));
							double tax_amt = Math.round((gross_amt * tax_rate)/100);
							
							OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
							OTH_CGST_TAX_RATE.put(new_no,tax_rate);
							
							tax_rate = Double.parseDouble(rset2.getString(6)==null?"1":rset2.getString(6));
							tax_amt = Math.round((gross_amt * tax_rate)/100);
							
							OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
							OTH_SGST_TAX_RATE.put(new_no,tax_rate);
						} else {
							OTH_CGST_TAX.put(new_no,"-");
							OTH_CGST_TAX_RATE.put(new_no,"-");
							OTH_SGST_TAX.put(new_no,"-");
							OTH_SGST_TAX_RATE.put(new_no,"-");
						}
						if(tax_cd.equals("U")) {
							double tax_rate = Double.parseDouble(rset2.getString(6)==null?"1":rset2.getString(6));
							double tax_amt = Math.round((gross_amt * tax_rate)/100);
							
							OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
							OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
						} else {
							OTH_ZGST_TAX.put(new_no,"-");
							OTH_ZGST_TAX_RATE.put(new_no,"-");
						}
					
					}
					
					
				}
				
				
				//Y-->COST RECHARGE HPPL...
				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
						+ "B.PURCHASE_NO,B.REFERENCE_NO,B.HRS_BERTHING,B.TIME_SLOTS_BERTHING,"
						+ "B.CARGO_AMOUNT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),B.RATE "
						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('Y') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO AND A.SUPPLIER_CD=B.SUPPLIER_CD ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
//				System.out.println("Fetching Data--"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String new_no = "Y"+":"+rset.getString(2);
					OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
					OTH_NEW_INV_SEQ_NO_Y.add(rset.getString(2)==null?"":rset.getString(2));
					OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
					OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
					OTH_INVOICE_DT.put(new_no,rset.getString(8));
					OTH_INVOICE_TYPE.put(new_no,"COST RECHARGE HPPL");
					OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(5))));
					double gross_amt = Double.parseDouble(rset.getString(5));
					OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
					OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
					OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
					OTH_ITEM_DESCRIPTION.put(new_no,rset.getString(20)==null?"":rset.getString(20));
					OTH_SAC_CODE.put(new_no,rset.getString(21)==null?"":rset.getString(21));
					OTH_CUSTOMER_ABBR.put(new_no,rset.getString(22)==null?"":rset.getString(22));
					OTH_CUSTOMER_STATE_CODE.put(new_no,rset.getString(23)==null?"":rset.getString(23));
					OTH_SUPPLIER_STATE_CODE.put(new_no,rset.getString(24)==null?"":rset.getString(24));
					OTH_TAX_CODE.put(new_no,rset.getString(28)==null?"":rset.getString(28));
					String tax_cd = rset.getString(28)==null?"":rset.getString(28);
					OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
					OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
					OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
					OTH_HRS_BERTHING.put(new_no,rset.getString(32)==null?"":rset.getString(32));
					OTH_SLOTS_BERTHING.put(new_no,rset.getString(33)==null?"":rset.getString(33));
					OTH_GRT.put(new_no,rset.getString(34)==null?"":nf3.format(Double.parseDouble(rset.getString(34))));
					OTH_DUE_DATE.put(new_no,rset.getString(35)==null?"":rset.getString(35));
					OTH_SALE_PRICE.put(new_no,rset.getString(36)==null?"":nf2.format(Double.parseDouble(rset.getString(36))));
					
					String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					if(rset1.next()) {
						OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
					} else {
						OTH_SUPPLIER_NAME.put(new_no,"");
					}
					
//					supp_nm = "SELECT GSTIN_NO FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(4)+"' "
//							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
//							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(4)+"' )";
//					rset1 = stmt1.executeQuery(supp_nm);
//					if(rset1.next()) {
//						OTH_GSTIN_NO.put(new_no,rset1.getString(1)==null?"":rset1.getString(1));
//					} else {
//						OTH_GSTIN_NO.put(new_no,"");
//					}
					
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_IGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_IGST_TAX.put(new_no,"-");
						OTH_IGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("C")) {
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_CGST_TAX_RATE.put(new_no,tax_rate);
						
						tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_SGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_CGST_TAX.put(new_no,"-");
						OTH_CGST_TAX_RATE.put(new_no,"-");
						OTH_SGST_TAX.put(new_no,"-");
						OTH_SGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("U")) {
						double tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_ZGST_TAX.put(new_no,"-");
						OTH_ZGST_TAX_RATE.put(new_no,"-");
					}
						
				}
				
				//Z-->FIXED ASSET SCRAP INVOICE...
				
				query = "SELECT HLPL_INV_SEQ_NO,NEW_INV_SEQ_NO,A.CONTRACT_TYPE,A.CUSTOMER_CD,"
						+ "GROSS_AMT_INR,NET_AMT_INR,A.FLAG,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EMP_CD,A.TAX_AMT_INR,"
						+ "A.FINANCIAL_YEAR,NVL(A.INV_CUR_FLAG,''),A.GROSS_AMT_USD,NVL(A.CHECKED_FLAG,'N'),"
						+ "NVL(A.APPROVED_FLAG,'N'),NVL(TO_CHAR(A.CHECKED_DT,'DD/MM/YYYY'),''),"
						+ "NVL(TO_CHAR(A.APPROVED_DT,'DD/MM/YYYY'),''),A.SUPPLIER_CD,A.TAX_STRUCT_CD,"
						+ "B.ITEM_DESCRIPTION, B.SAC_CODE,B.CUSTOMER_NM,B.CUSTOMER_STATE_CD,"
						+ "B.SUPPLIER_STATE_CD,RATE_CGST,RATE_SGST,RATE_IGST,B.TAX_CD,B.CUST_GSTIN_NO,"
						+ "B.SALE_NO,B.GATE_PASS_NO,B.HRS_BERTHING,B.TIME_SLOTS_BERTHING,"
						+ "B.CARGO_AMOUNT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),B.RATE,NVL(B.HSN_CODE,''),NVL(B.FLAG_SAC,''),B.QUANTITY,B.UAM_NO "
						+ "FROM FMS7_INVOICE_MST A, FMS8_OTHER_INVOICE_DTL B WHERE A.INVOICE_DT "
						+ "BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') "
						+ "AND A.CONTRACT_TYPE IN ('Z') AND A.FLAG!='A' AND A.CONTRACT_TYPE=B.CONTRACT_TYPE "
						+ "AND A.FINANCIAL_YEAR=B.FINANCIAL_YEAR AND A.HLPL_INV_SEQ_NO=B.INV_SEQ_NO AND A.SUPPLIER_CD=B.SUPPLIER_CD ";
				if(!customer_cd.equals("") && !customer_cd.equals("0")) {
					query += "AND A.CUSTOMER_CD='"+customer_cd+"' ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				} else {
					query += "ORDER BY A.SUPPLIER_CD,A.NEW_INV_SEQ_NO,A.INVOICE_DT ";
				}
				//System.out.println("Fetching Data--"+query);
				rset = stmt.executeQuery(query);
				while(rset.next()) {
					String new_no = "Z"+":"+rset.getString(2);
					String tax_cd = rset.getString(28)==null?"":rset.getString(28);
					String hsnCode = rset.getString(37)==null?"":rset.getString(37);
					String hsnFlag = rset.getString(38)==null?"":rset.getString(38);
					//System.out.println("hsnFlag Data--"+hsnFlag);
					if(!OTH_NEW_INV_SEQ_NO_Z.contains(rset.getString(2))) 
					{
						cnt++;
					}
					OTH_HLPL_INV_SEQ_NO.put(new_no,rset.getString(1));
					OTH_NEW_INV_SEQ_NO_Z.add(rset.getString(2)==null?"":rset.getString(2));
					OTH_CUSTOMER_CD.put(new_no,rset.getString(4));
					OTH_NET_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(6))));
					OTH_INVOICE_DT.put(new_no,rset.getString(8));
					OTH_INVOICE_TYPE.put(new_no,"SCRAP FIXED ASSET");
					OTH_GROSS_AMT_INR.put(new_no,nf3.format(Double.parseDouble(rset.getString(5))));
					double gross_amt = Double.parseDouble(rset.getString(5));
					OTH_TAX_AMT.put(new_no,rset.getString(10)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(10))));
					OTH_SUPPLIER_CD.put(new_no,rset.getString(18)==null?"1":rset.getString(18));
					OTH_TAX_STRUCT_CD.put(new_no,rset.getString(19)==null?"0":rset.getString(19));
					OTH_ITEM_DESCRIPTION.put(new_no,rset.getString(20)==null?"":rset.getString(20));
					if(hsnFlag.equals("P")){
						VOTH_SAC_CODE.add(rset.getString(37)==null?"":rset.getString(37));
					}else{
						VOTH_SAC_CODE.add(rset.getString(21)==null?"":rset.getString(21));
					}
					double gross_amt_itemn = Double.parseDouble(rset.getString(34));
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt_itemn * tax_rate)/100);
						
						VOTH_IGST_TAX.add(nf3.format(tax_amt));
						VOTH_CGST_TAX.add("");
						VOTH_SGST_TAX.add("");
					}else{
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt_itemn * tax_rate)/100);
						VOTH_IGST_TAX.add("");
						VOTH_CGST_TAX.add(nf3.format(tax_amt));
						VOTH_SGST_TAX.add(nf3.format(tax_amt));
					}
					VOTH_QUANTITY.add(rset.getString(39)==null?"":rset.getString(39));
					VOTH_UAMNO.add(rset.getString(40)==null?"":rset.getString(40));
					OTH_CUSTOMER_ABBR.put(new_no,rset.getString(22)==null?"":rset.getString(22).trim());
					OTH_CUSTOMER_STATE_CODE.put(new_no,rset.getString(23)==null?"":rset.getString(23));
					OTH_SUPPLIER_STATE_CODE.put(new_no,rset.getString(24)==null?"":rset.getString(24));
					OTH_TAX_CODE.put(new_no,rset.getString(28)==null?"":rset.getString(28));
					
//					OTH_GSTIN_NO.put(new_no,rset.getString(29)==null?"":rset.getString(29));
					OTH_PACER_NO.put(new_no,rset.getString(30)==null?"":rset.getString(30));
					OTH_VENDOR_SUPP_INV_REF_NO.put(new_no,rset.getString(31)==null?"":rset.getString(31));
					OTH_HRS_BERTHING.put(new_no,rset.getString(32)==null?"":rset.getString(32));
					OTH_SLOTS_BERTHING.put(new_no,rset.getString(33)==null?"":rset.getString(33));
					OTH_GRT.put(new_no,rset.getString(34)==null?"":nf3.format(Double.parseDouble(rset.getString(34))));
					OTH_DUE_DATE.put(new_no,rset.getString(35)==null?"":rset.getString(35));
					OTH_SALE_PRICE.put(new_no,rset.getString(36)==null?"":nf2.format(Double.parseDouble(rset.getString(36))));
					
					String supp_nm = "SELECT SUPPLIER_ABBR FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(18)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(18)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					if(rset1.next()) {
						OTH_SUPPLIER_NAME.put(new_no,rset1.getString(1));
					} else {
						OTH_SUPPLIER_NAME.put(new_no,"");
					}
					
					/*supp_nm = "SELECT GSTIN_NO FROM FMS7_SUPPLIER_MST WHERE SUPPLIER_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND SUPPLIER_CD='"+rset.getString(4)+"' )";*/
					supp_nm = "SELECT GSTIN_NO FROM FMS8_VENDOR_MST WHERE VENDOR_CD='"+rset.getString(4)+"' "
							+ "AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS8_VENDOR_MST WHERE EFF_DT "
							+ "<= TO_DATE('"+rset.getString(8)+"','DD/MM/YYYY') AND VENDOR_CD='"+rset.getString(4)+"' )";
					rset1 = stmt1.executeQuery(supp_nm);
					//System.out.println("supp_nm Data--"+supp_nm);
					if(rset1.next()) {
						OTH_GSTIN_NO.put(new_no,rset1.getString(1)==null?"":rset1.getString(1));
					} else {
						OTH_GSTIN_NO.put(new_no,"");
					}
					
					if(tax_cd.equals("I")) {
						double tax_rate = Double.parseDouble(rset.getString(27)==null?"1":rset.getString(27));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_IGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_IGST_TAX_RATE.put(new_no,nf3.format(tax_rate));
					} else {
						OTH_IGST_TAX.put(new_no,"-");
						OTH_IGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("C")) {
						double tax_rate = Double.parseDouble(rset.getString(25)==null?"1":rset.getString(25));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_CGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_CGST_TAX_RATE.put(new_no,nf3.format(tax_rate));
						
						tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_SGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_SGST_TAX_RATE.put(new_no,nf3.format(tax_rate));
					} else {
						OTH_CGST_TAX.put(new_no,"-");
						OTH_CGST_TAX_RATE.put(new_no,"-");
						OTH_SGST_TAX.put(new_no,"-");
						OTH_SGST_TAX_RATE.put(new_no,"-");
					}
					if(tax_cd.equals("U")) {
						double tax_rate = Double.parseDouble(rset.getString(26)==null?"1":rset.getString(26));
						double tax_amt = Math.round((gross_amt * tax_rate)/100);
						
						OTH_ZGST_TAX.put(new_no,nf3.format(tax_amt));
						OTH_ZGST_TAX_RATE.put(new_no,tax_rate);
					} else {
						OTH_ZGST_TAX.put(new_no,"-");
						OTH_ZGST_TAX_RATE.put(new_no,"-");
					}
					
					if(hsnFlag.equals("P") && !hsnCode.equals("")) {
						if(tax_cd.equals("I")) {
							query = "SELECT SUM(ROUND(((RATE_IGST*CARGO_AMOUNT)/100),0)) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
									+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
									+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' ";
							rset1 = stmt1.executeQuery(query);
							if(rset1.next()) {
								double taxAmt = rset1.getDouble(1);
								OTH_IGST_TAX.put(new_no,nf3.format(taxAmt));
								
								String taxcd = "";
//								query = "SELECT DISTINCT NVL(RATE_IGST,0) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
//										+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
//										+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' ";
								query = "SELECT  NVL(RATE_IGST,0) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
										+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
										+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' and hsn_code='"+rset.getString(37)+"' ";
								rset2 = stmt2.executeQuery(query);
								while(rset2.next()) {
									if(taxcd.equals(""))
										taxcd = nf3.format(rset2.getDouble(1));
									else
										taxcd = ""+nf3.format(rset2.getDouble(1));
									
									VOTH_IGST_TAX_RATE.add(taxcd);
									VOTH_SGST_TAX_RATE.add("");
									VOTH_CGST_TAX_RATE.add("");
								}
								OTH_IGST_TAX_RATE.put(new_no,taxcd);
							}
						} else if(tax_cd.equals("C")) {
							query = "SELECT SUM(ROUND(((RATE_CGST*CARGO_AMOUNT)/100),0)),SUM(ROUND(((RATE_SGST*CARGO_AMOUNT)/100),0)) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
									+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
									+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' ";
							rset1 = stmt1.executeQuery(query);
							if(rset1.next()) {
								double taxAmt = rset1.getDouble(1);
								OTH_CGST_TAX.put(new_no,nf3.format(taxAmt));
								taxAmt = Math.round(rset1.getDouble(2));
								OTH_SGST_TAX.put(new_no,nf3.format(taxAmt));
								
								String taxcd1 = "", taxcd2 = "";
//								query = "SELECT DISTINCT NVL(RATE_SGST,0),NVL(RATE_CGST,0) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
//										+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
//										+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' ";
//								rset1 = stmt1.executeQuery(query);
								query = "SELECT NVL(RATE_SGST,0),NVL(RATE_CGST,0) FROM FMS8_OTHER_INVOICE_DTL b WHERE "
										+ "B.CONTRACT_TYPE='Z' AND B.FINANCIAL_YEAR='"+rset.getString(11)+"' AND B.INV_SEQ_NO='"+rset.getString(1)+"'"
										+ "AND B.SUPPLIER_CD='"+rset.getString(18)+"' and hsn_code='"+rset.getString(37)+"' ";
								//System.out.println("supp_nm Data--"+query);
								rset2 = stmt2.executeQuery(query);
								while(rset2.next()) {
									if(taxcd1.equals(""))
										taxcd1 = nf3.format(rset2.getDouble(1));
									else
										taxcd1 = ""+nf3.format(rset2.getDouble(1));
									
									if(taxcd2.equals(""))
										taxcd2 = nf3.format(rset2.getDouble(2));
									else
										taxcd2 = ""+nf3.format(rset2.getDouble(2));
									
									VOTH_SGST_TAX_RATE.add(taxcd1);
									VOTH_CGST_TAX_RATE.add(taxcd2);
									VOTH_IGST_TAX_RATE.add("");
								}
								OTH_SGST_TAX_RATE.put(new_no,taxcd1);
								OTH_CGST_TAX_RATE.put(new_no,taxcd2);
							}
						} 
					}
		//		}
//					System.out.println("supp_nm OTH_SGST_TAX_RATE--"+OTH_SGST_TAX_RATE);
//					System.out.println("supp_nm OTH_CGST_TAX_RATE--"+OTH_CGST_TAX_RATE);	
					}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	String monthRpt = "0", yearRpt = "0";
	int maxYear = 0; int minYear = 0;
	
	public void fetchMaxYearForCargo() throws Exception {
		try {
			String queryString = "SELECT MIN(TO_CHAR(ACTUAL_RECPT_DT,'YYYY')), MAX(TO_CHAR(ACTUAL_RECPT_DT,'YYYY')) FROM FMS8_LNG_REGAS_CARGO_DTL";
			rset = stmt.executeQuery(queryString);
			if(rset.next()) {
				minYear = rset.getInt(1);
				maxYear = rset.getInt(2);
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	Vector rpt_customer_name = new Vector();
	Vector rpt_vessel_name = new Vector();
	Vector rpt_supp_name = new Vector();
	Vector rpt_act_recpt_date = new Vector();
	Vector rpt_adq_qty = new Vector();
	Vector rpt_cargo_ref_no = new Vector();
	
	public void LtcoraCnCargoDtlRpt() throws Exception {
		try {
			fetchMaxYearForCargo();
			
			Vector rpt_map_id = new Vector();
			Vector rpt_vessel_cd = new Vector();
			Vector rpt_supp_cd = new Vector();
			
			
			if(!monthRpt.equals("0") && !yearRpt.equals("0")) {
				//fetch cargo details for selected month and year based on actual receipt date.....
				
				String queryString = "SELECT MAPPING_ID,CARGO_REF_NO,SHIP_CD,SUPP_CD,TO_CHAR(ACTUAL_RECPT_DT,'DD/MM/YYYY'),NVL(ADQ_QTY,'') FROM "
						+ "FMS8_LNG_REGAS_CARGO_DTL WHERE TO_CHAR(ACTUAL_RECPT_DT,'MM')='"+monthRpt+"' AND TO_CHAR(ACTUAL_RECPT_DT,'YYYY') = '"+yearRpt+"' ORDER BY ACTUAL_RECPT_DT";
				rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					String mapId = rset.getString(1)==null?"":rset.getString(1);
					rpt_map_id.add(mapId);
					
					if(!mapId.equals("")) {
						String mappingId[] = mapId.split("-");
						String cust_cd = mappingId[0];
						
						String custNameQuery = "SELECT CUSTOMER_ABBR,CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+cust_cd+"' AND EFF_DT=(SELECT MAX(EFF_DT) FROM "
								+ "FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+cust_cd+"' AND EFF_DT<=TO_DATE('"+rset.getString(5)+"','DD/MM/YYYY')) ";
						rset1 = stmt1.executeQuery(custNameQuery);
						if(rset1.next()) {
							rpt_customer_name.add(rset1.getString(2)==null?rset1.getString(1):rset1.getString(2));
						} else {
							rpt_customer_name.add(cust_cd);
						}
					}
					
					rpt_cargo_ref_no.add(rset.getString(2)==null?"":rset.getString(2));
					
					String vesselCd = rset.getString(3)==null?"":rset.getString(3);
					rpt_vessel_cd.add(vesselCd);
					
					if(!vesselCd.equals("")) {
						String vesselName = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+vesselCd+"' ";
						rset1 = stmt1.executeQuery(vesselName);
						if(rset1.next()) {
							rpt_vessel_name.add(rset1.getString(1)==null?"":rset1.getString(1));
						} else {
							rpt_vessel_name.add(vesselCd);
						}
					} else {
						rpt_vessel_name.add(vesselCd);
					}
					
					String suppCd = rset.getString(4)==null?"":rset.getString(4); 
					rpt_supp_cd.add(suppCd);
					
					if(!suppCd.equals("")) {
						String vesselName = "SELECT TRADER_NAME FROM FMS7_TRADER_MST WHERE TRADER_CD='"+suppCd+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM "
								+ "FMS7_TRADER_MST WHERE TRADER_CD='"+suppCd+"' AND EFF_DT<=TO_DATE('"+rset.getString(5)+"','DD/MM/YYYY')) ";
						rset1 = stmt1.executeQuery(vesselName);
						if(rset1.next()) {
							rpt_supp_name.add(rset1.getString(1)==null?"":rset1.getString(1));
						} else {
							rpt_supp_name.add(suppCd);
						}
					} else {
						rpt_supp_name.add(suppCd);
					}
					
					rpt_act_recpt_date.add(rset.getString(5)==null?"":rset.getString(5));
					rpt_adq_qty.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	public HttpServletRequest request = null;
	
	
	private String checkforTDSApplicable(String invoice_date,String cust_cd,String fin_yr,String hlpl_inv_seq_no,String commodity,String inv_type,String sup_state_cd)throws SQLException {
		
		String prev_fin_Yr = "";
		String tds_app_flag = "N";
		tds_app_amt = "0";
		try {
			/*String prev_finYr = "select  "
					+ " (TO_NUMBER(TO_CHAR(ADD_MONTHS (to_date('"+invoice_date+"','dd/mm/yyyy'), -3),'YYYY'))-1) "
					+ " || '-' || "
					+ " (TO_NUMBER(TO_CHAR(ADD_MONTHS (to_date('"+invoice_date+"','dd/mm/yyyy'), 9),'YYYY'))-1) prev_fin_yr FROM DUAL";
//			System.out.println("prev_finYr----"+prev_finYr);
			rset = stmt.executeQuery(prev_finYr);
			if(rset.next()) {
				prev_fin_Yr = rset.getString(1)==null?"":rset.getString(1);
			}
			
			String TDSFlagSql = "select nvl(TURNOVER_FLAG,'N') from FMS7_CUSTOMER_TURNOVER_DTL"
					+ " where CUSTOMER_CD= '"+cust_cd+"' "
					+ " and FINANCIAL_YEAR = '"+prev_fin_Yr+"' "
					+ " and TURNOVER_CD = '1'"
					+ " and TURNOVER_FLAG = 'Y' "; 
//			System.out.println("TDSFlagSql-----"+TDSFlagSql);
			rset = stmt.executeQuery(TDSFlagSql);
			if(rset.next()) {
				tds_app_flag = rset.getString(1)==null?"N":rset.getString(1);
			}*/
		
			/*checking transaction amount for TDS */
			String tdsCntSql = "select nvl(INVOICE_GROSS_AMT,0) from FMS7_INVOICE_TDS_DTL WHERE "
					+ " CUSTOMER_CD='"+cust_cd+"'"
					+ " AND FINANCIAL_YEAR='"+fin_yr+"'"
					+ " AND HLPL_INV_SEQ_NO = '"+hlpl_inv_seq_no+"'"
					+ " AND COMMODITY_TYPE = '"+commodity+"'"
					+ " AND INVOICE_TYPE = '"+inv_type+"' "
					+ " AND CONTRACT_TYPE in ('S','L') "
					+ " AND FLAG='Y'"
					+ " AND SUP_STATE_CODE = '"+sup_state_cd+"' ";
			//System.out.println("tdsCntSql----"+tdsCntSql);
			rset3 = stmt3.executeQuery(tdsCntSql);
			if(rset3.next()) {
				tds_app_amt = rset3.getString(1)==null?"0":rset3.getString(1);
				tds_app_flag = "Y";
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return tds_app_flag;
	}

	public void fetch_Invoice_Details_exceedcode() 						//BK20160309
	{
		try
		{

			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sbc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ZVAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zvat_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ZGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
					+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
					// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString---"+queryString);
			if(rset.next()){
				
				queryString1 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
						  "tax_code="+rset.getString(1)+"";
				//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tcs_nm=rset1.getString(2)==null?"":rset1.getString(2);
					tcs_sht_nm=rset1.getString(1)==null?"":rset1.getString(1);
					tcs_nm=tcs_sht_nm;
				}
				tcs_fact=rset.getString(2)==null?"":rset.getString(2);
			}
			
			for(int j=0;j<Vinv_gen_by_cd.size();j++)
			{
				queryString2="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vinv_gen_by_cd.elementAt(j)+"'";
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					if(rset2.getString(1)!=null)
						Vinv_gen_by_nm.add(rset2.getString(1));
					else
						Vinv_gen_by_nm.add("-");
								
					if(rset2.getString(2)!=null)
						Vinv_gen_by_emailid.add(rset2.getString(2));
					else
						Vinv_gen_by_emailid.add("-");
				}
				else
				{
					Vinv_gen_by_nm.add("-");
					Vinv_gen_by_emailid.add("-");
				}
				
				queryString3="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vchecked_by_cd.elementAt(j)+"'";
				rset3=stmt3.executeQuery(queryString3);
				if(rset3.next())
				{
					if(rset3.getString(1)!=null)
						Vchecked_by_nm.add(rset3.getString(1));
					else
						Vchecked_by_nm.add("-");
					
					if(rset3.getString(2)!=null)
						Vchecked_by_emailid.add(rset3.getString(2));
					else
						Vchecked_by_emailid.add("-");
				}
				else
				{
					Vchecked_by_nm.add("-");
					Vchecked_by_emailid.add("-");
				}
				
				queryString4="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vapproved_by_cd.elementAt(j)+"'";
				//System.out.println("querysss----"+queryString4);
				rset4=stmt4.executeQuery(queryString4);
				if(rset4.next())
				{
					if(rset4.getString(1)!=null)
						Vapproved_by_nm.add(rset4.getString(1));
					else
						Vapproved_by_nm.add("-");
					
					if(rset4.getString(2)!=null)
						Vapproved_by_emailid.add(rset4.getString(2));
					else
						Vapproved_by_emailid.add("-");
				}
				else
				{
					Vapproved_by_nm.add("-");
					Vapproved_by_emailid.add("-");
				}
				//System.out.println("Vprint_by_cd---"+Vprint_by_cd);
				String printcd="";
				if(Vprint_by_cd.elementAt(j).equals("-")){
					printcd="";
				}else{
					printcd=Vprint_by_cd.elementAt(j)+"";
				}
				queryString5="select emp_nm,email_id from hr_emp_mst where emp_cd='"+printcd+"'";
				//System.out.println("query---"+queryString5);
				rset5=stmt5.executeQuery(queryString5);
				if(rset5.next())
				{
					if(rset5.getString(1)!=null)
						Vprint_by_nm.add(rset5.getString(1)==null?"":rset5.getString(1));
					else
						Vprint_by_nm.add("-");
								
					if(rset5.getString(2)!=null)
						Vprint_by_emailid.add(rset5.getString(2)==null?"":rset5.getString(2));
					else
						Vprint_by_emailid.add("-");
				}
				else
				{
					Vprint_by_nm.add("-");
					Vprint_by_emailid.add("-");
				}
			}
			
			String logged_on_user_nm="";
			
			queryString2="select emp_nm,email_id from hr_emp_mst where emp_cd='"+emp_cd+"'";
			rset2=stmt2.executeQuery(queryString2);
			while(rset2.next())
			{
				if(rset2.getString(1)!=null)
					logged_on_user_nm=rset2.getString(1);
				else
					logged_on_user_nm="-";
				
				if(rset2.getString(2)!=null)
					logged_on_user_emailid=rset2.getString(2);
				else
					logged_on_user_emailid="";
			}
			
			if(For1.equalsIgnoreCase("insert"))
			{
				queryString2="select form_cd,form_name from sec_form_mst where form_name like 'Invoice Payment Entry%'";
				rset2=stmt2.executeQuery(queryString2);
				while(rset2.next())
				{
					formcd=rset2.getString(1);
					formname=rset2.getString(2);
				}
			}
			else if(For1.equalsIgnoreCase("update"))
			{
				queryString2="select form_cd,form_name from sec_form_mst where form_name like 'Invoice Payment Update%'";
				rset2=stmt2.executeQuery(queryString2);
				while(rset2.next())
				{
					formcd=rset2.getString(1);
					formname=rset2.getString(2);
				}
			}
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
			e.printStackTrace();
		}
	}
	public void fetch_Invoice_Details_old_20160309() 						//BK20160309
	{
		try
		{
			////System.out.println("---JAVA fetch_Invoice_Details() starts---");
			
			String from_dt="01/"+month+"/"+year;
			String to_dt="";
			
			queryString="Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt=rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			
			queryString="Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			////System.out.println("-JAVA--from_dt---:"+from_dt);
			////System.out.println("-JAVA--to_dt---:"+to_dt);
			////System.out.println("-JAVA--mon---:"+mon);
			////System.out.println("-JAVA--to_mon---:"+to_mon);
			
			if(segment.equalsIgnoreCase("SALES"))
			{
				contract_type="S";
			}
			else if(segment.equalsIgnoreCase("REGAS"))
			{
				contract_type="R";
			}
			else if(segment.equalsIgnoreCase("LTCORA_CN"))
			{
				contract_type="C";
			} 
			else if(segment.equalsIgnoreCase("LOA"))
			{
				contract_type="L";
			}
			
			Vector Vadvflag=new Vector();
			Vector Vmapid=new Vector();
			
			String tax_cd="";
			String tax_on="";
			
			double tax_amt=0;
			double adj_tax_inr=0;
			String Adj_Tax_amt="0";
			//String amt="";
			String hlpl_inv_no_disp="";
			String xml_gen_flag="";
			String approval_dt="";
			String tax_adj_amt="";
			String taxadvflag="";
			String inv_adj_amt="";
			String advflag="";
			String sn_no="";
			String taxvalue="";
			String gross_amt_inr="";
			String invamtinr="";
			String fyr="";
			double total_amt_inr=0;
			String tax_str_cd="";
			
			int cnt=0;
			String queryString123="";
			String pdf_inv_dtl="";
			String print_by_ori="";
			String print_by_dup="";
			String print_by_tri="";
			
			////System.out.println("---invstatus---:"+invstatus);
			////System.out.println("---customer_cd---:"+customer_cd);
			
			if(!customer_cd.equalsIgnoreCase(""))
			{
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
								 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,PAY_RECV_AMT,TO_CHAR(PAY_RECV_DT,'DD/MM/YYYY'),PAY_REMARK,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT,TO_CHAR(PAY_UPDATE_DT,'DD/MM/YYYY'),PAY_UPDATE_CNT " +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND CUSTOMER_CD='"+customer_cd+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NOT NULL AND PAY_INSERT_BY IS NOT NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
				else
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT,TO_CHAR(PAY_UPDATE_DT,'DD/MM/YYYY'),PAY_UPDATE_CNT " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND CUSTOMER_CD='"+customer_cd+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NULL AND PAY_INSERT_BY IS NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
			}
			else
			{
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
								 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,PAY_RECV_AMT,TO_CHAR(PAY_RECV_DT,'DD/MM/YYYY'),PAY_REMARK,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT,TO_CHAR(PAY_UPDATE_DT,'DD/MM/YYYY'),PAY_UPDATE_CNT " +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NOT NULL AND PAY_INSERT_BY IS NOT NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
				else
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT,TO_CHAR(PAY_UPDATE_DT,'DD/MM/YYYY'),PAY_UPDATE_CNT " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NULL AND PAY_INSERT_BY IS NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
			}
			
			////System.out.println("===fetch Invoice queryString123===: "+queryString123);
			rset1=stmt1.executeQuery(queryString123);
			while(rset1.next())
			{
				cnt++;
				//////System.out.println("===JAVA===1");
				
				Vmonth.add(rset1.getString(1));
				Vcustomer_cd.add(rset1.getString(2));
				
				String queryString1 = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset1.getString(2)+"'";
				rset=stmt.executeQuery(queryString1);
				while(rset.next())
				{
					Vcustomer_abbr.add(rset.getString(2));
				}
				
				hlpl_inv_seq_no=rset1.getString(3);
				Vhlplinvseqno.add(rset1.getString(3));
				Vinv_dt.add(rset1.getString(4));
				Vsales_value.add(rset1.getString(5));
				gross_amt_inr=rset1.getString(5);
				Vinv_value.add(rset1.getString(6));
				Vdue_dt.add(rset1.getString(7));
				Vcont_type.add(rset1.getString(8));
				Vfinancial_year.add(rset1.getString(9));
				Vtax_str_cd.add(rset1.getString(10));
				Vtaxamtinr.add(rset1.getString(11));
				Vinvamtinr.add(rset1.getString(12));
				
				invamtinr=rset1.getString(12);
				sn_no=rset1.getString(13);
				taxvalue=rset1.getString(11);
				fyr=rset1.getString(9);
				total_amt_inr=Double.parseDouble(rset1.getString(6));
				tax_str_cd=rset1.getString(10);
				
				//String invseq=contract_type+":"+financial_year+":"+hlpl_inv_seq_no+":%";
				String invseq=rset1.getString(8)+":"+rset1.getString(9)+":"+rset1.getString(3)+":"+rset1.getString(4);
				Vinvseqno.add(invseq);
				
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					Vpay_actual_recv_amt.add(rset1.getString(14));
					Vpay_recv_dt.add(rset1.getString(15));
					Vpay_remark.add(rset1.getString(16));
					
					double short_recv=Double.parseDouble(rset1.getString(6))-Double.parseDouble(rset1.getString(14));
					Vpay_short_recv_amt.add(short_recv+"");
					Vpayflag.add("PAID");
					
					Vinv_gen_by_cd.add(rset1.getString(17));
					Vchecked_by_cd.add(rset1.getString(18));
					Vapproved_by_cd.add(rset1.getString(19));
					Vpdf_inv_dtl.add(rset1.getString(20));
					pdf_inv_dtl=rset1.getString(20);
					
					if(rset1.getString(21)!=null)
						print_by_ori=rset1.getString(21);
					else
						print_by_ori="00";
					
					if(rset1.getString(22)!=null)
						print_by_dup=rset1.getString(22);
					else
						print_by_dup="00";
					
					if(rset1.getString(23)!=null)
						print_by_tri=rset1.getString(23);
					else
						print_by_tri="00";
					
					////System.out.println("rset1.getString(24): "+rset1.getString(24));
					
					if(rset1.getString(24)!=null)
						Vtds_per.add(rset1.getString(24));
					else
						Vtds_per.add("-");
					
					if(pdf_inv_dtl.equalsIgnoreCase("O"))
					{
						Vprint_by_cd.add(print_by_ori);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("OD"))
					{
						Vprint_by_cd.add(print_by_dup);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("ODT"))
					{
						Vprint_by_cd.add(print_by_tri);
					}
					
					if(rset1.getString(25)!=null)
						Vpay_update_dt.add(rset1.getString(25));
					else
						Vpay_update_dt.add("-");
					
					if(rset1.getString(26)!=null)
						Vpay_update_cnt.add(rset1.getString(26));
					else
						Vpay_update_cnt.add("-");
				}
				else
				{
					Vpay_actual_recv_amt.add("-");
					Vpay_recv_dt.add("-");
					Vpay_remark.add("-");
					Vpay_short_recv_amt.add("-");
					Vpayflag.add("UNPAID");
					
					Vinv_gen_by_cd.add(rset1.getString(14));
					Vchecked_by_cd.add(rset1.getString(15));
					Vapproved_by_cd.add(rset1.getString(16));
					Vpdf_inv_dtl.add(rset1.getString(17));
					pdf_inv_dtl=rset1.getString(17);
					
					if(rset1.getString(18)!=null)
						print_by_ori=rset1.getString(18);
					else
						print_by_ori="00";
					
					if(rset1.getString(19)!=null)
						print_by_dup=rset1.getString(19);
					else
						print_by_dup="00";
					
					if(rset1.getString(20)!=null)
						print_by_tri=rset1.getString(20);
					else
						print_by_tri="00";
						
					if(rset1.getString(21)!=null)
					{
						Vtds_per.add(rset1.getString(21));
					}
					else
					{
						Vtds_per.add("-");
					}
					
					if(pdf_inv_dtl.equalsIgnoreCase("O"))
					{
						Vprint_by_cd.add(print_by_ori);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("OD"))
					{
						Vprint_by_cd.add(print_by_dup);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("ODT"))
					{
						Vprint_by_cd.add(print_by_tri);
					}
					
					if(rset1.getString(22)!=null)
						Vpay_update_dt.add(rset1.getString(22));
					else
						Vpay_update_dt.add("-");
					
					if(rset1.getString(23)!=null)
						Vpay_update_cnt.add(rset1.getString(23));
					else
						Vpay_update_cnt.add("-");
				}
				
				//////System.out.println("===JAVA===2");
				/////////Vhlpl_inv_seq//////////
				
				if(Integer.parseInt(rset1.getString(3))<10)
				{
					hlpl_inv_no_disp="000"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<100) 
				{
					hlpl_inv_no_disp="00"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<1000) 
				{
					hlpl_inv_no_disp="0"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else
				{
					hlpl_inv_no_disp=rset1.getString(3)+"/"+rset1.getString(9);
				}
				Vhlpl_inv_seq.add(hlpl_inv_no_disp);
				
				//////System.out.println("===JAVA===3");
				
				///////////XML_GEN_FLAG/////////
				
				String queryString2 = "SELECT XML_GEN_FLAG,to_char(APPROVAL_DT,'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
						  "WHERE INV_CARGO_NO='"+hlpl_inv_no_disp+"' AND JOURNAL_TYPE='FMSSL' " +
						  "AND CONTRACT_TYPE='"+contract_type+"' ";
					//	////System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
					rset = stmt.executeQuery(queryString2);
					if(rset.next())
					{
						xml_gen_flag=rset.getString(1)==null?"N":rset.getString(1);
						approval_dt=rset.getString(2)==null?"":rset.getString(2);
						Vxml_gen_flag.add(xml_gen_flag);
					}
					else
					{
						xml_gen_flag="N";
						approval_dt="";
						Vxml_gen_flag.add(xml_gen_flag);
					}
						
					//////System.out.println("===JAVA===4");
					
					////////tax_adj_amt////////
					
					String q1="select flag,amount from fms7_inv_compo_dtl where price_cd='6' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q1: "+q1);
					rset2=stmt2.executeQuery(q1);
					while(rset2.next())
					{
						taxadvflag=rset2.getString(1);
						tax_adj_amt=nf.format(Double.parseDouble(rset2.getString(2)));
					}
					////System.out.println("---JAVA here taxadvflag: "+taxadvflag);	
					
					//////System.out.println("===JAVA===5");
					
					///////////inv_adj_amt///////////
					
					String q2="select flag,amount from fms7_inv_compo_dtl where price_cd='1' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q2: "+q2);
					rset3=stmt3.executeQuery(q2);
					while(rset3.next())
					{
						advflag=rset3.getString(1);
						inv_adj_amt=nf.format(Double.parseDouble(rset3.getString(2)));
					}
					////System.out.println("---JAVA here advflag: "+advflag);
								
					//////System.out.println("===JAVA===6");
					
					////////////inv_amt///////////
					
					String inv_amt="";
					if(advflag.equalsIgnoreCase("Y") && taxadvflag.equalsIgnoreCase("Y"))
					{
						//query2="select INV_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=invamtinr;
					}
					else
					{
						//query2="select GROSS_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=gross_amt_inr;
					}
					////System.out.println("---JAVA inv_amt---: "+inv_amt);
							
					//////System.out.println("===JAVA===7");
					
					String amt = "0";
					
					String map_id=contract_type+":"+fyr+":"+hlpl_inv_seq_no+":%";
					Vmapid.add(map_id);
					
					if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))		//ADDED FOR LTCORA AND CN
					{
						// String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no like" +
						//	" '"+map_id+"'and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no='"+invseq+"' and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						rset4=stmt4.executeQuery(queryTax);
						////System.out.println("---JAVA queryTax---: "+queryTax);
						if(rset4.next())
						{
							amt = ""+java.text.NumberFormat.getInstance().parse(rset4.getString(1));
							Adj_Tax_amt=amt;	
							taxvalue = ""+(Double.parseDouble(taxvalue) - Double.parseDouble(amt));
						}
					}
					
					//////System.out.println("===JAVA===8");
					
					String queryString12 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					
					////System.out.println("===VTAXAMT QUERY===: "+queryString12);
					rset5=stmt5.executeQuery(queryString12);
					//////System.out.println("===JAVA===9");
					int cnt1=0;
					String tx_cd="",tx_amt="";
					while(rset5.next())
					{
						tax_cd=rset5.getString(1);
						tax_on=rset5.getString(3);
						
						if(rset5.getString(3).equals("1")) 
						{
							cnt1++;
							//////System.out.println("===IN IF=== "+cnt1);
							tax_amt = (Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset5.getString(2)))/100;
							//////System.out.println(Double.parseDouble(gross_amt_inr)+"---total_amt_inr-IN IF--"+tax_amt);
							//////System.out.println("---rset5.getString(2)-IN IF--"+rset5.getString(2));
						}
						else if(rset5.getString(3).equals("2"))
						{
							cnt1++;
							//////System.out.println("===IN ELSE IF=== "+cnt1);
							String q3 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset5.getString(4)+"";
							
							//////System.out.println("===TAXAMT Query q3 === "+q3);
							rset6=stmt6.executeQuery(q3);
				 	 		
							if(rset6.next())
				 	 		{
				 	 			if(rset6.getString(3).equals("1"))
				 				{
				 					tax_amt = (Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset6.getString(2)))/100;
				 				}	
				 	 			//////System.out.println("---total_amt_inr-IN ELSE IF--"+total_amt_inr);
								//////System.out.println("---rset5.getString(2)-IN ELSE IF--"+rset5.getString(2));
				 	 			tax_amt = (tax_amt*Double.parseDouble(rset6.getString(2)))/100;
				 	 		}
				 	 		else
				 	 		{
				 	 			tax_amt=0;
				 	 		}
						}
						else
						{
							tax_amt = 0;
						}
						//////System.out.println("===JAVA===9");
						
						////////////////////////////BK:SB20151203//////////////////
			 			
						if(!Adj_Tax_amt.equalsIgnoreCase(""))
			 			{
							if(Double.parseDouble(Adj_Tax_amt)>0)
				 			{
								//////System.out.println("---Adj Amt---: "+Adj_Tax_amt);
				 				tax_amt = tax_amt - Double.parseDouble(Adj_Tax_amt);
				 				Adj_Tax_amt = "0";
				 			}
							else
				 			{
								if(tax_on.equalsIgnoreCase("2"))
								{
									//taxamt=nf.format(tax_amt)+"";
									//Tot_Tax_amt = Tot_Tax_amt + Double.parseDouble(taxamt);
								}
				 			}
			 			}
						
						//////System.out.println("===IN WHILE================= "+cnt1);
						
						///////////////////////////////////////////////////////
						tx_cd+="@"+tax_cd;
						tx_amt+="@"+nf.format(tax_amt);
						
						////System.out.println("===JAVA tax_amt after=== "+tax_amt);
					}
					Vtax_code.add(tx_cd.replaceFirst("@", ""));  	
					Vtax_amt.add(tx_amt.replaceFirst("@", ""));
					
					////System.out.println("Vtax_code-"+Vtax_code);
					////System.out.println("Vtax_amt-"+Vtax_amt);
					
					String q123 = "SELECT COUNT(*) FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					rset=stmt.executeQuery(q123);
					while(rset.next())
					{
						//cnt1=rset.getInt(1);
						int count=rset.getInt(1);
						Vtaxcnt.add(count);
					}
					
					//////System.out.println("===JAVA===10");
				}
				
				if(Vhlplinvseqno.size()==0) {
					queryString123="select count(*)" +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
					////System.out.println("queryString123 inv count: "+queryString123);
					rset = stmt.executeQuery(queryString123);
					while(rset.next()) {
						allInvoiceCount=rset.getString(1);
					}
				}
				
				////System.out.println("JAVA Vhlplinvseqno.size(): "+Vhlplinvseqno.size());
				////System.out.println("JAVA Vhlplinvseqno: "+Vhlplinvseqno);
				
				Vector tmp_group_gross_usd_amt = new Vector();
				
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					vat_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					cst_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					addl_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					st_code = rset.getString(1)==null?"0":rset.getString(1);
				}	
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					sbc_code = rset.getString(1)==null?"0":rset.getString(1);
				}	
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					ecs_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					hecs_code = rset.getString(1)==null?"0":rset.getString(1);
				}
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ZVAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					zvat_code = rset.getString(1)==null?"0":rset.getString(1);
				}
				
				for(int j=0;j<Vinv_gen_by_cd.size();j++)
				{
					queryString2="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vinv_gen_by_cd.elementAt(j)+"'";
					rset2=stmt2.executeQuery(queryString2);
					while(rset2.next())
					{
						Vinv_gen_by_nm.add(rset2.getString(1));
						Vinv_gen_by_emailid.add(rset2.getString(2));
					}
					
					queryString3="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vchecked_by_cd.elementAt(j)+"'";
					rset3=stmt3.executeQuery(queryString3);
					while(rset3.next())
					{
						Vchecked_by_nm.add(rset3.getString(1));
						Vchecked_by_emailid.add(rset3.getString(2));
					}
					
					queryString4="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vapproved_by_cd.elementAt(j)+"'";
					rset4=stmt4.executeQuery(queryString4);
					while(rset4.next())
					{
						Vapproved_by_nm.add(rset4.getString(1));
						Vapproved_by_emailid.add(rset4.getString(2));
					}
					
					queryString5="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vprint_by_cd.elementAt(j)+"'";
					rset5=stmt5.executeQuery(queryString5);
					if(rset5.next())
					{
						Vprint_by_nm.add(rset5.getString(1));
						Vprint_by_emailid.add(rset5.getString(2));
					}
					else
					{
						Vprint_by_nm.add("-");
						Vprint_by_emailid.add("-");
					}
				}
				
				////System.out.println("JAVA Vapproved_by_emailid.size(): "+Vapproved_by_emailid.size());
				////System.out.println("JAVA Vprint_by_emailid.size(): "+Vprint_by_emailid.size());
				////System.out.println("JAVA Vtds_per.size(): "+Vtds_per.size());
				
				////System.out.println("---JAVA fetch_Invoice_Details() ends---");
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
			e.printStackTrace();
		}
	
	}
	
	public void fetch_Invoice_Details_old_20160305() 						//BK20160209
	{
		try
		{
			////System.out.println("---JAVA fetch_Invoice_Details() starts---");
			
			String from_dt="01/"+month+"/"+year;
			String to_dt="";
			
			queryString="Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt=rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			
			queryString="Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			////System.out.println("-JAVA--from_dt---:"+from_dt);
			////System.out.println("-JAVA--to_dt---:"+to_dt);
			////System.out.println("-JAVA--mon---:"+mon);
			////System.out.println("-JAVA--to_mon---:"+to_mon);
			
			if(segment.equalsIgnoreCase("SALES"))
			{
				contract_type="S";
			}
			else if(segment.equalsIgnoreCase("REGAS"))
			{
				contract_type="R";
			}
			else if(segment.equalsIgnoreCase("LTCORA_CN"))
			{
				contract_type="C";
			} 
			else if(segment.equalsIgnoreCase("LOA"))
			{
				contract_type="L";
			}
			
			Vector Vadvflag=new Vector();
			Vector Vmapid=new Vector();
			
			String tax_cd="";
			String tax_on="";
			
			double tax_amt=0;
			double adj_tax_inr=0;
			String Adj_Tax_amt="0";
			//String amt="";
			String hlpl_inv_no_disp="";
			String xml_gen_flag="";
			String approval_dt="";
			String tax_adj_amt="";
			String taxadvflag="";
			String inv_adj_amt="";
			String advflag="";
			String sn_no="";
			String taxvalue="";
			String gross_amt_inr="";
			String invamtinr="";
			String fyr="";
			double total_amt_inr=0;
			String tax_str_cd="";
			
			int cnt=0;
			String queryString123="";
			String pdf_inv_dtl="";
			String print_by_ori="";
			String print_by_dup="";
			String print_by_tri="";
			
			////System.out.println("---invstatus---:"+invstatus);
			////System.out.println("---customer_cd---:"+customer_cd);
			
			if(!customer_cd.equalsIgnoreCase(""))
			{
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
								 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,PAY_RECV_AMT,TO_CHAR(PAY_RECV_DT,'DD/MM/YYYY'),PAY_REMARK,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT " +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND CUSTOMER_CD='"+customer_cd+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NOT NULL AND PAY_INSERT_BY IS NOT NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
				else
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND CUSTOMER_CD='"+customer_cd+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NULL AND PAY_INSERT_BY IS NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
			}
			else
			{
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
								 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,PAY_RECV_AMT,TO_CHAR(PAY_RECV_DT,'DD/MM/YYYY'),PAY_REMARK,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT " +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NOT NULL AND PAY_INSERT_BY IS NOT NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
				else
				{
					queryString123="select TO_CHAR(INVOICE_DT,'MON'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO,EMP_CD,CHECKED_BY,APPROVED_BY,PDF_INV_DTL,PRINT_BY_ORI,PRINT_BY_DUP,PRINT_BY_TRI,TDS_PERCENT " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PAY_RECV_AMT IS NULL AND PAY_INSERT_BY IS NULL AND (PDF_INV_DTL='O' OR PDF_INV_DTL='OD' OR PDF_INV_DTL='ODT') ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
				}
			}
			
			////System.out.println("===fetch Invoice queryString123===: "+queryString123);
			rset1=stmt1.executeQuery(queryString123);
			while(rset1.next())
			{
				cnt++;
				//////System.out.println("===JAVA===1");
				
				Vmonth.add(rset1.getString(1));
				Vcustomer_cd.add(rset1.getString(2));
				
				String queryString1 = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset1.getString(2)+"'";
				rset=stmt.executeQuery(queryString1);
				while(rset.next())
				{
					Vcustomer_abbr.add(rset.getString(2));
				}
				
				hlpl_inv_seq_no=rset1.getString(3);
				Vhlplinvseqno.add(rset1.getString(3));
				Vinv_dt.add(rset1.getString(4));
				Vsales_value.add(rset1.getString(5));
				gross_amt_inr=rset1.getString(5);
				Vinv_value.add(rset1.getString(6));
				Vdue_dt.add(rset1.getString(7));
				Vcont_type.add(rset1.getString(8));
				Vfinancial_year.add(rset1.getString(9));
				Vtax_str_cd.add(rset1.getString(10));
				Vtaxamtinr.add(rset1.getString(11));
				Vinvamtinr.add(rset1.getString(12));
				
				invamtinr=rset1.getString(12);
				sn_no=rset1.getString(13);
				taxvalue=rset1.getString(11);
				fyr=rset1.getString(9);
				total_amt_inr=Double.parseDouble(rset1.getString(6));
				tax_str_cd=rset1.getString(10);
				
				//String invseq=contract_type+":"+financial_year+":"+hlpl_inv_seq_no+":%";
				String invseq=rset1.getString(8)+":"+rset1.getString(9)+":"+rset1.getString(3)+":"+rset1.getString(4);
				Vinvseqno.add(invseq);
				
				if(invstatus.equalsIgnoreCase("PAID"))
				{
					Vpay_actual_recv_amt.add(rset1.getString(14));
					Vpay_recv_dt.add(rset1.getString(15));
					Vpay_remark.add(rset1.getString(16));
					
					double short_recv=Double.parseDouble(rset1.getString(6))-Double.parseDouble(rset1.getString(14));
					Vpay_short_recv_amt.add(short_recv+"");
					Vpayflag.add("PAID");
					
					Vinv_gen_by_cd.add(rset1.getString(17));
					Vchecked_by_cd.add(rset1.getString(18));
					Vapproved_by_cd.add(rset1.getString(19));
					Vpdf_inv_dtl.add(rset1.getString(20));
					pdf_inv_dtl=rset1.getString(20);
					
					if(rset1.getString(21)!=null)
						print_by_ori=rset1.getString(21);
					else
						print_by_ori="00";
					
					if(rset1.getString(22)!=null)
						print_by_dup=rset1.getString(22);
					else
						print_by_dup="00";
					
					if(rset1.getString(23)!=null)
						print_by_tri=rset1.getString(23);
					else
						print_by_tri="00";
					
					if(rset1.getString(24)!=null)
						Vtds_per.add(rset1.getString(24));
					else
						Vtds_per.add("-");
					
					if(pdf_inv_dtl.equalsIgnoreCase("O"))
					{
						Vprint_by_cd.add(print_by_ori);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("OD"))
					{
						Vprint_by_cd.add(print_by_dup);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("ODT"))
					{
						Vprint_by_cd.add(print_by_tri);
					}
				}
				else
				{
					Vpay_actual_recv_amt.add("-");
					Vpay_recv_dt.add("-");
					Vpay_remark.add("-");
					Vpay_short_recv_amt.add("-");
					Vpayflag.add("UNPAID");
					
					Vinv_gen_by_cd.add(rset1.getString(14));
					Vchecked_by_cd.add(rset1.getString(15));
					Vapproved_by_cd.add(rset1.getString(16));
					Vpdf_inv_dtl.add(rset1.getString(17));
					pdf_inv_dtl=rset1.getString(17);
					
					if(rset1.getString(18)!=null)
						print_by_ori=rset1.getString(18);
					else
						print_by_ori="00";
					
					if(rset1.getString(19)!=null)
						print_by_dup=rset1.getString(19);
					else
						print_by_dup="00";
					
					if(rset1.getString(20)!=null)
						print_by_tri=rset1.getString(20);
					else
						print_by_tri="00";
						
					if(rset1.getString(21)!=null)
					{
						Vtds_per.add(rset1.getString(21));
					}
					else
					{
						Vtds_per.add("-");
					}
					
					if(pdf_inv_dtl.equalsIgnoreCase("O"))
					{
						Vprint_by_cd.add(print_by_ori);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("OD"))
					{
						Vprint_by_cd.add(print_by_dup);
					}
					else if(pdf_inv_dtl.equalsIgnoreCase("ODT"))
					{
						Vprint_by_cd.add(print_by_tri);
					}
				}
				
				//////System.out.println("===JAVA===2");
				/////////Vhlpl_inv_seq//////////
				
				if(Integer.parseInt(rset1.getString(3))<10)
				{
					hlpl_inv_no_disp="000"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<100) 
				{
					hlpl_inv_no_disp="00"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<1000) 
				{
					hlpl_inv_no_disp="0"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else
				{
					hlpl_inv_no_disp=rset1.getString(3)+"/"+rset1.getString(9);
				}
				Vhlpl_inv_seq.add(hlpl_inv_no_disp);
				
				//////System.out.println("===JAVA===3");
				
				///////////XML_GEN_FLAG/////////
				
				String queryString2 = "SELECT XML_GEN_FLAG,to_char(APPROVAL_DT,'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
						  "WHERE INV_CARGO_NO='"+hlpl_inv_no_disp+"' AND JOURNAL_TYPE='FMSSL' " +
						  "AND CONTRACT_TYPE='"+contract_type+"' ";
					//	////System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
					rset = stmt.executeQuery(queryString2);
					if(rset.next())
					{
						xml_gen_flag=rset.getString(1)==null?"N":rset.getString(1);
						approval_dt=rset.getString(2)==null?"":rset.getString(2);
						Vxml_gen_flag.add(xml_gen_flag);
					}
					else
					{
						xml_gen_flag="N";
						approval_dt="";
						Vxml_gen_flag.add(xml_gen_flag);
					}
						
					//////System.out.println("===JAVA===4");
					
					////////tax_adj_amt////////
					
					String q1="select flag,amount from fms7_inv_compo_dtl where price_cd='6' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q1: "+q1);
					rset2=stmt2.executeQuery(q1);
					while(rset2.next())
					{
						taxadvflag=rset2.getString(1);
						tax_adj_amt=nf.format(Double.parseDouble(rset2.getString(2)));
					}
					////System.out.println("---JAVA here taxadvflag: "+taxadvflag);	
					
					//////System.out.println("===JAVA===5");
					
					///////////inv_adj_amt///////////
					
					String q2="select flag,amount from fms7_inv_compo_dtl where price_cd='1' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q2: "+q2);
					rset3=stmt3.executeQuery(q2);
					while(rset3.next())
					{
						advflag=rset3.getString(1);
						inv_adj_amt=nf.format(Double.parseDouble(rset3.getString(2)));
					}
					////System.out.println("---JAVA here advflag: "+advflag);
								
					//////System.out.println("===JAVA===6");
					
					////////////inv_amt///////////
					
					String inv_amt="";
					if(advflag.equalsIgnoreCase("Y") && taxadvflag.equalsIgnoreCase("Y"))
					{
						//query2="select INV_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=invamtinr;
					}
					else
					{
						//query2="select GROSS_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=gross_amt_inr;
					}
					////System.out.println("---JAVA inv_amt---: "+inv_amt);
							
					//////System.out.println("===JAVA===7");
					
					String amt = "0";
					
					String map_id=contract_type+":"+fyr+":"+hlpl_inv_seq_no+":%";
					Vmapid.add(map_id);
					
					if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))		//ADDED FOR LTCORA AND CN
					{
						// String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no like" +
						//	" '"+map_id+"'and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no='"+invseq+"' and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						rset4=stmt4.executeQuery(queryTax);
						////System.out.println("---JAVA queryTax---: "+queryTax);
						if(rset4.next())
						{
							amt = ""+java.text.NumberFormat.getInstance().parse(rset4.getString(1));
							Adj_Tax_amt=amt;	
							taxvalue = ""+(Double.parseDouble(taxvalue) - Double.parseDouble(amt));
						}
					}
					
					//////System.out.println("===JAVA===8");
					
					String queryString12 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					
					////System.out.println("===VTAXAMT QUERY===: "+queryString12);
					rset5=stmt5.executeQuery(queryString12);
					//////System.out.println("===JAVA===9");
					int cnt1=0;
					String tx_cd="",tx_amt="";
					while(rset5.next())
					{
						tax_cd=rset5.getString(1);
						tax_on=rset5.getString(3);
						
						if(rset5.getString(3).equals("1")) 
						{
							cnt1++;
							//////System.out.println("===IN IF=== "+cnt1);
							tax_amt = (Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset5.getString(2)))/100;
							//////System.out.println(Double.parseDouble(gross_amt_inr)+"---total_amt_inr-IN IF--"+tax_amt);
							//////System.out.println("---rset5.getString(2)-IN IF--"+rset5.getString(2));
						}
						else if(rset5.getString(3).equals("2"))
						{
							cnt1++;
							//////System.out.println("===IN ELSE IF=== "+cnt1);
							String q3 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset5.getString(4)+"";
							
							//////System.out.println("===TAXAMT Query q3 === "+q3);
							rset6=stmt6.executeQuery(q3);
				 	 		
							if(rset6.next())
				 	 		{
				 	 			if(rset6.getString(3).equals("1"))
				 				{
				 					tax_amt = (Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset6.getString(2)))/100;
				 				}	
				 	 			//////System.out.println("---total_amt_inr-IN ELSE IF--"+total_amt_inr);
								//////System.out.println("---rset5.getString(2)-IN ELSE IF--"+rset5.getString(2));
				 	 			tax_amt = (tax_amt*Double.parseDouble(rset6.getString(2)))/100;
				 	 		}
				 	 		else
				 	 		{
				 	 			tax_amt=0;
				 	 		}
						}
						else
						{
							tax_amt = 0;
						}
						//////System.out.println("===JAVA===9");
						
						////////////////////////////BK:SB20151203//////////////////
			 			
						if(!Adj_Tax_amt.equalsIgnoreCase(""))
			 			{
							if(Double.parseDouble(Adj_Tax_amt)>0)
				 			{
								//////System.out.println("---Adj Amt---: "+Adj_Tax_amt);
				 				tax_amt = tax_amt - Double.parseDouble(Adj_Tax_amt);
				 				Adj_Tax_amt = "0";
				 			}
							else
				 			{
								if(tax_on.equalsIgnoreCase("2"))
								{
									//taxamt=nf.format(tax_amt)+"";
									//Tot_Tax_amt = Tot_Tax_amt + Double.parseDouble(taxamt);
								}
				 			}
			 			}
						
						//////System.out.println("===IN WHILE================= "+cnt1);
						
						///////////////////////////////////////////////////////
						tx_cd+="@"+tax_cd;
						tx_amt+="@"+nf.format(tax_amt);
						
						////System.out.println("===JAVA tax_amt after=== "+tax_amt);
					}
					Vtax_code.add(tx_cd.replaceFirst("@", ""));  	
					Vtax_amt.add(tx_amt.replaceFirst("@", ""));
					
					////System.out.println("Vtax_code-"+Vtax_code);
					////System.out.println("Vtax_amt-"+Vtax_amt);
					
					String q123 = "SELECT COUNT(*) FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					rset=stmt.executeQuery(q123);
					while(rset.next())
					{
						//cnt1=rset.getInt(1);
						int count=rset.getInt(1);
						Vtaxcnt.add(count);
					}
					
					//////System.out.println("===JAVA===10");
				}
				
				if(Vhlplinvseqno.size()==0) {
					queryString123="select count(*)" +
								 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
								 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' AND PDF_INV_DTL='O' ORDER BY TO_CHAR(INVOICE_DT,'YYYYMMDD') DESC"; //AND SUN_APPROVAL='Y'
					rset = stmt.executeQuery(queryString123);
					while(rset.next()) {
						allInvoiceCount=rset.getString(1);
					}
				}
				
				////System.out.println("JAVA Vhlplinvseqno.size(): "+Vhlplinvseqno.size());
				////System.out.println("JAVA Vhlplinvseqno: "+Vhlplinvseqno);
				
				Vector tmp_group_gross_usd_amt = new Vector();
				
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					vat_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					cst_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					addl_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					st_code = rset.getString(1)==null?"0":rset.getString(1);
				}	
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					sbc_code = rset.getString(1)==null?"0":rset.getString(1);
				}	
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					ecs_code = rset.getString(1)==null?"0":rset.getString(1);
				}			
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					hecs_code = rset.getString(1)==null?"0":rset.getString(1);
				}
				queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ZVAT'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					zvat_code = rset.getString(1)==null?"0":rset.getString(1);
				}
				
				for(int j=0;j<Vinv_gen_by_cd.size();j++)
				{
					queryString2="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vinv_gen_by_cd.elementAt(j)+"'";
					rset2=stmt2.executeQuery(queryString2);
					while(rset2.next())
					{
						Vinv_gen_by_nm.add(rset2.getString(1));
						Vinv_gen_by_emailid.add(rset2.getString(2));
					}
					
					queryString3="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vchecked_by_cd.elementAt(j)+"'";
					rset3=stmt3.executeQuery(queryString3);
					while(rset3.next())
					{
						Vchecked_by_nm.add(rset3.getString(1));
						Vchecked_by_emailid.add(rset3.getString(2));
					}
					
					queryString4="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vapproved_by_cd.elementAt(j)+"'";
					rset4=stmt4.executeQuery(queryString4);
					while(rset4.next())
					{
						Vapproved_by_nm.add(rset4.getString(1));
						Vapproved_by_emailid.add(rset4.getString(2));
					}
					
					queryString5="select emp_nm,email_id from hr_emp_mst where emp_cd='"+Vprint_by_cd.elementAt(j)+"'";
					rset5=stmt5.executeQuery(queryString5);
					if(rset5.next())
					{
						Vprint_by_nm.add(rset5.getString(1));
						Vprint_by_emailid.add(rset5.getString(2));
					}
					else
					{
						Vprint_by_nm.add("-");
						Vprint_by_emailid.add("-");
					}
				}
				
				////System.out.println("JAVA Vapproved_by_emailid.size(): "+Vapproved_by_emailid.size());
				////System.out.println("JAVA Vprint_by_emailid.size(): "+Vprint_by_emailid.size());
				////System.out.println("JAVA Vtds_per.size(): "+Vtds_per.size());
				
				/*//System.out.println("JAVA Vtax_amt.size(): "+Vtax_amt.size());
				//System.out.println("JAVA Vtax_amt: "+Vtax_amt);
				
				//System.out.println("===JAVA Vtax_code.size()=== "+Vtax_code.size());
				//System.out.println("===JAVA Vtax_code=== "+Vtax_code);
				//System.out.println("===JAVA Vtax_amt=== "+Vtax_amt);
				
				//System.out.println("---JAVA fetch_Invoice_Details() ends---");*/
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
			e.printStackTrace();
		}
	}
	
	public void fetch_Invoice_Details_old20160209() 						//BK20160208
	{
		try
		{
			////System.out.println("---JAVA fetch_Invoice_Details() starts---");
			
			String from_dt="01/"+month+"/"+year;
			String to_dt="";
			
			queryString="Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			//////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt=rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			
			queryString="Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("From Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("To The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			////System.out.println("-JAVA--from_dt---:"+from_dt);
			////System.out.println("-JAVA--to_dt---:"+to_dt);
			////System.out.println("-JAVA--mon---:"+mon);
			////System.out.println("-JAVA--to_mon---:"+to_mon);
			
			if(segment.equalsIgnoreCase("SALES"))
			{
				contract_type="S";
			}
			else if(segment.equalsIgnoreCase("REGAS"))
			{
				contract_type="R";
			}
			else if(segment.equalsIgnoreCase("LTCORA_CN"))
			{
				contract_type="C";
			}
			
			Vector Vadvflag=new Vector();
			
			String tax_cd="";
			String tax_on="";
			
			double tax_amt=0;
			double adj_tax_inr=0;
			String Adj_Tax_amt="0";
			//String amt="";
			String hlpl_inv_no_disp="";
			String xml_gen_flag="";
			String approval_dt="";
			String tax_adj_amt="";
			String taxadvflag="";
			String inv_adj_amt="";
			String advflag="";
			String sn_no="";
			String taxvalue="";
			String gross_amt_inr="";
			String invamtinr="";
			String fyr="";
			double total_amt_inr=0;
			String tax_str_cd="";
			
			int cnt=0;
			String queryString123="";
			
			Vector Vtaxnm1=new Vector();
			Vector Vtaxnm2=new Vector();
			Vector Vtaxnm3=new Vector();
			
			Vector Vtaxamt1=new Vector();
			Vector Vtaxamt2=new Vector();
			Vector Vtaxamt3=new Vector();
			
			if(!segment.equalsIgnoreCase(""))
			{
				queryString123="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND SUN_APPROVAL='Y' AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y'  ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			}
			else
			{
				queryString123="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
						 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR,SN_NO " +
						 "FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
						 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND SUN_APPROVAL='Y' AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			}
			////System.out.println("===fetch Invoice queryString123===: "+queryString123);
			rset1=stmt1.executeQuery(queryString123);
			while(rset1.next())
			{
				cnt++;
				
				//////System.out.println("===JAVA===1");
				
				Vmonth.add(rset1.getString(1));
				Vcustomer_cd.add(rset1.getString(2));
				
				String queryString1 = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset1.getString(2)+"'";
				rset=stmt.executeQuery(queryString1);
				while(rset.next())
				{
					Vcustomer_abbr.add(rset.getString(2));
				}
				
				hlpl_inv_seq_no=rset1.getString(3);
				Vhlplinvseqno.add(rset1.getString(3));
				Vinv_dt.add(rset1.getString(4));
				Vsales_value.add(rset1.getString(5));
				gross_amt_inr=rset1.getString(5);
				Vinv_value.add(rset1.getString(6));
				Vdue_dt.add(rset1.getString(7));
				Vcont_type.add(rset1.getString(8));
				Vfinancial_year.add(rset1.getString(9));
				Vtax_str_cd.add(rset1.getString(10));
				Vtaxamtinr.add(rset1.getString(11));
				Vinvamtinr.add(rset1.getString(12));
				
				invamtinr=rset1.getString(12);
				sn_no=rset1.getString(13);
				taxvalue=rset1.getString(11);
				fyr=rset1.getString(9);
				total_amt_inr=Double.parseDouble(rset1.getString(6));
				tax_str_cd=rset1.getString(10);
				
				//String invseq=contract_type+":"+financial_year+":"+hlpl_inv_seq_no+":%";
				String invseq=rset1.getString(8)+":"+rset1.getString(9)+":"+rset1.getString(3)+":"+rset1.getString(4);
				Vinvseqno.add(invseq);
				
				//////System.out.println("===JAVA===2");
				/////////Vhlpl_inv_seq//////////
				
				if(Integer.parseInt(rset1.getString(3))<10)
				{
					hlpl_inv_no_disp="000"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<100) 
				{
					hlpl_inv_no_disp="00"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else if(Integer.parseInt(rset1.getString(3))<1000) 
				{
					hlpl_inv_no_disp="0"+rset1.getString(3)+"/"+rset1.getString(9);
				}
				else
				{
					hlpl_inv_no_disp=rset1.getString(3)+"/"+rset1.getString(9);
				}
				Vhlpl_inv_seq.add(hlpl_inv_no_disp);
				
				//////System.out.println("===JAVA===3");
				
				///////////XML_GEN_FLAG/////////
				
				String queryString2 = "SELECT XML_GEN_FLAG,to_char(APPROVAL_DT,'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
						  "WHERE INV_CARGO_NO='"+hlpl_inv_no_disp+"' AND JOURNAL_TYPE='FMSSL' " +
						  "AND CONTRACT_TYPE='"+contract_type+"' ";
					//	////System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
					rset = stmt.executeQuery(queryString2);
					if(rset.next())
					{
						xml_gen_flag=rset.getString(1)==null?"N":rset.getString(1);
						approval_dt=rset.getString(2)==null?"":rset.getString(2);
						Vxml_gen_flag.add(xml_gen_flag);
					}
					else
					{
						xml_gen_flag="N";
						approval_dt="";
						Vxml_gen_flag.add(xml_gen_flag);
					}
						
					//////System.out.println("===JAVA===4");
					
					////////tax_adj_amt////////
					
					String q1="select flag,amount from fms7_inv_compo_dtl where price_cd='6' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q1: "+q1);
					rset2=stmt2.executeQuery(q1);
					while(rset2.next())
					{
						taxadvflag=rset2.getString(1);
						tax_adj_amt=nf.format(Double.parseDouble(rset2.getString(2)));
					}
					////System.out.println("---JAVA here taxadvflag: "+taxadvflag);	
					
					//////System.out.println("===JAVA===5");
					
					///////////inv_adj_amt///////////
					
					String q2="select flag,amount from fms7_inv_compo_dtl where price_cd='1' and inv_seq_no='"+invseq+"'";
					////System.out.println("JAVA check adjustmn query q2: "+q2);
					rset3=stmt3.executeQuery(q2);
					while(rset3.next())
					{
						advflag=rset3.getString(1);
						inv_adj_amt=nf.format(Double.parseDouble(rset3.getString(2)));
					}
					////System.out.println("---JAVA here advflag: "+advflag);
								
					//////System.out.println("===JAVA===6");
					
					////////////inv_amt///////////
					
					String inv_amt="";
					if(advflag.equalsIgnoreCase("Y") && taxadvflag.equalsIgnoreCase("Y"))
					{
						//query2="select INV_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=invamtinr;
					}
					else
					{
						//query2="select GROSS_AMT_INR from fms7_invoice_mst where CUSTOMER_CD='"+rset1.getString(2)+"' AND CONTRACT_TYPE='"+rset1.getString(8)+"' AND SN_NO='"+sn_no+"' AND HLPL_INV_SEQ_NO='"+rset1.getString(3)+"' and invoice_dt=TO_DATE('"+rset1.getString(4)+"','dd/mm/yyyy')";
						inv_amt=gross_amt_inr;
					}
					////System.out.println("---JAVA inv_amt---: "+inv_amt);
							
					//////System.out.println("===JAVA===7");
					
					String amt = "0";
					String map_id=contract_type+":"+fyr+":"+hlpl_inv_seq_no+":%";
				
					if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))		//ADDED FOR LTCORA AND CN
					{
						// String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no like" +
						//	" '"+map_id+"'and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no='"+invseq+"' and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
						
						rset4=stmt4.executeQuery(queryTax);
						////System.out.println("---JAVA queryTax---: "+queryTax);
						if(rset4.next())
						{
							amt = ""+java.text.NumberFormat.getInstance().parse(rset4.getString(1));
							Adj_Tax_amt=amt;	
							taxvalue = ""+(Double.parseDouble(taxvalue) - Double.parseDouble(amt));
						}
					}
					
					//////System.out.println("===JAVA===8");
					
					String queryString12 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					
					////System.out.println("===VTAXAMT QUERY===: "+queryString12);
					rset5=stmt5.executeQuery(queryString12);
					//////System.out.println("===JAVA===9");
					int cnt1=0;
					while(rset5.next())
					{
						tax_cd=rset5.getString(1);
						tax_on=rset5.getString(3);
						
						////System.out.println("---rset5.getString(3)-in while--"+cnt1);
						
						if(rset5.getString(3).equals("1")) 
						{
							cnt1++;
							////System.out.println("===IN IF=== "+cnt1);
							tax_amt = (total_amt_inr*Double.parseDouble(rset5.getString(2)))/100;
						}
						else if(rset5.getString(3).equals("2"))
						{
							cnt1++;
							////System.out.println("===IN ELSE IF=== "+cnt1);
							String q3 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset5.getString(4)+"";
							
							////System.out.println("===TAXAMT Query q3 === "+q3);
				 	 		
							rset6=stmt6.executeQuery(q3);
				 	 		
							if(rset6.next())
				 	 		{
				 	 			if(rset6.getString(3).equals("1"))
				 				{
				 					tax_amt = (total_amt_inr*Double.parseDouble(rset6.getString(2)))/100;
				 				}	
				 	 			
				 	 			tax_amt = (tax_amt*Double.parseDouble(rset6.getString(2)))/100;
				 	 		}
				 	 		else
				 	 		{
				 	 			tax_amt=0;
				 	 		}
						}
						else
						{
							tax_amt = 0;
						}
						//////System.out.println("===JAVA===9");
						
						////////////////////////////BK:SB20151203//////////////////
			 			
						if(!Adj_Tax_amt.equalsIgnoreCase(""))
			 			{
							if(Double.parseDouble(Adj_Tax_amt)>0)
				 			{
								////System.out.println("---Adj Amt---: "+Adj_Tax_amt);
				 				tax_amt = tax_amt - Double.parseDouble(Adj_Tax_amt);
				 				Adj_Tax_amt = "0";
				 			}
							else
				 			{
								if(tax_on.equalsIgnoreCase("2"))
								{
									//taxamt=nf.format(tax_amt)+"";
									//Tot_Tax_amt = Tot_Tax_amt + Double.parseDouble(taxamt);
								}
				 			}
			 			}
						
						////System.out.println("===IN WHILE================= "+cnt1);
						
						///////////////////////////////////////////////////////
						
						Vtax_code.add(tax_cd);  	
						Vtax_amt.add(nf.format(tax_amt));
						
						////System.out.println("===JAVA tax_amt after=== "+tax_amt);
					}
					///////////////////
					
					String q123 = "SELECT COUNT(*) FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
							  "B.app_date<=TO_DATE('"+to_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
				 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
					rset=stmt.executeQuery(q123);
					while(rset.next())
					{
						//cnt1=rset.getInt(1);
						int count=rset.getInt(1);
						Vtaxcnt.add(count);
					}
					
					//////System.out.println("===JAVA===10");
				}
			
				////System.out.println("===JAVA===11");
				////System.out.println("---JAVA here cnt: "+cnt);
				////System.out.println("---JAVA here Vtaxcnt.size(): "+Vtaxcnt.size());
				////System.out.println("---JAVA here Vtaxcnt: "+Vtaxcnt);
				////System.out.println("---JAVA here Vtax_code: "+Vtax_code);
				////System.out.println("---JAVA here Vtax_amt: "+Vtax_amt);
			
				for(int j=0;j<Vtax_code.size();j++)
				{
					if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("101"))
					{
						Vtaxnm.add("Value Added Tax");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("112"))
					{
						Vtaxnm.add("Additional VAT");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("115"))
					{
						Vtaxnm.add("Zero Value Added Tax");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("105"))
					{
						Vtaxnm.add("Central Sales Tax");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("114"))
					{
						Vtaxnm.add("Zero Service Tax");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("102"))
					{
						Vtaxnm.add("Service Tax");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("103"))
					{
						Vtaxnm.add("Education Cess");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("104"))
					{
						Vtaxnm.add("High. & Secondary Edu. Cess");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("117"))
					{
						Vtaxnm.add("Swacch Bharat Cess");
					}
					else if(Vtax_code.elementAt(j).toString().equalsIgnoreCase("118"))
					{
						Vtaxnm.add("Krishi Kalyan Cess"); //HS20160621
					}
				}
				
				////System.out.println("---JAVA here Vtaxnm: "+Vtaxnm);
				int taxsize=Vtaxnm.size();
				////System.out.println("---JAVA here taxsize: "+taxsize);
			
				////System.out.println("JAVA Vhlplinvseqno.size(): "+Vhlplinvseqno.size());
				////System.out.println("JAVA Vhlplinvseqno: "+Vhlplinvseqno);
			
				////System.out.println("JAVA Vtaxnm1: "+Vtaxnm1);
				////System.out.println("JAVA Vtaxnm2: "+Vtaxnm2);
				////System.out.println("JAVA Vtaxnm3: "+Vtaxnm3);
				
				////System.out.println("---JAVA fetch_Invoice_Details() ends---");
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
			e.printStackTrace();
		}
	}
	
	public void fetch_Invoice_Details_old_20160208() 						//BK20160206
	{
		try
		{
			////System.out.println("---JAVA fetch_Invoice_Details() starts---");
			
			String from_dt="01/"+month+"/"+year;
			String to_dt="";
			
			queryString="Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			//////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt=rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			
			queryString="Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("From Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("To The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			////System.out.println("-JAVA--from_dt---:"+from_dt);
			////System.out.println("-JAVA--to_dt---:"+to_dt);
			////System.out.println("-JAVA--mon---:"+mon);
			////System.out.println("-JAVA--to_mon---:"+to_mon);
			
			if(segment.equalsIgnoreCase("SALES"))
			{
				contract_type="S";
			}
			else if(segment.equalsIgnoreCase("REGAS"))
			{
				contract_type="R";
			}
			else if(segment.equalsIgnoreCase("LTCORA_CN"))
			{
				contract_type="C";
			}
			
			
			
			if(!segment.equalsIgnoreCase(""))
			{
				queryString="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND SUN_APPROVAL='Y' AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y'  ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			}
			else
			{
				queryString="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
						 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE,FINANCIAL_YEAR,TAX_STRUCT_CD,TAX_AMT_INR,INV_AMT_INR " +
						 "FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
						 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND SUN_APPROVAL='Y' AND APPROVED_FLAG='Y' AND CHECKED_FLAG='Y' ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			}
			////System.out.println("===fetch Invoice query===: "+queryString);
			rset1=stmt1.executeQuery(queryString);
			while(rset1.next())
			{
				Vmonth.add(rset1.getString(1));
				Vcustomer_cd.add(rset1.getString(2));
				
				String queryString1 = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset1.getString(2)+"'";
				rset=stmt.executeQuery(queryString1);
				while(rset.next())
				{
					Vcustomer_abbr.add(rset.getString(2));
				}
				
				Vhlplinvseqno.add(rset1.getString(3));
				Vinv_dt.add(rset1.getString(4));
				Vsales_value.add(rset1.getString(5));
				Vinv_value.add(rset1.getString(6));
				Vdue_dt.add(rset1.getString(7));
				Vcont_type.add(rset1.getString(8));
				Vfinancial_year.add(rset1.getString(9));
				Vtax_str_cd.add(rset1.getString(10));
				Vtaxamtinr.add(rset1.getString(11));
				Vinvamtinr.add(rset1.getString(12));
				
				//String invseq=contract_type+":"+financial_year+":"+hlpl_inv_seq_no+":%";
				String invseq=rset1.getString(8)+":"+rset1.getString(9)+":"+rset1.getString(3)+":"+rset1.getString(4);
				Vinvseqno.add(invseq);
			}
			
			String hlpl_inv_no_disp="";
			
			if(Vhlplinvseqno.size()!=0)
			{
				for(int k=0; k<Vhlplinvseqno.size(); k++)
				{
					if(Integer.parseInt(""+Vhlplinvseqno.elementAt(k))<10)
					{
						hlpl_inv_no_disp="000"+Vhlplinvseqno.elementAt(k)+"/"+Vfinancial_year.elementAt(k);
					}
					else if(Integer.parseInt(""+Vhlplinvseqno.elementAt(k))<100) 
					{
						hlpl_inv_no_disp="00"+Vhlplinvseqno.elementAt(k)+"/"+Vfinancial_year.elementAt(k);
					}
					else if(Integer.parseInt(""+Vhlplinvseqno.elementAt(k))<1000) 
					{
						hlpl_inv_no_disp="0"+Vhlplinvseqno.elementAt(k)+"/"+Vfinancial_year.elementAt(k);
					}
					else
					{
						hlpl_inv_no_disp=Vhlplinvseqno.elementAt(k)+"/"+Vfinancial_year.elementAt(k);
					}
					Vhlpl_inv_seq.add(hlpl_inv_no_disp);
				}
			}
			
			for(int j=0;j<Vhlpl_inv_seq.size();j++)
			{
					String queryString2 = "SELECT XML_GEN_FLAG,to_char(APPROVAL_DT,'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
					  "WHERE INV_CARGO_NO='"+Vhlpl_inv_seq.elementAt(j).toString()+"' AND JOURNAL_TYPE='FMSSL' " +
					  "AND CONTRACT_TYPE='"+Vcont_type.elementAt(j).toString()+"' and t_code='1'";
				
					////System.out.println("XML_GEN_FLAG Query = "+queryString);
					rset2 = stmt2.executeQuery(queryString2);
					while(rset2.next())
					{
						Vxml_gen_flag.add(rset2.getString(1));
					}
			}
			
			Vector Vadvflag=new Vector();
			
			String tax_cd="";
			String tax_on="";
			
			double tax_amt=0;
			double adj_tax_inr=0;
			String Adj_Tax_amt="0";
			String amt="";
			
			for(int i=0;i<Vinvseqno.size();i++)
			{
				queryString1="select flag from fms7_inv_compo_dtl where price_cd='1' and inv_seq_no='"+Vinvseqno.elementAt(i).toString()+"'";
				////System.out.println("JAVA check adjustmn query: "+queryString1);
				rset1=stmt.executeQuery(queryString1);
				while(rset1.next())
				{
					Vadvflag.add(rset1.getString(1));
				}
				
				if(Vcont_type.elementAt(i).toString().equalsIgnoreCase("T") || Vcont_type.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					String queryTax = "select amount from fms7_inv_compo_dtl where inv_seq_no like "+
							"'"+Vinvseqno.elementAt(i).toString()+"' and price_cd='6' and (flag_temp not like 'T' or flag_temp is null)";
					
					rset1=stmt1.executeQuery(queryTax);
					////System.out.println("---JAVA queryTax---: "+queryTax);
					
					if(rset1.next())
					{
						amt = ""+java.text.NumberFormat.getInstance().parse(rset1.getString(1));
						Adj_Tax_amt=amt;	
						tax_amt_inr = ""+(Double.parseDouble(tax_amt_inr) - Double.parseDouble(amt));
					}
				}
			}
			////System.out.println("===Vadvflag=== "+Vadvflag);
			
			////System.out.println("JAVA amt: "+amt);
			////System.out.println("JAVA Adj_Tax_amt: "+Adj_Tax_amt);
			////System.out.println("JAVA tax_amt_inr: "+tax_amt_inr);
			
			for(int j=0;j<Vhlplinvseqno.size();j++)
			{
				double total_amt_inr=Double.parseDouble(Vinv_value.elementAt(j).toString());
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+Vtax_str_cd.elementAt(j).toString()+" AND " +
						  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+Vtax_str_cd.elementAt(j).toString()+" AND " +
						  "B.app_date<=TO_DATE('"+from_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code ASC";
			 			  //"B.app_date<=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";	//BK20151203
				
				////System.out.println("Query For Finding Out Correct Tax Structure Details For  = "+queryString);
				rset=stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				tax_cd = rset.getString(1);
				tax_on=rset.getString(3);
				
				////System.out.println("---rset.getString(3)---"+rset.getString(3));
				
				if(rset.getString(3).equals("1")) 
				{
					tax_amt = (total_amt_inr*Double.parseDouble(rset.getString(2)))/100;
				}
				else if(rset.getString(3).equals("2"))
				{
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+Vtax_str_cd.elementAt(j).toString()+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+Vtax_str_cd.elementAt(j).toString()+" AND " +
								  "B.app_date<=TO_DATE('"+from_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
					
					////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value For  = "+queryString1);
		 	 		
					rset1=stmt1.executeQuery(queryString1);
		 	 		
					if(rset1.next())
		 	 		{
		 	 			if(rset1.getString(3).equals("1"))
		 				{
		 					tax_amt = (total_amt_inr*Double.parseDouble(rset1.getString(2)))/100;
		 				}	
		 	 			
		 	 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
		 	 		}
		 	 		else
		 	 		{
		 	 			tax_amt=0;
		 	 		}
				}
				else
				{
					tax_amt = 0;
				}
				
				////System.out.println("---JAVA tax_amt-before-- "+tax_amt);
				
				tax_code.add(tax_cd);  	
				Vtax_on.add(tax_on);	
				tax_amount.add(tax_amt);
				
				////System.out.println("---JAVA tax_amt-after-- "+tax_amt);
				
				}
			}
	
			////System.out.println("---JAVA tax_code--- "+tax_code);
			////System.out.println("---JAVA Vtax_on--- "+Vtax_on);
			////System.out.println("---JAVA tax_amount--- "+tax_amount);
			
			////System.out.println("---JAVA fetch_Invoice_Details() ends---");
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
			e.printStackTrace();
		}
	}
	
	public void fetch_Invoice_Details_old_20160206() 						//BK20160206
	{
		try
		{
			////System.out.println("---JAVA fetch_Invoice_Details() starts---");
			
			String from_dt="01/"+month+"/"+year;
			String to_dt="";
			
			queryString="Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			//////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt=rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			
			queryString="Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("From Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString="Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			//////System.out.println("To The Selected Month = "+queryString);
			rset=stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon=rset.getString(1)==null?"0":rset.getString(1);
			}
			
			////System.out.println("-JAVA--from_dt---:"+from_dt);
			////System.out.println("-JAVA--to_dt---:"+to_dt);
			////System.out.println("-JAVA--mon---:"+mon);
			////System.out.println("-JAVA--to_mon---:"+to_mon);
			
			if(segment.equalsIgnoreCase("SALES"))
			{
				contract_type="S";
			}
			else if(segment.equalsIgnoreCase("REGAS"))
			{
				contract_type="R";
			}
			else if(segment.equalsIgnoreCase("LTCORA_CN"))
			{
				contract_type="C";
			}
			
			Vector Vmonth=new Vector();
			Vector Vcustomer_cd=new Vector();
			Vector Vcustomer_abbr=new Vector();
			Vector Vhlplinvseqno=new Vector();
			
			Vector Vinv_dt=new Vector();
			Vector Vdue_dt=new Vector();
			
			Vector Vsales_value=new Vector();
			Vector Vtax_nm=new Vector();
			Vector Vtax_cd=new Vector();
			
			Vector Vinv_value=new Vector();
			Vector Vcont_type=new Vector();
			
			if(!segment.equalsIgnoreCase(""))
			{
				queryString="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
							 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE " +
							 "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
							 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
				
//				queryString="Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +	//3
//						   "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +		//7
//						   "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +		//13
//						   "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +	//20
//						   "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +	//26
//						   "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +	//29
//						   ",MAPPING_ID,CHECKED_FLAG,APPROVED_FLAG " + 	//30
//						   "FROM FMS7_INVOICE_MST WHERE CONTRACT_TYPE='"+contract_type+"' AND INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
//						   "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			}
			else
			{
//				queryString="Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +	//3
//						   "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +		//7
//						   "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +		//13
//						   "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +	//20
//						   "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +	//26
//						   "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +	//29
//						   ",MAPPING_ID,CHECKED_FLAG,APPROVED_FLAG " + 	//30
//						   "FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
//						   "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
				
				queryString="select TO_CHAR(INVOICE_DT,'Month'),CUSTOMER_CD,HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," +
						 "GROSS_AMT_INR,NET_AMT_INR,TO_CHAR(DUE_DT,'DD/MM/YYYY'),CONTRACT_TYPE " +
						 "FROM FMS7_INVOICE_MST WHERE INVOICE_DT BETWEEN TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
						 "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY TO_CHAR(INVOICE_DT,'DD/MM/YYYY') DESC";
			
			}
			
			rset1=stmt1.executeQuery(queryString);
			while(rset1.next())
			{
				Vmonth.add(rset1.getString(1));
				Vcustomer_cd.add(rset1.getString(2));
				
				String queryString1 = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+rset1.getString(2)+"'";
				rset=stmt.executeQuery(queryString1);
				while(rset.next())
				{
					Vcustomer_abbr.add(rset.getString(2));
				}
				
				Vhlplinvseqno.add(rset1.getString(1));
				Vinv_dt.add(rset1.getString(1));
				Vsales_value.add(rset1.getString(1));
				Vinv_value.add(rset1.getString(1));
				Vdue_dt.add(rset1.getString(1));
				Vcont_type.add(rset1.getString(1));
			}
			
			////System.out.println("---JAVA fetch_Invoice_Details() ends---");
		}
		catch(Exception e)
		{
			////System.out.println("JAVA fetch_Invoice_Details() Exception---> "+e);
		}
	}
	
	public void checkForColumn()
	{
		try
		{
			String query="SELECT COUNT(*) FROM FMS7_ACCOUNT_APPROVED_DTL WHERE ";
			rset=stmt.executeQuery(query);
			if(rset.next())
			{
				
				query="";
				stmt.executeUpdate(query);
				
				conn.commit();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	
	public void fetchReGasRegisterData()	//BK20151118 Added SBC value here
	{


		Vector Vday_invoice = new Vector();
		Vector Vmonth_invoice = new Vector();
		Vector Vyear_invoice = new Vector();

		Vector Vregs_no = new Vector();
		Vector Vregas_rev_no = new Vector();
		Vector Vcargo_seq_no = new Vector();

		Vector Vday_cargo = new Vector();
		Vector Vmonth_cargo = new Vector();
		Vector Vyear_cargo = new Vector();
		Vector Vcust_cd__cargo = new Vector();

		Vector PERIOD_END_DT = new Vector();
		Vector PERIOD_STR_DT = new Vector();
		int off = 0;

		try {

			String from_dt = "01/" + month + "/" + year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('" + to_month + "/"
					+ to_year + "','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				to_dt = rset.getString(1) == null ? "0" : rset.getString(1);
			}
			queryString = "Select To_char(to_date('" + from_dt
					+ "','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				mon = rset.getString(1) == null ? "0" : rset.getString(1);
			}

			queryString = "Select To_char(to_date('" + to_dt
					+ "','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				to_mon = rset.getString(1) == null ? "0" : rset.getString(1);
			}

			// INVOICE DATA BASED ON GIVEN RANGE
			if (customer_cd != null && !customer_cd.trim().equals("")
					&& !customer_cd.trim().equals("0")) {
				
				queryString = "Select HLPL_INV_SEQ_NO,"
						+ "TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," + "CUSTOMER_CD,"
						+ "TOTAL_QTY," + "EXCHG_RATE_VALUE," + "GROSS_AMT_USD,"
						+ "GROSS_AMT_INR," + "NET_AMT_INR," + "FINANCIAL_YEAR,"
						+ "TAX_STRUCT_CD," + "TO_CHAR(INVOICE_DT,'Month'),"
						+ "CONTRACT_TYPE," + "CONTACT_PERSON_CD,"
						+ "EXCHG_RATE_CD,"
						+ "TO_CHAR(EXCHG_RATE_DT,'DD/MM/YYYY'),"
						+ "EXCHG_RATE_TYPE," + "PLANT_SEQ_NO,"
						+ "SUN_APPROVAL ," + "TO_CHAR(INVOICE_DT,'dd'),"
						+ "TO_CHAR(INVOICE_DT,'mm'),"
						+ "TO_CHAR(INVOICE_DT,'yyyy'),"
						+ "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'), "
						+ "TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY'),"
						+ "OFFSPEC_QTY, " + "offspec_flag, sn_no, fgsa_no "
						+ "FROM FMS7_INVOICE_MST "
						+ "WHERE INVOICE_DT between (to_date('" + from_dt
						+ "','dd/mm/yyyy')) and " + "(to_date('" + to_dt
						+ "','dd/mm/yyyy')) AND CONTRACT_TYPE='R' "
						+ "AND CUSTOMER_CD = '" + customer_cd + "' "
						+ "ORDER BY FINANCIAL_YEAR,INVOICE_DT,HLPL_INV_SEQ_NO";
			} else {

				queryString = "Select HLPL_INV_SEQ_NO,"
						+ "TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," + "CUSTOMER_CD,"
						+ "TOTAL_QTY," + "EXCHG_RATE_VALUE," + "GROSS_AMT_USD,"
						+ "GROSS_AMT_INR," + "NET_AMT_INR," + "FINANCIAL_YEAR,"
						+ "TAX_STRUCT_CD," + "TO_CHAR(INVOICE_DT,'Month'),"
						+ "CONTRACT_TYPE," + "CONTACT_PERSON_CD,"
						+ "EXCHG_RATE_CD,"
						+ "TO_CHAR(EXCHG_RATE_DT,'DD/MM/YYYY'),"
						+ "EXCHG_RATE_TYPE," + "PLANT_SEQ_NO," + "SALE_PRICE, "
						+ "TO_CHAR(INVOICE_DT,'dd'),"
						+ "TO_CHAR(INVOICE_DT,'mm'),"
						+ "TO_CHAR(INVOICE_DT,'yyyy'),"
						+ "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'), "
						+ "TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY'),"
						+ " fgsa_no, fgsa_rev_no, sn_no "
						+ "FROM FMS7_INVOICE_MST  "
						+ "WHERE INVOICE_DT between (to_date('" + from_dt
						+ "','dd/mm/yyyy')) and " + "(to_date('" + to_dt
						+ "','dd/mm/yyyy')) AND CONTRACT_TYPE='R' "
						+ "ORDER BY FINANCIAL_YEAR,INVOICE_DT,HLPL_INV_SEQ_NO";
			}

			////System.out.println("Regas Invoice Details Query = " + queryString);
			rset = stmt.executeQuery(queryString);
			while (rset.next()) {
				
				REGAS_HLPL_INV_SEQ_NO.add(rset.getString(1) == null ? "" : rset
						.getString(1));
				REGAS_INVOICE_DT.add(rset.getString(2) == null ? "" : rset
						.getString(2));
				REGAS_CUSTOMER_CD_INV.add(rset.getString(3) == null ? "" : rset
						.getString(3));
				REGAS_TOTAL_QTY.add(rset.getString(4) == null ? "" : rset
						.getString(4));
				REGAS_EXCHG_RATE_VALUE.add(rset.getString(5) == null ? ""
						: rset.getString(5));
				REGAS_GROSS_AMT_USD.add(rset.getString(6) == null ? "" : rset
						.getString(6));
				REGAS_GROSS_AMT_INR.add(rset.getString(7) == null ? "" : rset
						.getString(7));
				REGAS_FINANCIAL_YEAR.add(rset.getString(9) == null ? "" : rset
						.getString(9));
				REGAS_TAX_STRUCT_CD.add(rset.getString(10) == null ? "" : rset
						.getString(10));
				REGAS_INVOICE_MONTH.add(rset.getString(11) == null ? "" : rset
						.getString(11));
				REGAS_CONTRACT_TYPE.add(rset.getString(12) == null ? "" : rset
						.getString(12));
				REGAS_EXCHG_RATE_CD.add(rset.getString(14) == null ? "" : rset
						.getString(14));
				REGAS_EXCHG_RATE_DT.add(rset.getString(15) == null ? "" : rset
						.getString(15));
				REGAS_EXCHG_RATE_TYPE.add(rset.getString(16) == null ? ""
						: rset.getString(16));
				REGAS_PLANT_SEQ_NO.add(rset.getString(17) == null ? "" : rset
						.getString(17));
				REGAS_GAS_TARIF.add(rset.getString(18) == null ? "" : rset
						.getString(18));
				Vday_invoice.add(rset.getString(19) == null ? "" : rset
						.getString(19));
				Vmonth_invoice.add(rset.getString(20) == null ? "" : rset
						.getString(20));
				Vyear_invoice.add(rset.getString(21) == null ? "" : rset
						.getString(21));
				PERIOD_END_DT.add(rset.getString(22) == null ? "" : rset
						.getString(22));
				PERIOD_STR_DT.add(rset.getString(23) == null ? "" : rset
						.getString(23));

				Vregs_no.add(rset.getString(24) == null ? "" : rset
						.getString(24));
				Vregas_rev_no.add(rset.getString(25) == null ? "" : rset
						.getString(25));
				Vcargo_seq_no.add(rset.getString(26) == null ? "" : rset
						.getString(26));

				// OFFSPEC QTY FOR GIVEN INVOICE
				queryString1 = "SELECT A.qty_offspec, A.offspec_flag "
						+ "FROM FMS7_DAILY_ALLOCATION_DTL  A"
						+ " WHERE A.gas_dt <= to_date('"
						+ (rset.getString(22) == null ? "" : rset.getString(22))
						+ "','dd/mm/yyyy') "
						+ " and A.gas_dt >= to_date('"
						+ (rset.getString(23) == null ? "" : rset.getString(23))
						+ "','dd/mm/yyyy') "
						+ " and A.customer_cd="
						+ (rset.getString(3) == null ? "" : rset.getString(3))
						+ " AND "
						+ "A.plant_seq_no="
						+ (rset.getString(17) == null ? "" : rset.getString(17))
						+ " AND "
						+ "A.fgsa_no='"
						+ (rset.getString(24) == null ? "" : rset.getString(24))
						+ "' AND "
						+
						// "A.fgsa_rev_no='"+(rset.getString(25)==null?"":rset.getString(25))+"'
						// AND " +
						"A.contract_type='"
						+ (rset.getString(12) == null ? "" : rset.getString(12))
						+ "' "
						+ " and A.sn_no = '"
						+ (rset.getString(26) == null ? "" : rset.getString(26))
						+ "'";

				//////System.out.println(">>>>>>>>>>>>" + queryString1);
				rset2 = stmt2.executeQuery(queryString1);

				double acc_qty = 0;
				double rej_qty = 0;
				while (rset2.next()) {
					
					if ((rset2.getString(2) == null ? "N" : rset2.getString(2))
							.equals("N")
							|| (rset2.getString(2) == null ? "n" : rset2
									.getString(2)).equals("n")) {
						
						acc_qty += 0;
						rej_qty += (rset2.getDouble(1) == 0 ? 0 : rset2
								.getDouble(1));

					} else {
						
						acc_qty += (rset2.getDouble(1) == 0 ? 0 : rset2
								.getDouble(1));
						rej_qty += 0;

					}

				}
				REGAS_OFFSPEC_ACC_QTY.add("" + acc_qty);
				REGAS_OFFSPEC_REJ_QTY.add("" + rej_qty);
			}
			// OFFSPEC QTY FOR GIVEN INVOICE END

			/*////System.out.println("cardo : " + REGAS_INVOICE_DT + " "
					+ REGAS_HLPL_INV_SEQ_NO + " " + REGAS_GROSS_AMT_USD + " "
					+ REGAS_EXCHG_RATE_VALUE + " " + REGAS_GROSS_AMT_INR);
			//System.out.println("REGAS_OFFSPEC_REJ_QTY = "
					+ REGAS_OFFSPEC_REJ_QTY);
			//System.out.println("REGAS_OFFSPEC_ACC_QTY = "
					+ REGAS_OFFSPEC_ACC_QTY);
			//System.out.println("REGAS_OFFSPEC_FLAG = " + REGAS_OFFSPEC_FLAG);
*/
			
			// FOR CUSTOMER OF INVOICE

			for (int i = 0; i < REGAS_CUSTOMER_CD_INV.size(); i++) {
				
				queryString = "SELECT customer_name, customer_abbr "
						+ "FROM FMS7_CUSTOMER_MST " + "where customer_cd = '"
						+ REGAS_CUSTOMER_CD_INV.elementAt(i) + "'";
				// ////System.out.println("Regas Customer Details Query =
				// "+queryString);
				rset = stmt.executeQuery(queryString);
				if (rset.next()) {
					
					REGAS_CUSTOMER_NM.add(rset.getString(1) == null ? "" : rset
							.getString(1));
					REGAS_CUSTOMER_ABBR.add(rset.getString(2) == null ? ""
							: rset.getString(2));

				} else {
					
					REGAS_CUSTOMER_NM.add("");
					REGAS_CUSTOMER_ABBR.add("");
				}
			}
			// FOR CUSTOMER OF INVOICE END
			// INVOICE DATA BASED ON GIVEN RANGE END

			// FOR RE GAS CARGO DETAIL BASED ON GIVEN RANGE

			queryString = "SELECT SHIP_NAME,"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'DD/MM/YYYY'),"
					+ "ADQ_QTY,"
					+ "RE_GAS_TARIF,"
					+ "SUPP_CD, "
					+ "TO_CHAR(ACTUAL_RECPT_DT,'dd'),"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'mm'),"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'yyyy'), "
					+ "CUSTOMER_CD, cargo_ref_no, "
					+ "NVL(SUPP_NM,''), sys_use_gas "
					+ "FROM FMS7_RE_GAS_CARGO_DTL "
					+ "WHERE TO_DATE(TO_CHAR(ACTUAL_RECPT_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN "
					+ "TO_DATE('" + from_dt + "','DD/MM/YYYY') AND TO_DATE('"
					+ to_dt + "','DD/MM/YYYY') " + "ORDER BY ACTUAL_RECPT_DT ";
			////System.out.println(/*"Regas CARGO Details Query = "*/queryString);
			rset = stmt.executeQuery(queryString);

			while (rset.next()) {
				
				REGAS_SHIP_NAME.add(rset.getString(1) == null ? "" : rset
						.getString(1));
				REGAS_ACTUAL_RECPT_DT.add(rset.getString(2) == null ? "" : rset
						.getString(2));
				REGAS_ADQ_QTY.add(rset.getString(3) == null ? "" : rset
						.getString(3));
				REGAS_SUPP_CD.add(rset.getString(5) == null ? "" : rset
						.getString(5));
				Vday_cargo.add(rset.getString(6) == null ? "" : rset
						.getString(6));
				Vmonth_cargo.add(rset.getString(7) == null ? "" : rset
						.getString(7));
				Vyear_cargo.add(rset.getString(8) == null ? "" : rset
						.getString(8));
				Vcust_cd__cargo.add(rset.getString(9) == null ? "" : rset
						.getString(9));
				REGAS_CUSTOMER_CD_CARGO.add(rset.getString(9) == null ? ""
						: rset.getString(9));
				REGAS_CARGO_REF_NO.add(rset.getString(10) == null ? "" : rset
						.getString(10));
				REGAS_SUPPL_ABBR.add(rset.getString(11) == null ? "" : rset
						.getString(11));
				REGAS_SUG.add(rset.getString(12) == null ? "" : rset
						.getString(12));

			}
			// FOR RE GAS CARGO DETAIL BASED ON GIVEN RANGE END

			// FOR CUSTOMER OF CARGO

			for (int i = 0; i < REGAS_CUSTOMER_CD_CARGO.size(); i++) {
				
				queryString = "SELECT customer_name, customer_abbr "
						+ "FROM FMS7_CUSTOMER_MST " + "where customer_cd = '"
						+ REGAS_CUSTOMER_CD_CARGO.elementAt(i) + "'";
				// ////System.out.println("Regas Customer Details Query =
				// "+queryString);
				rset = stmt.executeQuery(queryString);
				if (rset.next()) {
					
					REGAS_CUSTOMER_ABBR_CARGO
							.add(rset.getString(2) == null ? "" : rset
									.getString(2));

				} else {
					
					REGAS_CUSTOMER_ABBR_CARGO.add("");
				}
			}
			// FOR CUSTOMER OF CARGO END
			
			
			/*//System.out.println("REGAS_SUG = " + REGAS_SUG.size());
			//System.out.println("REGAS_SUG = " + REGAS_SUG);
			//System.out.println("REGAS_ADQ_QTY = " + REGAS_ADQ_QTY.size());
			//System.out.println("REGAS_ADQ_QTY = " + REGAS_ADQ_QTY);
			//System.out.println("Regas REGAS_ACTUAL_RECPT_DT_tmpt  = "
					+ REGAS_ACTUAL_RECPT_DT);
*/
			// ADJUSTMENT
			// 1)FOR GIVE MONTH AND YEAR OF RANGE, IF CARGO ARRIVED BUT THERE IS NO
			// INVOICE AT ALL
			// 2)FOR GIVEN MONTHS OF RANGE, THERE IS INVOICE BUT NO CARGO
			// ARRIVED AT ALL
			// 3)INVOICES BETWEEN ARRIVAL OF TWO CARGO EXCLUDING LATER CARGO

			
			//HERE WE HAVE TAKEN THE TAMPORARY COPY OF EACH REQUIRED VARIABLES FOR THE ADJUSTMENT OF THE
			//INVOICES IN ORDER OF ARRIAVAL OF CARGO
			
//			 FOR SHIP ARRIVED 
			Vector REGAS_ACTUAL_RECPT_DT_tmpt = new Vector();
			Vector REGAS_SUPPL_NM_tmp = new Vector();
			Vector REGAS_SUPPL_ABBR_tmp = new Vector();
			Vector REGAS_ADQ_QTY_tmp = new Vector();
			Vector REGAS_SHIP_NAME_tmp = new Vector();
			Vector REGAS_CARGO_REF_NO_tmp = new Vector();
			Vector REGAS_CUSTOMER_ABBR_CARGO_tmp = new Vector();
			Vector REGAS_GAS_TARIF_tmp = new Vector();

			// FOR INVOICE
			Vector REGAS_INVOICE_DT_tmp = new Vector();
			Vector REGAS_CUSTOMER_ABBR_tmp = new Vector();
			Vector REGAS_TOTAL_QTY_tmp = new Vector();

			Vector REGAS_SUG_tmp = new Vector();

			Vector REGAS_EXCHG_RATE_VALUE_tmp = new Vector();
			Vector REGAS_GROSS_AMT_USD_tmp = new Vector();
			Vector REGAS_GROSS_AMT_INR_tmp = new Vector();

			Vector PERIOD_END_DT_tmp = new Vector();
			Vector REGAS_TAX_STRUCT_CD_tmp = new Vector();
			Vector REGAS_HLPL_INV_SEQ_NO_tmp = new Vector();
			Vector REGAS_FINANCIAL_YEAR_tmp = new Vector();

			Vector REGAS_OFFSPEC_REJ_QTY_tmp = new Vector();
			Vector REGAS_OFFSPEC_ACC_QTY_tmp = new Vector();

			//DAY, MON, YEAR RESPECTIVLY FOR CARGO ARRIAVAL DATE
			int tmpdayC = 0;
			int tmpmonC = 0;
			int tmpyrC = 0;

			//DAY, MON, YEAR RESPECTIVLY FOR INVOICE DATE
			int tmpdayI = 0;
			int tmpmonI = 0;
			int tmpyrI = 0;
			
			if(!Vday_invoice.isEmpty())
			{
				tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(0)
						.toString());
				
				tmpdayI = Integer.parseInt(Vday_invoice.elementAt(0)
						.toString());
				
				tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(0)
						.toString());
			}
			// IF INVOICE BEFORE CARGO...... I WILL CATCH THEM HERE
			if (Vday_cargo.size() > 0) {
				
				tmpmonC = Integer
						.parseInt(Vmonth_cargo.elementAt(0).toString());
				
				tmpdayC = Integer.parseInt(Vday_cargo.elementAt(0).toString());
				
				tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(0).toString());
				for (int j = 0; j < Vday_invoice.size(); j++) {
					
					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());

					if (Integer.parseInt(year) <= tmpyrI && tmpyrI < tmpyrC) {
						
						// invoice before cargo arrived
						// //System.out.println("11 Invoice befor first cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(j));
						REGAS_SUPPL_ABBR_tmp.add("NOC");
						REGAS_ADQ_QTY_tmp.add("NOC");
						REGAS_SHIP_NAME_tmp.add("NOC");
						REGAS_SUG_tmp.add("NOC");
						REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));

						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
						
					} else if (Integer.parseInt(year) <= tmpyrI
							&& tmpyrI <= tmpyrC) {
						
						if (tmpmonI < tmpmonC) {
							
							// invoice before cargo arrived
							// //System.out.println("22 Invoice befor first cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
							REGAS_CARGO_REF_NO_tmp.add("NOC");

							REGAS_SUPPL_ABBR_tmp.add("NOC");
							REGAS_ADQ_QTY_tmp.add("NOC");
							REGAS_SHIP_NAME_tmp.add("NOC");
							REGAS_SUG_tmp.add("NOC");
							REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));
							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j)); // */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else if (tmpmonI == tmpmonC) {
							
							if (1 <= tmpdayI && tmpdayI < tmpdayC) {
								
								// Invoice before cargo arrived
								// //System.out.println("33 Invoice befor first
								// cargo arrived:
								// "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
								REGAS_CARGO_REF_NO_tmp.add("NOC");
								REGAS_SUPPL_ABBR_tmp.add("NOC");
								REGAS_ADQ_QTY_tmp.add("NOC");
								REGAS_SHIP_NAME_tmp.add("NOC");
								REGAS_GAS_TARIF_tmp.add("NOC");
								REGAS_SUG_tmp.add("NOC");
								REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */

								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("No Invoice befor first
								// cargo arrived:
								// "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								break;
							}
						} else {
							
							// //System.out.println("No Invoice befor first cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							break;
						}
					} else {
						
						// //System.out.println("No Invoice befor first cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						break;
					}

				}
			}
			

			int lenC = REGAS_ACTUAL_RECPT_DT.size();

			tmpdayC = 0;
			tmpmonC = 0;
			tmpyrC = 0;
			
			//DAY, MON, YEAR RESPECTIVLT FOR CARGO ARRIAVAL DATE(NEXT TO CURRENT CARGO)
			int tmpdayC1 = 0;
			int tmpmonC1 = 0;
			int tmpyrC1 = 0;

			tmpdayI = 0;
			tmpmonI = 0;
			tmpyrI = 0;

			// INVOICES BETWEEN TO IMIDIATE CARGO ARRIAVAL..... 
			//EXCLUDING LAST CARGO (WE CONSIDER IT AFTERWARDS)
			int chk1 = 0;

			for (int i = 0; i < REGAS_ACTUAL_RECPT_DT.size() - 1; i++) {
				
//				 //System.out.println("I :"+i+REGAS_ACTUAL_RECPT_DT.elementAt(i));
				chk1 = 0;
				for (int j = 0; j < REGAS_INVOICE_DT.size(); j++) {
					chk1++;
//					 //System.out.println("J :"+j+" "+REGAS_INVOICE_DT.elementAt(j));
					
					tmpmonC = Integer.parseInt(Vmonth_cargo.elementAt(i)
							.toString());
					
					tmpdayC = Integer.parseInt(Vday_cargo.elementAt(i)
							.toString());
					
					tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(i)
							.toString());
					
					if (i < REGAS_ACTUAL_RECPT_DT.size()) {
						
						tmpmonC1 = Integer.parseInt(Vmonth_cargo.elementAt(
								i + 1).toString());
						
						tmpdayC1 = Integer.parseInt(Vday_cargo.elementAt(i + 1)
								.toString());
						
						tmpyrC1 = Integer.parseInt(Vyear_cargo.elementAt(i + 1)
								.toString());
					}

					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());

					// System.out////System.out.print+" "+tmpmonC+" "+tmpyrC+"
					// "+tmpdayI+" "+tmpmonI+" "+tmpyrI+" "+tmpdayC1+"
					// "+tmpmonC1+" "+tmpyrC1);
					// new
					
					if (tmpyrC == tmpyrI && tmpyrC1 == tmpyrI) {
						// //System.out.println("From first if of yr "+j);
						
						if (tmpmonC < tmpmonI && tmpmonI < tmpmonC1) {
							// //System.out.println("From check month 1 >> check
							// day 1"+j);
							// //System.out.println("Invoice for date"+j+"
							// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
							// "+REGAS_INVOICE_DT.elementAt(j));

							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.elementAt(i));
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.elementAt(i));
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.elementAt(i));
							REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));

							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));// */

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else if (tmpmonC == tmpmonI && tmpmonI == tmpmonC1) {
							
							// //System.out.println("From check month 1"+j);
							
							if (tmpdayC <= tmpdayI && tmpdayI < tmpdayC1) {
								
								// //System.out.println("From check month 1 >>
								// check day 1"+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

//JHP20120313
								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								////System.out.println("J:=============-"+REGAS_INVOICE_DT);
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));

								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// 

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// 
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));//
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
//JHP20120313								
//								REGAS_INVOICE_DT_tmp.add("*NOI");
//								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
//								REGAS_TOTAL_QTY_tmp.add("*NOI");
//								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
//								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
//								REGAS_GROSS_AMT_INR_tmp.add("*NOI");
//
//								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
//								PERIOD_END_DT_tmp.add("*NOI");
//								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
//								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");
//								REGAS_GAS_TARIF_tmp.add("*NOI");
								////System.out.println("H:=============-"+REGAS_INVOICE_DT_tmp);

							} else {
								
								// //System.out.println("From check month 1 >>
								// check day 2"+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC == tmpmonI) {
							
							// //System.out.println("From check month 2 ");
							
							if (tmpdayC <= tmpdayI) {
								
								// //System.out.println("From check month 2
								// MI:LANNNN >> check day 1 "+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("From check month 2 >>
								// check day 2 "+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC1 == tmpmonI) {
							
							// //System.out.println("From check month 3 ");
							
							if (1 <= tmpdayI && tmpdayI < tmpdayC1) {
							
								// //System.out.println("From check month 3 >>
								// check day 1 "+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("From check month 2 >>
								// check day 2 "+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");

							}
						} else {
							
							// //System.out.println("From check month 4 >> check
							// day 2 "+j);
							// //System.out.println("No invoice for the
							// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
							// >>"+REGAS_INVOICE_DT.elementAt(j));

							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.elementAt(i));
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.elementAt(i));
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.elementAt(i));
							REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

							REGAS_INVOICE_DT_tmp.add("*NOI");
							REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
							REGAS_TOTAL_QTY_tmp.add("*NOI");
							REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
							REGAS_GROSS_AMT_USD_tmp.add("*NOI");
							REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

							REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
							PERIOD_END_DT_tmp.add("*NOI");// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
							REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
							REGAS_GAS_TARIF_tmp.add("*NOI");

						}
					}
					// new
					else if (tmpyrC < tmpyrI && tmpyrI < tmpyrC1) {
						
						// //System.out.println(">> yr check 2 "+j);
						// //System.out.println("Invoice for date"+j+"
						// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
						// "+REGAS_INVOICE_DT.elementAt(j));

						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.elementAt(i));
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(i));
						REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
						REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));
						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
					} else if (tmpyrC <= tmpyrI && tmpyrI <= tmpyrC1) {
						
						// //System.out.println(">> yr check 3");
						
						if (tmpyrC == tmpyrI) {
							
							// //System.out.println(">> individual yr for tmpyrC
							// check 1");
							
	//JHP20120426			if (tmpmonC <= tmpmonI) {
						if (tmpmonC <= tmpmonI && tmpdayC <= tmpdayI) { //JHP201204226
								// //System.out.println(">> month check 1");
								// //System.out.println("invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println(">> month check 2 ");
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpyrI == tmpyrC1) {
							
							// //System.out.println(">> individual yr for tmpyrC1
							// check 2");
							
							if (tmpmonI < tmpmonC1) {
								
								// //System.out.println(">> month check 1");
								// //System.out.println("invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else if (tmpmonI == tmpmonC1) {
								
								// //System.out.println(">> month check 2");
								
								if (1 <= tmpdayI && tmpdayI < tmpdayC1) {
									
									// //System.out.println(">> month check 2>>day
									// check 1");
									// //System.out.println("invoice for the
									// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
									// >>"+REGAS_INVOICE_DT.elementAt(j));

									REGAS_ACTUAL_RECPT_DT_tmpt
											.add(REGAS_ACTUAL_RECPT_DT
													.elementAt(i));
									REGAS_CARGO_REF_NO_tmp
											.add(REGAS_CARGO_REF_NO
													.elementAt(i));
									REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
											.elementAt(i));
									REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
											.elementAt(i));
									REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
											.elementAt(i));
									REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
									REGAS_CUSTOMER_ABBR_CARGO_tmp
											.add(REGAS_CUSTOMER_ABBR_CARGO
													.elementAt(i));

									REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
											.elementAt(j));
									REGAS_CUSTOMER_ABBR_tmp
											.add(REGAS_CUSTOMER_ABBR
													.elementAt(j));
									REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
											.elementAt(j));
									REGAS_EXCHG_RATE_VALUE_tmp
											.add(REGAS_EXCHG_RATE_VALUE
													.elementAt(j));
									REGAS_GROSS_AMT_USD_tmp
											.add(REGAS_GROSS_AMT_USD
													.elementAt(j));
									REGAS_GROSS_AMT_INR_tmp
											.add(REGAS_GROSS_AMT_INR
													.elementAt(j));// */

									REGAS_TAX_STRUCT_CD_tmp
											.add(REGAS_TAX_STRUCT_CD
													.elementAt(j));
									PERIOD_END_DT_tmp.add(PERIOD_END_DT
											.elementAt(j));// */
									REGAS_HLPL_INV_SEQ_NO_tmp
											.add(REGAS_HLPL_INV_SEQ_NO
													.elementAt(j));
									REGAS_FINANCIAL_YEAR_tmp
											.add(REGAS_FINANCIAL_YEAR
													.elementAt(j));// */
									REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
											.elementAt(j));
								} else {
									
									// //System.out.println(">> month check 2>>day
									// check 2");
									// //System.out.println("No invoice for the
									// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
									// >>"+REGAS_INVOICE_DT.elementAt(j));

									REGAS_ACTUAL_RECPT_DT_tmpt
											.add(REGAS_ACTUAL_RECPT_DT
													.elementAt(i));
									REGAS_CARGO_REF_NO_tmp
											.add(REGAS_CARGO_REF_NO
													.elementAt(i));
									REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
											.elementAt(i));
									REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
											.elementAt(i));
									REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
											.elementAt(i));
									// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
									REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
									REGAS_CUSTOMER_ABBR_CARGO_tmp
											.add(REGAS_CUSTOMER_ABBR_CARGO
													.elementAt(i));

									REGAS_INVOICE_DT_tmp.add("*NOI");
									REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
									REGAS_TOTAL_QTY_tmp.add("*NOI");
									REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
									REGAS_GROSS_AMT_USD_tmp.add("*NOI");
									REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

									REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
									PERIOD_END_DT_tmp.add("*NOI");// */
									REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
									REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
									REGAS_GAS_TARIF_tmp.add("*NOI");
								}
							} else {
								
								// //System.out.println(">> month check 3");
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						}
					} else {
						
						// //System.out.println(">> year check 4 ");
						// //System.out.println("No invoice for the
						// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
						// >>"+REGAS_INVOICE_DT.elementAt(j));

						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.elementAt(i));
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(i));
						REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
						// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
						REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

						REGAS_INVOICE_DT_tmp.add("*NOI");
						REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
						REGAS_TOTAL_QTY_tmp.add("*NOI");
						REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
						REGAS_GROSS_AMT_USD_tmp.add("*NOI");
						REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

						REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
						PERIOD_END_DT_tmp.add("*NOI");// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
						REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
						REGAS_GAS_TARIF_tmp.add("*NOI");
					}
				}
				if(chk1 == 0)
				{
					REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
							.elementAt(i));
					REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
							.elementAt(i));
					REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
					REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
					REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
					// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
					REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
					REGAS_CUSTOMER_ABBR_CARGO_tmp
							.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

					REGAS_INVOICE_DT_tmp.add("*NOI");
					REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
					REGAS_TOTAL_QTY_tmp.add("*NOI");
					REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
					REGAS_GROSS_AMT_USD_tmp.add("*NOI");
					REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

					REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
					PERIOD_END_DT_tmp.add("*NOI");// */
					REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
					REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
					REGAS_GAS_TARIF_tmp.add("*NOI");
				}
			}

			tmpmonC = 0;
			tmpdayC = 0;
			tmpyrC = 0;

			tmpmonI = 0;
			tmpdayI = 0;
			tmpyrI = 0;

			// INVOICES FOR LAST CARGO ARRIAVED
			
			chk1 = 0;
			if (Vday_cargo.size() > 0) {
				
				tmpmonC = Integer.parseInt(Vmonth_cargo.elementAt(lenC - 1)
						.toString());
				
				tmpdayC = Integer.parseInt(Vday_cargo.elementAt(lenC - 1)
						.toString());
				
				tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(lenC - 1)
						.toString());
				chk1 = 0;
				for (int j = 0; j < Vday_invoice.size(); j++) {
					
					chk1++;
					
					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());
					
					if (tmpyrC == tmpyrI) {
						
						if (tmpmonC == tmpmonI) {
							
							if (tmpdayC <= tmpdayI) {
								
								// invoice FOR LAST cargo
								// Integer.parseInt(to_year)
								// //System.out.println("Invoice for last cargo :
								// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT
												.lastElement());
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.lastElement());
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.lastElement());
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.lastElement());
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.lastElement());
								REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.lastElement());

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("No Invoice for last cargo
								// arrived:
								// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT
												.lastElement());
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.lastElement());
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.lastElement());
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.lastElement());
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.lastElement());
								REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.lastElement());

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC < tmpmonI) {
							
							// //System.out.println("Invoice for last cargo :
							// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
							// "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.lastElement());
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.lastElement());
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.lastElement());
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.lastElement());
							REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO
											.lastElement());

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));
							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));// */

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else {
							
							// //System.out.println("No Invoice for last cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.lastElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.lastElement());
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.lastElement());
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.lastElement());
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.lastElement());
							REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO
											.lastElement());

							REGAS_INVOICE_DT_tmp.add("*NOI");
							REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
							REGAS_TOTAL_QTY_tmp.add("*NOI");
							REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
							REGAS_GROSS_AMT_USD_tmp.add("*NOI");
							REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

							REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
							PERIOD_END_DT_tmp.add("*NOI");// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
							REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
							REGAS_GAS_TARIF_tmp.add("*NOI");
						}
					} else if (tmpyrC < tmpyrI
							&& tmpyrI <= Integer.parseInt(to_year)) {

						// invoice FOR LAST cargo Integer.parseInt(to_year)
						// //System.out.println("Invoice for last cargo :
						// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.lastElement());
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.lastElement());
						REGAS_SUPPL_ABBR_tmp
								.add(REGAS_SUPPL_ABBR.lastElement());
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
						REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));
						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
					}

					else {
						
						// //System.out.println("No Invoice for last cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.lastElement());
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.lastElement());
						REGAS_SUPPL_ABBR_tmp
								.add(REGAS_SUPPL_ABBR.lastElement());
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
						REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

						REGAS_INVOICE_DT_tmp.add("*NOI");
						REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
						REGAS_TOTAL_QTY_tmp.add("*NOI");
						REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
						REGAS_GROSS_AMT_USD_tmp.add("*NOI");
						REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

						REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
						PERIOD_END_DT_tmp.add("*NOI");// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
						REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
						REGAS_GAS_TARIF_tmp.add("*NOI");// */
					}

				}
				
				if(chk1 == 0)
				{

					REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
							.lastElement());
					REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
							.lastElement());
					REGAS_SUPPL_ABBR_tmp
							.add(REGAS_SUPPL_ABBR.lastElement());
					REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
					REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
					REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
					REGAS_CUSTOMER_ABBR_CARGO_tmp
							.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

					REGAS_INVOICE_DT_tmp.add("*NOI");
					REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
					REGAS_TOTAL_QTY_tmp.add("*NOI");
					REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
					REGAS_GROSS_AMT_USD_tmp.add("*NOI");
					REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

					REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
					PERIOD_END_DT_tmp.add("*NOI");// */
					REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
					REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
					REGAS_GAS_TARIF_tmp.add("*NOI");// */
				}
			}

			// //System.out.println("Invoice NOT cargo");
			// //System.out.println("Cargo
			// >>>"+REGAS_ACTUAL_RECPT_DT_tmpt.size());
			// //System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp.size());
			// //System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT_tmpt);
			// //System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp);

			// advanced sorting
			String ship_nm = "";
			String ship_dt = "";
			String ship_nm1 = "";
			String ship_dt1 = "";
			String inv_dt = "";
			String inv_dt1 = "";
			int n = 0;

			for (int m = 0; m < REGAS_INVOICE_DT_tmp.size() - 1; m++) {
				
				ship_nm = REGAS_SHIP_NAME_tmp.elementAt(m).toString();
				
				ship_dt = REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m).toString();
				
				inv_dt = REGAS_INVOICE_DT_tmp.elementAt(m).toString();
				
				if (m < REGAS_INVOICE_DT_tmp.size()) {
					
					ship_nm1 = REGAS_SHIP_NAME_tmp.elementAt(m + 1).toString();
					
					ship_dt1 = REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m + 1)
							.toString();
					
					inv_dt1 = REGAS_INVOICE_DT_tmp.elementAt(m + 1).toString();
					
					if (ship_nm.equals(ship_nm1) && ship_dt.equals(ship_dt1)
							&& inv_dt.equals("*NOI") && inv_dt1.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m);
						REGAS_ADQ_QTY_tmp.removeElementAt(m);
						REGAS_SHIP_NAME_tmp.removeElementAt(m);
						REGAS_SUG_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m);

						REGAS_INVOICE_DT_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m);

						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m);
						PERIOD_END_DT_tmp.removeElementAt(m);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m);
						REGAS_GAS_TARIF_tmp.removeElementAt(m);
						m = m - 1;
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					} else if (ship_nm.equals(ship_nm1)
							&& ship_dt.equals(ship_dt1)
							&& !inv_dt.equals(inv_dt1) && inv_dt.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m);
						REGAS_ADQ_QTY_tmp.removeElementAt(m);
						REGAS_SHIP_NAME_tmp.removeElementAt(m);
						REGAS_SUG_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m);

						REGAS_INVOICE_DT_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m);

						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m);
						PERIOD_END_DT_tmp.removeElementAt(m);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m);
						REGAS_GAS_TARIF_tmp.removeElementAt(m);
						m = m - 1;
						
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					} else if (ship_nm.equals(ship_nm1)
							&& ship_dt.equals(ship_dt1)
							&& !inv_dt.equals(inv_dt1)
							&& inv_dt1.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m + 1);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m + 1);
						REGAS_ADQ_QTY_tmp.removeElementAt(m + 1);
						REGAS_SHIP_NAME_tmp.removeElementAt(m + 1);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m + 1);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m + 1);

						REGAS_INVOICE_DT_tmp.removeElementAt(m + 1);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m + 1);

						REGAS_SUG_tmp.removeElementAt(m + 1);
						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m + 1);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m + 1);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m + 1);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m + 1);
						PERIOD_END_DT_tmp.removeElementAt(m + 1);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m + 1);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m + 1);
						REGAS_GAS_TARIF_tmp.removeElementAt(m + 1);
						m = m - 1;
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					}

				}

			}
			
			//ADJUSTING OFFSPEC REJECTED & ACC QTY AS PER OF INVOICES
			off = 0;
			for (int i = 0; i < REGAS_INVOICE_DT_tmp.size(); i++) {

				if (!REGAS_INVOICE_DT_tmp.elementAt(i).toString()
						.equals("*NOI")) {
					
					REGAS_OFFSPEC_REJ_QTY_tmp.add(REGAS_OFFSPEC_REJ_QTY
							.elementAt(off));
					
					REGAS_OFFSPEC_ACC_QTY_tmp.add(REGAS_OFFSPEC_ACC_QTY
							.elementAt(off));
					
					off = off + 1;
					
				} else {
					
					REGAS_OFFSPEC_REJ_QTY_tmp.add("*NOI");
					REGAS_OFFSPEC_ACC_QTY_tmp.add("*NOI");
				}
			}

			/*
			 * //System.out.println(REGAS_OFFSPEC_REJ_QTY_tmp);
			 * //System.out.println(REGAS_OFFSPEC_ACC_QTY_tmp);
			 * //System.out.println(REGAS_ACTUAL_RECPT_DT_tmpt.size());
			 * //System.out.println(REGAS_CARGO_REF_NO_tmp.size());
			 * //System.out.println(REGAS_FINANCIAL_YEAR_tmp.size());
			 * //System.out.println(REGAS_HLPL_INV_SEQ_NO_tmp.size());
			 * //System.out.println(REGAS_SUPPL_ABBR_tmp.size());
			 * //System.out.println(REGAS_ADQ_QTY_tmp.size());
			 * //System.out.println(REGAS_SHIP_NAME_tmp.size());
			 * //System.out.println(REGAS_INVOICE_DT_tmp.size());
			 * //System.out.println(REGAS_CUSTOMER_ABBR_tmp.size());
			 * //System.out.println(REGAS_TOTAL_QTY_tmp.size());
			 * //System.out.println(REGAS_EXCHG_RATE_VALUE_tmp.size());
			 * //System.out.println(REGAS_GROSS_AMT_USD_tmp.size());
			 * //System.out.println(REGAS_GROSS_AMT_INR_tmp.size());
			 * //System.out.println(REGAS_TAX_STRUCT_CD_tmp.size());
			 * //System.out.println(PERIOD_END_DT_tmp.size());REGAS_GAS_TARIF_tmp.add("*NOI");
			 */
			
			//Adjustment
			Vector Vregs_no_tmp = new Vector();
			Vector Vregas_rev_no_tmp = new Vector();
			Vector Vcargo_seq_no_tmp = new Vector();
			Vector REGAS_CUSTOMER_CD_INV_tmp = new Vector();
			// re_sug

			int m = 0;
			for (int i = 0; i < REGAS_INVOICE_DT_tmp.size(); i++) {
				
				if (!REGAS_INVOICE_DT_tmp.elementAt(i).toString().trim()
						.equals("*NOI")) {
					
					Vregs_no_tmp.add(Vregs_no.elementAt(m));
					Vregas_rev_no_tmp.add(Vregas_rev_no.elementAt(m));
					Vcargo_seq_no_tmp.add(Vcargo_seq_no.elementAt(m));
					REGAS_CUSTOMER_CD_INV_tmp.add(REGAS_CUSTOMER_CD_INV
							.elementAt(m));
					m++;
					
				} else {
					
					Vregs_no_tmp.add("*NOI");
					Vregas_rev_no_tmp.add("*NOI");
					Vcargo_seq_no_tmp.add("*NOI");
					REGAS_CUSTOMER_CD_INV_tmp.add("*NOI");
				}
			}

			// adjustment
			REGAS_RECIEPT.clear();
			REGAS_REGASSIFIED.clear();
			REGAS_SUG.clear();
			REGAS_RECIEPT = REGAS_ADQ_QTY_tmp;
			REGAS_REGASSIFIED = REGAS_TOTAL_QTY_tmp;

			////System.out.println(" REGAS_ADQ_QTY_tmp " + REGAS_ADQ_QTY_tmp);
			////System.out.println(" REGAS_TOTAL_QTY_tmp " + REGAS_TOTAL_QTY_tmp);
			////System.out.println(" REGAS_SUG_tmp " + REGAS_SUG_tmp);
			// //System.out.println(REGAS_SUG_tmp.size());
			// //System.out.println(REGAS_SUG_tmp);
			
			// TO FIND SUG AND ASSOCIATED REGAS CARGO FOR GIVEN INVOICE
			double re_var_cost = 0;
			double re_sug = 0;
			String rgas_cargo_ref_no = "";
			for (int i = 0; i < REGAS_HLPL_INV_SEQ_NO_tmp.size(); i++) {
				
				if (!REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(i).toString().equals("*NOI")) {
					
					re_var_cost = 0;
				
					queryString = "SELECT sys_use_gas, cargo_ref_no "
							+ "FROM FMS7_RE_GAS_CARGO_DTL "
							+ "WHERE customer_cd = '"
							+ REGAS_CUSTOMER_CD_INV_tmp.elementAt(i) + "' "
							+ " and re_gas_no = '" + Vregs_no_tmp.elementAt(i)
							+ "' " //+ " and re_gas_rev_no = '"
					//		+ Vregas_rev_no_tmp.elementAt(i) + "' "
							+ " and cargo_seq_no = '"
							+ Vcargo_seq_no_tmp.elementAt(i) + "' ";
					////System.out.println(REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(i)+" "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					while (rset2.next()) {
						
						re_sug = Double
								.parseDouble((rset2.getString(1) == null ? "0"
										: rset2.getString(1)));
						rgas_cargo_ref_no = rset2.getString(2) == null ? "0" : rset2.getString(2);
						
					}
					
					re_var_cost = (Double.parseDouble(REGAS_REGASSIFIED
							.elementAt(i).toString())
							+ Double.parseDouble(REGAS_OFFSPEC_REJ_QTY_tmp
									.elementAt(i).toString()) + Double
							.parseDouble(REGAS_OFFSPEC_ACC_QTY_tmp.elementAt(i)
									.toString()))
							/ (100 - re_sug) * re_sug;
					
					REGAS_SUG.add("" + re_sug);
					REGAS_VARIABLE_COST.add("" + re_var_cost);
					if(!rgas_cargo_ref_no.equals(""))
					{
						REGAS_CARGO_REF_NO_ON_INV.add(rgas_cargo_ref_no);	
					}
					else
					{
						REGAS_CARGO_REF_NO_ON_INV.add("");	
					}
					
					rgas_cargo_ref_no = "";
					
					
				} else {
					
					REGAS_VARIABLE_COST.add("*NOI");
					REGAS_SUG.add("*NOI");
					REGAS_CARGO_REF_NO_ON_INV.add("*NOI");
				}
			}
			// FOR TAX
			// =========Following is code for calculating TAX_STRUCTURE and it's
			// TAX_AMT

			String tax_amt = "";

			for (int k = 0; k < REGAS_HLPL_INV_SEQ_NO_tmp.size(); k++) {

				// //System.out.println("INV no_tmp :
				// "+REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k));
				// //System.out.println("dATE :
				// "+REGAS_INVOICE_DT_tmp.elementAt(k));
				// //System.out.println("TAX CODE :
				// "+REGAS_TAX_STRUCT_CD_tmp.elementAt(k));
				// //System.out.println("PERIO END DATE :
				// "+PERIOD_END_DT_tmp.elementAt(k));
				// //System.out.println("INR AMT :
				// "+REGAS_GROSS_AMT_INR_tmp.elementAt(k));
				// //System.out.println("---------------------------------------------");
				String hlpl_inv_no_disp = "";
				
				if (!REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k).toString().equals(
						"*NOI")) {
					
					if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 10) {
						
						hlpl_inv_no_disp = "000"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 100) {
						
						hlpl_inv_no_disp = "00"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 1000) {
						
						hlpl_inv_no_disp = "0"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else {
						
						hlpl_inv_no_disp = REGAS_HLPL_INV_SEQ_NO_tmp
								.elementAt(k)
								+ "/" + REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					}
					
					REGAS_HLPL_INV_SEQ_NO_tmp.setElementAt(hlpl_inv_no_disp, k);

					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), "
							+ "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="
							+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
							+ " AND "
							+ "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="
							+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
							+ " AND "
							+ "B.app_date<=TO_DATE('"
							+ PERIOD_END_DT_tmp.elementAt(k)
							+ "','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					// //System.out.println("Finding Out Correct Tax Structure
					// Details = "+queryString);
					rset = stmt.executeQuery(queryString);
					////System.out.println("===JAVA queryString=== "+queryString);
					boolean flg_ser = false;
					boolean flg_edu = false;
					boolean flg_hiedu = false;
					boolean flg_sbc = false;		//BK20151118 SBC
					
					while (rset.next()) {
						
						String tax_cd = rset.getString(1);
						String tax_title = "";
						
						double gross_amt = Double.parseDouble(""
								+ REGAS_GROSS_AMT_INR_tmp.elementAt(k));
						
						tax_amt = nf.format((gross_amt * Double
								.parseDouble(rset.getString(2))) / 100);
							
						////System.out.println("===JAVA tax_amt before=== "+tax_amt);
						
						if (rset.getString(3).equals("1")) {
							
							tax_amt = nf.format((gross_amt * Double
									.parseDouble(rset.getString(2))) / 100);
							tax_title = "";

							////System.out.println("===JAVA tax_amt after=== "+tax_amt);
							
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE "
									+ "tax_code=" + tax_cd + "";
							// //System.out.println("For Fetching DEPENDENT Tax
							// Abbr = "+queryString2);
							
							rset2 = stmt2.executeQuery(queryString2);
							
							if (rset2.next()) {
								
								String tax_abbr = rset2.getString(1) == null ? ""
										: rset2.getString(1);
								
								tax_title = tax_abbr;
							} else {
								
								tax_title = "";
							}
														
							////System.out.println("===JAVA tax_title=== "+tax_title);
							
							if (!tax_title.equals("") && tax_title.equals("ST")) {
								
								flg_ser = true;
								REGAS_TAX_SERVICE.add(tax_amt);		
							}

							if (!tax_title.equals("") && (tax_title.equals("SBT") || tax_title.equals("SBC"))) {	//BK20151118 SBC
								
								flg_sbc = true;
								REGAS_TAX_SBC.add(tax_amt);		
							}
							
							if (!tax_title.equals("")
									&& tax_title.equals("ECS")) {
								
								flg_edu = true;
								REGAS_TAX_EDU_CESS.add(tax_amt);
							}

							if (!tax_title.equals("")
									&& tax_title.equals("HECS")) {
								
								flg_hiedu = true;
								REGAS_TAX_HIEDU_CESS.add(tax_amt);
							}

							// //System.out.println("fro if >>> ");
							// //System.out.println("tax_on >>>
							// "+rset.getString(3));
							// //System.out.println("tax_title : "+tax_title);
							// //System.out.println("tax_amt : "+tax_amt);
							// //System.out.println("tax_cd : "+tax_cd);
							// //System.out.println("tax_factor : "+tax_factor);

						} else if (rset.getString(3).equals("2")) {
							
							queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), "
									+ "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="
									+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
									+ " AND "
									+ "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="
									+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
									+ " AND "
									+ "B.app_date<=TO_DATE('"
									+ PERIOD_END_DT_tmp.elementAt(k)
									+ "','DD/MM/YYYY')) AND A.tax_code="
									+ rset.getString(4) + "";
							// //System.out.println("Finding Out Tax Which Is
							// Dependent On Other Tax Value = "+queryString1);
							
							rset1 = stmt1.executeQuery(queryString1);
							if (rset1.next()) {
								
								if (rset1.getString(3).equals("1")) {
									
									tax_amt = nf
											.format((gross_amt * Double
													.parseDouble(rset1
															.getString(2))) / 100);
								}
								
								tax_amt = nf.format((Double
										.parseDouble(tax_amt) * Double
										.parseDouble(rset.getString(2))) / 100);
							} else {
								
								tax_amt = "" + 0.00;
							}
							
							////System.out.println("---JAVA tax_amt here--- "+tax_amt);
							
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE "
									+ "tax_code=" + tax_cd + "";
							// ////System.out.println("For Fetching DEPENDENT Tax
							// Abbr = "+queryString2);
							
							rset2 = stmt2.executeQuery(queryString2);
							if (rset2.next()) {
								
								String tax_abbr = rset2.getString(1) == null ? ""
										: rset2.getString(1);
								tax_title = tax_abbr;
								
							} else {
								
								tax_title = "";
							}
							
							////System.out.println("---JAVA tax_title here--- "+tax_title);
							
							if (!tax_title.equals("") && tax_title.equals("ST")) {
								
								flg_ser = true;
								REGAS_TAX_SERVICE.add(tax_amt);
								
							}
							
							if (!tax_title.equals("") && (tax_title.equals("SBT") || tax_title.equals("SBC"))) {	//BK20151118 SBC
								
								flg_sbc = true;
								REGAS_TAX_SBC.add(tax_amt);				
								
							}

							if (!tax_title.equals("")
									&& tax_title.equals("ECS")) {
								
								flg_edu = true;
								REGAS_TAX_EDU_CESS.add(tax_amt);
								
							}

							if (!tax_title.equals("")
									&& tax_title.equals("HECS")) {
								
								flg_hiedu = true;
								REGAS_TAX_HIEDU_CESS.add(tax_amt);
								
							}

							
						} else {
							tax_amt = "" + 0.00;
							REGAS_TAX_SBC.add(tax_amt);			//BK20151118 SBC
							REGAS_TAX_SERVICE.add(tax_amt);
							REGAS_TAX_EDU_CESS.add(tax_amt);
							REGAS_TAX_HIEDU_CESS.add(tax_amt);

						}

					}
					if (flg_ser == false) {
						
						REGAS_TAX_SERVICE.add("0.00");
					}
					
					if (flg_sbc == false) {				//BK20151118 SBC
						
						REGAS_TAX_SBC.add("0.00");		
					}
					
					if (flg_edu == false) {
						
						REGAS_TAX_EDU_CESS.add("0.00");
					}
					if (flg_hiedu == false) {
						
						REGAS_TAX_HIEDU_CESS.add("0.00");
					}

				} else {
					
					tax_amt = "*NOI";
					REGAS_TAX_SBC.add(tax_amt);			//BK20151118 SBC
					REGAS_TAX_SERVICE.add(tax_amt);
					REGAS_TAX_EDU_CESS.add(tax_amt);
					REGAS_TAX_HIEDU_CESS.add(tax_amt);
				}
				// //System.out.println("ST AMT :
				// "+REGAS_TAX_SERVICE.elementAt(k));
				// //System.out.println("EDU CESS AMT :
				// "+REGAS_TAX_EDU_CESS.elementAt(k));
				// //System.out.println("HEDU CESS AMT :
				// "+REGAS_TAX_HIEDU_CESS.elementAt(k));
				// //System.out.println("INV NO :
				// "+REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k));
				// //System.out.println("==============================================");

			}
			// FOR TAX END HERE

			// REGAS_TOT_INVOICE_VAL_INR
			double tot_inv_val = 0;
			
			for (int i = 0; i < REGAS_GROSS_AMT_INR_tmp.size(); i++) {
				
				if (!REGAS_GROSS_AMT_INR_tmp.elementAt(i).toString().equals(
						"*NOI")) {
					
					tot_inv_val = java.lang.Double
							.parseDouble(REGAS_GROSS_AMT_INR_tmp.elementAt(i)
									.toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_SERVICE
									.elementAt(i).toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_EDU_CESS
									.elementAt(i).toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_HIEDU_CESS
									.elementAt(i).toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_SBC
									.elementAt(i).toString().trim());			//BK20151118 SBC
					
					REGAS_TOT_INVOICE_VAL_INR.add("" + tot_inv_val);
					
				} else {
					
					REGAS_TOT_INVOICE_VAL_INR.add("*NOI");
				}
			}
			// Assignment of Temp Vector to the main vectors

			REGAS_ACTUAL_RECPT_DT = REGAS_ACTUAL_RECPT_DT_tmpt;
			REGAS_SUPPL_NM = REGAS_SUPPL_NM_tmp;
			REGAS_SUPPL_ABBR = REGAS_SUPPL_ABBR_tmp;
			REGAS_ADQ_QTY = REGAS_ADQ_QTY_tmp;
			REGAS_SHIP_NAME = REGAS_SHIP_NAME_tmp;
			REGAS_CARGO_REF_NO = REGAS_CARGO_REF_NO_tmp;

			REGAS_HLPL_INV_SEQ_NO = REGAS_HLPL_INV_SEQ_NO_tmp;
			REGAS_INVOICE_DT = REGAS_INVOICE_DT_tmp;
			REGAS_CUSTOMER_ABBR = REGAS_CUSTOMER_ABBR_tmp;
			REGAS_TOTAL_QTY = REGAS_TOTAL_QTY_tmp;

			REGAS_EXCHG_RATE_VALUE = REGAS_EXCHG_RATE_VALUE_tmp;
			REGAS_GROSS_AMT_USD = REGAS_GROSS_AMT_USD_tmp;
			REGAS_GROSS_AMT_INR = REGAS_GROSS_AMT_INR_tmp;
			REGAS_GAS_TARIF = REGAS_GAS_TARIF_tmp;
			REGAS_OFFSPEC_REJ_QTY = REGAS_OFFSPEC_REJ_QTY_tmp;
			REGAS_OFFSPEC_ACC_QTY = REGAS_OFFSPEC_ACC_QTY_tmp;
			REGAS_CUSTOMER_ABBR_CARGO = REGAS_CUSTOMER_ABBR_CARGO_tmp;

			REGAS_INVOICE_MONTH.clear();
			
			//Calculation of Invoice month year pair
			for (int i = 0; i < REGAS_INVOICE_DT.size(); i++) {
				
				if (!REGAS_INVOICE_DT.elementAt(i).toString().trim().equals(
						"*NOI")) {

					queryString = "select to_char(to_date('"
							+ REGAS_INVOICE_DT.elementAt(i)
							+ "','dd/mm/yyyy'),'mon-yy') from dual";
					rset1 = stmt1.executeQuery(queryString);
					if (rset1.next()) {
						
						REGAS_INVOICE_MONTH
								.add(rset1.getString(1) == null ? "-" : rset1
										.getString(1));

					}
				} else {
					
					queryString = "select to_char(to_date('"
							+ REGAS_ACTUAL_RECPT_DT.elementAt(i)
							+ "','dd/mm/yyyy'),'mon-yy') from dual";
					rset1 = stmt1.executeQuery(queryString);
					
					if (rset1.next()) {
						
						REGAS_INVOICE_MONTH
								.add(rset1.getString(1) == null ? "-" : rset1
										.getString(1));

					}
				}

			}

			// FOR opening balance , HERE in JSP, For display we use only first opening balance
			//other are calculate within the jsp
			String f_inv_dt = "";
			String e_inv_dt = "";
			String frm_mm = "";

			if (!REGAS_INVOICE_MONTH.isEmpty()) {

				queryString1 = "SELECT TO_CHAR(TO_DATE('"
						+ REGAS_INVOICE_MONTH.firstElement().toString().trim()
						+ "','MON-YY'),'MM/YYYY') FROM DUAL";
				rset1 = stmt1.executeQuery(queryString1);
				
				if (rset1.next()) {
					
					f_inv_dt = rset1.getString(1) == null ? "0" : rset1
							.getString(1);
				}
				queryString1 = "SELECT TO_CHAR(TO_DATE('"
						+ REGAS_INVOICE_MONTH.lastElement().toString().trim()
						+ "','MON-YY'),'MM/YYYY') FROM DUAL";
				rset1 = stmt1.executeQuery(queryString1);
				if (rset1.next()) {
					
					e_inv_dt = rset1.getString(1) == null ? "0" : rset1
							.getString(1);
				}

				////System.out.println("Regas OPENING f  = " + f_inv_dt);
				////System.out.println("Regas OPENING e  = " + e_inv_dt);

				if (true) {

					queryString = "SELECT OP_BAL_REGAS, MONTH, YEAR FROM FMS7_OPENING_STOCK_DTLS  order by month, year"
							+ "" + "";
					////System.out.println("Regas OPENING BALANCE Query = "+ queryString);
					rset = stmt.executeQuery(queryString);
					while (rset.next()) {
						
						queryString = "SELECT OP_BAL_REGAS, MONTH, YEAR FROM FMS7_OPENING_STOCK_DTLS "
								+ "WHERE to_date('"
								+ rset.getString(2)
								+ "/"
								+ rset.getString(3)
								+ "','MM/YYYY') BETWEEN TO_DATE('"
								+ f_inv_dt
								+ "','MM/YYYY') AND TO_DATE('"
								+ e_inv_dt
								+ "','MM/YYYY') "
								+ "and month = '"
								+f_inv_dt.substring(0,2)
								+ "' and year = '"
								+ f_inv_dt.substring(3) + "' ";
//						//System.out.println("Regas OPENING BALANCE Query = "	+ queryString);
						rset1 = stmt1.executeQuery(queryString);
						while (rset1.next()) {
							
							REGAS_OP_BAL_REGAS
									.add(rset1.getString(1) == null ? ""
											: rset1.getString(1));
							REGAS_OP_BAL_REGAS_MONTH
									.add(rset1.getString(2) == null ? ""
											: rset1.getString(2));
							REGAS_OP_BAL_REGAS_YEAR
									.add(rset1.getString(3) == null ? ""
											: rset1.getString(3));
						}

					}
				}

//				//System.out.println("Regas OPENING BALANCE  = "
//						+ REGAS_OP_BAL_REGAS);
//				//System.out.println("Regas REGAS_OP_BAL_REGAS_MONTH = "
//						+ REGAS_OP_BAL_REGAS_MONTH);
//				//System.out.println("Regas REGAS_OP_BAL_REGAS_YEAR = "
//						+ REGAS_OP_BAL_REGAS_YEAR);

				frm_mm = "";

				for (int i = 0; i < REGAS_INVOICE_MONTH.size()
						- REGAS_OP_BAL_REGAS_MONTH.size(); i++) {
					
					REGAS_OP_BAL_REGAS_MONTH.add("0");
				}
				if (!REGAS_OP_BAL_REGAS_MONTH.isEmpty()) {
					
					for (int i = 0; i < REGAS_INVOICE_MONTH.size(); i++) {
						

						queryString1 = "SELECT TO_CHAR(TO_DATE('01-"
								+ REGAS_INVOICE_MONTH.elementAt(i).toString()
										.split("-")[0]
								+ "-2010','DD-mon-YYYY'),'mm') FROM DUAL";
						rset1 = stmt1.executeQuery(queryString1);
						if (rset1.next()) {
							
							frm_mm = rset1.getString(1) == null ? "0" : rset1
									.getString(1);
							if (!frm_mm.equals(REGAS_OP_BAL_REGAS_MONTH
									.elementAt(i).toString())) {
								
								REGAS_OP_BAL_REGAS_MONTH.insertElementAt(""
										+ frm_mm, i);

								REGAS_OP_BAL_REGAS.insertElementAt("0.00", i);
							}
						}
					}
				}
			}
			
			/*//System.out.println("Regas REGAS_CARGO_REF_NO_tmp = "+REGAS_CARGO_REF_NO_tmp.size());
			//System.out.println("Regas REGAS_SHIP_NAME_tmp = "+REGAS_SHIP_NAME_tmp.size());

			//System.out.println("arrival date "+REGAS_INVOICE_MONTH);
			//System.out.println(REGAS_CUSTOMER_ABBR.size() + "    "
					+ REGAS_SHIP_NAME.size() + "    " + REGAS_SUPPL_ABBR.size()
					+ "    " + REGAS_ACTUAL_RECPT_DT.size() + "    "
					+ REGAS_ADQ_QTY.size() + "    " + REGAS_RECIEPT.size()
					+ "    " + REGAS_REGASSIFIED.size() + "    "
					+ REGAS_HLPL_INV_SEQ_NO.size() + "    "
					+ REGAS_INVOICE_DT.size() + "    " + REGAS_TOTAL_QTY.size()
					+ "     " + REGAS_GAS_TARIF.size() + "    "
					+ REGAS_GROSS_AMT_USD.size() + "    "
					+ REGAS_EXCHG_RATE_VALUE.size() + "    "
					+ REGAS_GROSS_AMT_INR.size() + "     "
					+ REGAS_TAX_SERVICE.size() + "     "
					+ REGAS_TAX_EDU_CESS.size() + "     "
					+ REGAS_TAX_HIEDU_CESS.size() + "     "
					+ REGAS_TOT_INVOICE_VAL_INR.size());
			
			if (REGAS_INVOICE_DT.size() == REGAS_ACTUAL_RECPT_DT.size()) {
				
				//System.out.println("Invoice = cargo");
				//System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT_tmpt);
				//System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp);
				//System.out.println("REGAS_CUSTOMER_ABBR REGAS_SHIP_NAME REGAS_SUPPL_ABBR REGAS_ACTUAL_RECPT_DT REGAS_ADQ_QTY REGAS_RECIEPT REGAS_REGASSIFIED REGAS_INV_NO REGAS_INVOICE_DT REGAS_TOTAL_QTY REGAS_GAS_TARIF REGAS_GROSS_AMT_USD REGAS_EXCHG_RATE_VALUE REGAS_GROSS_AMT_INR REGAS_TAX_SERVICE  REGAS_TAX_EDU  REGAS_TAX_HIEDU  REGAS_TOT");
				for (int i = 0; i < REGAS_INVOICE_DT.size(); i++) {
					
					//System.out.println(REGAS_CUSTOMER_ABBR.elementAt(i)+"    "+REGAS_SHIP_NAME.elementAt(i)+"    "+REGAS_SUPPL_ABBR.elementAt(i)+"    "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"    "+REGAS_ADQ_QTY.elementAt(i)+"    "+REGAS_RECIEPT.elementAt(i)+"    "+REGAS_REGASSIFIED.elementAt(i)+"    "+REGAS_HLPL_INV_SEQ_NO.elementAt(i)+"    "+REGAS_INVOICE_DT.elementAt(i)+"    "+REGAS_TOTAL_QTY.elementAt(i)+"    "+REGAS_GAS_TARIF.elementAt(i)+"    "+REGAS_GROSS_AMT_USD.elementAt(i)+"    "+REGAS_EXCHG_RATE_VALUE.elementAt(i)+"    "+REGAS_GROSS_AMT_INR.elementAt(i)+"     "+REGAS_TAX_SERVICE.elementAt(i)+"     "+REGAS_TAX_EDU_CESS.elementAt(i)+"     "+REGAS_TAX_HIEDU_CESS.elementAt(i)+"     "+REGAS_TOT_INVOICE_VAL_INR.elementAt(i));
					//System.out.println("   "+i);
				}
			} else {
				//System.out.println("Invoice NOT cargo");
				//System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT);
				//System.out.println("Invoice >>>"+REGAS_INVOICE_DT);
			}
*/
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	
	public void fetchReGasRegisterData_old_20151118()	//* Added SBC value in new function 
	{

		Vector Vday_invoice = new Vector();
		Vector Vmonth_invoice = new Vector();
		Vector Vyear_invoice = new Vector();

		Vector Vregs_no = new Vector();
		Vector Vregas_rev_no = new Vector();
		Vector Vcargo_seq_no = new Vector();

		Vector Vday_cargo = new Vector();
		Vector Vmonth_cargo = new Vector();
		Vector Vyear_cargo = new Vector();
		Vector Vcust_cd__cargo = new Vector();

		Vector PERIOD_END_DT = new Vector();
		Vector PERIOD_STR_DT = new Vector();
		int off = 0;

		try {

			String from_dt = "01/" + month + "/" + year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('" + to_month + "/"
					+ to_year + "','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				to_dt = rset.getString(1) == null ? "0" : rset.getString(1);
			}
			queryString = "Select To_char(to_date('" + from_dt
					+ "','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				mon = rset.getString(1) == null ? "0" : rset.getString(1);
			}

			queryString = "Select To_char(to_date('" + to_dt
					+ "','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);
			if (rset.next()) {
				to_mon = rset.getString(1) == null ? "0" : rset.getString(1);
			}

			// INVOICE DATA BASED ON GIVEN RANGE
			if (customer_cd != null && !customer_cd.trim().equals("")
					&& !customer_cd.trim().equals("0")) {
				
				queryString = "Select HLPL_INV_SEQ_NO,"
						+ "TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," + "CUSTOMER_CD,"
						+ "TOTAL_QTY," + "EXCHG_RATE_VALUE," + "GROSS_AMT_USD,"
						+ "GROSS_AMT_INR," + "NET_AMT_INR," + "FINANCIAL_YEAR,"
						+ "TAX_STRUCT_CD," + "TO_CHAR(INVOICE_DT,'Month'),"
						+ "CONTRACT_TYPE," + "CONTACT_PERSON_CD,"
						+ "EXCHG_RATE_CD,"
						+ "TO_CHAR(EXCHG_RATE_DT,'DD/MM/YYYY'),"
						+ "EXCHG_RATE_TYPE," + "PLANT_SEQ_NO,"
						+ "SUN_APPROVAL ," + "TO_CHAR(INVOICE_DT,'dd'),"
						+ "TO_CHAR(INVOICE_DT,'mm'),"
						+ "TO_CHAR(INVOICE_DT,'yyyy'),"
						+ "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'), "
						+ "TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY'),"
						+ "OFFSPEC_QTY, " + "offspec_flag, sn_no, fgsa_no "
						+ "FROM FMS7_INVOICE_MST "
						+ "WHERE INVOICE_DT between (to_date('" + from_dt
						+ "','dd/mm/yyyy')) and " + "(to_date('" + to_dt
						+ "','dd/mm/yyyy')) AND CONTRACT_TYPE='R' "
						+ "AND CUSTOMER_CD = '" + customer_cd + "' "
						+ "ORDER BY FINANCIAL_YEAR,INVOICE_DT,HLPL_INV_SEQ_NO";
			} else {

				queryString = "Select HLPL_INV_SEQ_NO,"
						+ "TO_CHAR(INVOICE_DT,'DD/MM/YYYY')," + "CUSTOMER_CD,"
						+ "TOTAL_QTY," + "EXCHG_RATE_VALUE," + "GROSS_AMT_USD,"
						+ "GROSS_AMT_INR," + "NET_AMT_INR," + "FINANCIAL_YEAR,"
						+ "TAX_STRUCT_CD," + "TO_CHAR(INVOICE_DT,'Month'),"
						+ "CONTRACT_TYPE," + "CONTACT_PERSON_CD,"
						+ "EXCHG_RATE_CD,"
						+ "TO_CHAR(EXCHG_RATE_DT,'DD/MM/YYYY'),"
						+ "EXCHG_RATE_TYPE," + "PLANT_SEQ_NO," + "SALE_PRICE, "
						+ "TO_CHAR(INVOICE_DT,'dd'),"
						+ "TO_CHAR(INVOICE_DT,'mm'),"
						+ "TO_CHAR(INVOICE_DT,'yyyy'),"
						+ "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'), "
						+ "TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY'),"
						+ " fgsa_no, fgsa_rev_no, sn_no "
						+ "FROM FMS7_INVOICE_MST  "
						+ "WHERE INVOICE_DT between (to_date('" + from_dt
						+ "','dd/mm/yyyy')) and " + "(to_date('" + to_dt
						+ "','dd/mm/yyyy')) AND CONTRACT_TYPE='R' "
						+ "ORDER BY FINANCIAL_YEAR,INVOICE_DT,HLPL_INV_SEQ_NO";
			}

			////System.out.println("Regas Invoice Details Query = " + queryString);
			rset = stmt.executeQuery(queryString);
			while (rset.next()) {
				
				REGAS_HLPL_INV_SEQ_NO.add(rset.getString(1) == null ? "" : rset
						.getString(1));
				REGAS_INVOICE_DT.add(rset.getString(2) == null ? "" : rset
						.getString(2));
				REGAS_CUSTOMER_CD_INV.add(rset.getString(3) == null ? "" : rset
						.getString(3));
				REGAS_TOTAL_QTY.add(rset.getString(4) == null ? "" : rset
						.getString(4));
				REGAS_EXCHG_RATE_VALUE.add(rset.getString(5) == null ? ""
						: rset.getString(5));
				REGAS_GROSS_AMT_USD.add(rset.getString(6) == null ? "" : rset
						.getString(6));
				REGAS_GROSS_AMT_INR.add(rset.getString(7) == null ? "" : rset
						.getString(7));
				REGAS_FINANCIAL_YEAR.add(rset.getString(9) == null ? "" : rset
						.getString(9));
				REGAS_TAX_STRUCT_CD.add(rset.getString(10) == null ? "" : rset
						.getString(10));
				REGAS_INVOICE_MONTH.add(rset.getString(11) == null ? "" : rset
						.getString(11));
				REGAS_CONTRACT_TYPE.add(rset.getString(12) == null ? "" : rset
						.getString(12));
				REGAS_EXCHG_RATE_CD.add(rset.getString(14) == null ? "" : rset
						.getString(14));
				REGAS_EXCHG_RATE_DT.add(rset.getString(15) == null ? "" : rset
						.getString(15));
				REGAS_EXCHG_RATE_TYPE.add(rset.getString(16) == null ? ""
						: rset.getString(16));
				REGAS_PLANT_SEQ_NO.add(rset.getString(17) == null ? "" : rset
						.getString(17));
				REGAS_GAS_TARIF.add(rset.getString(18) == null ? "" : rset
						.getString(18));
				Vday_invoice.add(rset.getString(19) == null ? "" : rset
						.getString(19));
				Vmonth_invoice.add(rset.getString(20) == null ? "" : rset
						.getString(20));
				Vyear_invoice.add(rset.getString(21) == null ? "" : rset
						.getString(21));
				PERIOD_END_DT.add(rset.getString(22) == null ? "" : rset
						.getString(22));
				PERIOD_STR_DT.add(rset.getString(23) == null ? "" : rset
						.getString(23));

				Vregs_no.add(rset.getString(24) == null ? "" : rset
						.getString(24));
				Vregas_rev_no.add(rset.getString(25) == null ? "" : rset
						.getString(25));
				Vcargo_seq_no.add(rset.getString(26) == null ? "" : rset
						.getString(26));

				// OFFSPEC QTY FOR GIVEN INVOICE
				queryString1 = "SELECT A.qty_offspec, A.offspec_flag "
						+ "FROM FMS7_DAILY_ALLOCATION_DTL  A"
						+ " WHERE A.gas_dt <= to_date('"
						+ (rset.getString(22) == null ? "" : rset.getString(22))
						+ "','dd/mm/yyyy') "
						+ " and A.gas_dt >= to_date('"
						+ (rset.getString(23) == null ? "" : rset.getString(23))
						+ "','dd/mm/yyyy') "
						+ " and A.customer_cd="
						+ (rset.getString(3) == null ? "" : rset.getString(3))
						+ " AND "
						+ "A.plant_seq_no="
						+ (rset.getString(17) == null ? "" : rset.getString(17))
						+ " AND "
						+ "A.fgsa_no='"
						+ (rset.getString(24) == null ? "" : rset.getString(24))
						+ "' AND "
						+
						// "A.fgsa_rev_no='"+(rset.getString(25)==null?"":rset.getString(25))+"'
						// AND " +
						"A.contract_type='"
						+ (rset.getString(12) == null ? "" : rset.getString(12))
						+ "' "
						+ " and A.sn_no = '"
						+ (rset.getString(26) == null ? "" : rset.getString(26))
						+ "'";

				////System.out.println(">>>>>>>>>>>>" + queryString1);
				rset2 = stmt2.executeQuery(queryString1);

				double acc_qty = 0;
				double rej_qty = 0;
				while (rset2.next()) {
					
					if ((rset2.getString(2) == null ? "N" : rset2.getString(2))
							.equals("N")
							|| (rset2.getString(2) == null ? "n" : rset2
									.getString(2)).equals("n")) {
						
						acc_qty += 0;
						rej_qty += (rset2.getDouble(1) == 0 ? 0 : rset2
								.getDouble(1));

					} else {
						
						acc_qty += (rset2.getDouble(1) == 0 ? 0 : rset2
								.getDouble(1));
						rej_qty += 0;

					}

				}
				REGAS_OFFSPEC_ACC_QTY.add("" + acc_qty);
				REGAS_OFFSPEC_REJ_QTY.add("" + rej_qty);
			}
			// OFFSPEC QTY FOR GIVEN INVOICE END

			/*//System.out.println("cardo : " + REGAS_INVOICE_DT + " "
					+ REGAS_HLPL_INV_SEQ_NO + " " + REGAS_GROSS_AMT_USD + " "
					+ REGAS_EXCHG_RATE_VALUE + " " + REGAS_GROSS_AMT_INR);
			//System.out.println("REGAS_OFFSPEC_REJ_QTY = "
					+ REGAS_OFFSPEC_REJ_QTY);
			//System.out.println("REGAS_OFFSPEC_ACC_QTY = "
					+ REGAS_OFFSPEC_ACC_QTY);
			//System.out.println("REGAS_OFFSPEC_FLAG = " + REGAS_OFFSPEC_FLAG);
*/
			
			// FOR CUSTOMER OF INVOICE

			for (int i = 0; i < REGAS_CUSTOMER_CD_INV.size(); i++) {
				
				queryString = "SELECT customer_name, customer_abbr "
						+ "FROM FMS7_CUSTOMER_MST " + "where customer_cd = '"
						+ REGAS_CUSTOMER_CD_INV.elementAt(i) + "'";
				// ////System.out.println("Regas Customer Details Query =
				// "+queryString);
				rset = stmt.executeQuery(queryString);
				if (rset.next()) {
					
					REGAS_CUSTOMER_NM.add(rset.getString(1) == null ? "" : rset
							.getString(1));
					REGAS_CUSTOMER_ABBR.add(rset.getString(2) == null ? ""
							: rset.getString(2));

				} else {
					
					REGAS_CUSTOMER_NM.add("");
					REGAS_CUSTOMER_ABBR.add("");
				}
			}
			// FOR CUSTOMER OF INVOICE END
			// INVOICE DATA BASED ON GIVEN RANGE END

			// FOR RE GAS CARGO DETAIL BASED ON GIVEN RANGE

			queryString = "SELECT SHIP_NAME,"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'DD/MM/YYYY'),"
					+ "ADQ_QTY,"
					+ "RE_GAS_TARIF,"
					+ "SUPP_CD, "
					+ "TO_CHAR(ACTUAL_RECPT_DT,'dd'),"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'mm'),"
					+ "TO_CHAR(ACTUAL_RECPT_DT,'yyyy'), "
					+ "CUSTOMER_CD, cargo_ref_no, "
					+ "NVL(SUPP_NM,''), sys_use_gas "
					+ "FROM FMS7_RE_GAS_CARGO_DTL "
					+ "WHERE TO_DATE(TO_CHAR(ACTUAL_RECPT_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN "
					+ "TO_DATE('" + from_dt + "','DD/MM/YYYY') AND TO_DATE('"
					+ to_dt + "','DD/MM/YYYY') " + "ORDER BY ACTUAL_RECPT_DT ";
			////System.out.println(/*"Regas CARGO Details Query = "*/queryString);
			rset = stmt.executeQuery(queryString);

			while (rset.next()) {
				
				REGAS_SHIP_NAME.add(rset.getString(1) == null ? "" : rset
						.getString(1));
				REGAS_ACTUAL_RECPT_DT.add(rset.getString(2) == null ? "" : rset
						.getString(2));
				REGAS_ADQ_QTY.add(rset.getString(3) == null ? "" : rset
						.getString(3));
				REGAS_SUPP_CD.add(rset.getString(5) == null ? "" : rset
						.getString(5));
				Vday_cargo.add(rset.getString(6) == null ? "" : rset
						.getString(6));
				Vmonth_cargo.add(rset.getString(7) == null ? "" : rset
						.getString(7));
				Vyear_cargo.add(rset.getString(8) == null ? "" : rset
						.getString(8));
				Vcust_cd__cargo.add(rset.getString(9) == null ? "" : rset
						.getString(9));
				REGAS_CUSTOMER_CD_CARGO.add(rset.getString(9) == null ? ""
						: rset.getString(9));
				REGAS_CARGO_REF_NO.add(rset.getString(10) == null ? "" : rset
						.getString(10));
				REGAS_SUPPL_ABBR.add(rset.getString(11) == null ? "" : rset
						.getString(11));
				REGAS_SUG.add(rset.getString(12) == null ? "" : rset
						.getString(12));

			}
			// FOR RE GAS CARGO DETAIL BASED ON GIVEN RANGE END

			// FOR CUSTOMER OF CARGO

			for (int i = 0; i < REGAS_CUSTOMER_CD_CARGO.size(); i++) {
				
				queryString = "SELECT customer_name, customer_abbr "
						+ "FROM FMS7_CUSTOMER_MST " + "where customer_cd = '"
						+ REGAS_CUSTOMER_CD_CARGO.elementAt(i) + "'";
				// ////System.out.println("Regas Customer Details Query =
				// "+queryString);
				rset = stmt.executeQuery(queryString);
				if (rset.next()) {
					
					REGAS_CUSTOMER_ABBR_CARGO
							.add(rset.getString(2) == null ? "" : rset
									.getString(2));

				} else {
					
					REGAS_CUSTOMER_ABBR_CARGO.add("");
				}
			}
			// FOR CUSTOMER OF CARGO END
			
			
			/*//System.out.println("REGAS_SUG = " + REGAS_SUG.size());
			//System.out.println("REGAS_SUG = " + REGAS_SUG);
			//System.out.println("REGAS_ADQ_QTY = " + REGAS_ADQ_QTY.size());
			//System.out.println("REGAS_ADQ_QTY = " + REGAS_ADQ_QTY);
			//System.out.println("Regas REGAS_ACTUAL_RECPT_DT_tmpt  = "
					+ REGAS_ACTUAL_RECPT_DT);
*/
			// ADJUSTMENT
			// 1)FOR GIVE MONTH AND YEAR OF RANGE, IF CARGO ARRIVED BUT THERE IS NO
			// INVOICE AT ALL
			// 2)FOR GIVEN MONTHS OF RANGE, THERE IS INVOICE BUT NO CARGO
			// ARRIVED AT ALL
			// 3)INVOICES BETWEEN ARRIVAL OF TWO CARGO EXCLUDING LATER CARGO

			
			//HERE WE HAVE TAKEN THE TAMPORARY COPY OF EACH REQUIRED VARIABLES FOR THE ADJUSTMENT OF THE
			//INVOICES IN ORDER OF ARRIAVAL OF CARGO
			
//			 FOR SHIP ARRIVED 
			Vector REGAS_ACTUAL_RECPT_DT_tmpt = new Vector();
			Vector REGAS_SUPPL_NM_tmp = new Vector();
			Vector REGAS_SUPPL_ABBR_tmp = new Vector();
			Vector REGAS_ADQ_QTY_tmp = new Vector();
			Vector REGAS_SHIP_NAME_tmp = new Vector();
			Vector REGAS_CARGO_REF_NO_tmp = new Vector();
			Vector REGAS_CUSTOMER_ABBR_CARGO_tmp = new Vector();
			Vector REGAS_GAS_TARIF_tmp = new Vector();

			// FOR INVOICE
			Vector REGAS_INVOICE_DT_tmp = new Vector();
			Vector REGAS_CUSTOMER_ABBR_tmp = new Vector();
			Vector REGAS_TOTAL_QTY_tmp = new Vector();

			Vector REGAS_SUG_tmp = new Vector();

			Vector REGAS_EXCHG_RATE_VALUE_tmp = new Vector();
			Vector REGAS_GROSS_AMT_USD_tmp = new Vector();
			Vector REGAS_GROSS_AMT_INR_tmp = new Vector();

			Vector PERIOD_END_DT_tmp = new Vector();
			Vector REGAS_TAX_STRUCT_CD_tmp = new Vector();
			Vector REGAS_HLPL_INV_SEQ_NO_tmp = new Vector();
			Vector REGAS_FINANCIAL_YEAR_tmp = new Vector();

			Vector REGAS_OFFSPEC_REJ_QTY_tmp = new Vector();
			Vector REGAS_OFFSPEC_ACC_QTY_tmp = new Vector();

			//DAY, MON, YEAR RESPECTIVLY FOR CARGO ARRIAVAL DATE
			int tmpdayC = 0;
			int tmpmonC = 0;
			int tmpyrC = 0;

			//DAY, MON, YEAR RESPECTIVLY FOR INVOICE DATE
			int tmpdayI = 0;
			int tmpmonI = 0;
			int tmpyrI = 0;
			
			if(!Vday_invoice.isEmpty())
			{
				tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(0)
						.toString());
				
				tmpdayI = Integer.parseInt(Vday_invoice.elementAt(0)
						.toString());
				
				tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(0)
						.toString());
			}
			// IF INVOICE BEFORE CARGO...... I WILL CATCH THEM HERE
			if (Vday_cargo.size() > 0) {
				
				tmpmonC = Integer
						.parseInt(Vmonth_cargo.elementAt(0).toString());
				
				tmpdayC = Integer.parseInt(Vday_cargo.elementAt(0).toString());
				
				tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(0).toString());
				for (int j = 0; j < Vday_invoice.size(); j++) {
					
					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());

					if (Integer.parseInt(year) <= tmpyrI && tmpyrI < tmpyrC) {
						
						// invoice before cargo arrived
						// //System.out.println("11 Invoice befor first cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(j));
						REGAS_SUPPL_ABBR_tmp.add("NOC");
						REGAS_ADQ_QTY_tmp.add("NOC");
						REGAS_SHIP_NAME_tmp.add("NOC");
						REGAS_SUG_tmp.add("NOC");
						REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));

						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
						
					} else if (Integer.parseInt(year) <= tmpyrI
							&& tmpyrI <= tmpyrC) {
						
						if (tmpmonI < tmpmonC) {
							
							// invoice before cargo arrived
							// //System.out.println("22 Invoice befor first cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
							REGAS_CARGO_REF_NO_tmp.add("NOC");

							REGAS_SUPPL_ABBR_tmp.add("NOC");
							REGAS_ADQ_QTY_tmp.add("NOC");
							REGAS_SHIP_NAME_tmp.add("NOC");
							REGAS_SUG_tmp.add("NOC");
							REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));
							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j)); // */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else if (tmpmonI == tmpmonC) {
							
							if (1 <= tmpdayI && tmpdayI < tmpdayC) {
								
								// Invoice before cargo arrived
								// //System.out.println("33 Invoice befor first
								// cargo arrived:
								// "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt.add("NOC");
								REGAS_CARGO_REF_NO_tmp.add("NOC");
								REGAS_SUPPL_ABBR_tmp.add("NOC");
								REGAS_ADQ_QTY_tmp.add("NOC");
								REGAS_SHIP_NAME_tmp.add("NOC");
								REGAS_GAS_TARIF_tmp.add("NOC");
								REGAS_SUG_tmp.add("NOC");
								REGAS_CUSTOMER_ABBR_CARGO_tmp.add("NOC");

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */

								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("No Invoice befor first
								// cargo arrived:
								// "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								break;
							}
						} else {
							
							// //System.out.println("No Invoice befor first cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							break;
						}
					} else {
						
						// //System.out.println("No Invoice befor first cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.firstElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						break;
					}

				}
			}
			

			int lenC = REGAS_ACTUAL_RECPT_DT.size();

			tmpdayC = 0;
			tmpmonC = 0;
			tmpyrC = 0;
			
			//DAY, MON, YEAR RESPECTIVLT FOR CARGO ARRIAVAL DATE(NEXT TO CURRENT CARGO)
			int tmpdayC1 = 0;
			int tmpmonC1 = 0;
			int tmpyrC1 = 0;

			tmpdayI = 0;
			tmpmonI = 0;
			tmpyrI = 0;

			// INVOICES BETWEEN TO IMIDIATE CARGO ARRIAVAL..... 
			//EXCLUDING LAST CARGO (WE CONSIDER IT AFTERWARDS)
			int chk1 = 0;

			for (int i = 0; i < REGAS_ACTUAL_RECPT_DT.size() - 1; i++) {
				
//				 //System.out.println("I :"+i+
//				REGAS_ACTUAL_RECPT_DT.elementAt(i));
				chk1 = 0;
				for (int j = 0; j < REGAS_INVOICE_DT.size(); j++) {
					chk1++;
//					 //System.out.println("J :"+j+" "+
//							 REGAS_INVOICE_DT.elementAt(j));
					
					tmpmonC = Integer.parseInt(Vmonth_cargo.elementAt(i)
							.toString());
					
					tmpdayC = Integer.parseInt(Vday_cargo.elementAt(i)
							.toString());
					
					tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(i)
							.toString());
					
					if (i < REGAS_ACTUAL_RECPT_DT.size()) {
						
						tmpmonC1 = Integer.parseInt(Vmonth_cargo.elementAt(
								i + 1).toString());
						
						tmpdayC1 = Integer.parseInt(Vday_cargo.elementAt(i + 1)
								.toString());
						
						tmpyrC1 = Integer.parseInt(Vyear_cargo.elementAt(i + 1)
								.toString());
					}

					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());

					// //System.out.println(tmpdayC+" "+tmpmonC+" "+tmpyrC+"
					// "+tmpdayI+" "+tmpmonI+" "+tmpyrI+" "+tmpdayC1+"
					// "+tmpmonC1+" "+tmpyrC1);
					// new
					
					if (tmpyrC == tmpyrI && tmpyrC1 == tmpyrI) {
						// //System.out.println("From first if of yr "+j);
						
						if (tmpmonC < tmpmonI && tmpmonI < tmpmonC1) {
							// //System.out.println("From check month 1 >> check
							// day 1"+j);
							// //System.out.println("Invoice for date"+j+"
							// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
							// "+REGAS_INVOICE_DT.elementAt(j));

							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.elementAt(i));
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.elementAt(i));
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.elementAt(i));
							REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));

							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));// */

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else if (tmpmonC == tmpmonI && tmpmonI == tmpmonC1) {
							
							// //System.out.println("From check month 1"+j);
							
							if (tmpdayC <= tmpdayI && tmpdayI < tmpdayC1) {
								
								// //System.out.println("From check month 1 >>
								// check day 1"+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

//JHP20120313
								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								////System.out.println("J:=============-"+REGAS_INVOICE_DT);
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));

								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// 

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// 
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));//
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
//JHP20120313								
//								REGAS_INVOICE_DT_tmp.add("*NOI");
//								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
//								REGAS_TOTAL_QTY_tmp.add("*NOI");
//								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
//								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
//								REGAS_GROSS_AMT_INR_tmp.add("*NOI");
//
//								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
//								PERIOD_END_DT_tmp.add("*NOI");
//								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
//								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");
//								REGAS_GAS_TARIF_tmp.add("*NOI");
								////System.out.println("H:=============-"+REGAS_INVOICE_DT_tmp);

							} else {
								
								// //System.out.println("From check month 1 >>
								// check day 2"+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC == tmpmonI) {
							
							// //System.out.println("From check month 2 ");
							
							if (tmpdayC <= tmpdayI) {
								
								// //System.out.println("From check month 2
								// MI:LANNNN >> check day 1 "+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("From check month 2 >>
								// check day 2 "+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC1 == tmpmonI) {
							
							// //System.out.println("From check month 3 ");
							
							if (1 <= tmpdayI && tmpdayI < tmpdayC1) {
							
								// //System.out.println("From check month 3 >>
								// check day 1 "+j);
								// //System.out.println("Invoice for date"+j+"
								// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
								// "+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("From check month 2 >>
								// check day 2 "+j);
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");

							}
						} else {
							
							// //System.out.println("From check month 4 >> check
							// day 2 "+j);
							// //System.out.println("No invoice for the
							// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
							// >>"+REGAS_INVOICE_DT.elementAt(j));

							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.elementAt(i));
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.elementAt(i));
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.elementAt(i));
							REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

							REGAS_INVOICE_DT_tmp.add("*NOI");
							REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
							REGAS_TOTAL_QTY_tmp.add("*NOI");
							REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
							REGAS_GROSS_AMT_USD_tmp.add("*NOI");
							REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

							REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
							PERIOD_END_DT_tmp.add("*NOI");// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
							REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
							REGAS_GAS_TARIF_tmp.add("*NOI");

						}
					}
					// new
					else if (tmpyrC < tmpyrI && tmpyrI < tmpyrC1) {
						
						// //System.out.println(">> yr check 2 "+j);
						// //System.out.println("Invoice for date"+j+"
						// "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+" is
						// "+REGAS_INVOICE_DT.elementAt(j));

						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.elementAt(i));
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(i));
						REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
						REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));
						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
					} else if (tmpyrC <= tmpyrI && tmpyrI <= tmpyrC1) {
						
						// //System.out.println(">> yr check 3");
						
						if (tmpyrC == tmpyrI) {
							
							// //System.out.println(">> individual yr for tmpyrC
							// check 1");
							
	//JHP20120426			if (tmpmonC <= tmpmonI) {
						if (tmpmonC <= tmpmonI && tmpdayC <= tmpdayI) { //JHP201204226
								// //System.out.println(">> month check 1");
								// //System.out.println("invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println(">> month check 2 ");
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpyrI == tmpyrC1) {
							
							// //System.out.println(">> individual yr for tmpyrC1
							// check 2");
							
							if (tmpmonI < tmpmonC1) {
								
								// //System.out.println(">> month check 1");
								// //System.out.println("invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else if (tmpmonI == tmpmonC1) {
								
								// //System.out.println(">> month check 2");
								
								if (1 <= tmpdayI && tmpdayI < tmpdayC1) {
									
									// //System.out.println(">> month check 2>>day
									// check 1");
									// //System.out.println("invoice for the
									// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
									// >>"+REGAS_INVOICE_DT.elementAt(j));

									REGAS_ACTUAL_RECPT_DT_tmpt
											.add(REGAS_ACTUAL_RECPT_DT
													.elementAt(i));
									REGAS_CARGO_REF_NO_tmp
											.add(REGAS_CARGO_REF_NO
													.elementAt(i));
									REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
											.elementAt(i));
									REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
											.elementAt(i));
									REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
											.elementAt(i));
									REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
									REGAS_CUSTOMER_ABBR_CARGO_tmp
											.add(REGAS_CUSTOMER_ABBR_CARGO
													.elementAt(i));

									REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
											.elementAt(j));
									REGAS_CUSTOMER_ABBR_tmp
											.add(REGAS_CUSTOMER_ABBR
													.elementAt(j));
									REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
											.elementAt(j));
									REGAS_EXCHG_RATE_VALUE_tmp
											.add(REGAS_EXCHG_RATE_VALUE
													.elementAt(j));
									REGAS_GROSS_AMT_USD_tmp
											.add(REGAS_GROSS_AMT_USD
													.elementAt(j));
									REGAS_GROSS_AMT_INR_tmp
											.add(REGAS_GROSS_AMT_INR
													.elementAt(j));// */

									REGAS_TAX_STRUCT_CD_tmp
											.add(REGAS_TAX_STRUCT_CD
													.elementAt(j));
									PERIOD_END_DT_tmp.add(PERIOD_END_DT
											.elementAt(j));// */
									REGAS_HLPL_INV_SEQ_NO_tmp
											.add(REGAS_HLPL_INV_SEQ_NO
													.elementAt(j));
									REGAS_FINANCIAL_YEAR_tmp
											.add(REGAS_FINANCIAL_YEAR
													.elementAt(j));// */
									REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
											.elementAt(j));
								} else {
									
									// //System.out.println(">> month check 2>>day
									// check 2");
									// //System.out.println("No invoice for the
									// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
									// >>"+REGAS_INVOICE_DT.elementAt(j));

									REGAS_ACTUAL_RECPT_DT_tmpt
											.add(REGAS_ACTUAL_RECPT_DT
													.elementAt(i));
									REGAS_CARGO_REF_NO_tmp
											.add(REGAS_CARGO_REF_NO
													.elementAt(i));
									REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
											.elementAt(i));
									REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
											.elementAt(i));
									REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
											.elementAt(i));
									// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
									REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
									REGAS_CUSTOMER_ABBR_CARGO_tmp
											.add(REGAS_CUSTOMER_ABBR_CARGO
													.elementAt(i));

									REGAS_INVOICE_DT_tmp.add("*NOI");
									REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
									REGAS_TOTAL_QTY_tmp.add("*NOI");
									REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
									REGAS_GROSS_AMT_USD_tmp.add("*NOI");
									REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

									REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
									PERIOD_END_DT_tmp.add("*NOI");// */
									REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
									REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
									REGAS_GAS_TARIF_tmp.add("*NOI");
								}
							} else {
								
								// //System.out.println(">> month check 3");
								// //System.out.println("No invoice for the
								// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
								// >>"+REGAS_INVOICE_DT.elementAt(j));

								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT.elementAt(i));
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.elementAt(i));
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.elementAt(i));
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.elementAt(i));
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.elementAt(i));
								REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.elementAt(i));

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						}
					} else {
						
						// //System.out.println(">> year check 4 ");
						// //System.out.println("No invoice for the
						// date"+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"
						// >>"+REGAS_INVOICE_DT.elementAt(j));

						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.elementAt(i));
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.elementAt(i));
						REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
						// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
						REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

						REGAS_INVOICE_DT_tmp.add("*NOI");
						REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
						REGAS_TOTAL_QTY_tmp.add("*NOI");
						REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
						REGAS_GROSS_AMT_USD_tmp.add("*NOI");
						REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

						REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
						PERIOD_END_DT_tmp.add("*NOI");// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
						REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
						REGAS_GAS_TARIF_tmp.add("*NOI");
					}
				}
				if(chk1 == 0)
				{
					REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
							.elementAt(i));
					REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
							.elementAt(i));
					REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR.elementAt(i));
					REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.elementAt(i));
					REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.elementAt(i));
					// REGAS_RECIEPT_tmp.add(REGAS_RECIEPT.elementAt(i));//*/
					REGAS_SUG_tmp.add(REGAS_SUG.elementAt(i));
					REGAS_CUSTOMER_ABBR_CARGO_tmp
							.add(REGAS_CUSTOMER_ABBR_CARGO.elementAt(i));

					REGAS_INVOICE_DT_tmp.add("*NOI");
					REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
					REGAS_TOTAL_QTY_tmp.add("*NOI");
					REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
					REGAS_GROSS_AMT_USD_tmp.add("*NOI");
					REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

					REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
					PERIOD_END_DT_tmp.add("*NOI");// */
					REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
					REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
					REGAS_GAS_TARIF_tmp.add("*NOI");
				}
			}

			tmpmonC = 0;
			tmpdayC = 0;
			tmpyrC = 0;

			tmpmonI = 0;
			tmpdayI = 0;
			tmpyrI = 0;

			// INVOICES FOR LAST CARGO ARRIAVED
			
			chk1 = 0;
			if (Vday_cargo.size() > 0) {
				
				tmpmonC = Integer.parseInt(Vmonth_cargo.elementAt(lenC - 1)
						.toString());
				
				tmpdayC = Integer.parseInt(Vday_cargo.elementAt(lenC - 1)
						.toString());
				
				tmpyrC = Integer.parseInt(Vyear_cargo.elementAt(lenC - 1)
						.toString());
				chk1 = 0;
				for (int j = 0; j < Vday_invoice.size(); j++) {
					
					chk1++;
					
					tmpmonI = Integer.parseInt(Vmonth_invoice.elementAt(j)
							.toString());
					
					tmpdayI = Integer.parseInt(Vday_invoice.elementAt(j)
							.toString());
					
					tmpyrI = Integer.parseInt(Vyear_invoice.elementAt(j)
							.toString());
					
					if (tmpyrC == tmpyrI) {
						
						if (tmpmonC == tmpmonI) {
							
							if (tmpdayC <= tmpdayI) {
								
								// invoice FOR LAST cargo
								// Integer.parseInt(to_year)
								// //System.out.println("Invoice for last cargo :
								// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT
												.lastElement());
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.lastElement());
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.lastElement());
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.lastElement());
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.lastElement());
								REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.lastElement());

								REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
										.elementAt(j));
								REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
										.elementAt(j));
								REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
										.elementAt(j));
								REGAS_EXCHG_RATE_VALUE_tmp
										.add(REGAS_EXCHG_RATE_VALUE
												.elementAt(j));
								REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
										.elementAt(j));
								REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
										.elementAt(j));// */

								REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
										.elementAt(j));
								PERIOD_END_DT_tmp.add(PERIOD_END_DT
										.elementAt(j));// */
								REGAS_HLPL_INV_SEQ_NO_tmp
										.add(REGAS_HLPL_INV_SEQ_NO.elementAt(j));
								REGAS_FINANCIAL_YEAR_tmp
										.add(REGAS_FINANCIAL_YEAR.elementAt(j));// */
								REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
										.elementAt(j));
							} else {
								
								// //System.out.println("No Invoice for last cargo
								// arrived:
								// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
								// "+REGAS_INVOICE_DT.elementAt(j));
								
								REGAS_ACTUAL_RECPT_DT_tmpt
										.add(REGAS_ACTUAL_RECPT_DT
												.lastElement());
								REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
										.lastElement());
								REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
										.lastElement());
								REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY
										.lastElement());
								REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
										.lastElement());
								REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
								REGAS_CUSTOMER_ABBR_CARGO_tmp
										.add(REGAS_CUSTOMER_ABBR_CARGO
												.lastElement());

								REGAS_INVOICE_DT_tmp.add("*NOI");
								REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
								REGAS_TOTAL_QTY_tmp.add("*NOI");
								REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
								REGAS_GROSS_AMT_USD_tmp.add("*NOI");
								REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

								REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
								PERIOD_END_DT_tmp.add("*NOI");// */
								REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
								REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
								REGAS_GAS_TARIF_tmp.add("*NOI");
							}
						} else if (tmpmonC < tmpmonI) {
							
							// //System.out.println("Invoice for last cargo :
							// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
							// "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.lastElement());
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.lastElement());
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.lastElement());
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.lastElement());
							REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO
											.lastElement());

							REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT
									.elementAt(j));
							REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
									.elementAt(j));
							REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY
									.elementAt(j));
							REGAS_EXCHG_RATE_VALUE_tmp
									.add(REGAS_EXCHG_RATE_VALUE.elementAt(j));
							REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
									.elementAt(j));
							REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
									.elementAt(j));// */

							REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
									.elementAt(j));
							PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
									.elementAt(j));
							REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
									.elementAt(j));// */
							REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF
									.elementAt(j));
						} else {
							
							// //System.out.println("No Invoice for last cargo
							// arrived: "+REGAS_ACTUAL_RECPT_DT.lastElement()+"
							// >> "+REGAS_INVOICE_DT.elementAt(j));
							
							REGAS_ACTUAL_RECPT_DT_tmpt
									.add(REGAS_ACTUAL_RECPT_DT.lastElement());
							REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
									.lastElement());
							REGAS_SUPPL_ABBR_tmp.add(REGAS_SUPPL_ABBR
									.lastElement());
							REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
							REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME
									.lastElement());
							REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
							REGAS_CUSTOMER_ABBR_CARGO_tmp
									.add(REGAS_CUSTOMER_ABBR_CARGO
											.lastElement());

							REGAS_INVOICE_DT_tmp.add("*NOI");
							REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
							REGAS_TOTAL_QTY_tmp.add("*NOI");
							REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
							REGAS_GROSS_AMT_USD_tmp.add("*NOI");
							REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

							REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
							PERIOD_END_DT_tmp.add("*NOI");// */
							REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
							REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
							REGAS_GAS_TARIF_tmp.add("*NOI");
						}
					} else if (tmpyrC < tmpyrI
							&& tmpyrI <= Integer.parseInt(to_year)) {

						// invoice FOR LAST cargo Integer.parseInt(to_year)
						// //System.out.println("Invoice for last cargo :
						// "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.lastElement());
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.lastElement());
						REGAS_SUPPL_ABBR_tmp
								.add(REGAS_SUPPL_ABBR.lastElement());
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
						REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

						REGAS_INVOICE_DT_tmp.add(REGAS_INVOICE_DT.elementAt(j));
						REGAS_CUSTOMER_ABBR_tmp.add(REGAS_CUSTOMER_ABBR
								.elementAt(j));
						REGAS_TOTAL_QTY_tmp.add(REGAS_TOTAL_QTY.elementAt(j));
						REGAS_EXCHG_RATE_VALUE_tmp.add(REGAS_EXCHG_RATE_VALUE
								.elementAt(j));
						REGAS_GROSS_AMT_USD_tmp.add(REGAS_GROSS_AMT_USD
								.elementAt(j));
						REGAS_GROSS_AMT_INR_tmp.add(REGAS_GROSS_AMT_INR
								.elementAt(j));// */

						REGAS_TAX_STRUCT_CD_tmp.add(REGAS_TAX_STRUCT_CD
								.elementAt(j));
						PERIOD_END_DT_tmp.add(PERIOD_END_DT.elementAt(j));// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add(REGAS_HLPL_INV_SEQ_NO
								.elementAt(j));
						REGAS_FINANCIAL_YEAR_tmp.add(REGAS_FINANCIAL_YEAR
								.elementAt(j));// */
						REGAS_GAS_TARIF_tmp.add(REGAS_GAS_TARIF.elementAt(j));
					}

					else {
						
						// //System.out.println("No Invoice for last cargo
						// arrived: "+REGAS_ACTUAL_RECPT_DT.lastElement()+" >>
						// "+REGAS_INVOICE_DT.elementAt(j));
						
						REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
								.lastElement());
						REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
								.lastElement());
						REGAS_SUPPL_ABBR_tmp
								.add(REGAS_SUPPL_ABBR.lastElement());
						REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
						REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
						REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
						REGAS_CUSTOMER_ABBR_CARGO_tmp
								.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

						REGAS_INVOICE_DT_tmp.add("*NOI");
						REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
						REGAS_TOTAL_QTY_tmp.add("*NOI");
						REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
						REGAS_GROSS_AMT_USD_tmp.add("*NOI");
						REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

						REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
						PERIOD_END_DT_tmp.add("*NOI");// */
						REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
						REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
						REGAS_GAS_TARIF_tmp.add("*NOI");// */
					}

				}
				
				if(chk1 == 0)
				{

					REGAS_ACTUAL_RECPT_DT_tmpt.add(REGAS_ACTUAL_RECPT_DT
							.lastElement());
					REGAS_CARGO_REF_NO_tmp.add(REGAS_CARGO_REF_NO
							.lastElement());
					REGAS_SUPPL_ABBR_tmp
							.add(REGAS_SUPPL_ABBR.lastElement());
					REGAS_ADQ_QTY_tmp.add(REGAS_ADQ_QTY.lastElement());
					REGAS_SHIP_NAME_tmp.add(REGAS_SHIP_NAME.lastElement());
					REGAS_SUG_tmp.add(REGAS_SUG.lastElement());
					REGAS_CUSTOMER_ABBR_CARGO_tmp
							.add(REGAS_CUSTOMER_ABBR_CARGO.lastElement());

					REGAS_INVOICE_DT_tmp.add("*NOI");
					REGAS_CUSTOMER_ABBR_tmp.add("*NOI");
					REGAS_TOTAL_QTY_tmp.add("*NOI");
					REGAS_EXCHG_RATE_VALUE_tmp.add("*NOI");
					REGAS_GROSS_AMT_USD_tmp.add("*NOI");
					REGAS_GROSS_AMT_INR_tmp.add("*NOI");// */

					REGAS_TAX_STRUCT_CD_tmp.add("*NOI");
					PERIOD_END_DT_tmp.add("*NOI");// */
					REGAS_HLPL_INV_SEQ_NO_tmp.add("*NOI");
					REGAS_FINANCIAL_YEAR_tmp.add("*NOI");// */
					REGAS_GAS_TARIF_tmp.add("*NOI");// */
				}
			}

			// //System.out.println("Invoice NOT cargo");
			// //System.out.println("Cargo
			// >>>"+REGAS_ACTUAL_RECPT_DT_tmpt.size());
			// //System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp.size());
			// //System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT_tmpt);
			// //System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp);

			// advanced sorting
			String ship_nm = "";
			String ship_dt = "";
			String ship_nm1 = "";
			String ship_dt1 = "";
			String inv_dt = "";
			String inv_dt1 = "";
			int n = 0;

			for (int m = 0; m < REGAS_INVOICE_DT_tmp.size() - 1; m++) {
				
				ship_nm = REGAS_SHIP_NAME_tmp.elementAt(m).toString();
				
				ship_dt = REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m).toString();
				
				inv_dt = REGAS_INVOICE_DT_tmp.elementAt(m).toString();
				
				if (m < REGAS_INVOICE_DT_tmp.size()) {
					
					ship_nm1 = REGAS_SHIP_NAME_tmp.elementAt(m + 1).toString();
					
					ship_dt1 = REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m + 1)
							.toString();
					
					inv_dt1 = REGAS_INVOICE_DT_tmp.elementAt(m + 1).toString();
					
					if (ship_nm.equals(ship_nm1) && ship_dt.equals(ship_dt1)
							&& inv_dt.equals("*NOI") && inv_dt1.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m);
						REGAS_ADQ_QTY_tmp.removeElementAt(m);
						REGAS_SHIP_NAME_tmp.removeElementAt(m);
						REGAS_SUG_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m);

						REGAS_INVOICE_DT_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m);

						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m);
						PERIOD_END_DT_tmp.removeElementAt(m);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m);
						REGAS_GAS_TARIF_tmp.removeElementAt(m);
						m = m - 1;
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					} else if (ship_nm.equals(ship_nm1)
							&& ship_dt.equals(ship_dt1)
							&& !inv_dt.equals(inv_dt1) && inv_dt.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m);
						REGAS_ADQ_QTY_tmp.removeElementAt(m);
						REGAS_SHIP_NAME_tmp.removeElementAt(m);
						REGAS_SUG_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m);

						REGAS_INVOICE_DT_tmp.removeElementAt(m);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m);

						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m);
						PERIOD_END_DT_tmp.removeElementAt(m);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m);
						REGAS_GAS_TARIF_tmp.removeElementAt(m);
						m = m - 1;
						
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					} else if (ship_nm.equals(ship_nm1)
							&& ship_dt.equals(ship_dt1)
							&& !inv_dt.equals(inv_dt1)
							&& inv_dt1.equals("*NOI")) {
						
						// ////System.out.println("element removed at : "+m);
						
						REGAS_ACTUAL_RECPT_DT_tmpt.removeElementAt(m + 1);
						REGAS_CARGO_REF_NO_tmp.removeElementAt(m);
						REGAS_SUPPL_ABBR_tmp.removeElementAt(m + 1);
						REGAS_ADQ_QTY_tmp.removeElementAt(m + 1);
						REGAS_SHIP_NAME_tmp.removeElementAt(m + 1);
						REGAS_TOTAL_QTY_tmp.removeElementAt(m + 1);
						REGAS_CUSTOMER_ABBR_CARGO_tmp.removeElementAt(m + 1);

						REGAS_INVOICE_DT_tmp.removeElementAt(m + 1);
						REGAS_CUSTOMER_ABBR_tmp.removeElementAt(m + 1);

						REGAS_SUG_tmp.removeElementAt(m + 1);
						REGAS_EXCHG_RATE_VALUE_tmp.removeElementAt(m + 1);
						REGAS_GROSS_AMT_USD_tmp.removeElementAt(m + 1);
						REGAS_GROSS_AMT_INR_tmp.removeElementAt(m + 1);

						REGAS_TAX_STRUCT_CD_tmp.removeElementAt(m + 1);
						PERIOD_END_DT_tmp.removeElementAt(m + 1);

						REGAS_HLPL_INV_SEQ_NO_tmp.removeElementAt(m + 1);
						REGAS_FINANCIAL_YEAR_tmp.removeElementAt(m + 1);
						REGAS_GAS_TARIF_tmp.removeElementAt(m + 1);
						m = m - 1;
						// ////System.out.println(REGAS_CUSTOMER_ABBR_tmp.elementAt(m)+"
						// "+REGAS_SHIP_NAME_tmp.elementAt(m)+"
						// "+REGAS_SUPPL_ABBR_tmp.elementAt(m)+"
						// "+REGAS_ACTUAL_RECPT_DT_tmpt.elementAt(m)+"
						// "+REGAS_ADQ_QTY_tmp.elementAt(m)+" "+"nonenone "+"
						// "+REGAS_INVOICE_DT_tmp.elementAt(m)+"
						// "+REGAS_TOTAL_QTY_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_USD_tmp.elementAt(m)+"
						// "+REGAS_EXCHG_RATE_VALUE_tmp.elementAt(m)+"
						// "+REGAS_GROSS_AMT_INR_tmp.elementAt(m));

					}

				}

			}
			
			//ADJUSTING OFFSPEC REJECTED & ACC QTY AS PER OF INVOICES
			off = 0;
			for (int i = 0; i < REGAS_INVOICE_DT_tmp.size(); i++) {

				if (!REGAS_INVOICE_DT_tmp.elementAt(i).toString()
						.equals("*NOI")) {
					
					REGAS_OFFSPEC_REJ_QTY_tmp.add(REGAS_OFFSPEC_REJ_QTY
							.elementAt(off));
					
					REGAS_OFFSPEC_ACC_QTY_tmp.add(REGAS_OFFSPEC_ACC_QTY
							.elementAt(off));
					
					off = off + 1;
					
				} else {
					
					REGAS_OFFSPEC_REJ_QTY_tmp.add("*NOI");
					REGAS_OFFSPEC_ACC_QTY_tmp.add("*NOI");
				}
			}

			/*
			 * //System.out.println(REGAS_OFFSPEC_REJ_QTY_tmp);
			 * //System.out.println(REGAS_OFFSPEC_ACC_QTY_tmp);
			 * //System.out.println(REGAS_ACTUAL_RECPT_DT_tmpt.size());
			 * //System.out.println(REGAS_CARGO_REF_NO_tmp.size());
			 * //System.out.println(REGAS_FINANCIAL_YEAR_tmp.size());
			 * //System.out.println(REGAS_HLPL_INV_SEQ_NO_tmp.size());
			 * //System.out.println(REGAS_SUPPL_ABBR_tmp.size());
			 * //System.out.println(REGAS_ADQ_QTY_tmp.size());
			 * //System.out.println(REGAS_SHIP_NAME_tmp.size());
			 * //System.out.println(REGAS_INVOICE_DT_tmp.size());
			 * //System.out.println(REGAS_CUSTOMER_ABBR_tmp.size());
			 * //System.out.println(REGAS_TOTAL_QTY_tmp.size());
			 * //System.out.println(REGAS_EXCHG_RATE_VALUE_tmp.size());
			 * //System.out.println(REGAS_GROSS_AMT_USD_tmp.size());
			 * //System.out.println(REGAS_GROSS_AMT_INR_tmp.size());
			 * //System.out.println(REGAS_TAX_STRUCT_CD_tmp.size());
			 * //System.out.println(PERIOD_END_DT_tmp.size());REGAS_GAS_TARIF_tmp.add("*NOI");
			 */
			
			//Adjustment
			Vector Vregs_no_tmp = new Vector();
			Vector Vregas_rev_no_tmp = new Vector();
			Vector Vcargo_seq_no_tmp = new Vector();
			Vector REGAS_CUSTOMER_CD_INV_tmp = new Vector();
			// re_sug

			int m = 0;
			for (int i = 0; i < REGAS_INVOICE_DT_tmp.size(); i++) {
				
				if (!REGAS_INVOICE_DT_tmp.elementAt(i).toString().trim()
						.equals("*NOI")) {
					
					Vregs_no_tmp.add(Vregs_no.elementAt(m));
					Vregas_rev_no_tmp.add(Vregas_rev_no.elementAt(m));
					Vcargo_seq_no_tmp.add(Vcargo_seq_no.elementAt(m));
					REGAS_CUSTOMER_CD_INV_tmp.add(REGAS_CUSTOMER_CD_INV
							.elementAt(m));
					m++;
					
				} else {
					
					Vregs_no_tmp.add("*NOI");
					Vregas_rev_no_tmp.add("*NOI");
					Vcargo_seq_no_tmp.add("*NOI");
					REGAS_CUSTOMER_CD_INV_tmp.add("*NOI");
				}
			}

			// adjustment
			REGAS_RECIEPT.clear();
			REGAS_REGASSIFIED.clear();
			REGAS_SUG.clear();
			REGAS_RECIEPT = REGAS_ADQ_QTY_tmp;
			REGAS_REGASSIFIED = REGAS_TOTAL_QTY_tmp;

			//System.out.println(" REGAS_ADQ_QTY_tmp " + REGAS_ADQ_QTY_tmp);
			//System.out.println(" REGAS_TOTAL_QTY_tmp " + REGAS_TOTAL_QTY_tmp);
			//System.out.println(" REGAS_SUG_tmp " + REGAS_SUG_tmp);
			// //System.out.println(REGAS_SUG_tmp.size());
			// //System.out.println(REGAS_SUG_tmp);
			
			// TO FIND SUG AND ASSOCIATED REGAS CARGO FOR GIVEN INVOICE
			double re_var_cost = 0;
			double re_sug = 0;
			String rgas_cargo_ref_no = "";
			for (int i = 0; i < REGAS_HLPL_INV_SEQ_NO_tmp.size(); i++) {
				
				if (!REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(i).toString().equals("*NOI")) {
					
					re_var_cost = 0;
				
					queryString = "SELECT sys_use_gas, cargo_ref_no "
							+ "FROM FMS7_RE_GAS_CARGO_DTL "
							+ "WHERE customer_cd = '"
							+ REGAS_CUSTOMER_CD_INV_tmp.elementAt(i) + "' "
							+ " and re_gas_no = '" + Vregs_no_tmp.elementAt(i)
							+ "' " //+ " and re_gas_rev_no = '"
					//		+ Vregas_rev_no_tmp.elementAt(i) + "' "
							+ " and cargo_seq_no = '"
							+ Vcargo_seq_no_tmp.elementAt(i) + "' ";
					//System.out.println(REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(i)+" "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					while (rset2.next()) {
						
						re_sug = Double
								.parseDouble((rset2.getString(1) == null ? "0"
										: rset2.getString(1)));
						rgas_cargo_ref_no = rset2.getString(2) == null ? "0" : rset2.getString(2);
						
					}
					
					re_var_cost = (Double.parseDouble(REGAS_REGASSIFIED
							.elementAt(i).toString())
							+ Double.parseDouble(REGAS_OFFSPEC_REJ_QTY_tmp
									.elementAt(i).toString()) + Double
							.parseDouble(REGAS_OFFSPEC_ACC_QTY_tmp.elementAt(i)
									.toString()))
							/ (100 - re_sug) * re_sug;
					
					REGAS_SUG.add("" + re_sug);
					REGAS_VARIABLE_COST.add("" + re_var_cost);
					if(!rgas_cargo_ref_no.equals(""))
					{
						REGAS_CARGO_REF_NO_ON_INV.add(rgas_cargo_ref_no);	
					}
					else
					{
						REGAS_CARGO_REF_NO_ON_INV.add("");	
					}
					
					rgas_cargo_ref_no = "";
					
					
				} else {
					
					REGAS_VARIABLE_COST.add("*NOI");
					REGAS_SUG.add("*NOI");
					REGAS_CARGO_REF_NO_ON_INV.add("*NOI");
				}
			}
			// FOR TAX
			// =========Following is code for calculating TAX_STRUCTURE and it's
			// TAX_AMT

			String tax_amt = "";

			for (int k = 0; k < REGAS_HLPL_INV_SEQ_NO_tmp.size(); k++) {

				// //System.out.println("INV no_tmp :
				// "+REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k));
				// //System.out.println("dATE :
				// "+REGAS_INVOICE_DT_tmp.elementAt(k));
				// //System.out.println("TAX CODE :
				// "+REGAS_TAX_STRUCT_CD_tmp.elementAt(k));
				// //System.out.println("PERIO END DATE :
				// "+PERIOD_END_DT_tmp.elementAt(k));
				// //System.out.println("INR AMT :
				// "+REGAS_GROSS_AMT_INR_tmp.elementAt(k));
				// //System.out.println("---------------------------------------------");
				String hlpl_inv_no_disp = "";
				
				if (!REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k).toString().equals(
						"*NOI")) {
					
					if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 10) {
						
						hlpl_inv_no_disp = "000"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 100) {
						
						hlpl_inv_no_disp = "00"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else if (Integer.parseInt(""
							+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k)) < 1000) {
						
						hlpl_inv_no_disp = "0"
								+ REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k) + "/"
								+ REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					} else {
						
						hlpl_inv_no_disp = REGAS_HLPL_INV_SEQ_NO_tmp
								.elementAt(k)
								+ "/" + REGAS_FINANCIAL_YEAR_tmp.elementAt(k);
						
					}
					
					REGAS_HLPL_INV_SEQ_NO_tmp.setElementAt(hlpl_inv_no_disp, k);

					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), "
							+ "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="
							+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
							+ " AND "
							+ "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="
							+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
							+ " AND "
							+ "B.app_date<=TO_DATE('"
							+ PERIOD_END_DT_tmp.elementAt(k)
							+ "','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					// //System.out.println("Finding Out Correct Tax Structure
					// Details = "+queryString);
					rset = stmt.executeQuery(queryString);
					boolean flg_ser = false;
					boolean flg_edu = false;
					boolean flg_hiedu = false;
					
					while (rset.next()) {
						
						String tax_cd = rset.getString(1);
						String tax_title = "";
						
						double gross_amt = Double.parseDouble(""
								+ REGAS_GROSS_AMT_INR_tmp.elementAt(k));
						
						tax_amt = nf.format((gross_amt * Double
								.parseDouble(rset.getString(2))) / 100);
							
						
						if (rset.getString(3).equals("1")) {
							
							tax_amt = nf.format((gross_amt * Double
									.parseDouble(rset.getString(2))) / 100);
							tax_title = "";

							
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE "
									+ "tax_code=" + tax_cd + "";
							// //System.out.println("For Fetching DEPENDENT Tax
							// Abbr = "+queryString2);
							
							rset2 = stmt2.executeQuery(queryString2);
							
							if (rset2.next()) {
								
								String tax_abbr = rset2.getString(1) == null ? ""
										: rset2.getString(1);
								
								tax_title = tax_abbr;
							} else {
								
								tax_title = "";
							}
														
							
							if (!tax_title.equals("") && tax_title.equals("ST")) {
								
								flg_ser = true;
								REGAS_TAX_SERVICE.add(tax_amt);		
							}

							if (!tax_title.equals("")
									&& tax_title.equals("ECS")) {
								
								flg_edu = true;
								REGAS_TAX_EDU_CESS.add(tax_amt);
							}

							if (!tax_title.equals("")
									&& tax_title.equals("HECS")) {
								
								flg_hiedu = true;
								REGAS_TAX_HIEDU_CESS.add(tax_amt);
							}

							// //System.out.println("fro if >>> ");
							// //System.out.println("tax_on >>>
							// "+rset.getString(3));
							// //System.out.println("tax_title : "+tax_title);
							// //System.out.println("tax_amt : "+tax_amt);
							// //System.out.println("tax_cd : "+tax_cd);
							// //System.out.println("tax_factor : "+tax_factor);

						} else if (rset.getString(3).equals("2")) {
							
							queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), "
									+ "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="
									+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
									+ " AND "
									+ "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="
									+ REGAS_TAX_STRUCT_CD_tmp.elementAt(k)
									+ " AND "
									+ "B.app_date<=TO_DATE('"
									+ PERIOD_END_DT_tmp.elementAt(k)
									+ "','DD/MM/YYYY')) AND A.tax_code="
									+ rset.getString(4) + "";
							// //System.out.println("Finding Out Tax Which Is
							// Dependent On Other Tax Value = "+queryString1);
							
							rset1 = stmt1.executeQuery(queryString1);
							if (rset1.next()) {
								
								if (rset1.getString(3).equals("1")) {
									
									tax_amt = nf
											.format((gross_amt * Double
													.parseDouble(rset1
															.getString(2))) / 100);
								}
								
								tax_amt = nf.format((Double
										.parseDouble(tax_amt) * Double
										.parseDouble(rset.getString(2))) / 100);
							} else {
								
								tax_amt = "" + 0.00;
							}
							
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE "
									+ "tax_code=" + tax_cd + "";
							// //System.out.println("For Fetching DEPENDENT Tax
							// Abbr = "+queryString2);
							
							rset2 = stmt2.executeQuery(queryString2);
							if (rset2.next()) {
								
								String tax_abbr = rset2.getString(1) == null ? ""
										: rset2.getString(1);
								tax_title = tax_abbr;
								
							} else {
								
								tax_title = "";
							}
							if (!tax_title.equals("") && tax_title.equals("ST")) {
								
								flg_ser = true;
								REGAS_TAX_SERVICE.add(tax_amt);
								
							}

							if (!tax_title.equals("")
									&& tax_title.equals("ECS")) {
								
								flg_edu = true;
								REGAS_TAX_EDU_CESS.add(tax_amt);
								
							}

							if (!tax_title.equals("")
									&& tax_title.equals("HECS")) {
								
								flg_hiedu = true;
								REGAS_TAX_HIEDU_CESS.add(tax_amt);
								
							}

							
						} else {
							tax_amt = "" + 0.00;
							REGAS_TAX_SERVICE.add(tax_amt);
							REGAS_TAX_EDU_CESS.add(tax_amt);
							REGAS_TAX_HIEDU_CESS.add(tax_amt);

						}

					}
					if (flg_ser == false) {
						
						REGAS_TAX_SERVICE.add("0.00");
					}
					if (flg_edu == false) {
						
						REGAS_TAX_EDU_CESS.add("0.00");
					}
					if (flg_hiedu == false) {
						
						REGAS_TAX_HIEDU_CESS.add("0.00");
					}

				} else {
					
					tax_amt = "*NOI";
					REGAS_TAX_SERVICE.add(tax_amt);
					REGAS_TAX_EDU_CESS.add(tax_amt);
					REGAS_TAX_HIEDU_CESS.add(tax_amt);
				}
				// //System.out.println("ST AMT :
				// "+REGAS_TAX_SERVICE.elementAt(k));
				// //System.out.println("EDU CESS AMT :
				// "+REGAS_TAX_EDU_CESS.elementAt(k));
				// //System.out.println("HEDU CESS AMT :
				// "+REGAS_TAX_HIEDU_CESS.elementAt(k));
				// //System.out.println("INV NO :
				// "+REGAS_HLPL_INV_SEQ_NO_tmp.elementAt(k));
				// //System.out.println("==============================================");

			}
			// FOR TAX END HERE

			// REGAS_TOT_INVOICE_VAL_INR
			double tot_inv_val = 0;
			
			for (int i = 0; i < REGAS_GROSS_AMT_INR_tmp.size(); i++) {
				
				if (!REGAS_GROSS_AMT_INR_tmp.elementAt(i).toString().equals(
						"*NOI")) {
					
					tot_inv_val = java.lang.Double
							.parseDouble(REGAS_GROSS_AMT_INR_tmp.elementAt(i)
									.toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_SERVICE
									.elementAt(i).toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_EDU_CESS
									.elementAt(i).toString().trim())
							+ java.lang.Double.parseDouble(REGAS_TAX_HIEDU_CESS
									.elementAt(i).toString().trim());
					
					REGAS_TOT_INVOICE_VAL_INR.add("" + tot_inv_val);
					
				} else {
					
					REGAS_TOT_INVOICE_VAL_INR.add("*NOI");
				}
			}
			// Assignment of Temp Vector to the main vectors

			REGAS_ACTUAL_RECPT_DT = REGAS_ACTUAL_RECPT_DT_tmpt;
			REGAS_SUPPL_NM = REGAS_SUPPL_NM_tmp;
			REGAS_SUPPL_ABBR = REGAS_SUPPL_ABBR_tmp;
			REGAS_ADQ_QTY = REGAS_ADQ_QTY_tmp;
			REGAS_SHIP_NAME = REGAS_SHIP_NAME_tmp;
			REGAS_CARGO_REF_NO = REGAS_CARGO_REF_NO_tmp;

			REGAS_HLPL_INV_SEQ_NO = REGAS_HLPL_INV_SEQ_NO_tmp;
			REGAS_INVOICE_DT = REGAS_INVOICE_DT_tmp;
			REGAS_CUSTOMER_ABBR = REGAS_CUSTOMER_ABBR_tmp;
			REGAS_TOTAL_QTY = REGAS_TOTAL_QTY_tmp;

			REGAS_EXCHG_RATE_VALUE = REGAS_EXCHG_RATE_VALUE_tmp;
			REGAS_GROSS_AMT_USD = REGAS_GROSS_AMT_USD_tmp;
			REGAS_GROSS_AMT_INR = REGAS_GROSS_AMT_INR_tmp;
			REGAS_GAS_TARIF = REGAS_GAS_TARIF_tmp;
			REGAS_OFFSPEC_REJ_QTY = REGAS_OFFSPEC_REJ_QTY_tmp;
			REGAS_OFFSPEC_ACC_QTY = REGAS_OFFSPEC_ACC_QTY_tmp;
			REGAS_CUSTOMER_ABBR_CARGO = REGAS_CUSTOMER_ABBR_CARGO_tmp;

			REGAS_INVOICE_MONTH.clear();
			
			//Calculation of Invoice month year pair
			for (int i = 0; i < REGAS_INVOICE_DT.size(); i++) {
				
				if (!REGAS_INVOICE_DT.elementAt(i).toString().trim().equals(
						"*NOI")) {

					queryString = "select to_char(to_date('"
							+ REGAS_INVOICE_DT.elementAt(i)
							+ "','dd/mm/yyyy'),'mon-yy') from dual";
					rset1 = stmt1.executeQuery(queryString);
					if (rset1.next()) {
						
						REGAS_INVOICE_MONTH
								.add(rset1.getString(1) == null ? "-" : rset1
										.getString(1));

					}
				} else {
					
					queryString = "select to_char(to_date('"
							+ REGAS_ACTUAL_RECPT_DT.elementAt(i)
							+ "','dd/mm/yyyy'),'mon-yy') from dual";
					rset1 = stmt1.executeQuery(queryString);
					
					if (rset1.next()) {
						
						REGAS_INVOICE_MONTH
								.add(rset1.getString(1) == null ? "-" : rset1
										.getString(1));

					}
				}

			}

			// FOR opening balance , HERE in JSP, For display we use only first opening balance
			//other are calculate within the jsp
			String f_inv_dt = "";
			String e_inv_dt = "";
			String frm_mm = "";

			if (!REGAS_INVOICE_MONTH.isEmpty()) {

				queryString1 = "SELECT TO_CHAR(TO_DATE('"
						+ REGAS_INVOICE_MONTH.firstElement().toString().trim()
						+ "','MON-YY'),'MM/YYYY') FROM DUAL";
				rset1 = stmt1.executeQuery(queryString1);
				
				if (rset1.next()) {
					
					f_inv_dt = rset1.getString(1) == null ? "0" : rset1
							.getString(1);
				}
				queryString1 = "SELECT TO_CHAR(TO_DATE('"
						+ REGAS_INVOICE_MONTH.lastElement().toString().trim()
						+ "','MON-YY'),'MM/YYYY') FROM DUAL";
				rset1 = stmt1.executeQuery(queryString1);
				if (rset1.next()) {
					
					e_inv_dt = rset1.getString(1) == null ? "0" : rset1
							.getString(1);
				}

				//System.out.println("Regas OPENING f  = " + f_inv_dt);
				//System.out.println("Regas OPENING e  = " + e_inv_dt);

				if (true) {

					queryString = "SELECT OP_BAL_REGAS, MONTH, YEAR FROM FMS7_OPENING_STOCK_DTLS  order by month, year"
							+ "" ;
					//System.out.println("Regas OPENING BALANCE Query = "+ queryString);
					rset = stmt.executeQuery(queryString);
					while (rset.next()) {
						
						queryString = "SELECT OP_BAL_REGAS, MONTH, YEAR FROM FMS7_OPENING_STOCK_DTLS "
								+ "WHERE to_date('"
								+ rset.getString(2)
								+ "/"
								+ rset.getString(3)
								+ "','MM/YYYY') BETWEEN TO_DATE('"
								+ f_inv_dt
								+ "','MM/YYYY') AND TO_DATE('"
								+ e_inv_dt
								+ "','MM/YYYY') "
								+ "and month = '"
								+f_inv_dt.substring(0,2)
								+ "' and year = '"
								+ f_inv_dt.substring(3) + "' ";
						//System.out.println("Regas OPENING BALANCE Query = "+ queryString);
						rset1 = stmt1.executeQuery(queryString);
						while (rset1.next()) {
							
							REGAS_OP_BAL_REGAS
									.add(rset1.getString(1) == null ? ""
											: rset1.getString(1));
							REGAS_OP_BAL_REGAS_MONTH
									.add(rset1.getString(2) == null ? ""
											: rset1.getString(2));
							REGAS_OP_BAL_REGAS_YEAR
									.add(rset1.getString(3) == null ? ""
											: rset1.getString(3));
						}

					}
				}

//				//System.out.println("Regas OPENING BALANCE  = "
//						+ REGAS_OP_BAL_REGAS);
//				//System.out.println("Regas REGAS_OP_BAL_REGAS_MONTH = "
//						+ REGAS_OP_BAL_REGAS_MONTH);
//				//System.out.println("Regas REGAS_OP_BAL_REGAS_YEAR = "
//						+ REGAS_OP_BAL_REGAS_YEAR);

				frm_mm = "";

				for (int i = 0; i < REGAS_INVOICE_MONTH.size()
						- REGAS_OP_BAL_REGAS_MONTH.size(); i++) {
					
					REGAS_OP_BAL_REGAS_MONTH.add("0");
				}
				if (!REGAS_OP_BAL_REGAS_MONTH.isEmpty()) {
					
					for (int i = 0; i < REGAS_INVOICE_MONTH.size(); i++) {
						

						queryString1 = "SELECT TO_CHAR(TO_DATE('01-"
								+ REGAS_INVOICE_MONTH.elementAt(i).toString()
										.split("-")[0]
								+ "-2010','DD-mon-YYYY'),'mm') FROM DUAL";
						rset1 = stmt1.executeQuery(queryString1);
						if (rset1.next()) {
							
							frm_mm = rset1.getString(1) == null ? "0" : rset1
									.getString(1);
							if (!frm_mm.equals(REGAS_OP_BAL_REGAS_MONTH
									.elementAt(i).toString())) {
								
								REGAS_OP_BAL_REGAS_MONTH.insertElementAt(""
										+ frm_mm, i);

								REGAS_OP_BAL_REGAS.insertElementAt("0.00", i);
							}
						}
					}
				}
			}
			
			/*//System.out.println("Regas REGAS_CARGO_REF_NO_tmp = "+REGAS_CARGO_REF_NO_tmp.size());
			//System.out.println("Regas REGAS_SHIP_NAME_tmp = "+REGAS_SHIP_NAME_tmp.size());

			//System.out.println("arrival date "+REGAS_INVOICE_MONTH);
			//System.out.println(REGAS_CUSTOMER_ABBR.size() + "    "
					+ REGAS_SHIP_NAME.size() + "    " + REGAS_SUPPL_ABBR.size()
					+ "    " + REGAS_ACTUAL_RECPT_DT.size() + "    "
					+ REGAS_ADQ_QTY.size() + "    " + REGAS_RECIEPT.size()
					+ "    " + REGAS_REGASSIFIED.size() + "    "
					+ REGAS_HLPL_INV_SEQ_NO.size() + "    "
					+ REGAS_INVOICE_DT.size() + "    " + REGAS_TOTAL_QTY.size()
					+ "     " + REGAS_GAS_TARIF.size() + "    "
					+ REGAS_GROSS_AMT_USD.size() + "    "
					+ REGAS_EXCHG_RATE_VALUE.size() + "    "
					+ REGAS_GROSS_AMT_INR.size() + "     "
					+ REGAS_TAX_SERVICE.size() + "     "
					+ REGAS_TAX_EDU_CESS.size() + "     "
					+ REGAS_TAX_HIEDU_CESS.size() + "     "
					+ REGAS_TOT_INVOICE_VAL_INR.size());
			
			if (REGAS_INVOICE_DT.size() == REGAS_ACTUAL_RECPT_DT.size()) {
				
				//System.out.println("Invoice = cargo");
				//System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT_tmpt);
				//System.out.println("Invoice >>>"+REGAS_INVOICE_DT_tmp);
				//System.out.println("REGAS_CUSTOMER_ABBR REGAS_SHIP_NAME REGAS_SUPPL_ABBR REGAS_ACTUAL_RECPT_DT REGAS_ADQ_QTY REGAS_RECIEPT REGAS_REGASSIFIED REGAS_INV_NO REGAS_INVOICE_DT REGAS_TOTAL_QTY REGAS_GAS_TARIF REGAS_GROSS_AMT_USD REGAS_EXCHG_RATE_VALUE REGAS_GROSS_AMT_INR REGAS_TAX_SERVICE  REGAS_TAX_EDU  REGAS_TAX_HIEDU  REGAS_TOT");
				for (int i = 0; i < REGAS_INVOICE_DT.size(); i++) {
					
					//System.out.println(REGAS_CUSTOMER_ABBR.elementAt(i)+"    "+REGAS_SHIP_NAME.elementAt(i)+"    "+REGAS_SUPPL_ABBR.elementAt(i)+"    "+REGAS_ACTUAL_RECPT_DT.elementAt(i)+"    "+REGAS_ADQ_QTY.elementAt(i)+"    "+REGAS_RECIEPT.elementAt(i)+"    "+REGAS_REGASSIFIED.elementAt(i)+"    "+REGAS_HLPL_INV_SEQ_NO.elementAt(i)+"    "+REGAS_INVOICE_DT.elementAt(i)+"    "+REGAS_TOTAL_QTY.elementAt(i)+"    "+REGAS_GAS_TARIF.elementAt(i)+"    "+REGAS_GROSS_AMT_USD.elementAt(i)+"    "+REGAS_EXCHG_RATE_VALUE.elementAt(i)+"    "+REGAS_GROSS_AMT_INR.elementAt(i)+"     "+REGAS_TAX_SERVICE.elementAt(i)+"     "+REGAS_TAX_EDU_CESS.elementAt(i)+"     "+REGAS_TAX_HIEDU_CESS.elementAt(i)+"     "+REGAS_TOT_INVOICE_VAL_INR.elementAt(i));
					//System.out.println("   "+i);
				}
			} else {
				//System.out.println("Invoice NOT cargo");
				//System.out.println("Cargo >>>"+REGAS_ACTUAL_RECPT_DT);
				//System.out.println("Invoice >>>"+REGAS_INVOICE_DT);
			}
*/
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void fetchReGasRegisterDataSummary()			//BK20151118 Added SBC Summary value here
	{

		try 
		{
			
			if(!REGAS_INVOICE_MONTH.isEmpty())
			{
				String mon_yr = REGAS_INVOICE_MONTH.elementAt(0).toString().trim();
				/*String mon_yr = "";
				queryString = "SELECT TO_CHAR(TO_DATE('"+REGAS_INVOICE_MONTH.elementAt(0).toString().trim()+"','Mon-yy'),'Mon-yy')" +
								" from dual";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					mon_yr = (rset.getString(1) == null ? "" : rset.getString(1));
				}
				*/
				String ship1 = "";
				String ship2 = "";
				
				String dt1 = "";
				String dt2 = "";
				
				boolean cargo = false;
				boolean cargo_chk = false;
				boolean inv = false;
				boolean inv_chk = false;
				
				double cl_bal =0 ; 
				double opn_bal =0;
				double opn_bal1 =0;

				double regas_adq_qty = 0;
				double regas_reciept = 0;
				
				double regas_regassified = 0;
				double regas_offspec_acc_qty = 0;
				double regas_offspec_rej_qty = 0;
				double regas_variable_cost = 0;
				double regas_total_qty = 0;
				double regas_gross_amt_usd = 0;
				double regas_gross_amt_inr = 0;
				double regas_tax_service = 0;
				double regas_tax_sbc = 0;			//BK20151118 SBC
				double regas_tax_edu_cess = 0;
				double regas_tax_hiedu_cess = 0;
				double regas_tot_invoice_val_inr = 0;
				
				for(int i =0; i<REGAS_INVOICE_MONTH.size(); i++)
				{
					//System.out.println(i+" "+REGAS_INVOICE_MONTH.size());
					
					if(mon_yr.equals(REGAS_INVOICE_MONTH.elementAt(i).toString().trim()))
					{
						//System.out.println("=====================");
						//System.out.println(mon_yr+" if "+REGAS_INVOICE_MONTH.elementAt(i));
						
						
						if(!REGAS_ADQ_QTY.elementAt(i).toString().trim().equals("NOC"))
						{
							cargo = true;
							cargo_chk = true;
							ship2 = REGAS_SHIP_NAME.elementAt(i).toString().trim();
							dt2 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString().trim();
							//System.out.println("ship1 "+ship1+" if ship2 "+ship2);
							//System.out.println("dt1 "+dt1+" if dt2 "+dt2);
							
							if(!ship1.equals(ship2) && !dt1.equals(dt2))
							{
								//System.out.println("shiip if 1");
								regas_adq_qty+= Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept+= Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							else if(ship1.equals(ship2) && !dt1.equals(dt2))
							{
								//System.out.println("shiip else if 1");
								regas_adq_qty+= Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept+= Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else if(!ship1.equals(ship2) && dt1.equals(dt2))
							{
								//System.out.println("shiip else if 2");
								regas_adq_qty += Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept += Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							
						}
						else
						{
							if(!cargo_chk)
							{
								cargo = false;
							}
							
						}
						//System.out.println(regas_adq_qty+" if "+regas_reciept);
						if(!REGAS_REGASSIFIED.elementAt(i).toString().trim().equals("*NOI"))
						{
							inv = true;
							inv_chk = true;
							regas_regassified+= Double.parseDouble(REGAS_REGASSIFIED.elementAt(i).toString().trim());
							regas_offspec_acc_qty+= Double.parseDouble(REGAS_OFFSPEC_ACC_QTY.elementAt(i).toString().trim());
							regas_offspec_rej_qty+= Double.parseDouble(REGAS_OFFSPEC_REJ_QTY.elementAt(i).toString().trim());
							regas_variable_cost+= Double.parseDouble(REGAS_VARIABLE_COST.elementAt(i).toString().trim());
							regas_total_qty+= Double.parseDouble(REGAS_TOTAL_QTY.elementAt(i).toString().trim());
							regas_gross_amt_usd+= Double.parseDouble(REGAS_GROSS_AMT_USD.elementAt(i).toString().trim());
							regas_gross_amt_inr+= Double.parseDouble(REGAS_GROSS_AMT_INR.elementAt(i).toString().trim());
							regas_tax_service+= Double.parseDouble(REGAS_TAX_SERVICE.elementAt(i).toString().trim());
							regas_tax_sbc+= Double.parseDouble(REGAS_TAX_SBC.elementAt(i).toString().trim());			//BK20151118 SBC
							regas_tax_edu_cess+= Double.parseDouble(REGAS_TAX_EDU_CESS.elementAt(i).toString().trim());
							regas_tax_hiedu_cess+= Double.parseDouble(REGAS_TAX_HIEDU_CESS.elementAt(i).toString().trim());
							regas_tot_invoice_val_inr+= Double.parseDouble(REGAS_TOT_INVOICE_VAL_INR.elementAt(i).toString().trim());
							
							//
							
						}
						else
						{
							if(!inv_chk)
							{
								inv = false;
							}
						}
						
						
						if(i==0)
						{
							opn_bal=Double.parseDouble(REGAS_OP_BAL_REGAS.elementAt(i).toString());
							cl_bal += opn_bal+regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
							- regas_offspec_rej_qty;
							opn_bal1 = opn_bal;
						}
						else
						{
							//opn_bal = cl_bal;
							cl_bal = opn_bal1 + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
									- regas_offspec_rej_qty;
							//opn_bal = cl_bal;
						}
						//System.out.println(" open "+opn_bal+" close "+cl_bal);
						//System.out.println("=====================");
						
					}
					else
					{
						
						//System.out.println("=====================");
						//System.out.println(mon_yr+" else "+REGAS_INVOICE_MONTH.elementAt(i));
												
						
						
						//cargo
						REGAS_SUMRY_INVOICE_MONTH.add(mon_yr.toUpperCase());
						if(cargo)
						{
							if(regas_adq_qty!=0 || regas_reciept!=0 ) 
							{
								REGAS_SUMRY_ADQ_QTY.add(nf1.format(regas_adq_qty));
								REGAS_SUMRY_RECIEPT.add(nf1.format(regas_reciept));
							}
							else
							{
								REGAS_SUMRY_ADQ_QTY.add("-");
								REGAS_SUMRY_RECIEPT.add("-");
							}
						}
						else
						{
							REGAS_SUMRY_ADQ_QTY.add("-");
							REGAS_SUMRY_RECIEPT.add("-");
						}
						
						//cargo
						
						//invoice
						if(inv)
						{
							REGAS_SUMRY_REGASSIFIED.add(nf1.format(regas_regassified));
							REGAS_SUMRY_OFFSPEC_ACC_QTY.add(nf.format(regas_offspec_acc_qty));
							REGAS_SUMRY_OFFSPEC_REJ_QTY.add(nf.format(regas_offspec_rej_qty));
							REGAS_SUMRY_VARIABLE_COST.add(nf.format(regas_variable_cost));
							REGAS_SUMRY_TOTAL_QTY.add(nf.format(regas_total_qty+regas_offspec_acc_qty));
							REGAS_SUMRY_GROSS_AMT_USD.add(nf.format(regas_gross_amt_usd));
							REGAS_SUMRY_GROSS_AMT_INR.add(nf.format(regas_gross_amt_inr));
							
							
							if(regas_gross_amt_usd!=0)
							{
								REGAS_SUMRY_EXCHG_RATE_VALUE.add(nf.format(regas_gross_amt_inr/regas_gross_amt_usd));
							}
							else
							{
								REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
							}
							REGAS_SUMRY_TAX_SERVICE.add(nf.format(regas_tax_service));
							REGAS_SUMRY_TAX_SBC.add(nf.format(regas_tax_sbc));			//BK20151118 SBC
							REGAS_SUMRY_TAX_EDU_CESS.add(nf.format(regas_tax_edu_cess));
							REGAS_SUMRY_TAX_HIEDU_CESS.add(nf.format(regas_tax_hiedu_cess));
							REGAS_SUMRY_TOT_INVOICE_VAL_INR.add(nf.format(regas_tot_invoice_val_inr));
							if(regas_regassified!=0)
							{
								REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add(nf.format(regas_gross_amt_inr/regas_regassified));
								REGAS_SUMRY_GAS_TARIF.add(nf.format(regas_gross_amt_usd/regas_regassified));
							}
							else
							{
								REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
								REGAS_SUMRY_GAS_TARIF.add("-");
							}
						}
						else
						{
							REGAS_SUMRY_REGASSIFIED.add("-");
							REGAS_SUMRY_OFFSPEC_ACC_QTY.add("-");
							REGAS_SUMRY_OFFSPEC_REJ_QTY.add("-");
							REGAS_SUMRY_VARIABLE_COST.add("-");
							REGAS_SUMRY_TOTAL_QTY.add("-");
							REGAS_SUMRY_GROSS_AMT_USD.add("-");
							REGAS_SUMRY_GROSS_AMT_INR.add("-");
							REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
							REGAS_SUMRY_TAX_SERVICE.add("-");
							REGAS_SUMRY_TAX_SBC.add("-");			//BK20151118 SBC
							REGAS_SUMRY_TAX_EDU_CESS.add("-");
							REGAS_SUMRY_TAX_HIEDU_CESS.add("-");
							REGAS_SUMRY_TOT_INVOICE_VAL_INR.add("-");
							REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
							REGAS_SUMRY_GAS_TARIF.add("-");
						}
							
						//invoice
						cargo_chk = false;
						inv_chk = false;
						cargo = false;
						inv = false;
						
						regas_adq_qty = 0;
						regas_reciept = 0;
						
						regas_regassified = 0;
						regas_offspec_acc_qty = 0;
						regas_offspec_rej_qty = 0;
						regas_variable_cost = 0;
						regas_total_qty = 0;
						regas_gross_amt_usd = 0;
						regas_gross_amt_inr = 0;
						regas_tax_service = 0;
						regas_tax_sbc = 0;			//BK20151118 SBC
						regas_tax_edu_cess = 0;
						regas_tax_hiedu_cess = 0;
						regas_tot_invoice_val_inr = 0;
						
						if(!REGAS_ADQ_QTY.elementAt(i).toString().trim().equals("NOC"))
						{
							ship2 = REGAS_SHIP_NAME.elementAt(i).toString().trim();
							dt2 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString().trim();
							cargo = true;
							cargo_chk = true;
							//System.out.println("ship1 "+ship1+" else ship2 "+ship2);
							//System.out.println("dt1 "+dt1+" esle dt2 "+dt2);
							if(!ship1.trim().equals(ship2) && !dt1.trim().equals(dt2))
							{
								//System.out.println("shiip >>>>>>if 1");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							else if(!ship1.trim().equals(ship2) && dt1.trim().equals(dt2))
							{
								//System.out.println("shiip >>>>>>>else if 1");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else if(ship1.trim().equals(ship2) && !dt1.trim().equals(dt2))
							{
								//System.out.println("shiip>>>>> else if 2");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else
							{
								regas_adq_qty = 0;
								regas_reciept = 0;
							}
							
						}
						else
						{
							regas_adq_qty = 0;
							regas_reciept = 0;
							if(!cargo_chk)
							{
								cargo = false;
							}
						}
						if(!REGAS_REGASSIFIED.elementAt(i).toString().trim().equals("*NOI"))
						{
							inv = true;
							inv_chk  = true;
							regas_regassified = Double.parseDouble(REGAS_REGASSIFIED.elementAt(i).toString().trim());
							regas_offspec_acc_qty = Double.parseDouble(REGAS_OFFSPEC_ACC_QTY.elementAt(i).toString().trim());
							regas_offspec_rej_qty = Double.parseDouble(REGAS_OFFSPEC_REJ_QTY.elementAt(i).toString().trim());
							regas_variable_cost = Double.parseDouble(REGAS_VARIABLE_COST.elementAt(i).toString().trim());
							regas_total_qty = Double.parseDouble(REGAS_TOTAL_QTY.elementAt(i).toString().trim());
							regas_gross_amt_usd = Double.parseDouble(REGAS_GROSS_AMT_USD.elementAt(i).toString().trim());
							regas_gross_amt_inr = Double.parseDouble(REGAS_GROSS_AMT_INR.elementAt(i).toString().trim());
							regas_tax_service = Double.parseDouble(REGAS_TAX_SERVICE.elementAt(i).toString().trim());
							regas_tax_sbc = Double.parseDouble(REGAS_TAX_SBC.elementAt(i).toString().trim());			//BK20151118 SBC
							regas_tax_edu_cess = Double.parseDouble(REGAS_TAX_EDU_CESS.elementAt(i).toString().trim());
							regas_tax_hiedu_cess = Double.parseDouble(REGAS_TAX_HIEDU_CESS.elementAt(i).toString().trim());
							regas_tot_invoice_val_inr = Double.parseDouble(REGAS_TOT_INVOICE_VAL_INR.elementAt(i).toString().trim());
							
						}
						else
						{
							regas_regassified = 0;
							regas_offspec_acc_qty = 0;
							regas_offspec_rej_qty = 0;
							regas_variable_cost = 0;
							regas_total_qty = 0;
							regas_gross_amt_usd = 0;
							regas_gross_amt_inr = 0;
							regas_tax_service = 0;
							regas_tax_sbc = 0;			//BK20151118 SBC
							regas_tax_edu_cess = 0;
							regas_tax_hiedu_cess = 0;
							regas_tot_invoice_val_inr = 0;
							if(!inv_chk)
							{
								inv = false;
							}
						}
						//System.out.println(regas_adq_qty+" else "+regas_reciept);
						//System.out.println(" open "+opn_bal+" close "+cl_bal);
						REGAS_SUMRY_OP_BAL_REGAS.add(nf1.format(opn_bal));
						REGAS_SUMRY_CL_BAL_REGAS.add(nf1.format(cl_bal));
						if(i==0)
						{
							opn_bal=Double.parseDouble(REGAS_OP_BAL_REGAS.elementAt(i).toString());
							cl_bal = opn_bal + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
							- regas_offspec_rej_qty;
							
							opn_bal1 = opn_bal;
							
						}
						else
						{
							opn_bal = cl_bal;
							cl_bal = opn_bal + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
									- regas_offspec_rej_qty;
							opn_bal1 = opn_bal;
						}
						
						
						//System.out.println("=====================");
						
						/**/
					}
					mon_yr = REGAS_INVOICE_MONTH.elementAt(i).toString().trim();
					
					ship1 = REGAS_SHIP_NAME.elementAt(i).toString();
					dt1 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString();
				}
				
				//System.out.println(cargo);
				//System.out.println(inv);
				REGAS_SUMRY_INVOICE_MONTH.add(mon_yr.toUpperCase());
				//if(!REGAS_ship_nm.lastElement().toString().trim().equals(ship1) && !REGAS_dt.lastElement().toString().trim().equals(dt1))
				
				if(cargo)
				{
					if(ship2.trim().equals(ship1) && dt2.trim().equals(dt1))
					{
						if(regas_adq_qty!=0 || regas_reciept!=0 ) 
						{
							REGAS_SUMRY_ADQ_QTY.add(nf1.format(regas_adq_qty));
							REGAS_SUMRY_RECIEPT.add(nf.format(regas_reciept));
						}
						else
						{
							REGAS_SUMRY_ADQ_QTY.add("-");
							REGAS_SUMRY_RECIEPT.add("-");
						}
					}
					else
					{
						REGAS_SUMRY_ADQ_QTY.add("-");
						REGAS_SUMRY_RECIEPT.add("-");
					}
				}
				else
				{
					REGAS_SUMRY_ADQ_QTY.add("-");
					REGAS_SUMRY_RECIEPT.add("-");
				}
					//cargo
				
				//invoice
				if(inv)
				{
					REGAS_SUMRY_REGASSIFIED.add(nf.format(regas_regassified));
					REGAS_SUMRY_OFFSPEC_ACC_QTY.add(nf.format(regas_offspec_acc_qty));
					REGAS_SUMRY_OFFSPEC_REJ_QTY.add(nf.format(regas_offspec_rej_qty));
					REGAS_SUMRY_VARIABLE_COST.add(nf.format(regas_variable_cost));
					REGAS_SUMRY_TOTAL_QTY.add(nf.format(regas_total_qty+regas_offspec_acc_qty));
					REGAS_SUMRY_GROSS_AMT_USD.add(nf.format(regas_gross_amt_usd));
					REGAS_SUMRY_GROSS_AMT_INR.add(nf.format(regas_gross_amt_inr));
					if(regas_gross_amt_usd!=0)
					{
						REGAS_SUMRY_EXCHG_RATE_VALUE.add(nf.format(regas_gross_amt_inr/regas_gross_amt_usd));
					}
					else
					{
						REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
					}
					REGAS_SUMRY_TAX_SERVICE.add(nf.format(regas_tax_service));
					REGAS_SUMRY_TAX_SBC.add(nf.format(regas_tax_sbc));			//BK20151118 SBC
					REGAS_SUMRY_TAX_EDU_CESS.add(nf.format(regas_tax_edu_cess));
					REGAS_SUMRY_TAX_HIEDU_CESS.add(nf.format(regas_tax_hiedu_cess));
					REGAS_SUMRY_TOT_INVOICE_VAL_INR.add(nf.format(regas_tot_invoice_val_inr));
					if(regas_regassified!=0)
					{
						REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add(nf.format(regas_gross_amt_inr/regas_regassified));
						REGAS_SUMRY_GAS_TARIF.add(nf.format(regas_gross_amt_usd/regas_regassified));
					}
					else
					{
						REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
						REGAS_SUMRY_GAS_TARIF.add("-");
					}
				}
				else
				{
					REGAS_SUMRY_REGASSIFIED.add("-");
					REGAS_SUMRY_OFFSPEC_ACC_QTY.add("-");
					REGAS_SUMRY_OFFSPEC_REJ_QTY.add("-");
					REGAS_SUMRY_VARIABLE_COST.add("-");
					REGAS_SUMRY_TOTAL_QTY.add("-");
					REGAS_SUMRY_GROSS_AMT_USD.add("-");
					REGAS_SUMRY_GROSS_AMT_INR.add("-");
					REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
					REGAS_SUMRY_TAX_SERVICE.add("-");
					REGAS_SUMRY_TAX_SBC.add("-");			//BK20151118 SBC
					REGAS_SUMRY_TAX_EDU_CESS.add("-");
					REGAS_SUMRY_TAX_HIEDU_CESS.add("-");
					REGAS_SUMRY_TOT_INVOICE_VAL_INR.add("-");
					REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
					REGAS_SUMRY_GAS_TARIF.add("-");
				}
					
				REGAS_SUMRY_OP_BAL_REGAS.add(nf1.format(opn_bal));
				REGAS_SUMRY_CL_BAL_REGAS.add(nf1.format(cl_bal));
				
				//System.out.println(REGAS_SUMRY_INVOICE_MONTH);
				//System.out.println(REGAS_SUMRY_OP_BAL_REGAS);
				//System.out.println(REGAS_SUMRY_CL_BAL_REGAS);
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	
	}
	
//	Method Introduce By Milan Dalsaniya MD20111215
	public void fetchReGasRegisterDataSummary_old20151118()			//* Added SBC Summary value in new function
	{
		try 
		{
			
			if(!REGAS_INVOICE_MONTH.isEmpty())
			{
				String mon_yr = REGAS_INVOICE_MONTH.elementAt(0).toString().trim();
				/*String mon_yr = "";
				queryString = "SELECT TO_CHAR(TO_DATE('"+REGAS_INVOICE_MONTH.elementAt(0).toString().trim()+"','Mon-yy'),'Mon-yy')" +
								" from dual";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					mon_yr = (rset.getString(1) == null ? "" : rset.getString(1));
				}
				*/
				String ship1 = "";
				String ship2 = "";
				
				String dt1 = "";
				String dt2 = "";
				
				boolean cargo = false;
				boolean cargo_chk = false;
				boolean inv = false;
				boolean inv_chk = false;
				
				double cl_bal =0 ; 
				double opn_bal =0;
				double opn_bal1 =0;
				
				
				
				

				double regas_adq_qty = 0;
				double regas_reciept = 0;
				
				double regas_regassified = 0;
				double regas_offspec_acc_qty = 0;
				double regas_offspec_rej_qty = 0;
				double regas_variable_cost = 0;
				double regas_total_qty = 0;
				double regas_gross_amt_usd = 0;
				double regas_gross_amt_inr = 0;
				double regas_tax_service = 0;
				double regas_tax_edu_cess = 0;
				double regas_tax_hiedu_cess = 0;
				double regas_tot_invoice_val_inr = 0;
				
				for(int i =0; i<REGAS_INVOICE_MONTH.size(); i++)
				{
					//System.out.println(i+" "+REGAS_INVOICE_MONTH.size());
					
					if(mon_yr.equals(REGAS_INVOICE_MONTH.elementAt(i).toString().trim()))
					{
						//System.out.println("=====================");
						//System.out.println(mon_yr+" if "+REGAS_INVOICE_MONTH.elementAt(i));
						
						
						
						if(!REGAS_ADQ_QTY.elementAt(i).toString().trim().equals("NOC"))
						{
							cargo = true;
							cargo_chk = true;
							ship2 = REGAS_SHIP_NAME.elementAt(i).toString().trim();
							dt2 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString().trim();
							//System.out.println("ship1 "+ship1+" if ship2 "+ship2);
							//System.out.println("dt1 "+dt1+" if dt2 "+dt2);
							
							if(!ship1.equals(ship2) && !dt1.equals(dt2))
							{
								//System.out.println("shiip if 1");
								regas_adq_qty+= Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept+= Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							else if(ship1.equals(ship2) && !dt1.equals(dt2))
							{
								//System.out.println("shiip else if 1");
								regas_adq_qty+= Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept+= Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else if(!ship1.equals(ship2) && dt1.equals(dt2))
							{
								//System.out.println("shiip else if 2");
								regas_adq_qty += Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept += Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							
						}
						else
						{
							if(!cargo_chk)
							{
								cargo = false;
							}
							
						}
						//System.out.println(regas_adq_qty+" if "+regas_reciept);
						if(!REGAS_REGASSIFIED.elementAt(i).toString().trim().equals("*NOI"))
						{
							inv = true;
							inv_chk = true;
							regas_regassified+= Double.parseDouble(REGAS_REGASSIFIED.elementAt(i).toString().trim());
							regas_offspec_acc_qty+= Double.parseDouble(REGAS_OFFSPEC_ACC_QTY.elementAt(i).toString().trim());
							regas_offspec_rej_qty+= Double.parseDouble(REGAS_OFFSPEC_REJ_QTY.elementAt(i).toString().trim());
							regas_variable_cost+= Double.parseDouble(REGAS_VARIABLE_COST.elementAt(i).toString().trim());
							regas_total_qty+= Double.parseDouble(REGAS_TOTAL_QTY.elementAt(i).toString().trim());
							regas_gross_amt_usd+= Double.parseDouble(REGAS_GROSS_AMT_USD.elementAt(i).toString().trim());
							regas_gross_amt_inr+= Double.parseDouble(REGAS_GROSS_AMT_INR.elementAt(i).toString().trim());
							regas_tax_service+= Double.parseDouble(REGAS_TAX_SERVICE.elementAt(i).toString().trim());
							regas_tax_edu_cess+= Double.parseDouble(REGAS_TAX_EDU_CESS.elementAt(i).toString().trim());
							regas_tax_hiedu_cess+= Double.parseDouble(REGAS_TAX_HIEDU_CESS.elementAt(i).toString().trim());
							regas_tot_invoice_val_inr+= Double.parseDouble(REGAS_TOT_INVOICE_VAL_INR.elementAt(i).toString().trim());
							
							//
							
						}
						else
						{
							if(!inv_chk)
							{
								inv = false;
							}
						}
						
						
						if(i==0)
						{
							opn_bal=Double.parseDouble(REGAS_OP_BAL_REGAS.elementAt(i).toString());
							cl_bal += opn_bal+regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
							- regas_offspec_rej_qty;
							opn_bal1 = opn_bal;
						}
						else
						{
							//opn_bal = cl_bal;
							cl_bal = opn_bal1 + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
									- regas_offspec_rej_qty;
							//opn_bal = cl_bal;
						}
						//System.out.println(" open "+opn_bal+" close "+cl_bal);
						//System.out.println("=====================");
						
					}
					else
					{
						
						//System.out.println("=====================");
						//System.out.println(mon_yr+" else "+REGAS_INVOICE_MONTH.elementAt(i));
												
						
						
						//cargo
						REGAS_SUMRY_INVOICE_MONTH.add(mon_yr.toUpperCase());
						if(cargo)
						{
							if(regas_adq_qty!=0 || regas_reciept!=0 ) 
							{
								REGAS_SUMRY_ADQ_QTY.add(nf1.format(regas_adq_qty));
								REGAS_SUMRY_RECIEPT.add(nf1.format(regas_reciept));
							}
							else
							{
								REGAS_SUMRY_ADQ_QTY.add("-");
								REGAS_SUMRY_RECIEPT.add("-");
							}
						}
						else
						{
							REGAS_SUMRY_ADQ_QTY.add("-");
							REGAS_SUMRY_RECIEPT.add("-");
						}
						
						//cargo
						
						//invoice
						if(inv)
						{
							REGAS_SUMRY_REGASSIFIED.add(nf1.format(regas_regassified));
							REGAS_SUMRY_OFFSPEC_ACC_QTY.add(nf.format(regas_offspec_acc_qty));
							REGAS_SUMRY_OFFSPEC_REJ_QTY.add(nf.format(regas_offspec_rej_qty));
							REGAS_SUMRY_VARIABLE_COST.add(nf.format(regas_variable_cost));
							REGAS_SUMRY_TOTAL_QTY.add(nf.format(regas_total_qty+regas_offspec_acc_qty));
							REGAS_SUMRY_GROSS_AMT_USD.add(nf.format(regas_gross_amt_usd));
							REGAS_SUMRY_GROSS_AMT_INR.add(nf.format(regas_gross_amt_inr));
							
							
							if(regas_gross_amt_usd!=0)
							{
								REGAS_SUMRY_EXCHG_RATE_VALUE.add(nf.format(regas_gross_amt_inr/regas_gross_amt_usd));
							}
							else
							{
								REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
							}
							REGAS_SUMRY_TAX_SERVICE.add(nf.format(regas_tax_service));
							REGAS_SUMRY_TAX_EDU_CESS.add(nf.format(regas_tax_edu_cess));
							REGAS_SUMRY_TAX_HIEDU_CESS.add(nf.format(regas_tax_hiedu_cess));
							REGAS_SUMRY_TOT_INVOICE_VAL_INR.add(nf.format(regas_tot_invoice_val_inr));
							if(regas_regassified!=0)
							{
								REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add(nf.format(regas_gross_amt_inr/regas_regassified));
								REGAS_SUMRY_GAS_TARIF.add(nf.format(regas_gross_amt_usd/regas_regassified));
							}
							else
							{
								REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
								REGAS_SUMRY_GAS_TARIF.add("-");
							}
						}
						else
						{
							REGAS_SUMRY_REGASSIFIED.add("-");
							REGAS_SUMRY_OFFSPEC_ACC_QTY.add("-");
							REGAS_SUMRY_OFFSPEC_REJ_QTY.add("-");
							REGAS_SUMRY_VARIABLE_COST.add("-");
							REGAS_SUMRY_TOTAL_QTY.add("-");
							REGAS_SUMRY_GROSS_AMT_USD.add("-");
							REGAS_SUMRY_GROSS_AMT_INR.add("-");
							REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
							REGAS_SUMRY_TAX_SERVICE.add("-");
							REGAS_SUMRY_TAX_EDU_CESS.add("-");
							REGAS_SUMRY_TAX_HIEDU_CESS.add("-");
							REGAS_SUMRY_TOT_INVOICE_VAL_INR.add("-");
							REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
							REGAS_SUMRY_GAS_TARIF.add("-");
						}
							
						//invoice
						cargo_chk = false;
						inv_chk = false;
						cargo = false;
						inv = false;
						
						regas_adq_qty = 0;
						regas_reciept = 0;
						
						regas_regassified = 0;
						regas_offspec_acc_qty = 0;
						regas_offspec_rej_qty = 0;
						regas_variable_cost = 0;
						regas_total_qty = 0;
						regas_gross_amt_usd = 0;
						regas_gross_amt_inr = 0;
						regas_tax_service = 0;
						regas_tax_edu_cess = 0;
						regas_tax_hiedu_cess = 0;
						regas_tot_invoice_val_inr = 0;
						
						if(!REGAS_ADQ_QTY.elementAt(i).toString().trim().equals("NOC"))
						{
							ship2 = REGAS_SHIP_NAME.elementAt(i).toString().trim();
							dt2 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString().trim();
							cargo = true;
							cargo_chk = true;
							//System.out.println("ship1 "+ship1+" else ship2 "+ship2);
							//System.out.println("dt1 "+dt1+" esle dt2 "+dt2);
							if(!ship1.trim().equals(ship2) && !dt1.trim().equals(dt2))
							{
								//System.out.println("shiip >>>>>>if 1");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							
							}
							else if(!ship1.trim().equals(ship2) && dt1.trim().equals(dt2))
							{
								//System.out.println("shiip >>>>>>>else if 1");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else if(ship1.trim().equals(ship2) && !dt1.trim().equals(dt2))
							{
								//System.out.println("shiip>>>>> else if 2");
								regas_adq_qty = Double.parseDouble(REGAS_ADQ_QTY.elementAt(i).toString().trim());
								regas_reciept = Double.parseDouble(REGAS_RECIEPT.elementAt(i).toString().trim());
							}
							else
							{
								regas_adq_qty = 0;
								regas_reciept = 0;
							}
							
						}
						else
						{
							regas_adq_qty = 0;
							regas_reciept = 0;
							if(!cargo_chk)
							{
								cargo = false;
							}
						}
						if(!REGAS_REGASSIFIED.elementAt(i).toString().trim().equals("*NOI"))
						{
							inv = true;
							inv_chk  = true;
							regas_regassified = Double.parseDouble(REGAS_REGASSIFIED.elementAt(i).toString().trim());
							regas_offspec_acc_qty = Double.parseDouble(REGAS_OFFSPEC_ACC_QTY.elementAt(i).toString().trim());
							regas_offspec_rej_qty = Double.parseDouble(REGAS_OFFSPEC_REJ_QTY.elementAt(i).toString().trim());
							regas_variable_cost = Double.parseDouble(REGAS_VARIABLE_COST.elementAt(i).toString().trim());
							regas_total_qty = Double.parseDouble(REGAS_TOTAL_QTY.elementAt(i).toString().trim());
							regas_gross_amt_usd = Double.parseDouble(REGAS_GROSS_AMT_USD.elementAt(i).toString().trim());
							regas_gross_amt_inr = Double.parseDouble(REGAS_GROSS_AMT_INR.elementAt(i).toString().trim());
							regas_tax_service = Double.parseDouble(REGAS_TAX_SERVICE.elementAt(i).toString().trim());
							regas_tax_edu_cess = Double.parseDouble(REGAS_TAX_EDU_CESS.elementAt(i).toString().trim());
							regas_tax_hiedu_cess = Double.parseDouble(REGAS_TAX_HIEDU_CESS.elementAt(i).toString().trim());
							regas_tot_invoice_val_inr = Double.parseDouble(REGAS_TOT_INVOICE_VAL_INR.elementAt(i).toString().trim());
							
						}
						else
						{
							regas_regassified = 0;
							regas_offspec_acc_qty = 0;
							regas_offspec_rej_qty = 0;
							regas_variable_cost = 0;
							regas_total_qty = 0;
							regas_gross_amt_usd = 0;
							regas_gross_amt_inr = 0;
							regas_tax_service = 0;
							regas_tax_edu_cess = 0;
							regas_tax_hiedu_cess = 0;
							regas_tot_invoice_val_inr = 0;
							if(!inv_chk)
							{
								inv = false;
							}
						}
						//System.out.println(regas_adq_qty+" else "+regas_reciept);
						//System.out.println(" open "+opn_bal+" close "+cl_bal);
						REGAS_SUMRY_OP_BAL_REGAS.add(nf1.format(opn_bal));
						REGAS_SUMRY_CL_BAL_REGAS.add(nf1.format(cl_bal));
						if(i==0)
						{
							opn_bal=Double.parseDouble(REGAS_OP_BAL_REGAS.elementAt(i).toString());
							cl_bal = opn_bal + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
							- regas_offspec_rej_qty;
							
							opn_bal1 = opn_bal;
							
						}
						else
						{
							opn_bal = cl_bal;
							cl_bal = opn_bal + regas_reciept - regas_regassified - regas_variable_cost - regas_offspec_acc_qty 
									- regas_offspec_rej_qty;
							opn_bal1 = opn_bal;
						}
						
						
						//System.out.println("=====================");
						
						/**/
					}
					mon_yr = REGAS_INVOICE_MONTH.elementAt(i).toString().trim();
					
					ship1 = REGAS_SHIP_NAME.elementAt(i).toString();
					dt1 = REGAS_ACTUAL_RECPT_DT.elementAt(i).toString();
				}
				
				//System.out.println(cargo);
				//System.out.println(inv);
				REGAS_SUMRY_INVOICE_MONTH.add(mon_yr.toUpperCase());
				//if(!REGAS_ship_nm.lastElement().toString().trim().equals(ship1) && !REGAS_dt.lastElement().toString().trim().equals(dt1))
				
				if(cargo)
				{
					if(ship2.trim().equals(ship1) && dt2.trim().equals(dt1))
					{
						if(regas_adq_qty!=0 || regas_reciept!=0 ) 
						{
							REGAS_SUMRY_ADQ_QTY.add(nf1.format(regas_adq_qty));
							REGAS_SUMRY_RECIEPT.add(nf.format(regas_reciept));
						}
						else
						{
							REGAS_SUMRY_ADQ_QTY.add("-");
							REGAS_SUMRY_RECIEPT.add("-");
						}
					}
					else
					{
						REGAS_SUMRY_ADQ_QTY.add("-");
						REGAS_SUMRY_RECIEPT.add("-");
					}
				}
				else
				{
					REGAS_SUMRY_ADQ_QTY.add("-");
					REGAS_SUMRY_RECIEPT.add("-");
				}
					//cargo
				
				//invoice
				if(inv)
				{
					REGAS_SUMRY_REGASSIFIED.add(nf.format(regas_regassified));
					REGAS_SUMRY_OFFSPEC_ACC_QTY.add(nf.format(regas_offspec_acc_qty));
					REGAS_SUMRY_OFFSPEC_REJ_QTY.add(nf.format(regas_offspec_rej_qty));
					REGAS_SUMRY_VARIABLE_COST.add(nf.format(regas_variable_cost));
					REGAS_SUMRY_TOTAL_QTY.add(nf.format(regas_total_qty+regas_offspec_acc_qty));
					REGAS_SUMRY_GROSS_AMT_USD.add(nf.format(regas_gross_amt_usd));
					REGAS_SUMRY_GROSS_AMT_INR.add(nf.format(regas_gross_amt_inr));
					if(regas_gross_amt_usd!=0)
					{
						REGAS_SUMRY_EXCHG_RATE_VALUE.add(nf.format(regas_gross_amt_inr/regas_gross_amt_usd));
					}
					else
					{
						REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
					}
					REGAS_SUMRY_TAX_SERVICE.add(nf.format(regas_tax_service));
					REGAS_SUMRY_TAX_EDU_CESS.add(nf.format(regas_tax_edu_cess));
					REGAS_SUMRY_TAX_HIEDU_CESS.add(nf.format(regas_tax_hiedu_cess));
					REGAS_SUMRY_TOT_INVOICE_VAL_INR.add(nf.format(regas_tot_invoice_val_inr));
					if(regas_regassified!=0)
					{
						REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add(nf.format(regas_gross_amt_inr/regas_regassified));
						REGAS_SUMRY_GAS_TARIF.add(nf.format(regas_gross_amt_usd/regas_regassified));
					}
					else
					{
						REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
						REGAS_SUMRY_GAS_TARIF.add("-");
					}
				}
				else
				{
					REGAS_SUMRY_REGASSIFIED.add("-");
					REGAS_SUMRY_OFFSPEC_ACC_QTY.add("-");
					REGAS_SUMRY_OFFSPEC_REJ_QTY.add("-");
					REGAS_SUMRY_VARIABLE_COST.add("-");
					REGAS_SUMRY_TOTAL_QTY.add("-");
					REGAS_SUMRY_GROSS_AMT_USD.add("-");
					REGAS_SUMRY_GROSS_AMT_INR.add("-");
					REGAS_SUMRY_EXCHG_RATE_VALUE.add("-");
					REGAS_SUMRY_TAX_SERVICE.add("-");
					REGAS_SUMRY_TAX_EDU_CESS.add("-");
					REGAS_SUMRY_TAX_HIEDU_CESS.add("-");
					REGAS_SUMRY_TOT_INVOICE_VAL_INR.add("-");
					REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU.add("-");
					REGAS_SUMRY_GAS_TARIF.add("-");
				}
					
				REGAS_SUMRY_OP_BAL_REGAS.add(nf1.format(opn_bal));
				REGAS_SUMRY_CL_BAL_REGAS.add(nf1.format(cl_bal));
				
				//System.out.println(REGAS_SUMRY_INVOICE_MONTH);
				//System.out.println(REGAS_SUMRY_OP_BAL_REGAS);
				//System.out.println(REGAS_SUMRY_CL_BAL_REGAS);
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	

//	Method Introduce By Milan Dalsaniya MD20111105, 05 Nov 2011 for LC Report in Advanced Payment
	public void fetchLCREGASData()
	{



		try
		{
			//System.out.println("Approve_dt : "+approve_dt);
			//System.out.println("To_dt : "+to_dt);
			//System.out.println("Cust_cd : "+cust_cd);
			//System.out.println("Call Flg : "+callFlag);
			
			//for fincding LC Detail
			if (cust_cd.equals("0"))
			{
				
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
				"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
				"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO,FINANCIAL_YEAR" +
		    	" FROM FMS7_LC_FINANCE_MST A " +
		    	" WHERE " +
		    	
		    	" VALIDITY_START_DATE <= TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
		    	" AND " +
		    	" VALIDITY_END_DATE >= TO_DATE('"+approve_dt+"','DD/MM/YYYY') " +
		    	" AND AMENDMENT_NO in (SELECT MAX(AMENDMENT_NO)" +
		    	" FROM FMS7_LC_FINANCE_MST B  " +
		    	"WHERE  A.LC_SEQ_NO = B.LC_SEQ_NO AND A.FINANCIAL_YEAR = B.FINANCIAL_YEAR AND A.CUSTOMER_CD = B.CUSTOMER_CD)" +
		    	"AND (FLAG = 'R' OR FLAG = 'r') order by financial_year, lc_seq_no";
				
			}
			else
			{
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
				"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
				"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO, FINANCIAL_YEAR" +
		    	" FROM FMS7_LC_FINANCE_MST A " +
		    	" WHERE CUSTOMER_CD = '"+cust_cd+"'" +
		    	" AND " +
		    	" VALIDITY_START_DATE <= TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
		    	" AND " +
		    	" VALIDITY_END_DATE >= TO_DATE('"+approve_dt+"','DD/MM/YYYY') " +
		    	" AND AMENDMENT_NO in (SELECT MAX(AMENDMENT_NO)" +
		    	" FROM FMS7_LC_FINANCE_MST B  " +
		    	"WHERE  A.LC_SEQ_NO = B.LC_SEQ_NO AND A.FINANCIAL_YEAR = B.FINANCIAL_YEAR AND A.CUSTOMER_CD = B.CUSTOMER_CD)" +
		    	"AND (FLAG = 'R' OR FLAG = 'r') order by financial_year, lc_seq_no";
			}
			//System.out.println("FMS7_LC_FINANCE_MST query : "+queryString);
			rset = stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				//System.out.println("got the data");
				LC_REGAS_CUST_CD.add(rset.getString(1)==null ? "" : rset.getString(1));
				//LC_REGAS_CUST_NM.add(rset.getString(2)==null ? "" : rset.getString(2));
				LC_REGAS_VALID_STR_DT.add(rset.getString(3)==null ? "" : rset.getString(3));
				LC_REGAS_VALID_END_DT.add(rset.getString(4)==null ? "" : rset.getString(4));
				LC_REGAS_BANK_AMOUNT.add(""+java.lang.Double.parseDouble(rset.getString(5)==null ? "" : rset.getString(5))/1000000.0);
				LC_REGAS_REMARK.add(rset.getString(6)==null ? "" : rset.getString(6));
				LC_REGAS_SEQ_NO.add(rset.getString(8)==null ? "" : rset.getString(8));
				LC_REGAS_FIN_YEAR.add(rset.getString(9)==null ? "" : rset.getString(9));
			}
			
			//for finding customer detail
			//System.out.println(LC_REGAS_CUST_CD);
			for (int i=0; i<LC_REGAS_CUST_CD.size();i++)
			{
				queryString = "SELECT CUSTOMER_ABBR" +
							" FROM FMS7_CUSTOMER_MST" +
							" WHERE CUSTOMER_CD = '"+LC_REGAS_CUST_CD.elementAt(i)+"'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					LC_REGAS_CUST_NM.add(rset.getString(1)==null ? "" : rset.getString(1));
				}
				else
				{
					LC_REGAS_CUST_NM.add("-");
				}
			}
			//System.out.println(LC_REGAS_CUST_CD);
			////System.out.println("LC_CUST_CD : "+LC_CUST_CD );
			////System.out.println("LC_CUST_NM : "+LC_CUST_NM );
			////System.out.println("LC_VALID_STR_DT : "+LC_VALID_STR_DT );
			////System.out.println("LC_VALID_END_DT : "+LC_VALID_END_DT );
			//System.out.println("LC_REGAS_BANK_AMOUNT : "+LC_REGAS_BANK_AMOUNT );
			////System.out.println("LC_REMARK : "+LC_REMARK );
			
			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting --> fetchLCData() Method:\n"+e.getMessage());
			e.printStackTrace();
		}
	
	
}


	
//	Method Introduce By Milan Dalsaniya MD20111105, 05 Nov 2011 for LC Report in Advanced Payment
	public void fetchLCREGASDataOLD()
	{

		try
		{
			////System.out.println("Approve_dt : "+approve_dt);
			////System.out.println("To_dt : "+to_dt);
			////System.out.println("Cust_cd : "+cust_cd);
			
			//for fincding LC Detail
			if (cust_cd.equals("0"))
			{
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
							"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
							"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO,FINANCIAL_YEAR" +
					    	" FROM FMS7_LC_FINANCE_MST A " +
					    	" WHERE " +
					    	"((VALIDITY_START_DATE <= TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND VALIDITY_END_DATE > TO_DATE('"+approve_dt+"','DD/MM/YYYY'))" +
					    	" OR " +
					    	" (VALIDITY_START_DATE < TO_DATE('"+to_dt+"','DD/MM/YYYY') AND VALIDITY_END_DATE > TO_DATE('"+to_dt+"','DD/MM/YYYY'))" +
					    	" OR " +
					    	"(VALIDITY_END_DATE BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY'))" +
					    	" OR " +
					    	"(VALIDITY_START_DATE BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY')))" +
					    	" AND AMENDMENT_NO in (SELECT MAX(AMENDMENT_NO)" +
					    	" FROM FMS7_LC_FINANCE_MST B  " +
					    	"WHERE  A.LC_SEQ_NO = B.LC_SEQ_NO )" +
					    	"AND (FLAG = 'R' OR FLAG = 'r') order by financial_year, lc_seq_no";
			}
			else
			{
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
				"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
				"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO, FINANCIAL_YEAR" +
		    	" FROM FMS7_LC_FINANCE_MST A " +
		    	" WHERE CUSTOMER_CD = '"+cust_cd+"'" +
		    	" AND " +
		    	"((VALIDITY_START_DATE <= TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND VALIDITY_END_DATE > TO_DATE('"+approve_dt+"','DD/MM/YYYY'))" +
		    	" OR " +
		    	" (VALIDITY_START_DATE < TO_DATE('"+to_dt+"','DD/MM/YYYY') AND VALIDITY_END_DATE > TO_DATE('"+to_dt+"','DD/MM/YYYY'))" +
		    	" OR " +
		    	"(VALIDITY_END_DATE BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY'))" +
		    	" OR " +
		    	"(VALIDITY_START_DATE BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY')))" +
		    	" AND AMENDMENT_NO IN (SELECT MAX(AMENDMENT_NO)" +
		    	" FROM FMS7_LC_FINANCE_MST B " +
		    	"WHERE A.LC_SEQ_NO = B.LC_SEQ_NO )" +
		    	" AND (FLAG = 'R' OR FLAG = 'r') order by financial_year, lc_seq_no";
			}
			//System.out.println("FMS7_LC_FINANCE_MST query : "+queryString);
			rset = stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				//System.out.println("got the data");
				LC_REGAS_CUST_CD.add(rset.getString(1)==null ? "" : rset.getString(1));
				//LC_REGAS_CUST_NM.add(rset.getString(2)==null ? "" : rset.getString(2));
				LC_REGAS_VALID_STR_DT.add(rset.getString(3)==null ? "" : rset.getString(3));
				LC_REGAS_VALID_END_DT.add(rset.getString(4)==null ? "" : rset.getString(4));
				LC_REGAS_BANK_AMOUNT.add(""+java.lang.Double.parseDouble(rset.getString(5)==null ? "" : rset.getString(5))/1000000.0);
				LC_REGAS_REMARK.add(rset.getString(6)==null ? "" : rset.getString(6));
				LC_REGAS_SEQ_NO.add(rset.getString(8)==null ? "" : rset.getString(8));
				LC_REGAS_FIN_YEAR.add(rset.getString(9)==null ? "" : rset.getString(9));
			}
			
			//for finding customer detail
			//System.out.println(LC_REGAS_CUST_CD);
			for (int i=0; i<LC_REGAS_CUST_CD.size();i++)
			{
				queryString = "SELECT CUSTOMER_ABBR" +
							" FROM FMS7_CUSTOMER_MST" +
							" WHERE CUSTOMER_CD = '"+LC_REGAS_CUST_CD.elementAt(i)+"'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					LC_REGAS_CUST_NM.add(rset.getString(1)==null ? "" : rset.getString(1));
				}
				else
				{
					LC_REGAS_CUST_NM.add("-");
				}
			}
			//System.out.println(LC_REGAS_CUST_CD);
			////System.out.println("LC_CUST_CD : "+LC_CUST_CD );
			////System.out.println("LC_CUST_NM : "+LC_CUST_NM );
			////System.out.println("LC_VALID_STR_DT : "+LC_VALID_STR_DT );
			////System.out.println("LC_VALID_END_DT : "+LC_VALID_END_DT );
			//System.out.println("LC_REGAS_BANK_AMOUNT : "+LC_REGAS_BANK_AMOUNT );
			////System.out.println("LC_REMARK : "+LC_REMARK );
			
			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting --> fetchLCData() Method:\n"+e.getMessage());
			e.printStackTrace();
		}
	
	}
	
	//MD20120123 start

//	Introduce BY MD20111018
		public void getSNLOAperLC()
		{
			try
			{
				queryString = "SELECT FGSA_NO, SN_NO,CONT_TYPE, " +
							"TO_CHAR(SN_START_DATE,'DD/MM/YYYY'), TO_CHAR(SN_END_DATE,'DD/MM/YYYY'), TCQ, DCQ, " +
							"FINANCIAL_YEAR " +
							" FROM FMS7_LC_DTL " +
							" WHERE CUSTOMER_CD = '"+lc_customer_cd+"'" +
							" AND LC_SEQ_NO = '"+lc_seq_no+"'";
				//System.out.println("FMS7_LC_DTL Fetch Query = "+queryString);
				rset = stmt.executeQuery(queryString);				
				while(rset.next())
				{
					//System.out.println("got data");
					LC_FGSA_NO.add(rset.getString(1)==null?"":rset.getString(1));
					LC_SN_NO.add(rset.getString(2)==null?"":rset.getString(2));
					LC_CONT_TYPE.add(rset.getString(3)==null?"":rset.getString(3));
					LC_SN_START_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LC_SN_END_DT.add(rset.getString(5)==null?"":rset.getString(5));
					LC_TCQ.add(rset.getString(6)==null?"":rset.getString(6));
					LC_DCQ.add(rset.getString(7)==null?"":rset.getString(7));
					LC_FINANCIAL_YR.add(rset.getString(8)==null?"":rset.getString(8));
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}

	//MD20120123 end
	//Method Introduce By Milan Dalsaniya MD2011,14 oct for LC Report in Advanced Payment
	public void fetchLCData()
	{
		try
		{
			////System.out.println("Approve_dt : "+approve_dt);
			////System.out.println("To_dt : "+to_dt);
			////System.out.println("Cust_cd : "+cust_cd);
			
			//for fincding LC Detail
			if (cust_cd.equals("0"))
			{
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
				"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
				"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO,FINANCIAL_YEAR " +
		    	" FROM FMS7_LC_FINANCE_MST A " +
		    	" WHERE " +
		    	" VALIDITY_START_DATE <= TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
		    	" AND VALIDITY_END_DATE >= TO_DATE('"+approve_dt+"','DD/MM/YYYY')" +
		    	" AND AMENDMENT_NO in (SELECT MAX(AMENDMENT_NO)" +
		    	" FROM FMS7_LC_FINANCE_MST B  " +
		    	" WHERE  A.LC_SEQ_NO = B.LC_SEQ_NO and B.FINANCIAL_YEAR = A.FINANCIAL_YEAR and A.CUSTOMER_CD = B.CUSTOMER_CD) " +
		    	" AND (FLAG = 'Y' OR FLAG = 'y')";
			}
			else
			{
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NM," +
				"TO_CHAR(VALIDITY_START_DATE,'DD/MM/YYYY'),TO_CHAR(VALIDITY_END_DATE,'DD/MM/YYYY')," +
				"BANK_LC_AMOUNT,REMARKS,AMENDMENT_NO,LC_SEQ_NO,FINANCIAL_YEAR" +
		    	" FROM FMS7_LC_FINANCE_MST A " +
		    	" WHERE CUSTOMER_CD = '"+cust_cd+"'" +
		    	" and VALIDITY_START_DATE <= TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
		    	" AND VALIDITY_END_DATE >= TO_DATE('"+approve_dt+"','DD/MM/YYYY') " +
		    	" AND AMENDMENT_NO in (SELECT MAX(AMENDMENT_NO) " +
		    	" FROM FMS7_LC_FINANCE_MST B  " +
		    	" WHERE  A.LC_SEQ_NO = B.LC_SEQ_NO and B.FINANCIAL_YEAR = A.FINANCIAL_YEAR and A.CUSTOMER_CD = B.CUSTOMER_CD) " +
		    	" AND (FLAG = 'Y' OR FLAG = 'y')";
			}
			//System.out.println("FMS7_LC_FINANCE_MST query : "+queryString);
			rset = stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				//System.out.println("got the data");
				LC_CUST_CD.add(rset.getString(1)==null ? "" : rset.getString(1));
				//LC_CUST_NM.add(rset.getString(2)==null ? "" : rset.getString(2));
				LC_VALID_STR_DT.add(rset.getString(3)==null ? "" : rset.getString(3));
				LC_VALID_END_DT.add(rset.getString(4)==null ? "" : rset.getString(4));
				LC_BANK_AMOUNT.add(""+java.lang.Double.parseDouble(rset.getString(5)==null ? "" : rset.getString(5))/1000000.0);
				LC_REMARK.add(rset.getString(6)==null ? "" : rset.getString(6));
				LC_SEQ_NO.add(rset.getString(8)==null ? "" : rset.getString(8));
				LC_FIN_YEAR.add(rset.getString(9)==null ? "" : rset.getString(9));
			}
			
			//for finding customer detail
			for (int i=0; i<LC_CUST_CD.size();i++)
			{
				queryString = "SELECT CUSTOMER_ABBR" +
							" FROM FMS7_CUSTOMER_MST" +
							" WHERE CUSTOMER_CD = '"+LC_CUST_CD.elementAt(i)+"'";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					LC_CUST_NM.add(rset.getString(1)==null ? "" : rset.getString(1));
				}
				else
				{
					LC_CUST_NM.add("-");
				}
			}
			////System.out.println("LC_CUST_CD : "+LC_CUST_CD );
			////System.out.println("LC_CUST_NM : "+LC_CUST_NM );
			////System.out.println("LC_VALID_STR_DT : "+LC_VALID_STR_DT );
			////System.out.println("LC_VALID_END_DT : "+LC_VALID_END_DT );
			//System.out.println("LC_BANK_AMOUNT : "+LC_BANK_AMOUNT );
			////System.out.println("LC_REMARK : "+LC_REMARK );
			
			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting --> fetchLCData() Method:\n"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void fetchAdvanceAndInvoicePayment()
	{
		try
		{
			queryString = "SELECT DISTINCT CUSTOMER_CD,CUSTOMER_NAME FROM FMS7_CUSTOMER_MST";
			//System.out.println("DISTINCT Customer LIST fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CUSTOMER_CODE.add(rset.getString(1)==null?" ":rset.getString(1));
				CUSTOMER_NM.add(rset.getString(2)==null?" ":rset.getString(2));
			}

			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				String pay_type="";
				int inv_seq_no =0;
				String inv_no="";
				String fin_year="";
				if(cust_cd.trim().equals("0") || cust_cd.trim().equals(""))
				{
					queryString = "SELECT ACCOUNT_CD,PAY_AMT,TO_CHAR(PAY_DT,'DD/MM/YYYY'),PAY_TYPE," +
							  	  "CONTRACT_TYPE,INV_SEQ_NO,FINANCIAL_YEAR,REMARK,CUSTOMER_CD," +
							  	  "JOURNAL_NO,ALLOCATION_REF,SEQ_NO,CONTRACT_TYPE " +
							  	  "FROM FMS7_PAYMENT_DTL WHERE " +
							  	  "TO_DATE(TO_CHAR(PAY_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
							  	  "TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
							  	  "ORDER BY PAY_TYPE,PAY_DT";
				}
				else
				{
					queryString = "SELECT ACCOUNT_CD,PAY_AMT,TO_CHAR(PAY_DT,'DD/MM/YYYY'),PAY_TYPE," +
							  	  "CONTRACT_TYPE,INV_SEQ_NO,FINANCIAL_YEAR,REMARK,CUSTOMER_CD," +
							  	  "JOURNAL_NO,ALLOCATION_REF,SEQ_NO,CONTRACT_TYPE " +
							  	  "FROM FMS7_PAYMENT_DTL WHERE CUSTOMER_CD="+cust_cd+" AND " +
							  	  "(TO_DATE(TO_CHAR(PAY_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
							  	  "TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY')) " +
							  	  "ORDER BY PAY_TYPE,PAY_DT";
				}
				//System.out.println("SELECT FMS7_PAYMENT_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{					
					ACCOUNT_CODE.add(rset.getString(1)==null?"0":rset.getString(1));
					BASE_AMT.add(rset.getString(2)==null?"":rset.getString(2));														
					DUE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(rset.getString(4)!=null && !rset.getString(4).trim().equals(""))
					{
						if(rset.getString(4).trim().equalsIgnoreCase("P"))
						{
							pay_type="Paid";
						}
						else if(rset.getString(4).trim().equalsIgnoreCase("A"))
						{
							pay_type="Advance";
						}
					}
					else
					{
						pay_type="";
					}
					CURRENCY_CODE.add(pay_type);
					PAY_MODE.add(rset.getString(5)==null?"S":rset.getString(5));
										
					inv_seq_no =Integer.parseInt(rset.getString(6)==null?"0":rset.getString(6));
					fin_year =rset.getString(7)==null?"":rset.getString(7);
					if(inv_seq_no<10)
					{
						inv_no="000"+inv_seq_no+"/"+fin_year;
					}
					else if(inv_seq_no<100) 
					{
						inv_no="00"+inv_seq_no+"/"+fin_year;
					}
					else if(inv_seq_no<1000) 
					{
						inv_no="0"+inv_seq_no+"/"+fin_year;
					}
					else
					{
						inv_no=inv_seq_no+"/"+fin_year;
					}
					if(inv_seq_no==0 && fin_year.trim().equals(""))
					{
						inv_no="";
					}
					
					if(rset.getString(4)!=null && !rset.getString(4).trim().equals(""))
					{
						if(rset.getString(4).trim().equalsIgnoreCase("P"))
						{
							INVOICE_NO.add(inv_no);
						}
						else if(rset.getString(4).trim().equalsIgnoreCase("A"))
						{
							INVOICE_NO.add("0/0");
						}
					}
					else
					{
						INVOICE_NO.add("");
					}
					
					REMARK.add(rset.getString(8)==null?"":rset.getString(8));
					CUSTOMER_CD.add(rset.getString(9)==null?"0":rset.getString(9));
					JOURNAL_NO.add(rset.getString(10)==null?"":rset.getString(10));
					ALLOCATION_REF.add(rset.getString(11)==null?"":rset.getString(11));
					SEQ_NO.add(rset.getString(12)==null?"0":rset.getString(12));
					CONTRACT_TYPE.add(rset.getString(13)==null?"S":rset.getString(13));
				}
				
				for(int i=0; i<CUSTOMER_CD.size(); i++)
				{
					queryString = "SELECT CUSTOMER_ABBR,CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
								  "CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
					//System.out.println("Customer ABBR Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					
					if(rset.next())
					{
						CUSTOMER_ABBR.add(rset.getString(1)==null?" ":rset.getString(1));
						CUSTOMER_NAME.add(rset.getString(2)==null?" ":rset.getString(2));
					}
					else
					{
						CUSTOMER_ABBR.add(" ");
						CUSTOMER_NAME.add(" ");
					}
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting --> fetchAdvanceAndInvoicePayment() Method:\n"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_From_Adv_Pay()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null)
			{
				String pay_type="";
				int inv_seq_no =0;
				String inv_no="";
				String fin_year="";
				queryString = "SELECT ACCOUNT_CD,PAY_AMT,TO_CHAR(PAY_DT,'DD/MM/YYYY'),PAY_TYPE," +
							  "CONTRACT_TYPE,INV_SEQ_NO,FINANCIAL_YEAR,REMARK,CUSTOMER_CD " +
							  "FROM FMS7_PAYMENT_DTL WHERE " +
							  "TO_DATE(TO_CHAR(ENT_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
							  "TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
							  "ORDER BY PAY_DT";
				//System.out.println("SELECT FMS7_PAYMENT_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{					
					ACCOUNT_CODE.add(rset.getString(1)==null?"":rset.getString(1));
					BASE_AMT.add(rset.getString(2)==null?"":rset.getString(2));														
					DUE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(rset.getString(4)!=null && !rset.getString(4).trim().equals(""))
					{
						if(rset.getString(4).trim().equalsIgnoreCase("P"))
						{
							pay_type="Paid";
						}
						else if(rset.getString(4).trim().equalsIgnoreCase("A"))
						{
							pay_type="Advance";
						}
					}
					else
					{
						pay_type="";
					}
					CURRENCY_CODE.add(pay_type);
					PAY_MODE.add(rset.getString(5)==null?"S":rset.getString(5));
										
					inv_seq_no =Integer.parseInt(rset.getString(6)==null?"0":rset.getString(6));
					fin_year =rset.getString(7)==null?"":rset.getString(7);
					if(inv_seq_no<10)
					{
						inv_no="000"+inv_seq_no+"/"+fin_year;
					}
					else if(inv_seq_no<100) 
					{
						inv_no="00"+inv_seq_no+"/"+fin_year;
					}
					else if(inv_seq_no<1000) 
					{
						inv_no="0"+inv_seq_no+"/"+fin_year;
					}
					else
					{
						inv_no=inv_seq_no+"/"+fin_year;
					}
					if(inv_seq_no==0 && fin_year.trim().equals(""))
					{
						inv_no="";
					}
					INVOICE_NO.add(inv_no);
					REMARK.add(rset.getString(8)==null?"":rset.getString(8));
					CUSTOMER_CD.add(rset.getString(9)==null?"0":rset.getString(9));
				}
				
				for(int i=0; i<CUSTOMER_CD.size(); i++)
				{
					queryString = "SELECT CUSTOMER_ABBR,CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
								  "CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
					//System.out.println("Customer ABBR Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					
					if(rset.next())
					{
						CUSTOMER_ABBR.add(rset.getString(1)==null?" ":rset.getString(1));
						CUSTOMER_NAME.add(rset.getString(2)==null?" ":rset.getString(2));
					}
					else
					{
						CUSTOMER_ABBR.add(" ");
						CUSTOMER_NAME.add(" ");
					}
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_From_Accounting_For_Upload()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD,XML_FILE," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE " +
				"XML_GEN_FLAG='Y' AND XML_UP_FLAG='N' AND " +
				"(TO_DATE(TO_CHAR(APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY')) AND " +
				"XML_FILE='"+xml_file_nm+"' " +
				"ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					XML_FILE.add(rset.getString(25)==null?"":rset.getString(25));
					SUN_APPROVAL_DT.add(rset.getString(26)==null?"":rset.getString(26));
				}
				
				queryString = "select DISTINCT XML_FILE FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='Y' " +
						      "AND TO_DATE(TO_CHAR(APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') " +
						      "BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') " +
						      "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND XML_UP_FLAG='N' ORDER BY XML_FILE";
				System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					XML_FILE_UPLOAD.add(rset.getString(1)==null?"":rset.getString(1));
					String xml_file_name = rset.getString(1)==null?"":rset.getString(1);
					
					queryString1 = "select DISTINCT JOURNAL_TYPE FROM FMS7_ACCOUNT_APPROVED_DTL " +
								   "WHERE XML_GEN_FLAG='Y' " +
							       "AND TO_DATE(TO_CHAR(APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') " +
							       "BETWEEN TO_DATE('"+approve_dt+"','DD/MM/YYYY') " +
							       "AND TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
							       "AND XML_UP_FLAG='N' AND XML_FILE='"+xml_file_name+"'";
					//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString1);
					rset1=stmt1.executeQuery(queryString1);				
					if(rset1.next())
					{
						String journal_type = rset1.getString(1)==null?"":rset1.getString(1);
						
						if(journal_type.trim().equalsIgnoreCase("FMSPI"))
						{
							journal_type = "Provisional Purchase Invoice";
						}
						else if(journal_type.trim().equalsIgnoreCase("FMSPC"))
						{
							journal_type = "Provisional Custom Duty";
						}
						else if(journal_type.trim().equalsIgnoreCase("FMSFI"))
						{
							journal_type = "Final Purchase Invoice";
						}
						else if(journal_type.trim().equalsIgnoreCase("FMSFC"))
						{
							journal_type = "Final Custom Duty";
						}
						else if(journal_type.trim().equalsIgnoreCase("FMSSL"))
						{
							journal_type = "Sales/Re-Gas Invoice";
						}
						
						XML_GENERATED_JOURNAL_TYPE.add(journal_type);
					}
					else
					{
						XML_GENERATED_JOURNAL_TYPE.add("");
					}
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting_For_Upload()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_For_Prov_Purchase()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPI' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPI'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}
				
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_For_Prov_CD()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPC' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPC'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}
				
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_For_Final_Purchase()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSFI' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSFI'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}
				//for FMSPU

				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPR' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSPR'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}
				//For transporter
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
						"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
						"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
						"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
						"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
						"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
						"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
						"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
						"JOURNAL_TYPE='EXPJI' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
						//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
						rset=stmt.executeQuery(queryString);				
						while(rset.next())
						{
							INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
							JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
							T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
							//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
							LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
							ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
							ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
							BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
							DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
							TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
							REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
							MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
							CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
							CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
							TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
							JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
							TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
							DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
							DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
							COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
							EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
							COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
							TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
							BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
							SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
						}
						
						queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
						"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
						"JOURNAL_TYPE='EXPJI'";
						//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
						rset=stmt.executeQuery(queryString);				
						while(rset.next())
						{
							APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
							//System.out.println("APPROVAL_DT: "+rset.getString(1));
						}
						
			
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_For_Final_CD()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSFC' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSFC'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}				
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	public void get_Xml_For_Final_Sales_OLD()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,JOURNAL_SOURCE,TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY') " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSSL' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":rset.getString(8));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":rset.getString(10));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSSL'";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
					//System.out.println("APPROVAL_DT: "+rset.getString(1));
				}				
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	Vector PROJECT_CODE = new Vector();
	Vector ASST_COMPO = new Vector();
	Vector GOODS_SERVICE_FLAG = new Vector();
	Vector REV_CHARGE = new Vector();
	Vector HSN_SAC = new Vector();
	Vector POS = new Vector();
	Vector TAX_AMT = new Vector();
	Vector SUPPLY_TYPE = new Vector();
	Vector TOTAL_INV_AMT = new Vector();
	Vector ORI_INV_NO = new Vector();
	
	public void get_Xml_For_Final_Sales()
	{
		try
		{
			if(!approve_dt.trim().equals("") && approve_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{
				queryString="select INV_CARGO_NO,JOURNAL_TYPE,T_CODE,TO_CHAR(APPROVAL_DT,'DD/MM/YYYY')," +
				"LEDGER,ACCOUNT_CODE,ACCOUNT_PERIOD,BASE_AMT,DR_CR_MARKER,TRANSACTION_AMT,REPORT_AMT," +
				"MEMO_AMT,CURRENCY_CODE,CURRENCY_RATE,TRANSACTION_DT,NVL(JOURNAL_SOURCE,''),TRANSACTION_REF," +
				"DESCRIPTION,DUE_DT,COST_CENTER_CD,EMPLOYEE_CD,COA_CD,TDS_TAX_CD,BUSINESS_UNIT_CD," +
				"TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),PROJECT_CODE,ASST_COMPO,GOODS_SERVICE_FLAG,"
				+ "REV_CHARGE,HSN_SAC,POS,TAX_AMT,SUPPLY_TYPE,TOTAL_INV_AMT,ORI_INV_NO " +
				"FROM FMS7_ACCOUNT_APPROVED_DTL WHERE XML_GEN_FLAG='N' AND " +
				"TO_DATE(TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN " +
				"TO_DATE('"+approve_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSSL' ORDER BY INV_CARGO_NO,JOURNAL_TYPE,T_CODE";
				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				int c=0;
				String a="";
				while(rset.next())
				{
					if(c==0)
					{
						////System.out.println("---c--- "+c);
						a=rset.getString(1);
						c++;
						Vinvno.add(c);
					}
					else
					{
					//	//System.out.println("-Here--rset.getString(1)---: "+rset.getString(1));
					//	//System.out.println("-Here--a---: "+a);
						if(!rset.getString(1).equalsIgnoreCase(a))
						{
							////System.out.println("-IF--c---: "+c);
							a=rset.getString(1);
							c++;
							Vinvno.add(c);
						}
						else
						{
							////System.out.println("-ELSE--c---: "+c);
							Vinvno.add("-");
							//Vinvno.add(c);
						}
					}
					
					INV_CARGO_NO.add(rset.getString(1)==null?"":rset.getString(1));
					JOURNAL_TYPE.add(rset.getString(2)==null?"":rset.getString(2));
					T_CODE.add(rset.getString(3)==null?"":rset.getString(3));
					//APPROVAL_DT.add(rset.getString(4)==null?"":rset.getString(4));
					LEDGER.add(rset.getString(5)==null?"":rset.getString(5));
					ACCOUNT_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					ACCOUNT_PERIOD.add(rset.getString(7)==null?"":rset.getString(7));
					BASE_AMT.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
					DR_CR_MARKER.add(rset.getString(9)==null?"":rset.getString(9));
					TRANSACTION_AMT.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					REPORT_AMT.add(rset.getString(11)==null?"0":rset.getString(11));
					MEMO_AMT.add(rset.getString(12)==null?"0":rset.getString(12));
					CURRENCY_CODE.add(rset.getString(13)==null?"":rset.getString(13));
					CURRENCY_RATE.add(rset.getString(14)==null?"":rset.getString(14));
					TRANSACTION_DT.add(rset.getString(15)==null?"":rset.getString(15));
					JOURNAL_SOURCE.add(rset.getString(16)==null?"":rset.getString(16));
					TRANSACTION_REF.add(rset.getString(17)==null?"":rset.getString(17));
					DESCRIPTION.add(rset.getString(18)==null?"":rset.getString(18));
					DUE_DT.add(rset.getString(19)==null?"":rset.getString(19));
					COST_CENTER_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EMPLOYEE_CD.add(rset.getString(21)==null?"":rset.getString(21));
					COA_CD.add(rset.getString(22)==null?"":rset.getString(22));
					TDS_TAX_CD.add(rset.getString(23)==null?"":rset.getString(23));
					BUSINESS_UNIT_CD.add(rset.getString(24)==null?"":rset.getString(24));
					SUN_APPROVAL_DT.add(rset.getString(25)==null?"":rset.getString(25));
					PROJECT_CODE.add(rset.getString(26)==null?"":rset.getString(26));
					ASST_COMPO.add(rset.getString(27)==null?"":rset.getString(27));
					GOODS_SERVICE_FLAG.add(rset.getString(28)==null?"":rset.getString(28));
					REV_CHARGE.add(rset.getString(29)==null?"":rset.getString(29));
					HSN_SAC.add(rset.getString(30)==null?"":rset.getString(30));
					//POS.add(rset.getString(31)==null?"":rset.getString(31));
					
					String state_code = rset.getString(31)==null?"":rset.getString(31);
					if(!state_code.equals("")) {
						String q = "SELECT STATE_NM FROM STATE_MST WHERE STATE_CODE = '"+state_code+"' ";
						rset1 = stmt1.executeQuery(q);
						if(rset1.next()) {
							POS.add(rset1.getString(1));
						} else {
							POS.add("");
						}
					} else {
						POS.add("");
					}
					
					TAX_AMT.add(rset.getString(32)==null?"":nf.format(Double.parseDouble(rset.getString(32))));
					SUPPLY_TYPE.add(rset.getString(33)==null?"":rset.getString(33));
					TOTAL_INV_AMT.add(rset.getString(34)==null?"":nf.format(Double.parseDouble(rset.getString(34))));
					ORI_INV_NO.add(rset.getString(35)==null?"":rset.getString(35));
				}
				
				queryString="select DISTINCT TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				"WHERE XML_GEN_FLAG='Y' AND TO_CHAR(APPROVAL_DT,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') AND " +
				"JOURNAL_TYPE='FMSSL'";
//				//System.out.println("SELECT FMS7_ACCOUNT_APPROVED_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);				
				while(rset.next())
				{
					APPROVAL_DT.add(rset.getString(1)==null?"":rset.getString(1));
				}				
			}
//			//System.out.println("-JAVA--Vinvno---: "+Vinvno);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Xml_From_Accounting()"+e);
			e.printStackTrace();
		}
	}
	
	
	
	public void Customer_DTL()
	{
		try
		{
			queryString = "SELECT CUSTOMER_CD,CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST ORDER BY CUSTOMER_CD";
			//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);				
			while(rset.next())
			{
				CUST_CD.add(rset.getString(1)==null?"":rset.getString(1));	
				CUST_NM.add(rset.getString(3)==null?"":rset.getString(3));
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	//Following Method Has Been Last Modified By MIlan Dalsaniya On MD7th October, 2011 ... 
	public void get_Stock_Valuation_NEW()
	{
		try
		{
			double total_closing_vol = 0;
			double closing_bal1 = 0;
			//introduce by milan MD20111007
			String last_year = "";
			
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			
			queryString = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset=stmt.executeQuery(queryString);
			if(rset.next())
			{
				to_dt = rset.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			last_year = year;
			//FOR OPENING STOCK i.e. TANK READING OF CURRENT MONTH
			double opening_bal1 = 0;
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
						   "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
			//System.out.println("Select OPENING Stock Details Query = "+month+" "+year+" "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				opening_bal1 = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				opening_bal1 = 0;
			}
						
			double total_value_usd_opening = 0;
			double total_value_usd_opening_basic = 0;
			double total_value_usd_opening1 = 0;
			double total_value_inr_opening = 0;
			double total_value_inr_opening_basic = 0;
			double qty = 0 ;
			double total_vol_opening = 0 ;
			double conf_price = 0;
			String ship_cd = "";			
			Vector temp_inv_amt = new Vector();
			Vector temp_CONFIRM_VOL =new Vector();;	
			Vector temp_VALUE_USD=new Vector();;
			Vector temp_VALUE_INR=new Vector();;

			double total_value_inr = 0;
			double total_value_usd = 0;	
			double total_vol = 0;
			double final_total_volume = 0;

			double total_inr_mmbtu = 0;
			boolean break_flag = false;
			
			if(opening_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month')," +
							  "TO_CHAR(A.ACT_ARRV_DT,'YYYY') " +
							  " FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.SPLIT_SEQ='0' AND " +
							  "A.ACT_ARRV_DT<to_date('"+from_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT DESC";										
				//System.out.println("Confirmed Cargo Arrival Details Query 1st milan >>>>>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;
						
						CARGO_REF_CD.add(rset.getString(1));
						INVOICE_DT2.add(rset.getString(3)==null?"":rset.getString(3));
						last_year = rset.getString(5)==null?year:rset.getString(5);
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						//System.out.println("last_year >>>>>>>>>>>> "+last_year);
						////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+" AND A.SPLIT_SEQ='0' ";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							temp_inv_amt.add("0");
							conf_price = 0.0;
							temp_qty = 0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty_2 = 0;
						}
						
						if(opening_bal1>total_vol)
						{
						}
						else
						{
							temp_qty = temp_qty - (total_vol - opening_bal1);
							total_vol = opening_bal1;
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						temp_CONFIRM_VOL.add(""+qty);
						CONFIRM_VOL.add(nf5.format(qty));	
						CONFIRM_PRICE.add(nf2.format(conf_price));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd = "2"; //SBI TT Selling Exchange Rate
						String exchg_rate = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
							GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
						}
						else
						{
							GROUP_FOREIGN_EXCHG_RATE.add("0");
						}
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						//Updated By Milan Dalsaniya MD20111005
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						
						//CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						temp_VALUE_USD.add(nf1.format(value_usd));
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));

						if(temp_qty_2!=0.0)//JHP20120426
						{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
						}
						else
						{
							total_cost_per_mmbtu=0;	
						}

						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
						
						double value_usd_fin= 0;
						value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
						VALUE_USD.add(nf5.format(value_usd_fin));
						
						//total_value_usd += temp_value_usd;
						//total_value_usd_opening += temp_value_usd;						
						//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						//total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						total_value_usd += value_usd_fin;
						//total_value_usd_opening += temp_value_usd;
						total_value_usd_opening += value_usd_fin;
						total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						double temp_value_inr = 0;
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						//VALUE_INR.add(nf5.format(value_inr));
						temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						temp_VALUE_INR.add(nf1.format(value_inr));
						//total_value_inr += temp_value_inr;
						//total_value_inr_opening += temp_value_inr;
						//total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						if(qty!=0)
						{
							//inr_mmbtu = temp_value_inr/qty;
							inr_mmbtu = value_inr/temp_qty_2;	
							INR_MMBTU.add(nf.format(inr_mmbtu));
						}
						else
						{
							INR_MMBTU.add("0.00");
						}
						//System.out.println("gadbad --> "+temp_qty_2+" "+qty+" "+temp_value_inr);
						VALUE_INR.add(nf5.format(inr_mmbtu*qty));
						
						total_value_inr += inr_mmbtu*qty;
						//total_value_inr_opening += temp_value_inr;
						total_value_inr_opening += inr_mmbtu*qty;
						total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							 SHIP_NM.add("");
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
			
			//FOR CLOSING STOCK i.e. TANK READING OF NEXT MONTH
			String month_int = "";
			String year_int = year;
			if(Integer.parseInt(month)==12)
			{
				month_int ="01";
				year_int= ""+(Integer.parseInt(year)+1);
			}
			else
			{
				if((Integer.parseInt(month)+1)<10)
				{
					month_int = "0"+(Integer.parseInt(month)+1);
				}
				else
				{
					month_int = ""+(Integer.parseInt(month)+1);
				}					
			}
			
			//System.out.println(">>>>>>>MILAN month_int = "+month_int);
			//System.out.println(">>>>>>>>MILAN year_int = "+year_int);
			//MD007
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
	          			   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
			//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				closing_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				closing_bal1 = 0;
			}
			
			if(closing_bal1!=0)
			{
				Total_Closing_vol = nf5.format(closing_bal1);
				total_closing_vol = closing_bal1;
				closing_bal += closing_bal1;
			}
			else
			{
				Total_Closing_vol = "0";
				total_closing_vol = 0;
				closing_bal += 0;
			}
			////System.out.println("Total_Closing_vol = "+Total_Closing_vol);		
			
			Vector temp_inv_amt1 = new Vector();			
			Vector temp_CONFIRM_VOL1 = new Vector();
			Vector temp_VALUE_USD1 = new Vector();
			Vector temp_VALUE_INR1 = new Vector();	
		
					
			double total_usd_per_mmbtu = 0;
			double total_inr_per_usd = 0;
			
			break_flag = false;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
						  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
						  "A.SPLIT_SEQ='0' AND " +
						  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) AND " +
						  "(to_date('"+to_dt+"','dd/mm/yyyy')) ORDER BY A.ACT_ARRV_DT DESC";										
			//System.out.println("Confirmed Cargo Arrival Details Query 2nd hhhhhhhhhhhhhhh = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				if(!rset.getString(1).trim().equals("0"))
				{
					double temp_qty = 0;
					double temp_qty_2 = 0;
					double final_seller_inv_amt_usd = 0;
					
					CARGO_REF_CD1.add(rset.getString(1));
					INVOICE_DT1.add(rset.getString(3)==null?"":rset.getString(3));
					String crg_ref = rset.getString(1);
					String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
					
					////System.out.println("closing_bal_prev = "+closing_bal_prev);
					queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
								   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
				  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+" AND A.SPLIT_SEQ='0'";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
//						md20111130					temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						temp_qty = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
						temp_inv_amt1.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
						final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
						total_vol += Double.parseDouble(nf2.format(temp_qty));
						
					}
					else
					{					
						temp_inv_amt1.add("0");
						conf_price = 0.0;
						temp_qty = 0;
						final_seller_inv_amt_usd = 0.0;
						temp_qty_2 = 0.0;
					}
					
					qty = Double.parseDouble(nf1.format(temp_qty));
					temp_CONFIRM_VOL1.add(""+qty);
					CONFIRM_VOL1.add(nf5.format(qty));	
					CONFIRM_PRICE1.add(nf2.format(conf_price));
					total_vol_opening += qty;
										
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="2"; //SBI TT Selling Exchange Rate ...
					String exchg_rate="";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
								   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== milan 007 "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
					}				
					
					if(foreign_exchg_rate>0)
					{
						GROUP_FOREIGN_EXCHG_RATE1.add(nf2.format(foreign_exchg_rate));
					}
					else
					{
						GROUP_FOREIGN_EXCHG_RATE1.add("0");
					}
					
					String prov_custom_duty_payment_dt = "";
					String final_custom_duty_payment_dt = "";
					double total_custom_duty_inr = 0;
					double prov_custom_duty_inr = 0;
					double addl_custom_duty_inr = 0;
					double total_custom_duty_usd = 0;
					double prov_custom_duty_usd = 0;
					double addl_custom_duty_usd = 0;
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
					}
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
					}
					
					double foreign_exchg_rate_2 = 0;
					String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_2 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
								   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
					}
					
					double foreign_exchg_rate_3 = 0;
					String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_3 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
								   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== kkkk got it"+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
					}
					
					
					String cut_off_dt = "31/07/2011";
					int diff_in_days = 0;
					
					String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						diff_in_days = rset2.getInt(1);
					}
					
					if(diff_in_days>0)
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
						}
					}
					else
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
						}
						
						if(foreign_exchg_rate_3>0.0001)
						{
							addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
						}
						
						if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
						{
							total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
						}
					}
					
					//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
					//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
					String tax_amt = "";
					String tax_str_cd = "0";
					double cd_charge_per_mmbtu = 0;
					
					
					//CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
									
					double value_usd = 0;
					double value_inr = 0;
					double inr_mmbtu = 0;
					double total_cost_per_mmbtu = 0;
					
					double temp_value_usd = 0;      				
   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
					value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
					temp_VALUE_USD1.add(nf1.format(value_usd));
					temp_value_usd = Double.parseDouble(nf1.format(value_usd));
					
//MD20111207
					if(temp_qty_2!=0)
					{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
					}
					else
					{
						total_cost_per_mmbtu = 0;
					}
//MD20111207					
					cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
					CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu));
					double value_usd_fin= 0;
					double temp_value_usd_fin = 0;
					value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
					
					VALUE_USD1.add(nf5.format(value_usd_fin));
					
					//total_value_usd += temp_value_usd;
					//total_value_usd_opening += temp_value_usd;					
					//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
					
					total_value_usd += value_usd_fin;
					//total_value_usd_opening += temp_value_usd;
					total_value_usd_opening += value_usd_fin;
					total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
					
					double temp_value_inr = 0;    
					//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
					value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
					//VALUE_INR1.add(nf5.format(value_inr));
					temp_value_inr = Double.parseDouble(nf1.format(value_inr));
					temp_VALUE_INR1.add(nf1.format(value_inr));
					//total_value_inr += temp_value_inr;
					//total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
					
					if(qty!=0)
					{
						inr_mmbtu = temp_value_inr/temp_qty_2;
						INR_MMBTU1.add(nf.format(inr_mmbtu));
					}
					else
					{
						INR_MMBTU1.add("0.00");
					}
					VALUE_INR1.add(nf5.format(inr_mmbtu*qty));
					total_value_inr += inr_mmbtu*qty;
					total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
					
					ship_cd = "0";
					queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
								   "CARGO_REF_CD='"+crg_ref+"'";
					//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}
								
					queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
					//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						SHIP_NM1.add(rset2.getString(1)==null?"":rset2.getString(1));
					}
					else
					{
						 SHIP_NM1.add("");
					}
				}
			}
			
			Total_vol = nf5.format(total_vol);
			final_total_volume = total_vol;
			
			Total_value_usd = nf5.format(total_value_usd);
			if(total_vol!=0)
			{
				total_usd_per_mmbtu = total_value_usd/total_vol;
			}
			else
			{
				total_usd_per_mmbtu = 0;
			}
			double total_usd_per_mmbtu1 = 0;
			total_usd_per_mmbtu1 = Double.parseDouble(nf2.format(total_usd_per_mmbtu));
			Total_usd_per_mmbtu = nf2.format(total_usd_per_mmbtu);
			Total_value_inr = nf5.format(total_value_inr);			
            ////System.out.println("Priyanka     total_usd_per_mmbtu = "+total_usd_per_mmbtu);
            ////System.out.println("Priyanka     total_inr_mmbtu = "+total_inr_mmbtu);
			
			if(total_vol!=0)
			{
				total_inr_mmbtu = total_value_inr/total_vol;
			}
			else
			{
				total_inr_mmbtu = 0;
			}
			double total_inr_mmbtu1 = 0;
			total_inr_mmbtu1 = Double.parseDouble(nf2.format(total_inr_mmbtu));
			Total_inr_mmbtu = nf2.format(total_inr_mmbtu);
			
			if(total_usd_per_mmbtu1!=0)
			{
				total_inr_per_usd = total_inr_mmbtu1/total_usd_per_mmbtu1;
			}
			else
			{
				total_inr_per_usd = 0;
			}
			Total_inr_per_usd= nf2.format(total_inr_per_usd);
			
			//FOR CLOSING STOCK --- AT COST
			

			
			double total_Closing_value_usd = 0;
			double total_Closing_usd_mmbtu = 0;
			double total_Closing_value_inr = 0;
			double total_Closing_inr_per_usd = 0;
			double total_Closing_inr_mmbtu = 0;
			
			double variance_vol = 0;
			double variance_value_usd = 0;
			double variance_value_inr = 0;
			
			double closing_total_inr_mmbtu = 0;
			
			double closing_total_value_usd= 0;		
			double closing_total_value_inr= 0;	
			double closing_qty = 0 ;
			double closing_conf_price = 0;
			String closing_ship_cd = "";			
			Vector closing_temp_inv_amt = new Vector();			
			Vector closing_temp_tot_cd_amt = new Vector();
			Vector closing_temp_tot_pay_refund = new Vector();
			Vector closing_temp_CONFIRM_VOL = new Vector();	
			Vector closing_temp_VALUE_USD = new Vector();
			Vector closing_temp_VALUE_INR = new Vector();
			Vector CLOSING_INVOICE_DT = new Vector();
			
			break_flag = false;
			total_vol = 0;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			if(closing_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month'), TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.SPLIT_SEQ='0' AND " +
							  "A.ACT_ARRV_DT<=to_date('"+to_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT DESC";										
				//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 2>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;

						CLOSING_CARGO_REF_CD.add(rset.getString(1));
						CLOSING_INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
						last_year = rset.getString(5)==null?"year":rset.getString(5);
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						
						////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+" AND A.SPLIT_SEQ='0'";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							closing_temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							closing_temp_inv_amt.add("0");
							conf_price = 0.0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty = 0;
							temp_qty_2 = 0;
						}
						
						if(closing_bal1>total_vol)
						{
							
						}
						else
						{
							temp_qty -= (total_vol - closing_bal1);
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						closing_temp_CONFIRM_VOL.add(""+qty);
						CLOSING_CONFIRM_VOL.add(nf5.format(qty));	
						CLOSING_CONFIRM_PRICE.add(nf2.format(conf_price));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="2";
						String exchg_rate="";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
							CLOSING_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
						}
						else
						{
							CLOSING_GROUP_FOREIGN_EXCHG_RATE.add("0");
						}
						
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						
						
						//CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						closing_temp_VALUE_USD.add(nf1.format(value_usd));
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						if(temp_qty_2!=0.0)//JHP20120426
						{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
						}
						else
						{
							total_cost_per_mmbtu=0;	
						}
						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
						
						double value_usd_fin= 0;
						double temp_value_usd_fin = 0;
						value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
						CLOSING_VALUE_USD.add(nf5.format(value_usd_fin));
						//CLOSING_VALUE_USD.add(nf5.format(value_usd));
						//total_Closing_value_usd += temp_value_usd;
						//total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));
						total_Closing_value_usd += value_usd_fin;
						total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));					
						
						
						double temp_value_inr = 0;    
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						//value_inr = (temp_value_usd_fin * Double.parseDouble(nf2.format(foreign_exchg_rate)));
						//CLOSING_VALUE_INR.add(nf5.format(value_inr));
						//temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						//closing_temp_VALUE_INR.add(nf1.format(value_inr));
						//total_Closing_value_inr += temp_value_inr;
												
						if(qty!=0)
						{
							//inr_mmbtu = temp_value_inr/qty;
							inr_mmbtu = value_inr/temp_qty_2;
							CLOSING_INR_MMBTU.add(nf.format(inr_mmbtu));
						}
						else
						{
							CLOSING_INR_MMBTU.add("0.00");
						}
						CLOSING_VALUE_INR.add(nf5.format(inr_mmbtu*qty));
						temp_value_inr = Double.parseDouble(nf1.format(inr_mmbtu*qty));
						closing_temp_VALUE_INR.add(nf1.format(inr_mmbtu*qty));
						total_Closing_value_inr += inr_mmbtu*qty;
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							CLOSING_SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							CLOSING_SHIP_NM.add("");
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
									
			double total_Closing_value_usd1 = 0;				
			//Total_Closing_value_usd = nf5.format(total_Closing_value_usd);	
			total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
					
			//Introduce by MIlan Dalsaniya MD20111007
//			 for opening stock				CARGO_REF_CD 			INVOICE_DT2 
			//for  closing stock			CARGO_REF_CD1 			INVOICE_DT1
			// for closing stock at cost	CLOSING_CARGO_REF_CD 	CLOSING_INVOICE_DT
			
			Vector act_arr_dt = new Vector();
			String act_arr_dt1 = "";
			String act_arr_yy1 = "";
			String act_arr_yy2 = "";
			Vector act_arr_sq = new Vector();
			
			
			boolean flg = true;
			long snq = 1;
			/*
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
			  "TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
			  "A.ACT_ARRV_DT BETWEEN TO_DATE('01/01/"+last_year+"','dd/mm/yyyy') AND to_date('"+to_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT";										
			*///JHP20120426
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
			  "TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
			  "A.SPLIT_SEQ='0' AND " +
			  "A.ACT_ARRV_DT < to_date('"+to_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT";										
		
			//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 3>>>>> = "+last_year+" "+queryString);
			rset = stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				act_arr_dt.add(rset.getString(2)==null?"" : rset.getString(2));
				act_arr_dt1 = rset.getString(2)==null?"" : rset.getString(2);
				act_arr_yy1 = rset.getString(3)==null?"" : rset.getString(3);
				if (snq==0){
					act_arr_yy2 = act_arr_yy1;
					snq = 1;
				}
				if (act_arr_yy1.equals(act_arr_yy2))
				{
					flg = true;
					act_arr_sq.add(act_arr_yy1+"-"+snq);
					act_arr_yy2 = act_arr_yy1;
					snq++;
				}
				else
				{
					if (flg)
					{
						snq=1;
					}
					flg = true;
					act_arr_sq.add(act_arr_yy1+"-"+snq);
					act_arr_yy2 = act_arr_yy1;
					snq++;
				}
				
				
			}
			//System.out.println("for opening stock : "+to_dt);
			//System.out.println("for sequence : "+act_arr_sq);
			//System.out.println("for arrival date : "+act_arr_dt);
			flg = true;
			int o=0, p=0, q=0;
			//for opneing stock
			if (!INVOICE_DT2.isEmpty())
			{
				for (int i =act_arr_dt.size()-1; i>=0; i--)
				{
					if (act_arr_dt.elementAt(i).equals(INVOICE_DT2.elementAt(0)))
					{
						for (int j=i; flg;){
							if (o>=INVOICE_DT2.size())
								break;
							//System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(INVOICE_DT2.elementAt(o)))
							{
								INVOICE_DT2_sq.add(act_arr_sq.elementAt(j));
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
						}
							
							
					}
				}
			}
			//System.out.println("for opening stock : "+INVOICE_DT2);
			//System.out.println("for opening stock : "+INVOICE_DT2_sq);
//			for closing stock
			o=0; p=0; q=0;
			if (!INVOICE_DT1.isEmpty())
			{
				for (int i =(act_arr_dt.size()-1); i>=0; i--)
				{
					
					if (act_arr_dt.elementAt(i).equals(INVOICE_DT1.elementAt(0)))
					{
						for (int j=i; flg;){
													
							if (o>=INVOICE_DT1.size())
								break;
							//System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(INVOICE_DT1.elementAt(o)))
							{
								INVOICE_DT1_sq.add(act_arr_sq.elementAt(j));
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
							
							
						}
							
							
					}
				}
			}
			//System.out.println("for closing stock : "+INVOICE_DT1);
			//System.out.println("for closing stock : "+INVOICE_DT1_sq);
			//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
			//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
//			for opneing stock at cost
			o=0; p=0; q=0;
			if (!CLOSING_INVOICE_DT.isEmpty())
			{
				for (int i =act_arr_dt.size()-1; i>=0; i--)
				{
					//System.out.println(i);
					if (act_arr_dt.elementAt(i).equals(CLOSING_INVOICE_DT.elementAt(0)))
					{
						for (int j=i; flg;){
							
							if (o>=CLOSING_INVOICE_DT.size())
								break;
							//System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(CLOSING_INVOICE_DT.elementAt(o)))
							{
								CLOSING_INVOICE_DT_sq.add(act_arr_sq.elementAt(j));
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
						}
							
							
					}
				}
			}
			/*//System.out.println("for opening stock : "+INVOICE_DT2);
			//System.out.println("for opening stock : "+INVOICE_DT2_sq);
			//System.out.println("for closing stock : "+INVOICE_DT1);
			//System.out.println("for closing stock : "+INVOICE_DT1_sq);*/
			//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
			//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
			
			
			//For Closing stock at NRV		
			String temp_to_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int)+1);	
			String temp_from_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int));
			////System.out.println("temp_to_dt = "+temp_to_dt);
			////System.out.println("temp_from_dt = "+temp_from_dt);		
			double sum_qty1 = closing_bal1;
			double sum_qty = 0;
			int count = 0;
			double remaining_qty = 0;
			double sn_rate = 0;
			double nrv_foreign_exchg_rate = 0;
			double sale_usd = 0;
			double nrv_value_inr=0;
			double nrv_inr_mmbtu = 0;
			
			double nrv_rate = 0;
			double sum_nrv_value_usd = 0;
			double sum_nrv_value_inr = 0;
			double sum_nrv_inr_mmbtu = 0;
			double total_sum_inr_mmbtu = 0;
			double final_nrv_value_usd = 0;
			
			double total_qty = 0;
			double total_sum_value_usd = 0;
			double total_rate = 0;
			double total_sum_value_inr = 0;
			double total_nvr_inr_mmbtu = 0;
			double mmbtu_qty = 0;

			double nrv_rate1 = 0;
			
			String month_int_2 = temp_from_dt.substring(3,5);
			String year_int_2 = temp_from_dt.substring(6);
			
			if(Integer.parseInt(month_int_2)==12)
			{
				month_int_2 = "01";
				year_int_2 = ""+(Integer.parseInt(year_int_2)+1);
			}
			else
			{
				if((Integer.parseInt(month_int_2)+1)<10)
				{
					month_int_2 = "0"+(Integer.parseInt(month_int_2)+1);
				}
				else
				{
					month_int_2 = ""+(Integer.parseInt(month_int_2)+1);
				}					
			}
			
			String temp_from_dt2 = "01/"+month_int_2+"/"+year_int_2;
			
			//Following Query Is Commented By Samik Shah On 16th July, 2011 ...
		    /*queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "A.END_DT<TO_DATE('"+temp_to_dt+"','dd/mm/yyyy') AND " +
					      "A.END_DT>=TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') AND A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.RATE";*/
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
			//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
			stmt.executeUpdate(queryString);
			conn.commit();
			
			//Following Query Is Introduced By Samik Shah On 16th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						  "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						  "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
					      "A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.START_DT";
			
			//System.out.println("SAMIK --> SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "S";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='S'"; 

				//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_SN_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			
			//Following Query Is Introduced By Samik Shah On 16th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString =  "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						   "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						   "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD FROM FMS7_LOA_MST A WHERE " +
						   "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						   "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						   "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
						   "A.TCQ IS NOT NULL AND " +
						   "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
						   "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
						   "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO) ORDER BY A.START_DT";
			
			//System.out.println("LOA DETAILS FROM FMS7_LOA_MST = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "L";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = "0";
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='L'"; 

				//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_LOA_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			conn.commit();
			
			String max_start_date = "";
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT to_char(MAX(START_DT),'dd/mm/yyyy') FROM FMS7_TEMP_STOCK_VALUATION";
			//System.out.println("Query for finding-out MAX Signing Date for Stock Valuation = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				max_start_date = rset.getString(1)==null?"":rset.getString(1);
			}
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD," +
						  "A.CUSTOMER_NM,A.ALLOC_QTY,A.DIFF_QTY,CONTRACT_TYPE " +
						  "FROM FMS7_TEMP_STOCK_VALUATION A ORDER BY A.START_DT";
			
			//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{		
				String temp_sn_rate = "";
				String sn_ref_no = "";
				String cont_type_dtl = "";
				
				String cont_type = rset.getString(14)==null?"":rset.getString(14);
								
				String temp_cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String temp_sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String temp_fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String temp_sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String temp_fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				
				if(cont_type.trim().equalsIgnoreCase("S"))
				{
					queryString1 = "SELECT NVL(SN_REF_NO,' ') FROM FMS7_SN_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND FGSA_NO="+temp_fgsa_no+" AND " +
								   "FGSA_REV_NO="+temp_fgsa_rev_no+" AND SN_NO="+temp_sn_no+" AND " +
								   "SN_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "SN";
				}
				else if(cont_type.trim().equalsIgnoreCase("L"))
				{
					queryString1 = "SELECT NVL(LOA_REF_NO,' ') FROM FMS7_LOA_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND TENDER_NO="+temp_fgsa_no+" AND " +
								   "LOA_NO="+temp_sn_no+" AND LOA_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "LOA";
				}
				
				if(sn_ref_no.trim().equals(""))
				{
					sn_ref_no = cont_type_dtl+" - "+temp_sn_no;
				}
				else
				{
					sn_ref_no = cont_type_dtl+" - "+sn_ref_no;
				}
				
				TCQ.add(rset.getString(1)==null?"0":rset.getString(1));
				RATE.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
				temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
				SN_NO2.add(sn_ref_no);
				SIGNING_DT2.add(rset.getString(5)==null?"":rset.getString(5)); //Actually it stores Contract Start Date of SN/LOA
				FGSA_NO2.add(rset.getString(7)==null?"0":rset.getString(7));
				SN_REV_NO2.add(rset.getString(8)==null?"0":rset.getString(8));
				FGSA_REV_NO2.add(rset.getString(9)==null?"0":rset.getString(9));
				CUSTOMER_CODE.add(rset.getString(10)==null?"0":rset.getString(10));
				
				sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
				
				CUSTOMER_NM.add(rset.getString(11)==null?"":rset.getString(11));
								
				String tcq = rset.getString(1)==null?"0":rset.getString(1);
				String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
				mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
				QTY.add(nf5.format(mmbtu_qty));					
								
				sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
				SALE_USD.add(nf5.format(sale_usd));
				
				sum_qty += mmbtu_qty;		
				Sum_qty = nf5.format(sum_qty);
				
				sum_nrv_value_usd += sale_usd;	
				if(sum_nrv_value_usd!=0)
				{
					Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				}
				else
				{
					Sum_nrv_value_usd = "0";
				}
				
				exchg_rate_cd = "5";
				String nrv_exchg_rate = "";					
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
							   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
							   "EFF_DT=TO_DATE('"+to_dt+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					nrv_exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					nrv_foreign_exchg_rate=Double.parseDouble(nrv_exchg_rate);
				}				
				
				if(nrv_foreign_exchg_rate>0)
				{
					NRV_FOREIGN_EXCHG_RATE.add(nf.format(nrv_foreign_exchg_rate));
				}
				else
				{
					NRV_FOREIGN_EXCHG_RATE.add("0");
				}
				
				nrv_value_inr = Double.parseDouble(nf1.format(nrv_foreign_exchg_rate * sale_usd));
				if(nrv_value_inr>0)
				{
					NRV_VALUE_INR.add(nf5.format(nrv_value_inr));
				}
				else
				{
					NRV_VALUE_INR.add("0");
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * sn_rate;
				
				if(nrv_inr_mmbtu>0)
				{
					NRV_INR_MMBTU.add(nf.format(nrv_inr_mmbtu));
				}
				else
				{
					NRV_INR_MMBTU.add("0");
				}
				
				if(sum_qty!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}
				
				if(sum_nrv_value_inr!=0)
				{
					Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				}
				else
				{
					Sum_nrv_value_inr = "0";
				}
				if(nrv_rate1!=0 && nrv_foreign_exchg_rate!=0)
				{
					sum_nrv_inr_mmbtu =  nrv_rate1 * nrv_foreign_exchg_rate;
					Sum_nrv_inr_mmbtu = nf.format(sum_nrv_inr_mmbtu);
				}
				else
				{
					Sum_nrv_inr_mmbtu = "0";
				}
				////System.out.println("nrv_rate"+nrv_rate);
				////System.out.println("nrv_rate1"+nrv_rate1);
				////System.out.println("nrv_foreign_exchg_rate"+nrv_foreign_exchg_rate);
				if(nrv_foreign_exchg_rate!=0)
				{
					Nrv_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);	
				}
				else
				{
					Nrv_foreign_exchange_rate = "0";
				}					
				
				if(sum_qty>closing_bal1)
				{
					remaining_qty = closing_bal1 - (sum_qty - mmbtu_qty);
					++count;
					break;							
				}					
			}		
				
			if(count>0)
			{
				sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				Sum_qty = nf5.format(sum_qty);					
				QTY.setElementAt(nf5.format(remaining_qty),QTY.size()-1);
				mmbtu_qty = remaining_qty;					
				
				sum_nrv_value_usd = sum_nrv_value_usd - sale_usd;				
				sale_usd = Double.parseDouble(nf1.format(Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)))) * mmbtu_qty));
				SALE_USD.setElementAt(nf5.format(sale_usd),SALE_USD.size()-1);	
				sum_nrv_value_usd += sale_usd;
				Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				
				sum_nrv_value_inr = sum_nrv_value_inr - Double.parseDouble(nf1.format(nrv_value_inr));				
				nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
				NRV_VALUE_INR.setElementAt(nf5.format(nrv_value_inr),NRV_VALUE_INR.size()-1);
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				
				//sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				//Sum_qty = nf5.format(sum_qty);
				total_qty = sum_qty;
				if(sum_qty!=0 && sum_nrv_value_usd!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}				
			}
			else
			{				
				String test_rate = "0";
				if(!max_start_date.trim().equals(""))
				{
			   	 	for(int i=0; i<SIGNING_DT2.size(); i++)
			   	 	{
			   	 		if(!(""+SIGNING_DT2.elementAt(i)).trim().equals(""))
			   	 		{	
				   	 		if((""+SIGNING_DT2.elementAt(i)).trim().equals(max_start_date))
				   	 		{
				   	 			test_rate = ""+RATE.elementAt(i);
				   	 			break;
				   	 		}
			   	 		}
			   	 	}
			   	 	
				}
				
			   	remaining_qty = closing_bal1 - sum_qty;
				double temp_remaining_qty = 0;
				temp_remaining_qty = Double.parseDouble(nf1.format(remaining_qty));
				if(temp_remaining_qty>0)
				{
					Test_qty = nf5.format(temp_remaining_qty);
				}
				else
				{
					Test_qty = "0";
				}	
				
				double temp_test_rate = 0;
				temp_test_rate = Double.parseDouble(nf.format(Double.parseDouble(test_rate)));
				
				if(!test_rate.trim().equals("") && test_rate!=null)
				{
					Test_rate= nf.format(Double.parseDouble(test_rate));
				}
				else
				{
					Test_rate = "0";
				}
				
				sale_usd = temp_remaining_qty * temp_test_rate;
				double temp_sale_usd = 0;
				temp_sale_usd = Double.parseDouble(nf1.format(sale_usd));
				if(temp_sale_usd!=0)
				{
					Test_sale_usd = nf5.format(temp_sale_usd);
				}
				else
				{
					Test_sale_usd = "0" ;
				}
				sum_nrv_value_usd += temp_sale_usd;
				Temp_value_usd = nf1.format(temp_sale_usd);
				
				CUSTOMER_CODE.add("");
				FGSA_REV_NO.add("");
				SN_REV_NO.add("");
				FGSA_NO.add("");
				TCQ.add("");
				SIGNING_DT2.add("");
				CUSTOMER_NM.add("");
				if(nrv_foreign_exchg_rate>0)
				{
					Test_exch_rate = nf.format(nrv_foreign_exchg_rate);
				}
				else
				{
					Test_exch_rate = "0";
				}
				
				if(nrv_foreign_exchg_rate!=0 && sale_usd!=0)
				{
					nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
					Test_value_inr = nf5.format(nrv_value_inr);
				}
				else
				{
					Test_value_inr = "0";
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Temp_value_inr = nf1.format(nrv_value_inr);
				
				double temp_nrv_inr_mmbtu = 0;
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * Double.parseDouble(test_rate);
				temp_nrv_inr_mmbtu += Double.parseDouble(nf.format(nrv_inr_mmbtu));
				if(nrv_inr_mmbtu!=0)
				{
						Test_inr_mmbtu = nf.format(temp_nrv_inr_mmbtu);
				}
				else
				{
					Test_inr_mmbtu ="0";
				}	
				sum_nrv_inr_mmbtu = sum_nrv_inr_mmbtu + temp_nrv_inr_mmbtu;
			}	
			
			if(sum_qty<total_closing_vol)
			{
				total_qty = sum_qty + Double.parseDouble(nf1.format(remaining_qty));
			}
			else
			{
				total_qty +=0;
			}			
			if(total_qty>0)
			{
				Total_qty = nf5.format(total_qty);
			}
			else
			{
				Total_qty = "0";
				total_qty = 0;
			}	
			double total_sum_value_usd1 = 0;
			total_sum_value_usd = sum_nrv_value_usd;
			total_sum_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd));
			Total_sum_value_usd = nf5.format(total_sum_value_usd);
			
			double closing_stock_usd = 0;
			double closing_stock_inr = 0;
			double closing_stock_nrv_usd = 0;
			double closing_stock_nrv_inr = 0;
			
			queryString6 = "SELECT NVL(CLOSING_STOCK_NRV_USD,'0'), NVL(CLOSING_STOCK_NRV_INR,'0'), " +
						   "NVL(CLOSING_STOCK_USD,'0'), NVL(CLOSING_STOCK_INR,'0') " +
						   "FROM FMS7_STOCK_VALUATION WHERE " +
						   "MONTH='"+month+"' AND YEAR="+year+"";
			rset6 = stmt6.executeQuery(queryString6);
			while(rset6.next())
			{
				closing_stock_nrv_usd = rset6.getDouble(1);
				closing_stock_nrv_inr = rset6.getDouble(2);
				closing_stock_usd = rset6.getDouble(3);
				closing_stock_inr = rset6.getDouble(4);
			}
			
			Closing_Stock_USD = nf1.format(closing_stock_usd);
			Closing_stock_NRV_USD = nf1.format(closing_stock_nrv_usd);
			Closing_Stock_INR = nf1.format(closing_stock_inr);
			Closing_stock_NRV_INR = nf1.format(closing_stock_nrv_inr);
			
			//Mininmum of Cost or NRV
			if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
				if(closing_stock_nrv_usd<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(closing_stock_nrv_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(closing_stock_nrv_usd));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			else
			{
				if(total_sum_value_usd1<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(total_sum_value_usd1);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd1));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			////System.out.println("total_sum_value_usd1 = "+total_sum_value_usd1);				
			////System.out.println("total_Closing_value_usd = "+total_Closing_value_usd);			
			////System.out.println("Total_Closing_value_usd = "+Total_Closing_value_usd);			
			////System.out.println("total_Closing_value_usd1 = "+total_Closing_value_usd1);
			
			if(total_closing_vol!=0)
			{
				total_Closing_usd_mmbtu = total_Closing_value_usd1/total_closing_vol;
			}
			else
			{
				total_Closing_usd_mmbtu = 0;
			}
			Total_Closing_usd_mmbtu = nf.format(total_Closing_usd_mmbtu);				
			
			variance_vol = closing_bal1-opening_bal1;
			if(variance_vol>=0)
			{
				Variance_vol = nf5.format(variance_vol);
			}
			else
			{
				variance_vol = (-1) * variance_vol;
				Variance_vol = "("+nf5.format(variance_vol)+")";
			}
					
			variance_value_usd = total_Closing_value_usd1 - total_value_usd_opening_basic;
			////System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);

    		if(total_qty!=0)
    		{
    			total_rate = total_sum_value_usd/total_qty;
    			Total_rate = nf.format(total_rate);
    		}
    		else
    		{
    			Total_rate = "0.00";
    		}			
    		total_sum_value_inr = sum_nrv_value_inr ;    		
    		
    		//Minimum of cost of or NRV for value in INR
    		if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
    			if(closing_stock_nrv_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(closing_stock_nrv_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(closing_stock_nrv_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			else
			{
				if(total_sum_value_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(total_sum_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_sum_value_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			//Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
			////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);
			
			if(total_Closing_value_usd1!=0)
			{
				total_Closing_inr_per_usd = total_Closing_value_inr/total_Closing_value_usd1;
			}
			else
			{
				total_Closing_inr_per_usd = 0;
			}
			Total_Closing_inr_per_usd = nf.format(total_Closing_inr_per_usd);
			
			if(total_closing_vol!=0)
			{
				total_Closing_inr_mmbtu = total_Closing_value_inr/total_closing_vol;
			}
			else
			{
				total_Closing_inr_mmbtu = 0;
			}
			Total_Closing_inr_mmbtu = nf.format(total_Closing_inr_mmbtu);
			
			Total_sum_value_inr = nf5.format(total_sum_value_inr);			
			Total_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);			
			total_nvr_inr_mmbtu = sum_nrv_inr_mmbtu; 
			Total_sum_inr_mmbtu = nf.format(total_nvr_inr_mmbtu);	
			
			////System.out.println("variance_value_usd  = "+variance_value_usd);
			if(variance_value_usd>=0)
			{
				Variance_value_usd = nf5.format(variance_value_usd);
				Variance_value_usd1 = nf1.format(variance_value_usd);
			}
			else
			{
				////System.out.println("variance_value_usd  = "+variance_value_usd);
				double variance_value_usd1 = (-1) * variance_value_usd;
				Variance_value_usd = "("+nf5.format(variance_value_usd1)+")";
				Variance_value_usd1 = nf1.format(variance_value_usd);
				////System.out.println("Samik Variance_value_usd1  = "+Variance_value_usd1);
			}
			////System.out.println("Variance_value_usd  = "+ Variance_value_usd);
			////System.out.println("Variance_value_usd1  = "+ Variance_value_usd1);
			
			variance_value_inr = total_Closing_value_inr-total_value_inr_opening_basic;
			if(variance_value_inr>=0)
			{
				Variance_value_inr = nf5.format(variance_value_inr);
				Variance_value_inr1 = nf1.format(variance_value_inr);
			}
			else
			{
				double variance_value_inr1 = (-1) * variance_value_inr;
				Variance_value_inr = "("+nf5.format(variance_value_inr1)+")";
				Variance_value_inr1 = nf1.format(variance_value_inr);				
			}			
			
			
			//For Sales Qty
			double temp_sales_qty_total = 0;
			double temp_sales_qty_total1 = 0;
			double temp_margin_value_usd = 0;
			double temp_margin_value_inr = 0;
			double margin_rate = 0;
			double margin_inr_mmbtu = 0;
			
			double sales_usage_value_usd = 0;
			double sales_usage_value_usd1 = 0;
			sales_usage_value_usd = total_value_usd - total_Closing_value_usd1;
		
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			//System.out.println("total_value_usd  = "+ total_value_usd);
			
			Sales_Usage_value_usd = nf5.format(sales_usage_value_usd);
	
			sales_usage_value_usd1 = Double.parseDouble(nf1.format(sales_usage_value_usd));
			
			double sales_usage_value_inr = 0;
			double sales_usage_value_inr1 = 0;
			sales_usage_value_inr = total_value_inr - total_Closing_value_inr;
			Sales_Usage_value_inr = nf5.format(sales_usage_value_inr);
			sales_usage_value_inr1 = Double.parseDouble(nf1.format(sales_usage_value_inr));
			
			setYear(year);
			setMonth(month);
			setTo_year(year);
			setTo_month(month);
			
			get_Sales_dtls();  //Sales Register function called			

			//Following Logic For Calculation Of SUG Netted With Fule Has Been Introduced By Samik Shah On 9th September, 2011 ...
			double sales_regas_qty = 0;
			double regas_qty = 0;
			double re_gas_sug_qty = 0;
			sug_percent = "0";
			
			int temp_cust_cd = 0;
			int temp_re_gas_no = 0;
			int temp_cargo_seq_no = 0;
			
			queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
						   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
						   "FROM FMS7_DAILY_ALLOCATION_DTL " +
						   "WHERE CONTRACT_TYPE='R' AND " +
						   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
						   "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				double temp_sales_regas_qty = 0;
				
				sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				
				temp_cust_cd = rset1.getInt(2);
				temp_re_gas_no = rset1.getInt(3);
				temp_cargo_seq_no = rset1.getInt(4);
				
				sug_percent = "0";
				
				queryString2 = "SELECT SYS_USE_GAS " +
							   "FROM FMS7_RE_GAS_CARGO_DTL " +
							   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
							   "RE_GAS_NO="+temp_re_gas_no+" AND " +
							   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
				rset2 = stmt2.executeQuery(queryString2);
			
				if(rset2.next())
				{
					sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
					temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
					sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
				}
				
				
				re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
			}
			//Logic Introduced By Samik Shah On 9th September, 2011 For Finding Out SUG Netted With Fule For The Selected Month Ends Here ...
			
			double flaring = 0;
			double auxiliary_consumption = 0;
			double scv_fuel_consumption = 0;
			double sug = 0;					
			double other_consumption = 0;
			double mass_balancing = 0;
			double consumption_percent = 0;
			double temp_flaring1 = 0;
			double temp_auxiliary_consumption = 0;
			double temp_scv_fuel_consumption = 0;
			double temp_sug = 0;					
			double temp_other_consumption = 0;
			double temp_mass_balancing = 0;
			
			queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
						   "WHERE YEAR='"+year+"' AND MONTH ='"+month+"'";
			//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
				scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
				sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
				other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
				mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
			}				
			if(flaring!=0)
			{
				Flaring = nf5.format(flaring);
				temp_flaring1 = Double.parseDouble(nf1.format(flaring));
			}
			else
			{
				Flaring = "-" ;
				temp_flaring1 = 0;
			}
			
			if(auxiliary_consumption!=0)
			{
				Auxiliary_Consumption = nf5.format(auxiliary_consumption);
				temp_auxiliary_consumption = Double.parseDouble(nf1.format(auxiliary_consumption));
			}
			else
			{
				Auxiliary_Consumption = "-";
				temp_auxiliary_consumption = 0;
			}
			if(scv_fuel_consumption!=0)
			{
				Scv_fuel_consumption = nf5.format(scv_fuel_consumption);
				temp_scv_fuel_consumption = Double.parseDouble(nf1.format(scv_fuel_consumption));
			}
			else
			{
				Scv_fuel_consumption = "-";
				temp_scv_fuel_consumption = 0;
			}
			
			if(re_gas_sug_qty>=0)
			{
				sug = (-1)*re_gas_sug_qty;
			}
			
			if(sug!=0)
			{
				Sug = nf5.format(sug);
				temp_sug = Double.parseDouble(nf1.format(sug));
			}
			else
			{
				Sug = "-";
				temp_sug = 0;
			}
			
			if(other_consumption!=0)
			{
				Other_Consumption = nf5.format(other_consumption);
				temp_other_consumption = Double.parseDouble(nf1.format(other_consumption));
			}
			else
			{
				Other_Consumption = "-" ;
				temp_other_consumption = 0;
			}
			if(mass_balancing!=0)
			{
				Mass_Balancing = nf5.format(mass_balancing);
				temp_mass_balancing = Double.parseDouble(nf1.format(mass_balancing));
			}
			else
			{
				Mass_Balancing = "-";
				temp_mass_balancing = 0;
			}
			
			double captive_consumption = 0;
			double captive_consumption1 = 0;
			captive_consumption = temp_flaring1 + temp_auxiliary_consumption + temp_scv_fuel_consumption + temp_sug + temp_other_consumption + temp_mass_balancing;
			Captive_consumption = nf5.format(captive_consumption);
			captive_consumption1 = Double.parseDouble(nf1.format(captive_consumption));
						
			double flaring_usd_mmbtu = 0;
			double auxiliary_usd_mmbtu = 0;
			double scv_fuel_usd_mmbtu = 0;
			double mass_balancing_usd_mmbtu = 0;
			double sug_usd_mmbtu = 0;
			double other_usd_mmbtu = 0;

			double sales_usage_inr_mmbtu = 0;
			double sales_usage_inr_mmbtu1 = 0;

			double sales_usage_usd_mmbtu = 0;
			double sales_usage_usd_mmbtu1 = 0;
			
			double captive_value_usd = 0;
			double captive_value_usd1 = 0;
			
		
			//For Captive Consumption
			double temp_flaring = 0;
			double temp_total_fuel_gas = 0;
			double consumption_qty = 0;
			double consumption_qty1 = 0;
			double consumption_value_usd = 0;
			double consumption_value_inr = 0;
			
			fetch_Monthly_Energy();
			
			if(Flaring.trim().equals("-") || Flaring.trim().equals(""))
			{
				Flaring = "0";
			}
			if(Total_Fuel_Gas.trim().equals("-") || Total_Fuel_Gas.trim().equals(""))
			{
				Total_Fuel_Gas = "0";
			}
			
			temp_flaring = Double.parseDouble(Flaring);
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			consumption_qty = temp_flaring + temp_total_fuel_gas;
			consumption_qty1 = Double.parseDouble(nf1.format(captive_consumption));
			Consumption_qty = nf5.format(captive_consumption);		
			temp_sales_qty_total = sales_qty_total;
			temp_sales_qty_total1 = Double.parseDouble(nf1.format(sales_qty_total));
			
			//System.out.println("MILAN >>>>>>>>>>>> "+sales_gross_amt_usd_total);
			//mm
			temp_margin_value_usd = sales_gross_amt_usd_total;
			temp_margin_value_inr = sales_qty_amt_inr_total;
						
			double sales_usage_qty = 0;
			double sales_usage_qty1 = 0;
			//sales_usage_qty = temp_sales_qty_total1 + consumption_qty1; //Commented By Samik Shah On 9th September, 2011 ...
			
			
			sales_usage_qty = final_total_volume - total_qty;
			Sales_Usage_qty = nf5.format(sales_usage_qty);
			
			sales_usage_qty1 = Double.parseDouble(nf2.format(sales_usage_qty));
			
			
			if(sales_usage_qty1!=0)
			{
				
				sales_usage_usd_mmbtu = sales_usage_value_usd1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_usd_mmbtu = 0;
			}
			Sales_Usage_usd_mmbtu = nf.format(sales_usage_usd_mmbtu);
			
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			
			////System.out.println("sales_usage_value_usd1 = "+sales_usage_value_usd1);
			////System.out.println("sales_usage_qty1 = "+sales_usage_qty1);
			

			
			if(sales_usage_qty1!=0)
			{
				sales_usage_inr_mmbtu = sales_usage_value_inr1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_inr_mmbtu = 0;
			}
			Sales_Usage_inr_mmbtu = nf.format(sales_usage_inr_mmbtu);
			sales_usage_inr_mmbtu1 = Double.parseDouble(nf.format(sales_usage_inr_mmbtu));
			
			
			double flaring_inr_mmbtu = 0;
			double auxiliary_inr_mmbtu = 0;
			double scv_fuel_inr_mmbtu = 0;
			double mass_balancing_inr_mmbtu = 0;
			double sug_inr_mmbtu = 0;
			double other_inr_mmbtu = 0;
			
			flaring_inr_mmbtu = Double.parseDouble(nf1.format(temp_flaring1 * sales_usage_inr_mmbtu1));
			auxiliary_inr_mmbtu = Double.parseDouble(nf1.format(temp_auxiliary_consumption * sales_usage_inr_mmbtu1));
			scv_fuel_inr_mmbtu = Double.parseDouble(nf1.format(temp_scv_fuel_consumption * sales_usage_inr_mmbtu1));
			mass_balancing_inr_mmbtu = Double.parseDouble(nf1.format(temp_mass_balancing * sales_usage_inr_mmbtu1));
			sug_inr_mmbtu = Double.parseDouble(nf1.format(temp_sug * sales_usage_inr_mmbtu1));
			other_inr_mmbtu = Double.parseDouble(nf1.format(temp_other_consumption * sales_usage_inr_mmbtu1));
			
					
			Flaring_inr_mmbtu = nf5.format(flaring_inr_mmbtu);
			Auxiliary_inr_mmbtu = nf5.format(auxiliary_inr_mmbtu);
			Scv_fuel_inr_mmbtu = nf5.format(scv_fuel_inr_mmbtu);
			Mass_balancing_inr_mmbtu = nf5.format(mass_balancing_inr_mmbtu);
			Sug_inr_mmbtu = nf5.format(sug_inr_mmbtu);
			Other_inr_mmbtu = nf5.format(other_inr_mmbtu);
			
			double captive_value_inr = 0;
			double captive_value_inr1 = 0;
			captive_value_inr = flaring_inr_mmbtu + auxiliary_inr_mmbtu + scv_fuel_inr_mmbtu + mass_balancing_inr_mmbtu + sug_inr_mmbtu + other_inr_mmbtu;
			Captive_value_inr = nf5.format(captive_value_inr);
			captive_value_inr1 = Double.parseDouble(nf1.format(captive_value_inr));
			
			double captive_usd_mmbtu = 0;
			double captive_inr_mmbtu = 0;
			
			flaring_usd_mmbtu = temp_flaring1 * sales_usage_usd_mmbtu1;
			auxiliary_usd_mmbtu = temp_auxiliary_consumption * sales_usage_usd_mmbtu1;
			scv_fuel_usd_mmbtu = temp_scv_fuel_consumption * sales_usage_usd_mmbtu1;
			mass_balancing_usd_mmbtu = temp_mass_balancing * sales_usage_usd_mmbtu1;
			sug_usd_mmbtu = temp_sug * sales_usage_usd_mmbtu1;
			other_usd_mmbtu = temp_other_consumption * sales_usage_usd_mmbtu1;
			
			Flaring_usd_mmbtu = nf5.format(flaring_usd_mmbtu);
			Auxiliary_usd_mmbtu = nf5.format(auxiliary_usd_mmbtu);
			Scv_fuel_usd_mmbtu = nf5.format(scv_fuel_usd_mmbtu);
			Mass_balancing_usd_mmbtu = nf5.format(mass_balancing_usd_mmbtu);
			Sug_usd_mmbtu = nf5.format(sug_usd_mmbtu);
			Other_usd_mmbtu = nf5.format(other_usd_mmbtu);
			
			captive_value_usd = flaring_usd_mmbtu + auxiliary_usd_mmbtu + scv_fuel_usd_mmbtu + mass_balancing_usd_mmbtu + sug_usd_mmbtu + other_usd_mmbtu;
			Captive_value_usd = nf5.format(captive_value_usd);
			captive_value_usd1 = Double.parseDouble(nf1.format(captive_value_usd));
			
			if(captive_consumption1!=0)
			{
				captive_usd_mmbtu = captive_value_usd1/captive_consumption1;
				captive_inr_mmbtu = captive_value_inr1/captive_consumption1;
			}
			else
			{
				captive_usd_mmbtu = 0;
				captive_inr_mmbtu = 0;
			}
			
			Captive_usd_mmbtu = nf.format(captive_usd_mmbtu);
			Captive_inr_mmbtu = nf.format(captive_inr_mmbtu);			
						
			Sales_mmbtu_total = nf5.format(temp_sales_qty_total);
			
			double consumption_value_usd1 =0 ;
			consumption_value_usd = consumption_qty1 * sales_usage_usd_mmbtu1;
			Consumption_value_usd = nf5.format(consumption_value_usd);	
			
			consumption_value_usd1 = Double.parseDouble(nf.format(consumption_value_usd));	
			
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			////System.out.println("consumption_value_usd1 = "+consumption_value_usd1);
			////System.out.println("consumption_qty = "+consumption_qty);
			////System.out.println("sales_usage_usd_mmbtu1 = "+sales_usage_usd_mmbtu1);
			
			if(sales_usage_qty!=0 && consumption_qty1!=0)
			{
				consumption_value_inr = sales_usage_value_inr1/sales_usage_qty * consumption_qty1;
			}
			else
			{
				consumption_value_inr = 0;
			}
			double consumption_value_inr1 = 0;
			consumption_value_inr1 = Double.parseDouble(nf.format(consumption_value_inr));	
			Consumption_value_inr = nf5.format(consumption_value_inr);
			
			double cost_sales_usd = 0;
			
			cost_sales_usd = temp_sales_qty_total1 * sales_usage_usd_mmbtu1;
			Cost_sales_usd = nf5.format(cost_sales_usd);
			Cost_sales_usd1 = nf1.format(cost_sales_usd);
			
			double cost_sales_inr = 0;
			cost_sales_inr = sales_usage_value_inr1 - consumption_value_inr;
			Cost_sales_inr = nf5.format(cost_sales_inr);
			
			//For Gross Margin
			Margin_value_usd = nf5.format(temp_margin_value_usd);
			Margin_value_inr = nf5.format(temp_margin_value_inr);
			
			if(temp_sales_qty_total!=0)
			{
				margin_rate = temp_margin_value_usd / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_rate = nf.format(margin_rate);
			
			if(temp_sales_qty_total!=0)
			{
				margin_inr_mmbtu = temp_margin_value_inr / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_inr_mmbtu = nf.format(margin_inr_mmbtu);
			
			double margin_sales_value_usd = 0;
			//System.out.println("kkk");
			margin_sales_value_usd = cost_sales_usd;
			Margin_sales_value_usd = nf5.format(margin_sales_value_usd);	
			
			double margin_sales_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_rate = margin_sales_value_usd /temp_sales_qty_total1;
			}
			else
			{
				margin_sales_rate = 0;
			}
			//"MILAN>>>";//
			Margin_sales_rate = nf.format(margin_sales_rate);
			
			double margin_sales_inr = 0 ;
			double margin_sales_inr1 = 0 ;
			margin_sales_inr = cost_sales_inr;
			Margin_sales_inr = nf5.format(margin_sales_inr);
			if(margin_sales_inr>0)
			{
				margin_sales_inr1 = Double.parseDouble(nf1.format(margin_sales_inr));
			}
			
			double margin_sales_inr_mmbtu = 0 ;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_inr_mmbtu = margin_sales_inr1/temp_sales_qty_total1;
			}
			else
			{
				margin_sales_inr_mmbtu = 0;
			}			
			Margin_sales_inr_mmbtu = nf.format(margin_sales_inr_mmbtu);
			////System.out.println("margin_sales_inr = "+margin_sales_inr);
			////System.out.println("temp_sales_qty_total1 = "+temp_sales_qty_total1);
			
			double gross_margin_value_usd = 0;
			gross_margin_value_usd = temp_margin_value_usd - margin_sales_value_usd;
			//mm
			Gross_margin_value_usd = nf5.format(gross_margin_value_usd);
			
			double gross_margin_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_rate = gross_margin_value_usd/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_rate = 0;
			}
			Gross_margin_rate = nf.format(gross_margin_rate);
			
			double gross_margin_value_inr = 0;
			gross_margin_value_inr = temp_margin_value_inr - margin_sales_inr;
			Gross_margin_value_inr = nf5.format(gross_margin_value_inr);
			
			double gross_margin_inr_mmbtu = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_inr_mmbtu = gross_margin_value_inr/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_inr_mmbtu = 0;
			}
			
			Gross_margin_inr_mmbtu = nf.format(gross_margin_inr_mmbtu);
			
			//For Variable Costs
			////System.out.println("month = "+month);
			////System.out.println("year = "+year);
			double sales_qty = 0;
			
			queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
					       "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND (GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					       "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
			}					
			
			double check_value_usd = 0;
			double check_value_inr = 0;
			check_value_usd = captive_value_usd1 - consumption_value_usd1;
			check_value_inr = captive_value_inr1 - consumption_value_inr1;
			
			//System.out.println("captive_value_usd1 = "+captive_value_usd1+",  consumption_value_usd1 = "+consumption_value_usd1);
			if(captive_value_usd1==consumption_value_usd1)
			{
				Check_value_usd = "0";
			}
			else
			{
				Check_value_usd = nf5.format(check_value_usd);
			}
			
			if(captive_value_inr1==consumption_value_inr1)
			{
				Check_value_inr = "0";
			}
			else
			{
				Check_value_inr = nf5.format(check_value_inr);
			}			
			
			double final_value_usd = 0;
			final_value_usd = captive_value_usd1 + variance_value_usd;
			Final_value_usd = nf5.format(final_value_usd);

			double final_value_inr = 0;
			final_value_inr = captive_value_inr1 + variance_value_inr;
			Final_value_inr = nf5.format(final_value_inr);
			
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>> "+month+" "+year);
			//System.out.println(Gross_margin_value_inr);
			//System.out.println(Gross_margin_value_usd);
			//System.out.println(Margin_sales_inr);
			//System.out.println(Margin_sales_value_usd);
			//System.out.println(Margin_value_inr);
			//System.out.println(Margin_value_usd);
			//System.out.println(sales_qty_total);
			//Sales_Usage_qty
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>");
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Stock_Valuation_NEW()"+e);
			e.printStackTrace();			
		}
	}

	
	//Following Method Has Been Last Modified By Samik Shah On 9th September, 2011 ... 
	public void get_Stock_Valuation_OLD()
	{/*
		try
		{
			double total_closing_vol = 0;
			double closing_bal1 = 0;
			//MD007
			
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			
			queryString = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset=stmt.executeQuery(queryString);
			if(rset.next())
			{
				to_dt = rset.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			//FOR OPENING STOCK i.e. TANK READING OF CURRENT MONTH
			double opening_bal1 = 0;
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
						   "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
			//System.out.println("Select OPENING Stock Details Query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				opening_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				opening_bal1 = 0;
			}
						
			double total_value_usd_opening = 0;
			double total_value_usd_opening_basic = 0;
			double total_value_usd_opening1 = 0;
			double total_value_inr_opening = 0;
			double total_value_inr_opening_basic = 0;
			double qty = 0 ;
			double total_vol_opening = 0 ;
			double conf_price = 0;
			String ship_cd = "";			
			Vector temp_inv_amt = new Vector();
			Vector temp_CONFIRM_VOL =new Vector();;	
			Vector temp_VALUE_USD=new Vector();;
			Vector temp_VALUE_INR=new Vector();;

			double total_value_inr = 0;
			double total_value_usd = 0;	
			double total_vol = 0;
			double final_total_volume = 0;

			double total_inr_mmbtu = 0;
			boolean break_flag = false;
			
			if(opening_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.ACT_ARRV_DT<to_date('"+from_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT DESC";										
				//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 4>>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;
						
						CARGO_REF_CD.add(rset.getString(1));
						INVOICE_DT2.add(rset.getString(3)==null?"":rset.getString(3));
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						
						////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							temp_inv_amt.add("0");
							conf_price = 0.0;
							temp_qty = 0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty_2 = 0;
						}
						
						if(opening_bal1>total_vol)
						{
							
						}
						else
						{
							temp_qty -= (total_vol - opening_bal1);
							total_vol = opening_bal1;
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						temp_CONFIRM_VOL.add(""+qty);
						CONFIRM_VOL.add(nf5.format(qty));	
						CONFIRM_PRICE.add(nf2.format(conf_price));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd = "2"; //SBI TT Selling Exchange Rate
						String exchg_rate = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
							GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
						}
						else
						{
							GROUP_FOREIGN_EXCHG_RATE.add("0");
						}
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						if(temp_qty_2>0.01)
						{
							//cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_custom_duty_usd/temp_qty_2)); //Commented By Samik Shah On 8th September, 2011 ...
						}
						
						queryString1 = "SELECT TAX_STR_CD,APP_DATE FROM FMS7_CARGO_TAX_MST WHERE " +
									  "APP_DATE<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY') " +
									  "ORDER BY APP_DATE DESC";
						//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())	
						{
							tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
						
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
									   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
									   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
						////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							String tax_cd = rset1.getString(1);
							String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
												
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset1.getString(2)))/100);
							}
							else if(rset1.getString(3).equals("2"))
							{
								queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
											   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
											   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
								////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
						 		rset2=stmt2.executeQuery(queryString2);
						 		if(rset2.next())
						 		{
							 			if(rset2.getString(3).equals("1"))
										{
											tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset2.getString(2)))/100);
										}
										
							 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
						 		}
						 		else
						 		{
						 			tax_amt = ""+0.00;
						 		}			 		
							}
							else
							{
								tax_amt = ""+0.00;
							}
							
							cd_charge_per_mmbtu += Double.parseDouble(tax_amt);
						}
						
						//CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						temp_VALUE_USD.add(nf1.format(value_usd));
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						total_cost_per_mmbtu = temp_value_usd/qty;
						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
						VALUE_USD.add(nf5.format(value_usd));
						total_value_usd += temp_value_usd;
						total_value_usd_opening += temp_value_usd;						
						total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						double temp_value_inr = 0;
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						VALUE_INR.add(nf5.format(value_inr));
						temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						temp_VALUE_INR.add(nf1.format(value_inr));
						total_value_inr += temp_value_inr;
						total_value_inr_opening += temp_value_inr;
						total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						if(qty!=0)
						{
							inr_mmbtu = temp_value_inr/qty;
							INR_MMBTU.add(nf.format(inr_mmbtu));
						}
						else
						{
							INR_MMBTU.add("0.00");
						}
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							 SHIP_NM.add("");
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
			
			//FOR CLOSING STOCK i.e. TANK READING OF NEXT MONTH
			String month_int = "";
			String year_int = year;
			if(Integer.parseInt(month)==12)
			{
				month_int ="01";
				year_int= ""+(Integer.parseInt(year)+1);
			}
			else
			{
				if((Integer.parseInt(month)+1)<10)
				{
					month_int = "0"+(Integer.parseInt(month)+1);
				}
				else
				{
					month_int = ""+(Integer.parseInt(month)+1);
				}					
			}
			
			////System.out.println("month_int = "+month_int);
			////System.out.println("year_int = "+year_int);
			
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
	          			   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
			//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				closing_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				closing_bal1 = 0;
			}
			
			if(closing_bal1!=0)
			{
				Total_Closing_vol = nf5.format(closing_bal1);
				total_closing_vol = closing_bal1;
				closing_bal += closing_bal1;
			}
			else
			{
				Total_Closing_vol = "0";
				total_closing_vol = 0;
				closing_bal += 0;
			}
			////System.out.println("Total_Closing_vol = "+Total_Closing_vol);		
			
			Vector temp_inv_amt1 = new Vector();			
			Vector temp_CONFIRM_VOL1 = new Vector();
			Vector temp_VALUE_USD1 = new Vector();
			Vector temp_VALUE_INR1 = new Vector();	
		
					
			double total_usd_per_mmbtu = 0;
			double total_inr_per_usd = 0;
			
			break_flag = false;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
						  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
						  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) AND " +
						  "(to_date('"+to_dt+"','dd/mm/yyyy')) ORDER BY A.ACT_ARRV_DT DESC";										
			//System.out.println("Confirmed Cargo Arrival Details Query 2nd = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				if(!rset.getString(1).trim().equals("0"))
				{
					double temp_qty = 0;
					double temp_qty_2 = 0;
					double final_seller_inv_amt_usd = 0;
					
					CARGO_REF_CD1.add(rset.getString(1));
					INVOICE_DT1.add(rset.getString(3)==null?"":rset.getString(3));
					String crg_ref = rset.getString(1);
					String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
					
					////System.out.println("closing_bal_prev = "+closing_bal_prev);
					queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
								   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
				  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
						temp_inv_amt1.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
						final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
						total_vol += Double.parseDouble(nf1.format(temp_qty));
					}
					else
					{					
						temp_inv_amt1.add("0");
						conf_price = 0.0;
						temp_qty = 0;
						final_seller_inv_amt_usd = 0.0;
						temp_qty_2 = 0;
					}
					
					qty = Double.parseDouble(nf1.format(temp_qty));
					temp_CONFIRM_VOL1.add(""+qty);
					CONFIRM_VOL1.add(nf5.format(qty));	
					CONFIRM_PRICE1.add(nf2.format(conf_price));
					total_vol_opening += qty;
										
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="2"; //SBI TT Selling Exchange Rate ...
					String exchg_rate="";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
								   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
					}				
					
					if(foreign_exchg_rate>0)
					{
						GROUP_FOREIGN_EXCHG_RATE1.add(nf2.format(foreign_exchg_rate));
					}
					else
					{
						GROUP_FOREIGN_EXCHG_RATE1.add("0");
					}
					
					String prov_custom_duty_payment_dt = "";
					String final_custom_duty_payment_dt = "";
					double total_custom_duty_inr = 0;
					double prov_custom_duty_inr = 0;
					double addl_custom_duty_inr = 0;
					double total_custom_duty_usd = 0;
					double prov_custom_duty_usd = 0;
					double addl_custom_duty_usd = 0;
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
					}
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
					}
					
					double foreign_exchg_rate_2 = 0;
					String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_2 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
								   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
					}
					
					double foreign_exchg_rate_3 = 0;
					String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_3 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
								   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
					}
					
					String cut_off_dt = "31/07/2011";
					int diff_in_days = 0;
					
					String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						diff_in_days = rset2.getInt(1);
					}
					
					if(diff_in_days>0)
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
						}
					}
					else
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
						}
						
						if(foreign_exchg_rate_3>0.0001)
						{
							addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
						}
						
						if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
						{
							total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
						}
					}
					
					//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
					//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
					String tax_amt = "";
					String tax_str_cd = "0";
					double cd_charge_per_mmbtu = 0;
					
					if(temp_qty_2>0.01)
					{
						//cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_custom_duty_usd/temp_qty_2)); //Commented By Samik Shah On 8th September, 2011 ...
					}
					
					queryString1 = "SELECT TAX_STR_CD,APP_DATE FROM FMS7_CARGO_TAX_MST WHERE " +
								  "APP_DATE<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY') " +
								  "ORDER BY APP_DATE DESC";
					//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())	
					{
						tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}
					
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
								   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
								   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						String tax_cd = rset1.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
											
						if(rset1.getString(3).equals("1"))
						{
							tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset1.getString(2)))/100);
						}
						else if(rset1.getString(3).equals("2"))
						{
							queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
							////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
					 		rset2=stmt2.executeQuery(queryString2);
					 		if(rset2.next())
					 		{
					 			if(rset2.getString(3).equals("1"))
								{
									tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset2.getString(2)))/100);
								}
								
					 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
					 		}
					 		else
					 		{
					 			tax_amt = ""+0.00;
					 		}			 		
						}
						else
						{
							tax_amt = ""+0.00;
						}
						
						cd_charge_per_mmbtu += Double.parseDouble(tax_amt);
					}
					
					//CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
									
					double value_usd = 0;
					double value_inr = 0;
					double inr_mmbtu = 0;
					double total_cost_per_mmbtu = 0;
					
					double temp_value_usd = 0;      				
   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
					value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
					temp_VALUE_USD1.add(nf1.format(value_usd));
					temp_value_usd = Double.parseDouble(nf1.format(value_usd));
					total_cost_per_mmbtu = temp_value_usd/qty;
					cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
					CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu));
					VALUE_USD1.add(nf5.format(value_usd));
					total_value_usd += temp_value_usd;
					total_value_usd_opening += temp_value_usd;					
					total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
					
					double temp_value_inr = 0;    
					//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
					value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
					VALUE_INR1.add(nf5.format(value_inr));
					temp_value_inr = Double.parseDouble(nf1.format(value_inr));
					temp_VALUE_INR1.add(nf1.format(value_inr));
					total_value_inr += temp_value_inr;
					total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
					
					if(qty!=0)
					{
						inr_mmbtu = temp_value_inr/qty;
						INR_MMBTU1.add(nf.format(inr_mmbtu));
					}
					else
					{
						INR_MMBTU1.add("0.00");
					}
					
					ship_cd = "0";
					queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
								   "CARGO_REF_CD='"+crg_ref+"'";
					//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}
								
					queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
					//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						SHIP_NM1.add(rset2.getString(1)==null?"":rset2.getString(1));
					}
					else
					{
						 SHIP_NM1.add("");
					}
				}
			}
			
			Total_vol = nf5.format(total_vol);
			final_total_volume = total_vol;
			Total_value_usd = nf5.format(total_value_usd);
			if(total_vol!=0)
			{
				total_usd_per_mmbtu = total_value_usd/total_vol;
			}
			else
			{
				total_usd_per_mmbtu = 0;
			}
			double total_usd_per_mmbtu1 = 0;
			total_usd_per_mmbtu1 = Double.parseDouble(nf2.format(total_usd_per_mmbtu));
			Total_usd_per_mmbtu = nf2.format(total_usd_per_mmbtu);
			Total_value_inr = nf5.format(total_value_inr);			
            ////System.out.println("Priyanka     total_usd_per_mmbtu = "+total_usd_per_mmbtu);
            ////System.out.println("Priyanka     total_inr_mmbtu = "+total_inr_mmbtu);
			
			if(total_vol!=0)
			{
				total_inr_mmbtu = total_value_inr/total_vol;
			}
			else
			{
				total_inr_mmbtu = 0;
			}
			double total_inr_mmbtu1 = 0;
			total_inr_mmbtu1 = Double.parseDouble(nf2.format(total_inr_mmbtu));
			Total_inr_mmbtu = nf2.format(total_inr_mmbtu);
			
			if(total_usd_per_mmbtu1!=0)
			{
				total_inr_per_usd = total_inr_mmbtu1/total_usd_per_mmbtu1;
			}
			else
			{
				total_inr_per_usd = 0;
			}
			Total_inr_per_usd= nf2.format(total_inr_per_usd);
			
			//FOR CLOSING STOCK --- AT COST
			
			double total_Closing_value_usd = 0;
			double total_Closing_usd_mmbtu = 0;
			double total_Closing_value_inr = 0;
			double total_Closing_inr_per_usd = 0;
			double total_Closing_inr_mmbtu = 0;
			
			double variance_vol = 0;
			double variance_value_usd = 0;
			double variance_value_inr = 0;
			
			double closing_total_inr_mmbtu = 0;
			
			double closing_total_value_usd= 0;		
			double closing_total_value_inr= 0;	
			double closing_qty = 0 ;
			double closing_conf_price = 0;
			String closing_ship_cd = "";			
			Vector closing_temp_inv_amt = new Vector();			
			Vector closing_temp_tot_cd_amt = new Vector();
			Vector closing_temp_tot_pay_refund = new Vector();
			Vector closing_temp_CONFIRM_VOL = new Vector();	
			Vector closing_temp_VALUE_USD = new Vector();
			Vector closing_temp_VALUE_INR = new Vector();
			Vector CLOSING_INVOICE_DT = new Vector();
			
			break_flag = false;
			total_vol = 0;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			if(closing_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.ACT_ARRV_DT<=to_date('"+to_dt+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT DESC";										
				//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 5>>>>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;
						
						CLOSING_CARGO_REF_CD.add(rset.getString(1));
						CLOSING_INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						
						////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							closing_temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							closing_temp_inv_amt.add("0");
							conf_price = 0.0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty = 0;
							temp_qty_2 = 0;
						}
						
						if(closing_bal1>total_vol)
						{
							
						}
						else
						{
							temp_qty -= (total_vol - closing_bal1);
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						closing_temp_CONFIRM_VOL.add(""+qty);
						CLOSING_CONFIRM_VOL.add(nf5.format(qty));	
						CLOSING_CONFIRM_PRICE.add(nf2.format(conf_price));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="2";
						String exchg_rate="";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
							CLOSING_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
						}
						else
						{
							CLOSING_GROUP_FOREIGN_EXCHG_RATE.add("0");
						}
						
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						if(temp_qty_2>0.01)
						{
							//cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_custom_duty_usd/temp_qty_2)); //Commented By Samik Shah On 8th September, 2011 ...
						}
						
						queryString1 = "SELECT TAX_STR_CD,APP_DATE FROM FMS7_CARGO_TAX_MST WHERE " +
									  "APP_DATE<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY') " +
									  "ORDER BY APP_DATE DESC";
						//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())	
						{
							tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
						
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
									   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
									   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
						////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							String tax_cd = rset1.getString(1);
							String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
												
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset1.getString(2)))/100);
							}
							else if(rset1.getString(3).equals("2"))
							{
								queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
											   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
											   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
								////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
						 		rset2=stmt2.executeQuery(queryString2);
						 		if(rset2.next())
						 		{
							 			if(rset2.getString(3).equals("1"))
										{
											tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset2.getString(2)))/100);
										}
										
							 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
						 		}
						 		else
						 		{
						 			tax_amt = ""+0.00;
						 		}			 		
							}
							else
							{
								tax_amt = ""+0.00;
							}
							
							cd_charge_per_mmbtu += Double.parseDouble(tax_amt);
						}
						
						//CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						closing_temp_VALUE_USD.add(nf1.format(value_usd));
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						total_cost_per_mmbtu = temp_value_usd/qty;
						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
						CLOSING_VALUE_USD.add(nf5.format(value_usd));
						total_Closing_value_usd += temp_value_usd;						
						total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));					
						
						double temp_value_inr = 0;    
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						CLOSING_VALUE_INR.add(nf5.format(value_inr));
						temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						closing_temp_VALUE_INR.add(nf1.format(value_inr));
						total_Closing_value_inr += temp_value_inr;
												
						if(qty!=0)
						{
							inr_mmbtu = temp_value_inr/qty;
							CLOSING_INR_MMBTU.add(nf.format(inr_mmbtu));
						}
						else
						{
							CLOSING_INR_MMBTU.add("0.00");
						}
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							CLOSING_SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							CLOSING_SHIP_NM.add("");
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
									
			double total_Closing_value_usd1 = 0;				
			//Total_Closing_value_usd = nf5.format(total_Closing_value_usd);	
			total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
					
			
			//For Closing stock at NRV		
			String temp_to_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int)+1);	
			String temp_from_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int));
			////System.out.println("temp_to_dt = "+temp_to_dt);
			////System.out.println("temp_from_dt = "+temp_from_dt);		
			double sum_qty1 = closing_bal1;
			double sum_qty = 0;
			int count = 0;
			double remaining_qty = 0;
			double sn_rate = 0;
			double nrv_foreign_exchg_rate = 0;
			double sale_usd = 0;
			double nrv_value_inr=0;
			double nrv_inr_mmbtu = 0;
			
			double nrv_rate = 0;
			double sum_nrv_value_usd = 0;
			double sum_nrv_value_inr = 0;
			double sum_nrv_inr_mmbtu = 0;
			double total_sum_inr_mmbtu = 0;
			double final_nrv_value_usd = 0;
			
			double total_qty = 0;
			double total_sum_value_usd = 0;
			double total_rate = 0;
			double total_sum_value_inr = 0;
			double total_nvr_inr_mmbtu = 0;
			double mmbtu_qty = 0;

			double nrv_rate1 = 0;
			
			String month_int_2 = temp_from_dt.substring(3,5);
			String year_int_2 = temp_from_dt.substring(6);
			
			if(Integer.parseInt(month_int_2)==12)
			{
				month_int_2 = "01";
				year_int_2 = ""+(Integer.parseInt(year_int_2)+1);
			}
			else
			{
				if((Integer.parseInt(month_int_2)+1)<10)
				{
					month_int_2 = "0"+(Integer.parseInt(month_int_2)+1);
				}
				else
				{
					month_int_2 = ""+(Integer.parseInt(month_int_2)+1);
				}					
			}
			
			String temp_from_dt2 = "01/"+month_int_2+"/"+year_int_2;
			
			//Following Query Is Commented By Samik Shah On 16th July, 2011 ...
		    queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "A.END_DT<TO_DATE('"+temp_to_dt+"','dd/mm/yyyy') AND " +
					      "A.END_DT>=TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') AND A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.RATE";
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
			//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
			stmt.executeUpdate(queryString);
			conn.commit();
			
			//Following Query Is Introduced By Samik Shah On 16th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						  "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						  "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
					      "A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.START_DT";
			
			//System.out.println("SAMIK --> SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "S";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='S'"; 

				//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_SN_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			
			//Following Query Is Introduced By Samik Shah On 16th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString =  "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						   "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						   "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD FROM FMS7_LOA_MST A WHERE " +
						   "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						   "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						   "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
						   "A.TCQ IS NOT NULL AND " +
						   "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
						   "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
						   "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO) ORDER BY A.START_DT";
			
			//System.out.println("LOA DETAILS FROM FMS7_LOA_MST = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "L";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = "0";
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='L'"; 

				//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_LOA_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			conn.commit();
			
			String max_start_date = "";
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT to_char(MAX(START_DT),'dd/mm/yyyy') FROM FMS7_TEMP_STOCK_VALUATION";
			//System.out.println("Query for finding-out MAX Signing Date for Stock Valuation = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				max_start_date = rset.getString(1)==null?"":rset.getString(1);
			}
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD," +
						  "A.CUSTOMER_NM,A.ALLOC_QTY,A.DIFF_QTY,CONTRACT_TYPE " +
						  "FROM FMS7_TEMP_STOCK_VALUATION A ORDER BY A.START_DT";
			
			//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{		
				String temp_sn_rate = "";
				String sn_ref_no = "";
				String cont_type_dtl = "";
				
				String cont_type = rset.getString(14)==null?"":rset.getString(14);
								
				String temp_cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String temp_sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String temp_fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String temp_sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String temp_fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				
				if(cont_type.trim().equalsIgnoreCase("S"))
				{
					queryString1 = "SELECT NVL(SN_REF_NO,' ') FROM FMS7_SN_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND FGSA_NO="+temp_fgsa_no+" AND " +
								   "FGSA_REV_NO="+temp_fgsa_rev_no+" AND SN_NO="+temp_sn_no+" AND " +
								   "SN_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "SN";
				}
				else if(cont_type.trim().equalsIgnoreCase("L"))
				{
					queryString1 = "SELECT NVL(LOA_REF_NO,' ') FROM FMS7_LOA_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND TENDER_NO="+temp_fgsa_no+" AND " +
								   "LOA_NO="+temp_sn_no+" AND LOA_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "LOA";
				}
				
				if(sn_ref_no.trim().equals(""))
				{
					sn_ref_no = cont_type_dtl+" - "+temp_sn_no;
				}
				else
				{
					sn_ref_no = cont_type_dtl+" - "+sn_ref_no;
				}
				
				TCQ.add(rset.getString(1)==null?"0":rset.getString(1));
				RATE.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
				temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
				SN_NO2.add(sn_ref_no);
				SIGNING_DT2.add(rset.getString(5)==null?"":rset.getString(5)); //Actually it stores Contract Start Date of SN/LOA
				FGSA_NO2.add(rset.getString(7)==null?"0":rset.getString(7));
				SN_REV_NO2.add(rset.getString(8)==null?"0":rset.getString(8));
				FGSA_REV_NO2.add(rset.getString(9)==null?"0":rset.getString(9));
				CUSTOMER_CODE.add(rset.getString(10)==null?"0":rset.getString(10));
				
				sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
				
				CUSTOMER_NM.add(rset.getString(11)==null?"":rset.getString(11));
								
				String tcq = rset.getString(1)==null?"0":rset.getString(1);
				String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
				mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
				QTY.add(nf5.format(mmbtu_qty));					
								
				sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
				SALE_USD.add(nf5.format(sale_usd));
				
				sum_qty += mmbtu_qty;		
				Sum_qty = nf5.format(sum_qty);
				
				sum_nrv_value_usd += sale_usd;	
				if(sum_nrv_value_usd!=0)
				{
					Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				}
				else
				{
					Sum_nrv_value_usd = "0";
				}
				
				exchg_rate_cd = "5";
				String nrv_exchg_rate = "";					
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
							   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
							   "EFF_DT=TO_DATE('"+to_dt+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					nrv_exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					nrv_foreign_exchg_rate=Double.parseDouble(nrv_exchg_rate);
				}				
				
				if(nrv_foreign_exchg_rate>0)
				{
					NRV_FOREIGN_EXCHG_RATE.add(nf.format(nrv_foreign_exchg_rate));
				}
				else
				{
					NRV_FOREIGN_EXCHG_RATE.add("0");
				}
				
				nrv_value_inr = Double.parseDouble(nf1.format(nrv_foreign_exchg_rate * sale_usd));
				if(nrv_value_inr>0)
				{
					NRV_VALUE_INR.add(nf5.format(nrv_value_inr));
				}
				else
				{
					NRV_VALUE_INR.add("0");
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * sn_rate;
				
				if(nrv_inr_mmbtu>0)
				{
					NRV_INR_MMBTU.add(nf.format(nrv_inr_mmbtu));
				}
				else
				{
					NRV_INR_MMBTU.add("0");
				}
				
				if(sum_qty!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}
				
				if(sum_nrv_value_inr!=0)
				{
					Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				}
				else
				{
					Sum_nrv_value_inr = "0";
				}
				if(nrv_rate1!=0 && nrv_foreign_exchg_rate!=0)
				{
					sum_nrv_inr_mmbtu =  nrv_rate1 * nrv_foreign_exchg_rate;
					Sum_nrv_inr_mmbtu = nf.format(sum_nrv_inr_mmbtu);
				}
				else
				{
					Sum_nrv_inr_mmbtu = "0";
				}
				////System.out.println("nrv_rate"+nrv_rate);
				////System.out.println("nrv_rate1"+nrv_rate1);
				////System.out.println("nrv_foreign_exchg_rate"+nrv_foreign_exchg_rate);
				if(nrv_foreign_exchg_rate!=0)
				{
					Nrv_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);	
				}
				else
				{
					Nrv_foreign_exchange_rate = "0";
				}					
				
				if(sum_qty>closing_bal1)
				{
					remaining_qty = closing_bal1 - (sum_qty - mmbtu_qty);
					++count;
					break;							
				}					
			}		
				
			if(count>0)
			{
				sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				Sum_qty = nf5.format(sum_qty);					
				QTY.setElementAt(nf5.format(remaining_qty),QTY.size()-1);
				mmbtu_qty = remaining_qty;					
				
				sum_nrv_value_usd = sum_nrv_value_usd - sale_usd;				
				sale_usd = Double.parseDouble(nf1.format(Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)))) * mmbtu_qty));
				SALE_USD.setElementAt(nf5.format(sale_usd),SALE_USD.size()-1);	
				sum_nrv_value_usd += sale_usd;
				Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				
				sum_nrv_value_inr = sum_nrv_value_inr - Double.parseDouble(nf1.format(nrv_value_inr));				
				nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
				NRV_VALUE_INR.setElementAt(nf5.format(nrv_value_inr),NRV_VALUE_INR.size()-1);
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				
				//sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				//Sum_qty = nf5.format(sum_qty);
				total_qty = sum_qty;
				if(sum_qty!=0 && sum_nrv_value_usd!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}				
			}
			else
			{				
				String test_rate = "0";
				if(!max_start_date.trim().equals(""))
				{
			   	 	for(int i=0; i<SIGNING_DT2.size(); i++)
			   	 	{
			   	 		if(!(""+SIGNING_DT2.elementAt(i)).trim().equals(""))
			   	 		{	
				   	 		if((""+SIGNING_DT2.elementAt(i)).trim().equals(max_start_date))
				   	 		{
				   	 			test_rate = ""+RATE.elementAt(i);
				   	 			break;
				   	 		}
			   	 		}
			   	 	}
			   	 	
				}
				
			   	remaining_qty = closing_bal1 - sum_qty;
				double temp_remaining_qty = 0;
				temp_remaining_qty = Double.parseDouble(nf1.format(remaining_qty));
				if(temp_remaining_qty>0)
				{
					Test_qty = nf5.format(temp_remaining_qty);
				}
				else
				{
					Test_qty = "0";
				}	
				
				double temp_test_rate = 0;
				temp_test_rate = Double.parseDouble(nf.format(Double.parseDouble(test_rate)));
				
				if(!test_rate.trim().equals("") && test_rate!=null)
				{
					Test_rate= nf.format(Double.parseDouble(test_rate));
				}
				else
				{
					Test_rate = "0";
				}
				
				sale_usd = temp_remaining_qty * temp_test_rate;
				double temp_sale_usd = 0;
				temp_sale_usd = Double.parseDouble(nf1.format(sale_usd));
				if(temp_sale_usd!=0)
				{
					Test_sale_usd = nf5.format(temp_sale_usd);
				}
				else
				{
					Test_sale_usd = "0" ;
				}
				sum_nrv_value_usd += temp_sale_usd;
				Temp_value_usd = nf1.format(temp_sale_usd);
				
				CUSTOMER_CODE.add("");
				FGSA_REV_NO.add("");
				SN_REV_NO.add("");
				FGSA_NO.add("");
				TCQ.add("");
				SIGNING_DT2.add("");
				CUSTOMER_NM.add("");
				if(nrv_foreign_exchg_rate>0)
				{
					Test_exch_rate = nf.format(nrv_foreign_exchg_rate);
				}
				else
				{
					Test_exch_rate = "0";
				}
				
				if(nrv_foreign_exchg_rate!=0 && sale_usd!=0)
				{
					nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
					Test_value_inr = nf5.format(nrv_value_inr);
				}
				else
				{
					Test_value_inr = "0";
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Temp_value_inr = nf1.format(nrv_value_inr);
				
				double temp_nrv_inr_mmbtu = 0;
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * Double.parseDouble(test_rate);
				temp_nrv_inr_mmbtu += Double.parseDouble(nf.format(nrv_inr_mmbtu));
				if(nrv_inr_mmbtu!=0)
				{
						Test_inr_mmbtu = nf.format(temp_nrv_inr_mmbtu);
				}
				else
				{
					Test_inr_mmbtu ="0";
				}	
				sum_nrv_inr_mmbtu = sum_nrv_inr_mmbtu + temp_nrv_inr_mmbtu;
			}	
			
			if(sum_qty<total_closing_vol)
			{
				total_qty = sum_qty + Double.parseDouble(nf1.format(remaining_qty));
			}
			else
			{
				total_qty +=0;
			}			
			if(total_qty>0)
			{
				Total_qty = nf5.format(total_qty);
			}
			else
			{
				Total_qty = "0";
				total_qty = 0;
			}	
			double total_sum_value_usd1 = 0;
			total_sum_value_usd = sum_nrv_value_usd;
			total_sum_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd));
			Total_sum_value_usd = nf5.format(total_sum_value_usd);
			
			double closing_stock_usd = 0;
			double closing_stock_inr = 0;
			double closing_stock_nrv_usd = 0;
			double closing_stock_nrv_inr = 0;
			
			queryString6 = "SELECT NVL(CLOSING_STOCK_NRV_USD,'0'), NVL(CLOSING_STOCK_NRV_INR,'0'), " +
						   "NVL(CLOSING_STOCK_USD,'0'), NVL(CLOSING_STOCK_INR,'0') " +
						   "FROM FMS7_STOCK_VALUATION WHERE " +
						   "MONTH='"+month+"' AND YEAR="+year+"";
			rset6 = stmt6.executeQuery(queryString6);
			while(rset6.next())
			{
				closing_stock_nrv_usd = rset6.getDouble(1);
				closing_stock_nrv_inr = rset6.getDouble(2);
				closing_stock_usd = rset6.getDouble(3);
				closing_stock_inr = rset6.getDouble(4);
			}
			
			Closing_Stock_USD = nf1.format(closing_stock_usd);
			Closing_stock_NRV_USD = nf1.format(closing_stock_nrv_usd);
			Closing_Stock_INR = nf1.format(closing_stock_inr);
			Closing_stock_NRV_INR = nf1.format(closing_stock_nrv_inr);
			
			//Mininmum of Cost or NRV
			if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
				if(closing_stock_nrv_usd<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(closing_stock_nrv_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(closing_stock_nrv_usd));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			else
			{
				if(total_sum_value_usd1<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(total_sum_value_usd1);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd1));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			////System.out.println("total_sum_value_usd1 = "+total_sum_value_usd1);				
			////System.out.println("total_Closing_value_usd = "+total_Closing_value_usd);			
			////System.out.println("Total_Closing_value_usd = "+Total_Closing_value_usd);			
			////System.out.println("total_Closing_value_usd1 = "+total_Closing_value_usd1);
			
			if(total_closing_vol!=0)
			{
				total_Closing_usd_mmbtu = total_Closing_value_usd1/total_closing_vol;
			}
			else
			{
				total_Closing_usd_mmbtu = 0;
			}
			Total_Closing_usd_mmbtu = nf.format(total_Closing_usd_mmbtu);				
			
			variance_vol = closing_bal1-opening_bal1;
			if(variance_vol>=0)
			{
				Variance_vol = nf5.format(variance_vol);
			}
			else
			{
				variance_vol = (-1) * variance_vol;
				Variance_vol = "("+nf5.format(variance_vol)+")";
			}
					
			variance_value_usd = total_Closing_value_usd1 - total_value_usd_opening_basic;
			////System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);

    		if(total_qty!=0)
    		{
    			total_rate = total_sum_value_usd/total_qty;
    			Total_rate = nf.format(total_rate);
    		}
    		else
    		{
    			Total_rate = "0.00";
    		}			
    		total_sum_value_inr = sum_nrv_value_inr ;    		
    		
    		//Minimum of cost of or NRV for value in INR
    		if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
    			if(closing_stock_nrv_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(closing_stock_nrv_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(closing_stock_nrv_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			else
			{
				if(total_sum_value_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(total_sum_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_sum_value_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			//Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
			////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);
			
			if(total_Closing_value_usd1!=0)
			{
				total_Closing_inr_per_usd = total_Closing_value_inr/total_Closing_value_usd1;
			}
			else
			{
				total_Closing_inr_per_usd = 0;
			}
			Total_Closing_inr_per_usd = nf.format(total_Closing_inr_per_usd);
			
			if(total_closing_vol!=0)
			{
				total_Closing_inr_mmbtu = total_Closing_value_inr/total_closing_vol;
			}
			else
			{
				total_Closing_inr_mmbtu = 0;
			}
			Total_Closing_inr_mmbtu = nf.format(total_Closing_inr_mmbtu);
			
			Total_sum_value_inr = nf5.format(total_sum_value_inr);			
			Total_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);			
			total_nvr_inr_mmbtu = sum_nrv_inr_mmbtu; 
			Total_sum_inr_mmbtu = nf.format(total_nvr_inr_mmbtu);	
			
			////System.out.println("variance_value_usd  = "+variance_value_usd);
			if(variance_value_usd>=0)
			{
				Variance_value_usd = nf5.format(variance_value_usd);
				Variance_value_usd1 = nf1.format(variance_value_usd);
			}
			else
			{
				////System.out.println("variance_value_usd  = "+variance_value_usd);
				double variance_value_usd1 = (-1) * variance_value_usd;
				Variance_value_usd = "("+nf5.format(variance_value_usd1)+")";
				Variance_value_usd1 = nf1.format(variance_value_usd);
				////System.out.println("Samik Variance_value_usd1  = "+Variance_value_usd1);
			}
			////System.out.println("Variance_value_usd  = "+ Variance_value_usd);
			////System.out.println("Variance_value_usd1  = "+ Variance_value_usd1);
			
			variance_value_inr = total_Closing_value_inr-total_value_inr_opening_basic;
			if(variance_value_inr>=0)
			{
				Variance_value_inr = nf5.format(variance_value_inr);
				Variance_value_inr1 = nf1.format(variance_value_inr);
			}
			else
			{
				double variance_value_inr1 = (-1) * variance_value_inr;
				Variance_value_inr = "("+nf5.format(variance_value_inr1)+")";
				Variance_value_inr1 = nf1.format(variance_value_inr);				
			}			
			
			
			//For Sales Qty
			double temp_sales_qty_total = 0;
			double temp_sales_qty_total1 = 0;
			double temp_margin_value_usd = 0;
			double temp_margin_value_inr = 0;
			double margin_rate = 0;
			double margin_inr_mmbtu = 0;
			
			double sales_usage_value_usd = 0;
			double sales_usage_value_usd1 = 0;
			sales_usage_value_usd = total_value_usd - total_Closing_value_usd1;
			//
			//System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			//System.out.println("total_value_usd  = "+ total_value_usd);
			
			Sales_Usage_value_usd = nf5.format(sales_usage_value_usd);
			sales_usage_value_usd1 = Double.parseDouble(nf1.format(sales_usage_value_usd));
			
			double sales_usage_value_inr = 0;
			double sales_usage_value_inr1 = 0;
			sales_usage_value_inr = total_value_inr - total_Closing_value_inr;
			Sales_Usage_value_inr = nf5.format(sales_usage_value_inr);
			sales_usage_value_inr1 = Double.parseDouble(nf1.format(sales_usage_value_inr));
			
			setYear(year);
			setMonth(month);
			setTo_year(year);
			setTo_month(month);
			
			get_Sales_dtls();  //Sales Register function called			

			//Following Logic For Calculation Of SUG Netted With Fule Has Been Introduced By Samik Shah On 9th September, 2011 ...
			double sales_regas_qty = 0;
			double regas_qty = 0;
			double re_gas_sug_qty = 0;
			sug_percent = "0";
			
			int temp_cust_cd = 0;
			int temp_re_gas_no = 0;
			int temp_cargo_seq_no = 0;
			
			queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
						   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
						   "FROM FMS7_DAILY_ALLOCATION_DTL " +
						   "WHERE CONTRACT_TYPE='R' AND " +
						   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
						   "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				double temp_sales_regas_qty = 0;
				
				sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				
				temp_cust_cd = rset1.getInt(2);
				temp_re_gas_no = rset1.getInt(3);
				temp_cargo_seq_no = rset1.getInt(4);
				
				sug_percent = "0";
				
				queryString2 = "SELECT SYS_USE_GAS " +
							   "FROM FMS7_RE_GAS_CARGO_DTL " +
							   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
							   "RE_GAS_NO="+temp_re_gas_no+" AND " +
							   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
				rset2 = stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
				}
				
				re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
			}
			//Logic Introduced By Samik Shah On 9th September, 2011 For Finding Out SUG Netted With Fule For The Selected Month Ends Here ...
			
			double flaring = 0;
			double auxiliary_consumption = 0;
			double scv_fuel_consumption = 0;
			double sug = 0;					
			double other_consumption = 0;
			double mass_balancing = 0;
			double consumption_percent = 0;
			double temp_flaring1 = 0;
			double temp_auxiliary_consumption = 0;
			double temp_scv_fuel_consumption = 0;
			double temp_sug = 0;					
			double temp_other_consumption = 0;
			double temp_mass_balancing = 0;
			
			queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
						   "WHERE YEAR='"+year+"' AND MONTH ='"+month+"'";
			//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
				scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
				sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
				other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
				mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
			}				
			if(flaring!=0)
			{
				Flaring = nf5.format(flaring);
				temp_flaring1 = Double.parseDouble(nf1.format(flaring));
			}
			else
			{
				Flaring = "-" ;
				temp_flaring1 = 0;
			}
			
			if(auxiliary_consumption!=0)
			{
				Auxiliary_Consumption = nf5.format(auxiliary_consumption);
				temp_auxiliary_consumption = Double.parseDouble(nf1.format(auxiliary_consumption));
			}
			else
			{
				Auxiliary_Consumption = "-";
				temp_auxiliary_consumption = 0;
			}
			if(scv_fuel_consumption!=0)
			{
				Scv_fuel_consumption = nf5.format(scv_fuel_consumption);
				temp_scv_fuel_consumption = Double.parseDouble(nf1.format(scv_fuel_consumption));
			}
			else
			{
				Scv_fuel_consumption = "-";
				temp_scv_fuel_consumption = 0;
			}
			
			if(re_gas_sug_qty>=0)
			{
				sug = (-1)*re_gas_sug_qty;
			}
			
			if(sug!=0)
			{
				Sug = nf5.format(sug);
				temp_sug = Double.parseDouble(nf1.format(sug));
			}
			else
			{
				Sug = "-";
				temp_sug = 0;
			}
			
			if(other_consumption!=0)
			{
				Other_Consumption = nf5.format(other_consumption);
				temp_other_consumption = Double.parseDouble(nf1.format(other_consumption));
			}
			else
			{
				Other_Consumption = "-" ;
				temp_other_consumption = 0;
			}
			if(mass_balancing!=0)
			{
				Mass_Balancing = nf5.format(mass_balancing);
				temp_mass_balancing = Double.parseDouble(nf1.format(mass_balancing));
			}
			else
			{
				Mass_Balancing = "-";
				temp_mass_balancing = 0;
			}
			
			double captive_consumption = 0;
			double captive_consumption1 = 0;
			captive_consumption = temp_flaring1 + temp_auxiliary_consumption + temp_scv_fuel_consumption + temp_sug + temp_other_consumption + temp_mass_balancing;
			Captive_consumption = nf5.format(captive_consumption);
			captive_consumption1 = Double.parseDouble(nf1.format(captive_consumption));
						
			double flaring_usd_mmbtu = 0;
			double auxiliary_usd_mmbtu = 0;
			double scv_fuel_usd_mmbtu = 0;
			double mass_balancing_usd_mmbtu = 0;
			double sug_usd_mmbtu = 0;
			double other_usd_mmbtu = 0;

			double sales_usage_inr_mmbtu = 0;
			double sales_usage_inr_mmbtu1 = 0;

			double sales_usage_usd_mmbtu = 0;
			double sales_usage_usd_mmbtu1 = 0;
			
			double captive_value_usd = 0;
			double captive_value_usd1 = 0;
			
		
			//For Captive Consumption
			double temp_flaring = 0;
			double temp_total_fuel_gas = 0;
			double consumption_qty = 0;
			double consumption_qty1 = 0;
			double consumption_value_usd = 0;
			double consumption_value_inr = 0;
			
			fetch_Monthly_Energy();
			
			if(Flaring.trim().equals("-") || Flaring.trim().equals(""))
			{
				Flaring = "0";
			}
			if(Total_Fuel_Gas.trim().equals("-") || Total_Fuel_Gas.trim().equals(""))
			{
				Total_Fuel_Gas = "0";
			}
			
			temp_flaring = Double.parseDouble(Flaring);
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			consumption_qty = temp_flaring + temp_total_fuel_gas;
			consumption_qty1 = Double.parseDouble(nf1.format(captive_consumption));
			Consumption_qty = nf5.format(captive_consumption);		
			temp_sales_qty_total = sales_qty_total;
			temp_sales_qty_total1 = Double.parseDouble(nf1.format(sales_qty_total));
			temp_margin_value_usd = sales_gross_amt_usd_total;
			temp_margin_value_inr = sales_qty_amt_inr_total;
						
			double sales_usage_qty = 0;
			double sales_usage_qty1 = 0;
			//sales_usage_qty = temp_sales_qty_total1 + consumption_qty1; //Commented By Samik Shah On 9th September, 2011 ...
			sales_usage_qty = final_total_volume - total_qty;
			Sales_Usage_qty = nf5.format(sales_usage_qty);
			
			sales_usage_qty1 = Double.parseDouble(nf1.format(sales_usage_qty));
			
			if(sales_usage_qty1!=0)
			{
				sales_usage_usd_mmbtu = sales_usage_value_usd1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_usd_mmbtu = 0;
			}
			Sales_Usage_usd_mmbtu = nf.format(sales_usage_usd_mmbtu);
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			
			////System.out.println("sales_usage_value_usd1 = "+sales_usage_value_usd1);
			////System.out.println("sales_usage_qty1 = "+sales_usage_qty1);
			

			
			if(sales_usage_qty1!=0)
			{
				sales_usage_inr_mmbtu = sales_usage_value_inr1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_inr_mmbtu = 0;
			}
			Sales_Usage_inr_mmbtu = nf.format(sales_usage_inr_mmbtu);
			sales_usage_inr_mmbtu1 = Double.parseDouble(nf.format(sales_usage_inr_mmbtu));
			
			
			double flaring_inr_mmbtu = 0;
			double auxiliary_inr_mmbtu = 0;
			double scv_fuel_inr_mmbtu = 0;
			double mass_balancing_inr_mmbtu = 0;
			double sug_inr_mmbtu = 0;
			double other_inr_mmbtu = 0;
			
			flaring_inr_mmbtu = Double.parseDouble(nf1.format(temp_flaring1 * sales_usage_inr_mmbtu1));
			auxiliary_inr_mmbtu = Double.parseDouble(nf1.format(temp_auxiliary_consumption * sales_usage_inr_mmbtu1));
			scv_fuel_inr_mmbtu = Double.parseDouble(nf1.format(temp_scv_fuel_consumption * sales_usage_inr_mmbtu1));
			mass_balancing_inr_mmbtu = Double.parseDouble(nf1.format(temp_mass_balancing * sales_usage_inr_mmbtu1));
			sug_inr_mmbtu = Double.parseDouble(nf1.format(temp_sug * sales_usage_inr_mmbtu1));
			other_inr_mmbtu = Double.parseDouble(nf1.format(temp_other_consumption * sales_usage_inr_mmbtu1));
			
					
			Flaring_inr_mmbtu = nf5.format(flaring_inr_mmbtu);
			Auxiliary_inr_mmbtu = nf5.format(auxiliary_inr_mmbtu);
			Scv_fuel_inr_mmbtu = nf5.format(scv_fuel_inr_mmbtu);
			Mass_balancing_inr_mmbtu = nf5.format(mass_balancing_inr_mmbtu);
			Sug_inr_mmbtu = nf5.format(sug_inr_mmbtu);
			Other_inr_mmbtu = nf5.format(other_inr_mmbtu);
			
			double captive_value_inr = 0;
			double captive_value_inr1 = 0;
			captive_value_inr = flaring_inr_mmbtu + auxiliary_inr_mmbtu + scv_fuel_inr_mmbtu + mass_balancing_inr_mmbtu + sug_inr_mmbtu + other_inr_mmbtu;
			Captive_value_inr = nf5.format(captive_value_inr);
			captive_value_inr1 = Double.parseDouble(nf1.format(captive_value_inr));
			
			double captive_usd_mmbtu = 0;
			double captive_inr_mmbtu = 0;
			
			flaring_usd_mmbtu = temp_flaring1 * sales_usage_usd_mmbtu1;
			auxiliary_usd_mmbtu = temp_auxiliary_consumption * sales_usage_usd_mmbtu1;
			scv_fuel_usd_mmbtu = temp_scv_fuel_consumption * sales_usage_usd_mmbtu1;
			mass_balancing_usd_mmbtu = temp_mass_balancing * sales_usage_usd_mmbtu1;
			sug_usd_mmbtu = temp_sug * sales_usage_usd_mmbtu1;
			other_usd_mmbtu = temp_other_consumption * sales_usage_usd_mmbtu1;
			
			Flaring_usd_mmbtu = nf5.format(flaring_usd_mmbtu);
			Auxiliary_usd_mmbtu = nf5.format(auxiliary_usd_mmbtu);
			Scv_fuel_usd_mmbtu = nf5.format(scv_fuel_usd_mmbtu);
			Mass_balancing_usd_mmbtu = nf5.format(mass_balancing_usd_mmbtu);
			Sug_usd_mmbtu = nf5.format(sug_usd_mmbtu);
			Other_usd_mmbtu = nf5.format(other_usd_mmbtu);
			
			captive_value_usd = flaring_usd_mmbtu + auxiliary_usd_mmbtu + scv_fuel_usd_mmbtu + mass_balancing_usd_mmbtu + sug_usd_mmbtu + other_usd_mmbtu;
			Captive_value_usd = nf5.format(captive_value_usd);
			captive_value_usd1 = Double.parseDouble(nf1.format(captive_value_usd));
			
			if(captive_consumption1!=0)
			{
				captive_usd_mmbtu = captive_value_usd1/captive_consumption1;
				captive_inr_mmbtu = captive_value_inr1/captive_consumption1;
			}
			else
			{
				captive_usd_mmbtu = 0;
				captive_inr_mmbtu = 0;
			}
			
			Captive_usd_mmbtu = nf.format(captive_usd_mmbtu);
			Captive_inr_mmbtu = nf.format(captive_inr_mmbtu);			
						
			Sales_mmbtu_total = nf5.format(temp_sales_qty_total);
			
			double consumption_value_usd1 =0 ;
			consumption_value_usd = consumption_qty1 * sales_usage_usd_mmbtu1;
			Consumption_value_usd = nf5.format(consumption_value_usd);	
			
			consumption_value_usd1 = Double.parseDouble(nf.format(consumption_value_usd));	
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			////System.out.println("consumption_value_usd1 = "+consumption_value_usd1);
			////System.out.println("consumption_qty = "+consumption_qty);
			////System.out.println("sales_usage_usd_mmbtu1 = "+sales_usage_usd_mmbtu1);
			
			if(sales_usage_qty!=0 && consumption_qty1!=0)
			{
				consumption_value_inr = sales_usage_value_inr1/sales_usage_qty * consumption_qty1;
			}
			else
			{
				consumption_value_inr = 0;
			}
			double consumption_value_inr1 = 0;
			consumption_value_inr1 = Double.parseDouble(nf.format(consumption_value_inr));	
			Consumption_value_inr = nf5.format(consumption_value_inr);
						
			double cost_sales_usd = 0;
			cost_sales_usd = temp_sales_qty_total1 * sales_usage_usd_mmbtu1;
			Cost_sales_usd = nf5.format(cost_sales_usd);
			Cost_sales_usd1 = nf1.format(cost_sales_usd);
			
			double cost_sales_inr = 0;
			cost_sales_inr = sales_usage_value_inr1 - consumption_value_inr;
			Cost_sales_inr = nf5.format(cost_sales_inr);
			
			//For Gross Margin
			Margin_value_usd = nf5.format(temp_margin_value_usd);
			Margin_value_inr = nf5.format(temp_margin_value_inr);
			
			if(temp_sales_qty_total!=0)
			{
				margin_rate = temp_margin_value_usd / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_rate = nf.format(margin_rate);
			
			if(temp_sales_qty_total!=0)
			{
				margin_inr_mmbtu = temp_margin_value_inr / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_inr_mmbtu = nf.format(margin_inr_mmbtu);
			
			double margin_sales_value_usd = 0;
			//System.out.println("mm");
			margin_sales_value_usd = cost_sales_usd;
			
			Margin_sales_value_usd = nf5.format(margin_sales_value_usd);	
			
			double margin_sales_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_rate = margin_sales_value_usd /temp_sales_qty_total1;
			}
			else
			{
				margin_sales_rate = 0;
			}
			Margin_sales_rate = nf.format(margin_sales_rate);
			
			double margin_sales_inr = 0 ;
			double margin_sales_inr1 = 0 ;
			margin_sales_inr = cost_sales_inr;
			Margin_sales_inr = nf5.format(margin_sales_inr);
			if(margin_sales_inr>0)
			{
				margin_sales_inr1 = Double.parseDouble(nf1.format(margin_sales_inr));
			}
			
			double margin_sales_inr_mmbtu = 0 ;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_inr_mmbtu = margin_sales_inr1/temp_sales_qty_total1;
			}
			else
			{
				margin_sales_inr_mmbtu = 0;
			}			
			Margin_sales_inr_mmbtu = nf.format(margin_sales_inr_mmbtu);
			////System.out.println("margin_sales_inr = "+margin_sales_inr);
			////System.out.println("temp_sales_qty_total1 = "+temp_sales_qty_total1);
			
			double gross_margin_value_usd = 0;
			gross_margin_value_usd = temp_margin_value_usd - margin_sales_value_usd;
			Gross_margin_value_usd = nf5.format(gross_margin_value_usd);
			
			double gross_margin_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_rate = gross_margin_value_usd/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_rate = 0;
			}
			Gross_margin_rate = nf.format(gross_margin_rate);
			
			double gross_margin_value_inr = 0;
			gross_margin_value_inr = temp_margin_value_inr - margin_sales_inr;
			Gross_margin_value_inr = nf5.format(gross_margin_value_inr);
			
			double gross_margin_inr_mmbtu = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_inr_mmbtu = gross_margin_value_inr/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_inr_mmbtu = 0;
			}
			
			Gross_margin_inr_mmbtu = nf.format(gross_margin_inr_mmbtu);
			
			//For Variable Costs
			////System.out.println("month = "+month);
			////System.out.println("year = "+year);
			double sales_qty = 0;
			
			queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
					       "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND (GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					       "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
			}					
			
			double check_value_usd = 0;
			double check_value_inr = 0;
			check_value_usd = captive_value_usd1 - consumption_value_usd1;
			check_value_inr = captive_value_inr1 - consumption_value_inr1;
			
			//System.out.println("captive_value_usd1 = "+captive_value_usd1+",  consumption_value_usd1 = "+consumption_value_usd1);
			if(captive_value_usd1==consumption_value_usd1)
			{
				Check_value_usd = "0";
			}
			else
			{
				Check_value_usd = nf5.format(check_value_usd);
			}
			
			if(captive_value_inr1==consumption_value_inr1)
			{
				Check_value_inr = "0";
			}
			else
			{
				Check_value_inr = nf5.format(check_value_inr);
			}			
			
			double final_value_usd = 0;
			final_value_usd = captive_value_usd1 + variance_value_usd;
			Final_value_usd = nf5.format(final_value_usd);

			double final_value_inr = 0;
			final_value_inr = captive_value_inr1 + variance_value_inr;
			Final_value_inr = nf5.format(final_value_inr);			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----get_Stock_Valuation()"+e);
			e.printStackTrace();			
		}
	*/}
	
	
	public void get_sales_details3()
	{
		try
		{	
			sales_qty_amt_usd_total =0;
			sales_gross_amt_usd_total= 0;
			HLPL_INV_SEQ_NO3.clear();
			//System.out.println("Inside new get_Sales_details3() "); 			
			Vector tmp_group_gross_usd_amt = new Vector();			
			//System.out.println("From month "+month+" To month= "+to_month);														
			////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+month+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			//System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			//System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			//System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
							
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='S' ORDER BY INVOICE_DT";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CONTRACT_TYPE='S' ORDER BY INVOICE_DT";
			}
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO3.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT3.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT3.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT3.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE3.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE3.add("-");
				}
				DUE_DT3.add(rset.getString(6)==null?"":rset.getString(6));	
					
				TOTAL_QTY3.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
				EXCHG_RATE3.add(rset.getString(8)==null?"":rset.getString(8));
					
				GROSS_AMT_USD3.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			}			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
					  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						"TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
					  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT";
			}
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO3.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT3.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT3.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT3.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE3.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE3.add("-");
				}
				DUE_DT3.add(rset.getString(6)==null?"":rset.getString(6));	
					
				TOTAL_QTY3.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
				EXCHG_RATE3.add(rset.getString(8)==null?"":rset.getString(8));
					
				GROSS_AMT_USD3.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));	
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
			}
				
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
				
			//System.out.println("start_index_1 = "+start_index_1+",  And  end_index_1 = "+end_index_1);			
				
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
					  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
					  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT";
			}
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO3.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT3.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT3.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT3.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE3.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE3.add("-");
				}
				DUE_DT3.add(rset.getString(6)==null?"":rset.getString(6));	
					
				TOTAL_QTY3.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
				EXCHG_RATE3.add(rset.getString(8)==null?"":rset.getString(8));
					
				GROSS_AMT_USD3.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));	
				regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_details() --> "+e.getMessage());
			e.printStackTrace();
		}	
	}
	
	
	public void fetch_Margin_Dtl()
	{
		try
		{
			double temp_sales_qty_total = 0 ;
			double temp_total_gross_amt = 0;	
			double total_margin = 0;
			
			String from_dt = "";
			String to_dt = "";
			
			String month_val = "";
			//double total_send_out = 0;
			
			double total_sales_qty = 0;
			double gross_amt_total = 0;
			
			double total_confirm_volume = 0;
			double total_confirm_price = 0;
			double total_amount = 0;
			
			double total_confirm_volume_purchase = 0;
			double total_confirm_price_purchase = 0;
			double total_amount_purchase = 0;			
			double average_price = 0;
			
			String to_next_date = "";
			double total_cogs = 0;
			//System.out.println("month = "+month);
			//System.out.println("to_month = "+to_month);
			for(int i=Integer.parseInt(month); i<=Integer.parseInt(to_month); i++)
			{
				if((""+i).equals("1"))
	 			{
	 				month_val = "January";
	 			}
				else if((""+i).equals("2"))
	 			{
	 				month_val = "February";
	 			}
				else if((""+i).equals("3"))
	 			{
	 				month_val = "March";
	 			}
				else if((""+i).equals("4"))
	 			{
	 				month_val = "April";
	 			}
				else if((""+i).equals("5"))
	 			{
	 				month_val = "May";
	 			}
				else if((""+i).equals("6"))
	 			{
	 				month_val = "June";
	 			}
				else if((""+i).equals("7"))
	 			{
	 				month_val = "July";
	 			}
				else if((""+i).equals("8"))
	 			{
	 				month_val = "August";
	 			}
				else if((""+i).equals("9"))
	 			{
	 				month_val = "September";
	 			}
				else if((""+i).equals("10"))
	 			{
	 				month_val = "October";
	 			}
				else if((""+i).equals("11"))
	 			{
	 				month_val = "November";
	 			}
				else if((""+i).equals("12"))
	 			{
	 				month_val = "December";
	 			}
				MONTH.add(month_val);
				
				if(i<=9)
				{
					from_dt = "01/0"+i+"/"+year;
				}
				else
				{
					from_dt = "01/"+i+"/"+year;
				}
				
				queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
				////System.out.println("days = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					to_dt=rset1.getString(1);
				}
				else
				{
					if(i<=9)
					{
						to_dt="28/0"+i+"/"+year;
					}
					else
					{
						to_dt="28/"+i+"/"+year;
					}
				}
			
				String month_int = "";
				String year_int = year;
				if(Integer.parseInt(to_month)==12)
				{
					month_int ="01";
					year_int= ""+(Integer.parseInt(year_int)+1);
				}
				else
				{
					if((Integer.parseInt(to_month)+1)<10)
					{
						month_int = "0"+(Integer.parseInt(to_month)+1);
					}
					else
					{
						month_int = ""+(Integer.parseInt(to_month)+1);
					}					
				}				
				next_date = "01/"+month_int+"/"+year_int;				
				queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+next_date+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
				////System.out.println("days = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					to_next_date=rset1.getString(1);
				}
				else
				{
					to_next_date="28/"+i+"/"+year;
				}
				
				double total_qty = 0;	
				double gross_amt_usd = 0;
				double rate = 0;		
				
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO " +
					  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT";
				//System.out.println("Sales Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					total_qty += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					gross_amt_usd += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				}
				double mmbtu = 0;
				double temp_gross_amt_usd = 0;
				mmbtu = Double.parseDouble(nf1.format(total_qty));
				TOTAL_QTY.add(nf5.format(mmbtu));
				GROSS_AMT_USD.add(nf5.format(gross_amt_usd));
				temp_gross_amt_usd = Double.parseDouble(nf1.format(gross_amt_usd));
				
				////System.out.println("qty = "+total_qty);
				////System.out.println("gross_amt_usd = "+gross_amt_usd);
				
				if(total_qty!=0 && gross_amt_usd!=0)
				{
					rate = (gross_amt_usd/total_qty);
				}else 
				{
					rate = 0;
				}
				RATE.add(nf.format(rate));
				System.out.println("rate = "+rate);				
				
				total_sales_qty += total_qty;
				gross_amt_total += gross_amt_usd;	
				
				double temp_sales_gross_amt_usd_total = 0;			
							
				String mnth = "";
				if(i<10)
				{
					mnth = "0"+i;
				}
				else
				{
					mnth = ""+i;
				}					
				queryString = "SELECT COST_SALES_USD FROM FMS7_STOCK_VALUATION " +
						      "WHERE MONTH = '"+mnth+"' AND YEAR = '"+year+"' ";
				//System.out.println("SELECT COST_SALES_USD FROM FMS7_STOCK_VALUATION----- " + queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					sales_gross_amt_usd_total = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					COGS.add(nf5.format(sales_gross_amt_usd_total));
				}
				else
				{
					COGS.add("0");
				}			
				temp_sales_gross_amt_usd_total = Double.parseDouble(nf1.format(sales_gross_amt_usd_total));
				total_cogs += temp_sales_gross_amt_usd_total;

				double cogs_mmbtu = 0;
				if(mmbtu!=0)
				{
					cogs_mmbtu = temp_sales_gross_amt_usd_total/mmbtu;
				}
				else
				{
					cogs_mmbtu = 0;
				}
				if(cogs_mmbtu!=0)
				{
					COGS_MMBTU.add(nf.format(cogs_mmbtu));
				}
				else
				{
					COGS_MMBTU.add("0.00");
				}
				
				double margin = 0;
				double temp_margin = 0;
				double margin_per_mmbtu = 0;
				margin = temp_gross_amt_usd - temp_sales_gross_amt_usd_total;
				if(margin!=0)
				{
					MARGIN.add(nf5.format(margin));
					temp_margin = Double.parseDouble(nf1.format(margin));
				}	
				else
				{
					MARGIN.add("0");
				}
				total_margin += temp_margin;
				
				if(mmbtu!=0)
			    {
					margin_per_mmbtu = margin/mmbtu;
			    }
				else
				{
					margin_per_mmbtu = 0;
				}
				if(margin_per_mmbtu!=0)
				{
					MARGIN_PER_MMBTU.add(nf.format(margin_per_mmbtu));
				}
				else
				{
					MARGIN_PER_MMBTU.add("0.00");
				}					
			}			
			//Total_send_out += total_send_out;
			temp_sales_qty_total = total_sales_qty ;
			temp_total_gross_amt = Double.parseDouble(nf.format(gross_amt_total));	
			sales_Qty_Total = nf5.format(total_sales_qty) ;
			total_Gross_Amt = nf5.format(gross_amt_total);	
			
			Total_cogs = nf5.format(total_cogs);
			//System.out.println("sales_gross_amt_usd_total -->"+sales_gross_amt_usd_total);
			double total_margin_per_mmbtu = 0;
			
			Total_margin = nf5.format(total_margin);
			total_margin_per_mmbtu = total_margin/total_sales_qty;
			Total_margin_per_mmbtu = nf.format(total_margin_per_mmbtu);
			
			//Second Half of Report			
			Vector temp_CONFIRM_VOL = new Vector();
			Vector temp_AMOUNT = new Vector();
			Vector temp_CONFIRM_VOL_PURCHASE = new Vector();
			Vector temp_AMOUNT_PURCHASE = new Vector();			
			
			double final_sum = 0;
			double closing_rate = 0;
			
			//System.out.println("next_date -->"+next_date);					
			
			/*queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST " +
					      "WHERE START_DT<=TO_DATE('"+next_date+"','dd/mm/yyyy') " +
					      "AND END_DT>=TO_DATE('"+next_date+"','dd/mm/yyyy') ";
			//System.out.println("SELECT CUSTOMER_CD FROM FMS7_SN_MST -->"+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				CUSTOMER_CD.add(rset.getString(1)==null?"":rset.getString(1));				
			}
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{	
				Vector TCQ1 = new Vector();	
				Vector RATE1 = new Vector();					
				Vector SN_NO1 = new Vector();	
				Vector SIGNING_DT1 = new Vector();	
				Vector START_DT1 = new Vector();	
				Vector END_DT1 = new Vector();	
				Vector FGSA_NO1 = new Vector();	
				Vector SN_REV_NO1 = new Vector();	
				Vector FGSA_REV_NO1 = new Vector();	
				Vector QTY1 = new Vector();	
				Vector SALE_USD1 = new Vector();	
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST " +
						       "WHERE CUSTOMER_CD='"+CUSTOMER_CD.elementAt(i)+"' ";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
				}
				else
				{
					CUSTOMER_NAME.add("");
				}	
				
				queryString = "SELECT TCQ,RATE,SN_NO,to_char(SIGNING_DT,'dd/mm/yyyy'), " +
						      "to_char(START_DT,'dd/mm/yyyy'),to_char(END_DT,'dd/mm/yyyy'),FGSA_NO, " +
						      "SN_REV_NO,FGSA_REV_NO FROM FMS7_SN_MST WHERE " +
						      "(START_DT<=TO_DATE('"+next_date+"','dd/mm/yyyy') " +
						      "AND END_DT>=TO_DATE('"+next_date+"','dd/mm/yyyy')) AND " +
						      "CUSTOMER_CD='"+CUSTOMER_CD.elementAt(i)+"'";
				//System.out.println("TCQ FROM FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					TCQ1.add(rset.getString(1)==null?"":rset.getString(1));
					RATE1.add(rset.getString(2)==null?"":rset.getString(2));					
					SN_NO1.add(rset.getString(3)==null?"":rset.getString(3));
					SIGNING_DT1.add(rset.getString(4)==null?"":rset.getString(4));
					START_DT1.add(rset.getString(5)==null?"":rset.getString(5));
					END_DT1.add(rset.getString(6)==null?"":rset.getString(6));					
					FGSA_NO1.add(rset.getString(7)==null?"":rset.getString(7));
					SN_REV_NO1.add(rset.getString(8)==null?"":rset.getString(8));
					FGSA_REV_NO1.add(rset.getString(9)==null?"":rset.getString(9));
					
					queryString1 ="SELECT QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL WHERE " +
							      "CUSTOMER_CD='"+CUSTOMER_CD.elementAt(i)+"' " +
							      "AND SN_NO='"+rset.getString(3)+"' " +
							      "AND GAS_DT<TO_DATE('"+next_date+"','dd/mm/yyyy') " +
							      "AND FGSA_NO='"+rset.getString(7)+"'"; //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
					//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						if(!rset.getString(1).equals("") && !rset1.getString(1).equals(""))
						{
							QTY1.add(nf.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
							SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
						}
						else
						{	
							QTY1.add("");
							SALE_USD1.add("");
						}	
					}
					else
					{
						QTY1.add("");
						SALE_USD1.add("");
					}
				}					
				TCQ.add(TCQ1);
				RATE.add(RATE1);				
				SN_NO.add(SN_NO1);
				SIGNING_DT.add(SIGNING_DT1);
				START_DT.add(START_DT1);
				END_DT.add(END_DT1);				
				FGSA_NO.add(FGSA_NO1);
				SN_REV_NO.add(SN_REV_NO1);
				FGSA_REV_NO.add(FGSA_REV_NO1);
				QTY.add(QTY1);
				SALE_USD.add(SALE_USD1);
			}
							
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				double sum=0;
				double sales_sum=0;
				double sn_rate=0;
				
				for(int j=0; j<((Vector)QTY.elementAt(i)).size(); j++)
				{
					if(!(((Vector)QTY.elementAt(i)).elementAt(j).equals("")) && !(((Vector)SALE_USD.elementAt(i)).elementAt(j).equals("")))
					{
						sum += Double.parseDouble(""+((Vector)QTY.elementAt(i)).elementAt(j));
						sales_sum += Double.parseDouble(""+((Vector)SALE_USD.elementAt(i)).elementAt(j));
						sn_rate = sales_sum / sum;						
					}									 
				}				
				TOT_QTY.add(nf.format(sum));
				SN_RATE.add(nf.format(sn_rate));
				TOT_SALE_USD.add(nf.format(sales_sum));
			}		
						
			double final_sales_sum=0;
			double final_sn_rate=0;
			
			for(int i=0; i<TOT_QTY.size(); i++)
			{								
				if(!((""+TOT_QTY.elementAt(i)).trim().equals("")) && !((""+TOT_SALE_USD.elementAt(i)).trim().equals("")))
				{
					    final_sum += Double.parseDouble(""+(TOT_QTY.elementAt(i)));
					    final_sales_sum += Double.parseDouble(""+(TOT_SALE_USD.elementAt(i)));
					    final_sn_rate = final_sales_sum / final_sum;						
				}									 
			}*/
			
			String month_int = "";
			String year_int = year;
			if(Integer.parseInt(to_month)==12)
			{
				month_int ="01";
				year_int= ""+(Integer.parseInt(year_int)+1);
			}
			else
			{
				if((Integer.parseInt(to_month)+1)<10)
				{
					month_int = "0"+(Integer.parseInt(to_month)+1);
				}
				else
				{
					month_int = ""+(Integer.parseInt(to_month)+1);
				}					
			}
			
			double final_sales_sum=0;
			double final_sn_rate=0;
			
			queryString = "SELECT EXP_SALES_QTY, EXP_SALES_RATE, EXP_SALES_AMT_USD " +
						  "FROM FMS7_EXP_SALES_DTLS WHERE " +
						  "MONTH='"+month_int+"' AND YEAR='"+year_int+"'";
			//System.out.println("Expected Sales Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				final_sum = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
				final_sn_rate = Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2));
				final_sales_sum = Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
			}
			Final_qty = nf5.format(final_sum);
			Final_SN_rate = nf2.format(final_sn_rate);
			Final_sale_USD = nf5.format(final_sales_sum);
			
			double opening_stock_required = 0;
			opening_stock_required = final_sum;
			
			String unit_cd = "";
			double qty = 0 ;
			String price = "";
			String ship_cd = "";
			
			Vector temp_inv_amt = new Vector();			
			Vector temp_tot_cd_amt = new Vector();
			Vector temp_tot_pay_refund = new Vector();
			Vector unloaded_qty = new Vector();
		
			//FOR OPENING STOCK i.e. TANK READING OF CURRENT MONTH
			double opening_bal1 = 0;
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
						   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
			//System.out.println("Select OPENING Stock Details Query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				opening_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				opening_bal1 = 0;
			}
			
			opening_stock_required -= opening_bal1;
			
			double total_value_usd_opening = 0;
			double total_value_usd_opening_basic = 0;
			double total_value_usd_opening1 = 0;
			double total_value_inr_opening = 0;
			double total_value_inr_opening_basic = 0;
			double total_vol_opening = 0 ;
			double conf_price = 0;
			
			Vector temp_VALUE_USD = new Vector();
			Vector temp_VALUE_INR = new Vector();

			double total_value_inr = 0;
			double total_value_usd = 0;	
			double total_vol = 0;

			double total_inr_mmbtu = 0;
			boolean break_flag = false;
			
			if(opening_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.SPLIT_SEQ='0' AND " +
							  "A.ACT_ARRV_DT<to_date('"+next_date+"','dd/mm/yyyy') ORDER BY A.ACT_ARRV_DT DESC";										
				//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 5>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						
						CARGO_REF_CD.add(rset.getString(1));
						INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						
						String inv_no = "";
						String inv_amt = "0";
						String due_dt = "";
						////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+" AND A.SPLIT_SEQ='0'";					
						//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							inv_amt = rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5)));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
							inv_no = rset1.getString(1)==null?"":rset1.getString(1);
							due_dt = rset1.getString(6)==null?"":rset1.getString(6);
						}
						else
						{					
							temp_inv_amt.add("0");
							conf_price = 0.0;
							temp_qty = 0;
						}
						
						INVOICE_NO.add(inv_no);
						USD_VAL_INVOICE.add(inv_amt);
						purchase_total_invoice_value += Double.parseDouble(inv_amt);
						DUE_DT.add(due_dt);
						
						if(opening_bal1>total_vol)
						{
							
						}
						else
						{
							temp_qty -= (total_vol - opening_bal1);
							total_vol = opening_bal1;
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						temp_CONFIRM_VOL.add(""+qty);
						unloaded_qty.add(""+qty);
						CONFIRM_VOL.add(nf5.format(qty));	
						CONF_PRICE.add(nf2.format(conf_price));
						total_vol_opening += qty;
						purchase_total_qty += qty;
						total_confirm_volume += qty;
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="2";
						String exchg_rate="";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
							GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
						}
						else
						{
							GROUP_FOREIGN_EXCHG_RATE.add("0");
						}
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						queryString1 = "SELECT TAX_STR_CD,APP_DATE FROM FMS7_CARGO_TAX_MST WHERE " +
									  "APP_DATE<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY') " +
									  "ORDER BY APP_DATE DESC";
						//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())	
						{
							tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
						
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
									   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
									   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
						////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							String tax_cd = rset1.getString(1);
							String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
												
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset1.getString(2)))/100);
							}
							else if(rset1.getString(3).equals("2"))
							{
								queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
											   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
											   "B.app_date<=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
								////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
						 		rset2=stmt2.executeQuery(queryString2);
						 		if(rset2.next())
						 		{
							 			if(rset2.getString(3).equals("1"))
										{
											tax_amt = nf2.format((Double.parseDouble(""+conf_price)*Double.parseDouble(rset2.getString(2)))/100);
										}
										
							 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
						 		}
						 		else
						 		{
						 			tax_amt = ""+0.00;
						 		}			 		
							}
							else
							{
								tax_amt = ""+0.00;
							}
							
							cd_charge_per_mmbtu += Double.parseDouble(tax_amt);
						}
						
						CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu)));
						temp_VALUE_USD.add(nf1.format(value_usd));
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						CONFIRM_PRICE.add(nf2.format(Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))));
						double usd_per_mmbtu = (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu)));
						//total_confirm_price += (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu)));
						closing_rate = usd_per_mmbtu;
						double amount = temp_value_usd;
						total_amount += amount;
						temp_AMOUNT.add(nf1.format(temp_value_usd));
						AMOUNT.add(nf5.format(temp_value_usd));
						total_value_usd += temp_value_usd;
						total_value_usd_opening += temp_value_usd;						
						total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						double temp_value_inr = 0;    
						value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate));
						VALUE_INR.add(nf5.format(value_inr));
						temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						temp_VALUE_INR.add(nf1.format(value_inr));
						total_value_inr += temp_value_inr;
						total_value_inr_opening += temp_value_inr;
						total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						if(qty!=0)
						{
							inr_mmbtu = temp_value_inr/qty;
							INR_MMBTU.add(nf.format(inr_mmbtu));
						}
						else
						{
							INR_MMBTU.add("0.00");
						}
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							 SHIP_NM.add("");
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
					
			total_confirm_price = total_amount/total_confirm_volume;
			
			String unit_cd_purchase = "";
			double qty_purchase = 0 ;
			String price_purchase = "";
			String ship_cd_purchase = "";
			double amount_purchase = 0;
			double cd_mmbtu = 0;
			
			//System.out.println("opening_stock_required = "+opening_stock_required);
			//System.out.println("next_date -->"+next_date);	
			
			queryString = "SELECT CARGO_REF_CD, MAN_CONF_CD, CONFIRM_VOL, UNIT_CD, PRICE, To_CHAR(DELV_FROM_DT,'DD/MM/YYYY') " +
						  "FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_STATUS='T' AND " +
						  "DELV_FROM_DT>=(TO_DATE('"+next_date+"','DD/MM/YYYY')) ORDER BY DELV_FROM_DT";
			//System.out.println("SELECT CARGO_REF_CD FROM FMS7_MAN_CONFIRM_CARGO_DTL --> "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				if(opening_stock_required>0)
				{
					//Following Logic Has Been Introduced By Samik Shah On 13th August, 2010 ...
					//Following Logic Has Been Introduced To Calculate Custom Tax Amount ...
				  	String tax_amt = "";
				  	String tax_str_cd = "0";
				  	double cd_charge_per_mmbtu = 0;
				  	double temp_price = rset.getString(5)==null?0:Double.parseDouble(rset.getString(5));
				  	
					queryString1 = "SELECT A.TAX_STR_CD FROM FMS7_CARGO_TAX_MST A " +
								   "WHERE A.APP_DATE=(SELECT MAX(B.APP_DATE) FROM FMS7_CARGO_TAX_MST B WHERE " +
								   "B.APP_DATE<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY'))";
					////System.out.println("Custom Duty Details Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}					
					////System.out.println("tax_str_cd = "+tax_str_cd);
					
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
								  "B.app_date<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						String tax_cd = rset1.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
											
						if(rset1.getString(3).equals("1"))
						{
							tax_amt = nf2.format((Double.parseDouble(""+temp_price)*Double.parseDouble(rset1.getString(2)))/100);
						}
						else if(rset1.getString(3).equals("2"))
						{
							queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
							////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
					 		rset2=stmt2.executeQuery(queryString2);
					 		if(rset2.next())
					 		{
						 			if(rset2.getString(3).equals("1"))
									{
										tax_amt = nf2.format((Double.parseDouble(""+temp_price)*Double.parseDouble(rset2.getString(2)))/100);
									}									
						 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
					 		}
					 		else
					 		{
					 			tax_amt = ""+0.00;
					 		}			 		
						}
						else
						{
							tax_amt = ""+0.00;
						}						
						cd_charge_per_mmbtu += Double.parseDouble(tax_amt);
					}							
					temp_price += cd_charge_per_mmbtu;
										
					CARGO_REF_CD_PURCHASE.add(rset.getString(1)==null?"":rset.getString(1));
					MAN_CONF_CD_PURCHASE.add(rset.getString(2)==null?"":rset.getString(2));
					qty_purchase = Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
					unit_cd_purchase = rset.getString(4)==null?"":rset.getString(4);
					PRICE_PURCHASE.add(nf2.format(temp_price));
					
					if(unit_cd_purchase.trim().equals("2"))
					{
						qty_purchase = (qty_purchase* 1000000);
						temp_CONFIRM_VOL_PURCHASE.add(nf1.format(qty_purchase));
						CONFIRM_VOL_PURCHASE.add(nf5.format(qty_purchase));
						total_confirm_volume_purchase += Double.parseDouble(nf1.format(qty_purchase));
					}
					else
					{
						temp_CONFIRM_VOL_PURCHASE.add(nf1.format(qty_purchase));
						CONFIRM_VOL_PURCHASE.add(nf5.format(qty_purchase));
						total_confirm_volume_purchase += Double.parseDouble(nf1.format(qty_purchase));
					}
					opening_stock_required = opening_stock_required - Double.parseDouble(nf1.format(qty_purchase));	
				}
				else
				{
					total_confirm_volume_purchase += 0;
				}
			}
				
			for(int i=0; i<CARGO_REF_CD_PURCHASE.size(); i++)
			{
				if((""+PRICE_PURCHASE.elementAt(i)).trim().equals("") || (""+PRICE_PURCHASE.elementAt(i)).trim().equals("0") || (""+PRICE_PURCHASE.elementAt(i)).trim().equals("0.00") || (""+PRICE_PURCHASE.elementAt(i)).trim().equals("0.0000"))
				{
					queryString1 = "SELECT CONFIRM_PRICE FROM FMS7_MAN_CONFIRM_MST WHERE " +
								   "MAN_CONF_CD='"+MAN_CONF_CD_PURCHASE.elementAt(i)+"' ";
					//System.out.println("SELECT CONFIRM_PRICE FROM FMS7_MAN_CONFIRM_MST --> "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						price_purchase = rset1.getString(1)==null?"0":rset1.getString(1);
					}
					
					String tax_amt = "";
				  	String tax_str_cd = "0";
				  	double cd_charge_per_mmbtu = 0;
				  	double temp_price = Double.parseDouble(price_purchase);
				  	
					queryString1 = "SELECT A.TAX_STR_CD FROM FMS7_CARGO_TAX_MST A " +
								  "WHERE A.APP_DATE=(SELECT MAX(B.APP_DATE) FROM FMS7_CARGO_TAX_MST B WHERE " +
								  "B.APP_DATE<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY'))";
					////System.out.println("Custom Duty Details Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						tax_str_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}					
					////System.out.println("tax_str_cd = "+tax_str_cd);
					
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
								  "B.app_date<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					////System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						String tax_cd = rset1.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset1.getString(2)));
											
						if(rset1.getString(3).equals("1"))
						{
							tax_amt = nf2.format((Double.parseDouble(""+temp_price)*Double.parseDouble(rset1.getString(2)))/100);
						}
						else if(rset1.getString(3).equals("2"))
						{
							queryString2 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
										   "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
										   "B.app_date<=TO_DATE('"+rset.getString(6)+"','DD/MM/YYYY')) AND A.tax_code="+rset1.getString(4)+"";
							////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString2);
					 		rset2=stmt2.executeQuery(queryString2);
					 		if(rset2.next())
					 		{
					 			if(rset2.getString(3).equals("1"))
								{
									tax_amt = nf2.format((Double.parseDouble(""+temp_price)*Double.parseDouble(rset2.getString(2)))/100);
								}									
					 			tax_amt = nf2.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset1.getString(2)))/100);
					 		}
					 		else
					 		{
					 			tax_amt = ""+0.00;
					 		}			 		
						}
						else
						{
							tax_amt = ""+0.00;
						}						
						cd_mmbtu += Double.parseDouble(tax_amt);
					}
					
					if(price_purchase!=null)
					{
						CONFIRM_PRICE_PURCHASE.add(nf2.format(Double.parseDouble(price_purchase)+cd_mmbtu));
						total_confirm_price_purchase += (Double.parseDouble(price_purchase)+cd_mmbtu);
						closing_rate = Double.parseDouble(price_purchase)+cd_mmbtu;
					}
					else
					{
						CONFIRM_PRICE_PURCHASE.add("0");
						//closing_rate = Double.parseDouble(price_purchase);						   
					}						
				}
				else
				{
					CONFIRM_PRICE_PURCHASE.add(nf2.format(Double.parseDouble(""+PRICE_PURCHASE.elementAt(i))));
					total_confirm_price_purchase += Double.parseDouble(""+PRICE_PURCHASE.elementAt(i));
					closing_rate = Double.parseDouble(""+PRICE_PURCHASE.elementAt(i));
				}
					
				if(temp_CONFIRM_VOL_PURCHASE.elementAt(i)!=null && CONFIRM_PRICE_PURCHASE.elementAt(i)!=null)
				{
					amount_purchase = (Double.parseDouble(""+temp_CONFIRM_VOL_PURCHASE.elementAt(i)) * Double.parseDouble(""+CONFIRM_PRICE_PURCHASE.elementAt(i)));
					temp_AMOUNT_PURCHASE.add(nf.format(amount_purchase));
					AMOUNT_PURCHASE.add(nf5.format(amount_purchase));
					total_amount_purchase += Double.parseDouble(nf1.format(amount_purchase));
				}					
					
				queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE CARGO_REF_CD='"+CARGO_REF_CD_PURCHASE.elementAt(i)+"' AND MAN_CONF_CD='"+MAN_CONF_CD_PURCHASE.elementAt(i)+"'";
				//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					ship_cd_purchase = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd_purchase+"'";
				//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
				rset2 = stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					SHIP_NM_PURCHASE.add(rset2.getString(1)==null?"":rset2.getString(1));
				}
				else
				{
					SHIP_NM_PURCHASE.add("");
				} 					
			}
			
			Total_confirm_volume = nf5.format(total_confirm_volume);
			Total_confirm_price = nf2.format(total_confirm_price);
			Total_amount = nf5.format(total_amount);
			
			if(total_amount_purchase!=0 && total_confirm_volume_purchase!=0)
			{
				total_confirm_price_purchase = total_amount_purchase/total_confirm_volume_purchase;	 
			}
			else
			{
				total_confirm_price_purchase = 0;
			}
			
			Total_confirm_volume_purchase = nf5.format(total_confirm_volume_purchase);
			Total_confirm_price_purchase = nf2.format(total_confirm_price_purchase);
			Total_amount_purchase = nf5.format(total_amount_purchase);
			
			
			Weighted_average_volume = nf1.format(total_confirm_volume + total_confirm_volume_purchase);
			Weighted_average_amount = nf1.format(total_amount + total_amount_purchase);
			if(!Weighted_average_amount.trim().equals("0.00") && !Weighted_average_volume.trim().equals("0.00"))
			{
				average_price = (Double.parseDouble(Weighted_average_amount) / Double.parseDouble(Weighted_average_volume));
				Weighted_average_price = nf2.format(average_price);
				//System.out.println("Weighted_average_volume = "+Weighted_average_volume);
			}
			else
			{
				Weighted_average_price = "0.0000";					
			}	
			
			double expected_vol = 0;
			double expected_amount = 0;
			double expected_rate = 0;
			double closing_vol = 0;
			double closing_amount = 0;		
			expected_vol = final_sum;					
			expected_amount = 0;
			
			for(int i=0; i<temp_CONFIRM_VOL.size(); i++)
			{
				//System.out.println("expected_vol = "+expected_vol);
				if(expected_vol>=Double.parseDouble(""+temp_CONFIRM_VOL.elementAt(i)))
				{
					expected_vol = expected_vol - Double.parseDouble(""+temp_CONFIRM_VOL.elementAt(i));
					expected_amount += Double.parseDouble(""+temp_AMOUNT.elementAt(i));
				}					
				else
				{
					expected_amount += (expected_vol * Double.parseDouble(""+CONFIRM_PRICE.elementAt(i)));
					closing_vol = Double.parseDouble(""+temp_CONFIRM_VOL.elementAt(i)) - expected_vol;
					//System.out.println("expected_vol = "+expected_vol+",  expected_amount = "+expected_amount+",  conf_price = "+CONFIRM_PRICE.elementAt(i));
					expected_vol = 0;
				}
			}
			
			if(expected_vol>0)
			{
				for(int i=0; i<temp_CONFIRM_VOL_PURCHASE.size() ; i++)
				{
					//System.out.println("expected_vol = "+expected_vol);
					//expected_amount = total_amount;
					if(expected_vol>=Double.parseDouble(""+temp_CONFIRM_VOL_PURCHASE.elementAt(i)))
					{
						expected_vol = expected_vol - Double.parseDouble(""+temp_CONFIRM_VOL_PURCHASE.elementAt(i));
						expected_amount += Double.parseDouble(""+temp_AMOUNT_PURCHASE.elementAt(i));
					}
					else
					{
						expected_amount += (expected_vol * Double.parseDouble(""+CONFIRM_PRICE_PURCHASE.elementAt(i)));
						closing_vol = Double.parseDouble(""+temp_CONFIRM_VOL_PURCHASE.elementAt(i)) - expected_vol;
						//System.out.println("expected_vol = "+expected_vol+",  expected_amount = "+expected_amount+",  conf_price = "+CONFIRM_PRICE_PURCHASE.elementAt(i));
						expected_vol = 0;
					}
				}
			}
			
			/*if(CONFIRM_PRICE_PURCHASE.elementAt(i)!=null && !CONFIRM_PRICE_PURCHASE.elementAt(i).equals("0") && !CONFIRM_PRICE_PURCHASE.elementAt(i).equals(""))
			{
				closing_rate = Double.parseDouble(""+CONFIRM_PRICE_PURCHASE.elementAt(i));
				//System.out.println("closing_rate = "+closing_rate);
			}
			else
			{
				//System.out.println("closing_rate = "+closing_rate);
			}*/
			
			closing_amount = closing_vol * closing_rate;		
			if(expected_amount!=0 && final_sum!=0)
			{
				expected_rate = expected_amount/(final_sum);
			}
			else
			{
				expected_rate = 0;
			}
			Expected_amount = nf5.format(expected_amount);
			Expected_rate = nf2.format(expected_rate);
			Closing_vol = nf5.format(closing_vol);
			Closing_rate = nf2.format(closing_rate);
			Closing_amount = nf5.format(closing_amount);		
			double expected_margin_amount = 0;
			double expected_margin_rate = 0;
			
			if(final_sales_sum!=0 && expected_amount!=0)
			{
				expected_margin_amount = final_sales_sum - expected_amount;
			}
			else
			{
				expected_margin_amount = 0;
			}
			Expected_margin_amount = nf5.format(expected_margin_amount);	
			if(final_sn_rate!=0 && expected_rate!=0)
			{
				expected_margin_rate = final_sn_rate - expected_rate;
			}
			else
			{
				expected_margin_rate = 0;
			}
			Expected_margin_rate = nf2.format(expected_margin_rate);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_Margin_Dtl()"+e);
			e.printStackTrace();			
		}
	}
	
    //New Provisional Invoice Details Introduced by Achal Pathak 0n 11/02/2011 ...
	//Last Modified By Samik Shah On 27th August, 2011 ...
	public void get_Provisional_Invoice_Details()
	{
		try
		{		
			//System.out.println("Inside get_Provisional_Invoice_Details() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			//System.out.println("From year "+year+" To Year= "+to_year);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
				
			/*ADDED BY RG 22-12-2014*/ 
			Vector temp_cargo_ref_cd=new Vector();
			Vector temp_split_flag=new Vector();
			
			queryString = "select CARGO_REF_NO,count(split_seq) FROM FMS7_PROV_SELLER_PAY WHERE  " +
			"  (INVOICE_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND to_date('"+to_dt+"','dd/mm/yyyy')) group by cargo_ref_no ORDER BY CARGO_REF_NO desc";
			//System.out.println("Getting Seller Payment value Query = "+queryString); 
			rset  = stmt.executeQuery(queryString);
			while(rset.next())
			{				 
				temp_cargo_ref_cd.add(rset.getString(1)==null?"":rset.getString(1));
				int split_no=rset.getInt(2);
				if(split_no>1)
				{
					temp_split_flag.add("Y");
				}
				else
				{
					temp_split_flag.add("N");
				}
			}
			
			for(int k=0;k<temp_cargo_ref_cd.size();k++)
			{
				if(temp_split_flag.elementAt(k).equals("Y"))
				{
					queryString = "SELECT A.CARGO_REF_NO,B.VESSEL_NM,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
						      "A.EXP_DELV_QTY,A.CONFIRM_PRICE,A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY')," +
						      "A.INVOICE_NO,A.SUN_APPROVAL,TO_CHAR(B.ACT_ARRV_DT,'DD/MM/YYYY'),A.SPLIT_SEQ " +
						      "FROM FMS7_PROV_SELLER_PAY A,FMS7_CARGO_ARRIVAL_DTL B " +
							  "WHERE A.CARGO_REF_NO=B.CARGO_REF_NO AND A.INVOICE_DT " +
							  "between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) "
							  + "AND A.CARGO_REF_NO='"+temp_cargo_ref_cd.elementAt(k)+"' AND A.SPLIT_SEQ IN ('1','2') AND "
							  + "A.SPLIT_SEQ=B.SPLIT_SEQ "
							  + "ORDER BY A.CARGO_REF_NO";
				}
				else
				{
					queryString = "SELECT A.CARGO_REF_NO,B.VESSEL_NM,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
					      "A.EXP_DELV_QTY,A.CONFIRM_PRICE,A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY')," +
					      "A.INVOICE_NO,A.SUN_APPROVAL,TO_CHAR(B.ACT_ARRV_DT,'DD/MM/YYYY'),A.SPLIT_SEQ " +
					      "FROM FMS7_PROV_SELLER_PAY A,FMS7_CARGO_ARRIVAL_DTL B " +
						  "WHERE A.CARGO_REF_NO=B.CARGO_REF_NO AND A.INVOICE_DT " +
						  "between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) "
						  + "AND A.CARGO_REF_NO='"+temp_cargo_ref_cd.elementAt(k)+"' AND A.SPLIT_SEQ='0' AND "
						  + "A.SPLIT_SEQ=B.SPLIT_SEQ "
						  + "ORDER BY A.CARGO_REF_NO";
				}
			//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
				EDQ.add(rset.getString(4)==null?"":rset.getString(4));
				CONF_PRICE.add(rset.getString(5)==null?"":rset.getString(5));
				INVOICE_AMT.add(rset.getString(6)==null?"":rset.getString(6));
				DUE_DT.add(rset.getString(7)==null?"":rset.getString(7));
				INVOICE_NO.add(rset.getString(8)==null?"":rset.getString(8));
				//SUN_APPROVAL.add(rset.getString(9)==null?"":rset.getString(9)); //Commented By Samik Shah On 23rd August, 2011 ...
				ACT_ARRV_DT.add(rset.getString(10)==null?"":rset.getString(10)); //Introduced By Samik Shah On 27th August, 2011 ...
				SPLIT_SEQ.add(rset.getString(11)==null?"0":rset.getString(11));
			}
			}
			for(int i=0;i<CARGO_REF_CD.size();i++)
			{
				String refno="";
				if(SPLIT_SEQ.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"B";
				}
				else
				{
					refno=""+CARGO_REF_CD.elementAt(i);
				}
				 
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSPI' ";
				  			//  + " AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"' ";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG.add("N");
					SUN_APPROVAL.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
			}
			//System.out.println(">>>>>>>>>>>>>>>");
			//System.out.println("CARGO_REF_CD "+CARGO_REF_CD);
			//System.out.println("VESSEL_NM "+VESSEL_NM);
			//System.out.println("INVOICE_DT "+INVOICE_DT);
			//System.out.println("INVOICE_NO "+INVOICE_NO);
			//System.out.println("XML_GEN_FLAG "+XML_GEN_FLAG);
			//System.out.println("SUN_APPROVAL "+SUN_APPROVAL);
			//System.out.println(">>>>>>>>>>>>>>>");
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Provisional_Invoice_Details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}	

    //New Provisional Custom Invoice Details Introduced by Achal 0n 16/02/2011
	//Last Modified By Samik Shah On 27th August, 2011 ...
	public void get_Provision_Custom_Invoice()
	{
		try
		{		
			//System.out.println("Inside get_Provisional_Invoice_Details() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			//System.out.println("From year "+year+" To Year= "+to_year);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "SELECT A.CARGO_REF_NO,A.SELLER_INV_NO,TO_CHAR(A.SELLER_INV_DT,'dd/mm/yyyy')," +
					"A.EXP_DELV_QTY,A.CONFIRM_PRICE,A.SELLER_INV_AMT,TO_CHAR(A.SELLER_DUE_DT,'dd/mm/yyyy')," +
					"TO_CHAR(A.CUSTOM_DUTY_DT,'dd/mm/yyyy'),A.EXCHG_RATE,A.SURVEY_FEE,A.LADING_CHARGES," +
					"A.TOTAL_CD_AMT,A.TAX_STR_CD,A.PD_BOND_AMT,A.CHALLAN_NO,TO_CHAR(A.CUSTOM_CLEAR_DT,'dd/mm/yyyy')," +
					"A.REMARK,A.DIFF_CD,A.INVOICE_AMT,A.CIF_VALUE,A.ASSESSABLE_VALUE,A.SUN_APPROVAL,B.VESSEL_NM,TO_CHAR(B.ACT_ARRV_DT,'DD/MM/YYYY') " +
					"FROM FMS7_CUSTOM_DUTY A,FMS7_CARGO_ARRIVAL_DTL B WHERE A.CARGO_REF_NO=B.CARGO_REF_NO AND B.SPLIT_SEQ='0' AND " +
					"(A.CUSTOM_DUTY_DT between to_date('"+from_dt+"','dd/mm/yyyy') and to_date('"+to_dt+"','dd/mm/yyyy')) " +
					"ORDER BY CARGO_REF_NO";				
			//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				SELLER_INV_NO.add(rset.getString(2)==null?"":rset.getString(2));
				SELLER_INV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				EDQ.add(rset.getString(4)==null?"":rset.getString(4));
				CONF_PRICE.add(rset.getString(5)==null?"":rset.getString(5));
				SELLER_INV_AMT.add(rset.getString(6)==null?"":rset.getString(6));
				SELLER_DUE_DT.add(rset.getString(7)==null?"":rset.getString(7));
				CUSTOM_DUTY_DT.add(rset.getString(8)==null?"":rset.getString(8));
				EXCHG_RATE.add(rset.getString(9)==null?"":rset.getString(9));
				SURVEY_FEE.add(rset.getString(10)==null?"":rset.getString(10));
				LADING_CHARGES.add(rset.getString(11)==null?"":rset.getString(11));
				TOTAL_CD_AMT.add(rset.getString(12)==null?"":rset.getString(12));
				TAX_STR_CD.add(rset.getString(13)==null?"":rset.getString(13));
				PD_BOND_AMT.add(rset.getString(14)==null?"-":rset.getString(14));
				CHALLAN_NO.add(rset.getString(15)==null?"":rset.getString(15));
				CUSTOM_CLEAR_DT.add(rset.getString(16)==null?"":rset.getString(16));
				REMARK.add(rset.getString(17)==null?"":rset.getString(17));
				DIFF_CD.add(rset.getString(18)==null?"-":rset.getString(18));
				INVOICE_AMT.add(rset.getString(19)==null?"-":rset.getString(19));
				CIF_VALUE.add(rset.getString(20)==null?"-":rset.getString(20));
				ASSESSABLE_VALUE.add(rset.getString(21)==null?"-":rset.getString(21));
				//SUN_APPROVAL.add(rset.getString(22)==null?"":rset.getString(22)); //Commented By Samik Shah On 23rd August, 2011 ...
				VESSEL_NM.add(rset.getString(23)==null?"":rset.getString(23));
				ACT_ARRV_DT.add(rset.getString(24)==null?"":rset.getString(24));
			}
			

			for(int i=0;i<CARGO_REF_CD.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+CARGO_REF_CD.elementAt(i)+"' AND JOURNAL_TYPE='FMSPC'";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG.add("N");
					SUN_APPROVAL.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
			}
			
	      //Logic for the Tax Structure
		  /*for(int i=0;i<CUSTOM_DUTY_DT.size();i++)
		  {
			tax_amt_inr="0";			
			double tax_amt = 0;
			String tax_cd = "0";
			String tax_factor = "0.00";
			double tot_tax_amt= 0;
			if(!((""+CUSTOM_DUTY_DT.elementAt(i)).trim().equals("")) && CUSTOM_DUTY_DT.elementAt(i)!=null)
			{	
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STR_CD+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STR_CD+" AND " +
							  "B.app_date<=TO_DATE('"+CUSTOM_DUTY_DT.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
				//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					tax_cd = rset.getString(1);
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						if(!((""+ASSESSABLE_VALUE.elementAt(i)).trim().equals("")))
						{
							tax_amt = (Double.parseDouble(""+ASSESSABLE_VALUE.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
						}
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STR_CD+" AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STR_CD+" AND " +
									  "B.app_date<=TO_DATE('"+CUSTOM_DUTY_DT.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1") )
								{
					 				if(!((""+ASSESSABLE_VALUE.elementAt(i)).trim().equals("")))
									{
					 					tax_amt = (Double.parseDouble(""+ASSESSABLE_VALUE.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
									}
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					customer_Invoice_Tax_Code.add(tax_cd);
					customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
					customer_Invoice_Tax_Amt.add(nf.format(tax_amt));
					tot_tax_amt+=tax_amt;
				}
		    }
		 }*/////System.out.println("customer_Invoice_Tax_Amt = "+customer_Invoice_Tax_Amt+", tax_amt_inr = "+tax_amt_inr);																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	
	public void fetch_Dr_Cr_details()
	{
		Vector temp_DR_CR_NO =new Vector();
		try
		{	
			////System.out.println("Inside fetch_Dr_Cr_details() "); 
			//Following Code for fetching  Dr Cr Note ======================================
			if(!from_dt.trim().equals("") && from_dt!=null && !to_dt.trim().equals("") && to_dt!=null && !dr_cr_flag.trim().equals("") && dr_cr_flag!=null  && !dr_cr_flag.trim().equals("0") && !customer_cd.trim().equals("") && customer_cd!=null && !customer_cd.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),DR_CR_NET_AMT_INR,CUSTOMER_CD," +
				"CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR,DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"CONTRACT_TYPE FROM FMS7_DR_CR_NOTE " +
				"WHERE CUSTOMER_CD='"+customer_cd+"' AND DR_CR_FLAG='"+dr_cr_flag+"' " +
				"AND INVOICE_DT between TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY DR_CR_NO ";
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}						
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(!from_dt.trim().equals("") && from_dt!=null && !to_dt.trim().equals("") && to_dt!=null && !customer_cd.trim().equals("") && customer_cd!=null && !customer_cd.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),DR_CR_NET_AMT_INR," +
				"CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR,DR_CR_FIN_YEAR," +
				"TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),CONTRACT_TYPE FROM FMS7_DR_CR_NOTE " +
				"WHERE INVOICE_DT between TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') " +
				"AND CUSTOMER_CD='"+customer_cd+"' ORDER BY DR_CR_NO ";
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(!from_dt.trim().equals("") && from_dt!=null && !to_dt.trim().equals("") && to_dt!=null && !dr_cr_flag.trim().equals("") && dr_cr_flag!=null  && !dr_cr_flag.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"DR_CR_NET_AMT_INR,CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO," +
				"FINANCIAL_YEAR,DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"CONTRACT_TYPE FROM FMS7_DR_CR_NOTE WHERE " +
				"INVOICE_DT between TO_DATE('"+from_dt+"','DD/MM/YYYY') AND TO_DATE('"+to_dt+"','DD/MM/YYYY') AND DR_CR_FLAG='"+dr_cr_flag+"' ORDER BY DR_CR_NO ";
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(!dr_cr_flag.trim().equals("") && dr_cr_flag!=null  && !dr_cr_flag.trim().equals("0") && !customer_cd.trim().equals("") && customer_cd!=null && !customer_cd.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"DR_CR_NET_AMT_INR,CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR," +
				"DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),CONTRACT_TYPE " +
				"FROM FMS7_DR_CR_NOTE WHERE DR_CR_FLAG='"+dr_cr_flag+"' ORDER BY DR_CR_NO ";	
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
		    else if(!from_dt.trim().equals("") && from_dt!=null && !to_dt.trim().equals("") && to_dt!=null)
			{	
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"DR_CR_NET_AMT_INR,CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR," +
				"DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),CONTRACT_TYPE FROM " +
				"FMS7_DR_CR_NOTE WHERE INVOICE_DT between TO_DATE('"+from_dt+"','DD/MM/YYYY') " +
				"AND TO_DATE('"+to_dt+"','DD/MM/YYYY') ORDER BY DR_CR_NO";
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(!customer_cd.trim().equals("") && customer_cd!=null && !customer_cd.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"DR_CR_NET_AMT_INR,CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR," +
				"DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),CONTRACT_TYPE FROM " +
				"FMS7_DR_CR_NOTE WHERE CUSTOMER_CD='"+customer_cd+"' ORDER BY DR_CR_NO";	
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(!dr_cr_flag.trim().equals("") && dr_cr_flag!=null && !dr_cr_flag.trim().equals("0"))
			{
				queryString = "SELECT DR_CR_FLAG,DR_CR_NO,TO_CHAR(DR_CR_DT,'dd/mm/yyyy')," +
				"DR_CR_NET_AMT_INR,CUSTOMER_CD,CRITERIA,INT_AMT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR," +
				"DR_CR_FIN_YEAR,TO_CHAR(DR_CR_DT,'dd/mm/yyyy'),CONTRACT_TYPE FROM FMS7_DR_CR_NOTE " +
				"WHERE DR_CR_FLAG='"+dr_cr_flag+"'  ORDER BY DR_CR_NO";	
				//System.out.println("FMS7_DR_CR_NOTE Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					DR_CR_FLAG.add(rset.getString(1)==null?"":rset.getString(1));
					DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2)+"/"+rset.getString(10).substring(2,4)+"-"+rset.getString(10).substring(7));
					temp_DR_CR_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					if(!rset.getString(6).trim().equals("") && rset.getString(6)!=null)
					{
						if(rset.getString(6).trim().equalsIgnoreCase("DIFF-EXG"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(4)==null?"":rset.getString(4));
							CRITERIA.add("Difference in Exchange Rate");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("D-PAY"))
						{
							DR_CR_GROSS_AMT_INR.add(rset.getString(7)==null?"":rset.getString(7));
							CRITERIA.add("Delay in Payment");
						}
						else if(rset.getString(6).trim().equalsIgnoreCase("C-FORM"))
						{
							DR_CR_GROSS_AMT_INR.add("");
							CRITERIA.add("Absence of C-Form");
						}
					}
					else
					{
						DR_CR_GROSS_AMT_INR.add("");
						CRITERIA.add("");
					}
					CUSTOMER_CD.add(rset.getString(5)==null?"":rset.getString(5));
					HLPL_INV_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					DR_CR_FIN_YEAR.add(rset.getString(10)==null?"":rset.getString(10));
					DR_CR_DT.add(rset.getString(11)==null?"":rset.getString(11));
					CRITERIA_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else
			{
				//System.out.println("NOT In queryString");
			}
			
			
			if(CUSTOMER_CD.size()>0)
			{
				for(int i=0;i<CUSTOMER_CD.size();i++)
				{
					queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST " +
					"WHERE CUSTOMER_CD='"+CUSTOMER_CD.elementAt(i)+"' ORDER BY CUSTOMER_CD";
					//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
						CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
					}
					else
					{
						CUSTOMER_NAME.add("");
						CUSTOMER_ABBR.add("");
					}
					
					queryString = "SELECT PAY_AMT,TO_CHAR(PAY_DT,'dd/mm/yyyy') FROM FMS7_DR_CR_REGISTER " +
					"WHERE DR_CR_NO='"+temp_DR_CR_NO.elementAt(i)+"' AND DR_CR_FLAG='"+DR_CR_FLAG.elementAt(i)+"' " +
					"AND DR_CR_FIN_YEAR='"+DR_CR_FIN_YEAR.elementAt(i)+"' ORDER BY DR_CR_NO,DR_CR_FLAG,DR_CR_FIN_YEAR";
					//System.out.println("FMS7_DR_CR_REGISTER Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						PAY_AMT.add(rset.getString(1)==null?"":rset.getString(1));
						PAY_DT.add(rset.getString(2)==null?"":rset.getString(2));
					}
					else
					{
						PAY_AMT.add("");
						PAY_DT.add("");
					}
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> fetch_Hedge_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	
	public void fetch_Bank_Remmitance_Details()
	{
		try
		{	
			//System.out.println("Inside fetch_Bank_Remmitance_Details() !!!"); 
			int hedge_seq_no = 0;
			if(financial_year!=null && !financial_year.trim().equals("") && hedge_no!=null && !hedge_no.trim().equals("") && !hedge_no.trim().equals("0") && hedge_rollover_no!=null && !hedge_rollover_no.trim().equals(""))
			{	
				//Following Code for fetching  Hedge Register in Bank Remittance===========================================================================				
				queryString = "SELECT HEDGE_SEQ_NO, BANK_CD, CREDIT_RATING, BANK_CONTR_NO, " +
							  "TO_CHAR(HEDGE_CON_DT,'DD/MM/YYYY'), TO_CHAR(HEDGE_VAL_DT,'DD/MM/YYYY'), " +
							  "HEDGE_VALUE, HEDGE_TOTAL FROM FMS7_HEDGE_MST " +
							  "WHERE FIN_YEAR='"+financial_year+"' AND HEDGE_SEQ_NO="+hedge_no+" AND " +
							  "HEDGE_ROLLOVER_NO='"+hedge_rollover_no+"'";
				//System.out.println("FMS7_HEDGE_DTL Fetch Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					hedge_seq_no = Integer.parseInt(rset.getString(1)==null?"0":rset.getString(1));
					bank_cd		 = rset.getString(2)==null?"":rset.getString(2);
					credit_rate	 = rset.getString(3)==null?"":rset.getString(3);
					bank_cont_no = rset.getString(4)==null?"":rset.getString(4);
					hedge_con_dt = rset.getString(5)==null?"":rset.getString(5);
					hedge_val_dt = rset.getString(6)==null?"":rset.getString(6);
					hedge_value	 = rset.getString(7)==null?"":rset.getString(7);
					total		 = rset.getString(8)==null?"":rset.getString(8);
					if(!total.equals(""))
					{
						total = nf2.format(Double.parseDouble(total));
					}
					if(!hedge_value.equals("") && !total.equals(""))
					{
						hedge_payment = nf4.format(Double.parseDouble(total) * Double.parseDouble(hedge_value));
					}
					else
					{
						hedge_payment = "";
					}
				}
				//System.out.println("hedge_seq_no = "+hedge_seq_no);
				
				queryString = "SELECT BANK_NAME FROM FMS7_BANK_MST WHERE BANK_CD="+bank_cd+" ";
				//System.out.println("Bank Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{				
					bank_name = rset.getString(1)==null?"":rset.getString(1);					
				}
				
				queryString = "SELECT HEDGE_ROLLOVER_NO, HEDGE_SEQ_NO, FIN_YEAR, TO_CHAR(REMITTANCE_DT,'DD/MM/YYYY'), " +
							  "BANK_CHARGES, HEDGE_PAYMENT, TOTAL_PAYMENT, PAYMENT_REF_NO, REMARK, REMITTANCE_FLAG, " +
							  "HEDGE_EXG_RT_VAL_DT, TO_CHAR(CANCELLATION_DT,'DD/MM/YYYY'), CANCELLATION_FLAG, CANCEL_REMARK " +
							  "FROM FMS7_BANK_REMITTANCE_DTL WHERE HEDGE_SEQ_NO="+hedge_no+" AND " +
							  "FIN_YEAR='"+financial_year+"' AND HEDGE_ROLLOVER_NO='"+hedge_rollover_no+"'";
	
				//System.out.println("Fetch = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					hedge_rollover_no = rset.getString(1)==null?"":rset.getString(1);
					hedge_no  		= rset.getString(2)==null?"":rset.getString(2);
					financial_year  = rset.getString(3)==null?"":rset.getString(3);
					remit_dt		= rset.getString(4)==null?"":rset.getString(4);					
					bank_charges	= rset.getString(5)==null?"":rset.getString(5);					
					
					cancellation_dt   = rset.getString(12)==null?"":rset.getString(12);
					cancellation_flag   = rset.getString(13)==null?"N":rset.getString(13);
					cancel_remark   = rset.getString(14)==null?"":rset.getString(14);
					
					if(!bank_charges.trim().equals("") && !hedge_payment.equals(""))
					{
						bank_charges  = "" + nf4.format(Double.parseDouble(bank_charges));
						if(cancellation_flag.trim().equalsIgnoreCase("Y"))
						{
							total_payment = "" + nf4.format(Double.parseDouble(bank_charges));
						}
						else
						{
							total_payment = "" + nf4.format(Double.parseDouble(bank_charges) + Double.parseDouble(hedge_payment));
						}
					}
					
					payment_ref_no  = rset.getString(8)==null?"":rset.getString(8);
					remark 			= rset.getString(9)==null?"":rset.getString(9);
					remit_flag      = rset.getString(10)==null?"N":rset.getString(10);
					hedge_excg_dt   = rset.getString(11)==null?"":rset.getString(11);
					if(!hedge_excg_dt.trim().equals(""))
					{
						hedge_excg_dt  = "" + nf2.format(Double.parseDouble(hedge_excg_dt));
					}
				}
				//System.out.println("remit_flag = "+remit_flag);
				
				if(hedge_seq_no<10)
				{
					hedge_seq="000"+hedge_seq_no+"/"+financial_year;
				}
				else if(hedge_seq_no<100) 
				{
					hedge_seq="00"+hedge_seq_no+"/"+financial_year;
				}
				else if(hedge_seq_no<1000) 
				{
					hedge_seq="0"+hedge_seq_no+"/"+financial_year;
				}
				else
				{
					hedge_seq=hedge_seq_no+"/"+financial_year;
				}			
				hedge_no = ""+hedge_seq_no;					
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> fetch_Hedge_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	//Summary Method introduce by Milan
	public void get_Purchase_Summary_domestic_Approval()
	{
		if(!ACT_ARRV_MONTH_DOM.isEmpty())
		{
			//CARGO_REF_CD
			
			String chk1_dom = "";
			String chk1_tax_dom="";
			String chk1_tds_dom="";
			String chk1_taxusd_dom="";
			String chk2_dom = "";
			String chk3_dom = "";
			String chk4_dom = "";
			String chk5_dom = "";
			String chk6_dom = "";
			String chk7_dom = "";
			String chk8_dom = "";
			String chk9_dom = "";
			
			String arrv_month_dom = ACT_ARRV_MONTH_DOM.elementAt(0).toString().trim();
			double actual_unloaded_qty_dom = 0;
			double inv_taxamt = 0;
			double inv_tdsamt = 0;
			double inv_taxamt_usd=0;
			String Scargo_ref_cd_dom = "";
			
			double usd_val_invoice_dom = 0;
			
			double final_seller_inv_amt_inr_dom = 0;
			double tot_cd_amt_dom = 0;
			double tot_paid_refund_dom = 0;
			double cd_paid_dom = 0;
			double custom_duty_usd_dom = 0;
			double addl_custom_duty_usd_dom = 0;
			double cost_of_purchase_usd_dom = 0;
			//COST_OF_PURCHASE_USD
			
			for(int i = 0; i<ACT_ARRV_MONTH_DOM.size(); i++)
			{
				//System.out.println(ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim()+"---arrv_month_dom--"+arrv_month_dom);
				if(arrv_month_dom.equals(ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim()))
				{
					//System.out.println(ACT_ARRV_MONTH.elementAt(i).toString().trim());
					Scargo_ref_cd_dom += CARGO_REF_CD_DOM.elementAt(i).toString().trim()+", ";
					
					if(!ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty_dom += Double.parseDouble(ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_dom += "y";
						
					}
					else
					{
						actual_unloaded_qty_dom += 0; 
						chk1_dom += "-";
					}
					if(!INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_taxamt += Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tax_dom += "y";
						
					}
					else
					{
						inv_taxamt += 0; 
						chk1_tax_dom += "-";
					}
					if(!INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_tdsamt += Double.parseDouble(INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tds_dom += "y";
						
					}
					else
					{
						inv_tdsamt += 0; 
						chk1_tds_dom += "-";
					}
					if(!TAX_amt_usd_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_taxamt_usd += Double.parseDouble(TAX_amt_usd_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_taxusd_dom += "y";
						
					}
					else
					{
						inv_taxamt_usd += 0; 
						chk1_taxusd_dom += "-";
					}
					
					if(!USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice_dom += Double.parseDouble(USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2_dom += "y";
					}
					else
					{
						usd_val_invoice_dom += 0; chk2_dom += "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr_dom += Double.parseDouble(FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3_dom += "y";
					}
					else
					{
						final_seller_inv_amt_inr_dom += 0; chk3_dom += "-";
					}
					
					if(!TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt_dom += Double.parseDouble(TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4_dom += "y";
					}
					else
					{
						tot_cd_amt_dom += 0; chk4_dom += "-";
					}
					
					if(!TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund_dom += Double.parseDouble(TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5_dom += "y";
					}
					else
					{
						tot_paid_refund_dom += 0; chk5_dom += "-";
					}
					
					if(!CD_PAID_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid_dom += Double.parseDouble(CD_PAID_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6_dom += "y";
					}
					else
					{
						cd_paid_dom += 0; chk6_dom += "-";
					}
					
					if(!CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd_dom += Double.parseDouble(CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7_dom += "y";
					}
					else
					{
						custom_duty_usd_dom += 0; chk7_dom += "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd_dom += Double.parseDouble(ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8_dom += "y";
					}
					else
					{
						addl_custom_duty_usd_dom += 0; chk8_dom += "-";
					}
					
					if(!COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd_dom += Double.parseDouble(COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9_dom += "y";
					}
					else
					{
						cost_of_purchase_usd_dom += 0; chk9_dom += "-";
					}
					//
					
				}
				else
				{
					
					SUMMRY_ACT_ARRV_MONTH_DOM.add(""+arrv_month_dom);
					if(chk1_dom.contains("y"))
					{
						SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add(nf3.format(actual_unloaded_qty_dom));
					}
					else
					{
						SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add("-");
					}
					
					if(chk1_tax_dom.contains("y"))
					{
						SUMMRY_TAX_AMT_INR_DOM.add(nf3.format(inv_taxamt));
					}
					else
					{
						SUMMRY_TAX_AMT_INR_DOM.add("-");
					}
					if(chk1_tds_dom.contains("y"))
					{
						SUMMRY_TDS_AMT_INR_DOM.add(nf3.format(inv_tdsamt));
					}
					else
					{
						SUMMRY_TDS_AMT_INR_DOM.add("-");
					}
					if(chk1_taxusd_dom.contains("y"))
					{
						SUMMRY_TAX_AMT_USD_DOM.add(nf3.format(inv_taxamt_usd));
					}
					else
					{
						SUMMRY_TAX_AMT_USD_DOM.add("-");
					}
					
					SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
					if(chk2_dom.contains("y"))
					{
						SUMMRY_USD_VAL_INVOICE_DOM.add(nf3.format(usd_val_invoice_dom));
					}
					else
					{
						SUMMRY_USD_VAL_INVOICE_DOM.add("-");
					}
					if(chk3_dom.contains("y"))
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(final_seller_inv_amt_inr_dom));
					}
					else
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add("-");
					}
					if(chk4_dom.contains("y"))
					{
						SUMMRY_TOTAL_CD_AMT_DOM.add(nf3.format(tot_cd_amt_dom));
					}
					else
					{
						SUMMRY_TOTAL_CD_AMT_DOM.add("-");
					}
					if(chk5_dom.contains("y"))
					{
						SUMMRY_TOTAL_PAID_REFUND_DOM.add(nf3.format(tot_paid_refund_dom));
					}
					else
					{
						SUMMRY_TOTAL_PAID_REFUND_DOM.add("-");
					}
					if(chk6_dom.contains("y"))
					{
						SUMMRY_CD_PAID_DOM.add(nf3.format(cd_paid_dom));
					}
					else
					{
						SUMMRY_CD_PAID_DOM.add("-");
					}
					if(actual_unloaded_qty_dom != 0)
					{
						SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format(cd_paid_dom/actual_unloaded_qty_dom));
					}
					else
					{
						SUMMRY_INR_PER_MMBTU_DOM.add("-"); 
					}
					
					if(chk7_dom.contains("y"))
					{
						SUMMRY_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
					}
					else
					{
						SUMMRY_CUSTOM_DUTY_USD_DOM.add("-");
					}
					if(chk8_dom.contains("y"))
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(addl_custom_duty_usd_dom));
					}
					else
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add("-");
					}
					if(chk9_dom.contains("y"))
					{
						SUMMRY_COST_OF_PURCHASE_USD_DOM.add(nf3.format(cost_of_purchase_usd_dom));
					}
					else
					{
						SUMMRY_COST_OF_PURCHASE_USD_DOM.add("-");
					}
					if(actual_unloaded_qty_dom != 0)
					{
//						System.out.println("cost_of_purchase_usd_dom---"+cost_of_purchase_usd_dom);
//						System.out.println("actual_unloaded_qty_dom---"+actual_unloaded_qty_dom);
						//SUMMRY_USD_PER_MMBTU_DOM.add(nf.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
						SUMMRY_USD_PER_MMBTU_DOM.add("");
					}
					else
					{
						SUMMRY_USD_PER_MMBTU_DOM.add("-"); 
					}
					
					Scargo_ref_cd_dom = "";
					
					Scargo_ref_cd_dom = CARGO_REF_CD_DOM.elementAt(i).toString().trim()+", ";
					if(!ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty_dom = Double.parseDouble(ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_dom += "y";
					}
					else
					{
						actual_unloaded_qty_dom = 0; chk1_dom = "-";
						
					}
					if(!INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_taxamt = Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tax_dom += "y";
					}
					else
					{
						inv_taxamt = 0; chk1_tax_dom = "-";
						
					}
					if(!INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_tdsamt = Double.parseDouble(INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tds_dom += "y";
					}
					else
					{
						inv_tdsamt = 0; chk1_tds_dom = "-";
						
					}
					if(!TAX_amt_usd_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_taxamt_usd = Double.parseDouble(TAX_amt_usd_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_taxusd_dom += "y";
					}
					else
					{
						inv_taxamt_usd = 0; chk1_taxusd_dom = "-";
						
					}
					
					if(!USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice_dom = Double.parseDouble(USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2_dom += "y";
					}
					else
					{
						usd_val_invoice_dom = 0; chk2_dom = "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr_dom = Double.parseDouble(FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3_dom += "y";
					}
					else
					{
						final_seller_inv_amt_inr_dom = 0; chk3_dom = "-";
					}
					
					if(!TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt_dom = Double.parseDouble(TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4_dom += "y";
					}
					else
					{
						tot_cd_amt_dom = 0; chk4_dom = "-";
					}
					
					if(!TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund_dom = Double.parseDouble(TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5_dom += "y";
					}
					else
					{
						tot_paid_refund_dom = 0; chk5_dom = "-";
					}
					
					if(!CD_PAID_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid_dom = Double.parseDouble(CD_PAID_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6_dom += "y";
					}
					else
					{
						cd_paid_dom = 0; chk6_dom = "-";
					}
					
					if(!CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd_dom = Double.parseDouble(CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7_dom += "y";
					}
					else
					{
						custom_duty_usd_dom = 0; chk7_dom = "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd_dom = Double.parseDouble(ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8_dom += "y";
					}
					else
					{
						addl_custom_duty_usd_dom = 0; chk8_dom = "-";
					}
					
					if(!COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd_dom = Double.parseDouble(COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9_dom += "y";
					}
					else
					{
						cost_of_purchase_usd_dom = 0;
						chk9_dom = "-";
					}
					
				}
				arrv_month_dom = ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim();
			}
			SUMMRY_ACT_ARRV_MONTH_DOM.add(""+arrv_month_dom);
			//SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
			
			/*SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			
			SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			SUMMRY_CD_PAID.add(nf3.format(cd_paid));*/
			SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format((cd_paid_dom/actual_unloaded_qty_dom)));
			
			/*SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));*/
			SUMMRY_USD_PER_MMBTU_DOM.add(nf2.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
			
			if(chk1_dom.contains("y"))
			{
				SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add(nf3.format(actual_unloaded_qty_dom));
			}
			else
			{
				SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add("-");
			}
			if(chk1_tax_dom.contains("y"))
			{
				SUMMRY_TAX_AMT_INR_DOM.add(nf3.format(inv_taxamt));
			}
			else
			{
				SUMMRY_TAX_AMT_INR_DOM.add("-");
			}
			if(chk1_tds_dom.contains("y"))
			{
				SUMMRY_TDS_AMT_INR_DOM.add(nf3.format(inv_tdsamt));
			}
			else
			{
				SUMMRY_TDS_AMT_INR_DOM.add("-");
			}
			if(chk1_taxusd_dom.contains("y"))
			{
				SUMMRY_TAX_AMT_USD_DOM.add(nf3.format(inv_taxamt_usd));
			}
			else
			{
				SUMMRY_TAX_AMT_USD_DOM.add("-");
			}
			SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
			if(chk2_dom.contains("y"))
			{
				SUMMRY_USD_VAL_INVOICE_DOM.add(nf3.format(usd_val_invoice_dom));
			}
			else
			{
				SUMMRY_USD_VAL_INVOICE_DOM.add("-");
			}
			if(chk3_dom.contains("y"))
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(final_seller_inv_amt_inr_dom));
			}
			else
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add("-");
			}
			if(chk4_dom.contains("y"))
			{
				SUMMRY_TOTAL_CD_AMT_DOM.add(nf3.format(tot_cd_amt_dom));
			}
			else
			{
				SUMMRY_TOTAL_CD_AMT_DOM.add("-");
			}
			if(chk5_dom.contains("y"))
			{
				SUMMRY_TOTAL_PAID_REFUND_DOM.add(nf3.format(tot_paid_refund_dom));
			}
			else
			{
				SUMMRY_TOTAL_PAID_REFUND_DOM.add("-");
			}
			if(chk6_dom.contains("y"))
			{
				SUMMRY_CD_PAID_DOM.add(nf3.format(cd_paid_dom));
			}
			else
			{
				SUMMRY_CD_PAID_DOM.add("-");
			}
			if(actual_unloaded_qty_dom != 0)
			{
				SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format(cd_paid_dom/actual_unloaded_qty_dom));
			}
			else
			{
				SUMMRY_INR_PER_MMBTU_DOM.add("-"); 
			}
			
			if(chk7_dom.contains("y"))
			{
				SUMMRY_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
			}
			else
			{
				SUMMRY_CUSTOM_DUTY_USD_DOM.add("-");
			}
			if(chk8_dom.contains("y"))
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
			}
			else
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add("-");
			}
			if(chk9_dom.contains("y"))
			{
				SUMMRY_COST_OF_PURCHASE_USD_DOM.add(nf3.format(cost_of_purchase_usd_dom));
			}
			else
			{
				SUMMRY_COST_OF_PURCHASE_USD_DOM.add("-");
			}
			if(actual_unloaded_qty_dom != 0)
			{
				SUMMRY_USD_PER_MMBTU_DOM.add(nf2.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
			}
			else
			{
				SUMMRY_USD_PER_MMBTU_DOM.add("-"); 
			}
			//System.out.println(" "+chk1);
		}
	
	}
	public void get_Purchase_Summary_domestic()
	{

		if(!ACT_ARRV_MONTH_DOM.isEmpty())
		{
			//CARGO_REF_CD
			
			String chk1_dom = "";
			String chk1_tax_dom="";
			String chk1_taxusd_dom="";
			String chk1_tds_dom="";
			String chk2_dom = "";
			String chk3_dom = "";
			String chk4_dom = "";
			String chk5_dom = "";
			String chk6_dom = "";
			String chk7_dom = "";
			String chk8_dom = "";
			String chk9_dom = "";
			
			String arrv_month_dom = ACT_ARRV_MONTH_DOM.elementAt(0).toString().trim();
			double actual_unloaded_qty_dom = 0;
			double inv_taxamt = 0;
			double inv_taxamt_usd=0;
			double inv_tdsamt=0;
			String Scargo_ref_cd_dom = "";
			
			double usd_val_invoice_dom = 0;
			
			double final_seller_inv_amt_inr_dom = 0;
			double tot_cd_amt_dom = 0;
			double tot_paid_refund_dom = 0;
			double cd_paid_dom = 0;
			double custom_duty_usd_dom = 0;
			double addl_custom_duty_usd_dom = 0;
			double cost_of_purchase_usd_dom = 0;
			//COST_OF_PURCHASE_USD
			
			for(int i = 0; i<ACT_ARRV_MONTH_DOM.size(); i++)
			{
				//System.out.println(ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim()+"---arrv_month_dom--"+arrv_month_dom);
				if(arrv_month_dom.equals(ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim()))
				{
					//System.out.println(ACT_ARRV_MONTH.elementAt(i).toString().trim());
					Scargo_ref_cd_dom += CARGO_REF_CD_DOM.elementAt(i).toString().trim()+", ";
					
					if(!ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty_dom += Double.parseDouble(ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_dom += "y";
						
					}
					else
					{
						actual_unloaded_qty_dom += 0; 
						chk1_dom += "-";
					}
					if(!INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_taxamt += Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tax_dom += "y";
						
					}
					else
					{
						inv_taxamt += 0; 
						chk1_tax_dom += "-";
					}
					if(!INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_tdsamt += Double.parseDouble(INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tds_dom += "y";
						
					}
					else
					{
						inv_tdsamt += 0; 
						chk1_tds_dom += "-";
					}
					if(!TAX_amt_usd_DOM.elementAt(i).toString().trim().equals("-"))
					{
						//System.out.println("-INVOICE_TAX_AMT_DOM.elementAt(i)-"+INVOICE_TAX_AMT_DOM.elementAt(i));
						inv_taxamt_usd += Double.parseDouble(TAX_amt_usd_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_taxusd_dom += "y";
						
					}
					else
					{
						inv_taxamt_usd += 0; 
						chk1_taxusd_dom += "-";
					}
					
					if(!USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice_dom += Double.parseDouble(USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2_dom += "y";
					}
					else
					{
						usd_val_invoice_dom += 0; chk2_dom += "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr_dom += Double.parseDouble(FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3_dom += "y";
					}
					else
					{
						final_seller_inv_amt_inr_dom += 0; chk3_dom += "-";
					}
					
					if(!TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt_dom += Double.parseDouble(TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4_dom += "y";
					}
					else
					{
						tot_cd_amt_dom += 0; chk4_dom += "-";
					}
					
					if(!TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund_dom += Double.parseDouble(TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5_dom += "y";
					}
					else
					{
						tot_paid_refund_dom += 0; chk5_dom += "-";
					}
					
					if(!CD_PAID_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid_dom += Double.parseDouble(CD_PAID_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6_dom += "y";
					}
					else
					{
						cd_paid_dom += 0; chk6_dom += "-";
					}
					
					if(!CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd_dom += Double.parseDouble(CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7_dom += "y";
					}
					else
					{
						custom_duty_usd_dom += 0; chk7_dom += "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd_dom += Double.parseDouble(ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8_dom += "y";
					}
					else
					{
						addl_custom_duty_usd_dom += 0; chk8_dom += "-";
					}
					
					if(!COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd_dom += Double.parseDouble(COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9_dom += "y";
					}
					else
					{
						cost_of_purchase_usd_dom += 0; chk9_dom += "-";
					}
					//
					
				}
				else
				{
					
					SUMMRY_ACT_ARRV_MONTH_DOM.add(""+arrv_month_dom);
					if(chk1_dom.contains("y"))
					{
						SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add(nf3.format(actual_unloaded_qty_dom));
					}
					else
					{
						SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add("-");
					}
					
					if(chk1_tax_dom.contains("y"))
					{
						SUMMRY_TAX_AMT_INR_DOM.add(nf3.format(inv_taxamt));
					}
					else
					{
						SUMMRY_TAX_AMT_INR_DOM.add("-");
					}
					if(chk1_tds_dom.contains("y"))
					{
						SUMMRY_TDS_AMT_INR_DOM.add(nf3.format(inv_tdsamt));
					}
					else
					{
						SUMMRY_TDS_AMT_INR_DOM.add("-");
					}
					if(chk1_taxusd_dom.contains("y"))
					{
						SUMMRY_TAX_AMT_USD_DOM.add(nf3.format(inv_taxamt_usd));
					}
					else
					{
						SUMMRY_TAX_AMT_USD_DOM.add("-");
					}
					
					SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
					if(chk2_dom.contains("y"))
					{
						SUMMRY_USD_VAL_INVOICE_DOM.add(nf3.format(usd_val_invoice_dom));
					}
					else
					{
						SUMMRY_USD_VAL_INVOICE_DOM.add("-");
					}
					if(chk3_dom.contains("y"))
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(final_seller_inv_amt_inr_dom));
					}
					else
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add("-");
					}
					if(chk4_dom.contains("y"))
					{
						SUMMRY_TOTAL_CD_AMT_DOM.add(nf3.format(tot_cd_amt_dom));
					}
					else
					{
						SUMMRY_TOTAL_CD_AMT_DOM.add("-");
					}
					if(chk5_dom.contains("y"))
					{
						SUMMRY_TOTAL_PAID_REFUND_DOM.add(nf3.format(tot_paid_refund_dom));
					}
					else
					{
						SUMMRY_TOTAL_PAID_REFUND_DOM.add("-");
					}
					if(chk6_dom.contains("y"))
					{
						SUMMRY_CD_PAID_DOM.add(nf3.format(cd_paid_dom));
					}
					else
					{
						SUMMRY_CD_PAID_DOM.add("-");
					}
					if(actual_unloaded_qty_dom != 0)
					{
						SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format(cd_paid_dom/actual_unloaded_qty_dom));
					}
					else
					{
						SUMMRY_INR_PER_MMBTU_DOM.add("-"); 
					}
					
					if(chk7_dom.contains("y"))
					{
						SUMMRY_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
					}
					else
					{
						SUMMRY_CUSTOM_DUTY_USD_DOM.add("-");
					}
					if(chk8_dom.contains("y"))
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(addl_custom_duty_usd_dom));
					}
					else
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add("-");
					}
					if(chk9_dom.contains("y"))
					{
						SUMMRY_COST_OF_PURCHASE_USD_DOM.add(nf3.format(cost_of_purchase_usd_dom));
					}
					else
					{
						SUMMRY_COST_OF_PURCHASE_USD_DOM.add("-");
					}
					if(actual_unloaded_qty_dom != 0)
					{
//						System.out.println("cost_of_purchase_usd_dom---"+cost_of_purchase_usd_dom);
//						System.out.println("actual_unloaded_qty_dom---"+actual_unloaded_qty_dom);
						//SUMMRY_USD_PER_MMBTU_DOM.add(nf.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
						SUMMRY_USD_PER_MMBTU_DOM.add("");
					}
					else
					{
						SUMMRY_USD_PER_MMBTU_DOM.add("-"); 
					}
					
					Scargo_ref_cd_dom = "";
					
					Scargo_ref_cd_dom = CARGO_REF_CD_DOM.elementAt(i).toString().trim()+", ";
					if(!ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty_dom = Double.parseDouble(ACTUAL_UNLOADED_QTY_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_dom += "y";
					}
					else
					{
						actual_unloaded_qty_dom = 0; chk1_dom = "-";
						
					}
					if(!INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_taxamt = Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tax_dom += "y";
					}
					else
					{
						inv_taxamt = 0; chk1_tax_dom = "-";
						
					}
					if(!INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_tdsamt = Double.parseDouble(INVOICE_AMT_TDS_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_tds_dom += "y";
					}
					else
					{
						inv_tdsamt = 0; chk1_tds_dom = "-";
						
					}
					if(!TAX_amt_usd_DOM.elementAt(i).toString().trim().equals("-"))
					{
						inv_taxamt_usd = Double.parseDouble(TAX_amt_usd_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1_taxusd_dom += "y";
					}
					else
					{
						inv_taxamt_usd = 0; chk1_taxusd_dom = "-";
						
					}
					
					if(!USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice_dom = Double.parseDouble(USD_VAL_INVOICE_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2_dom += "y";
					}
					else
					{
						usd_val_invoice_dom = 0; chk2_dom = "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr_dom = Double.parseDouble(FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3_dom += "y";
					}
					else
					{
						final_seller_inv_amt_inr_dom = 0; chk3_dom = "-";
					}
					
					if(!TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt_dom = Double.parseDouble(TOTAL_CD_AMT_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4_dom += "y";
					}
					else
					{
						tot_cd_amt_dom = 0; chk4_dom = "-";
					}
					
					if(!TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund_dom = Double.parseDouble(TOTAL_PAID_REFUND_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5_dom += "y";
					}
					else
					{
						tot_paid_refund_dom = 0; chk5_dom = "-";
					}
					
					if(!CD_PAID_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid_dom = Double.parseDouble(CD_PAID_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6_dom += "y";
					}
					else
					{
						cd_paid_dom = 0; chk6_dom = "-";
					}
					
					if(!CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd_dom = Double.parseDouble(CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7_dom += "y";
					}
					else
					{
						custom_duty_usd_dom = 0; chk7_dom = "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd_dom = Double.parseDouble(ADDL_CUSTOM_DUTY_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8_dom += "y";
					}
					else
					{
						addl_custom_duty_usd_dom = 0; chk8_dom = "-";
					}
					
					if(!COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd_dom = Double.parseDouble(COST_OF_PURCHASE_USD_DOM.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9_dom += "y";
					}
					else
					{
						cost_of_purchase_usd_dom = 0;
						chk9_dom = "-";
					}
					
				}
				arrv_month_dom = ACT_ARRV_MONTH_DOM.elementAt(i).toString().trim();
			}
			SUMMRY_ACT_ARRV_MONTH_DOM.add(""+arrv_month_dom);
			//SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
			
			/*SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			
			SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			SUMMRY_CD_PAID.add(nf3.format(cd_paid));*/
			SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format((cd_paid_dom/actual_unloaded_qty_dom)));
			
			/*SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));*/
			SUMMRY_USD_PER_MMBTU_DOM.add(nf2.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
			
			if(chk1_dom.contains("y"))
			{
				SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add(nf3.format(actual_unloaded_qty_dom));
			}
			else
			{
				SUMMRY_ACTUAL_UNLOADED_QTY_DOM.add("-");
			}
			if(chk1_tax_dom.contains("y"))
			{
				SUMMRY_TAX_AMT_INR_DOM.add(nf3.format(inv_taxamt));
			}
			else
			{
				SUMMRY_TAX_AMT_INR_DOM.add("-");
			}
			if(chk1_tds_dom.contains("y"))
			{
				SUMMRY_TDS_AMT_INR_DOM.add(nf3.format(inv_tdsamt));
			}
			else
			{
				SUMMRY_TDS_AMT_INR_DOM.add("-");
			}
			if(chk1_taxusd_dom.contains("y"))
			{
				SUMMRY_TAX_AMT_USD_DOM.add(nf3.format(inv_taxamt_usd));
			}
			else
			{
				SUMMRY_TAX_AMT_USD_DOM.add("-");
			}
			SUMMRY_CARGO_REF_CD_DOM.add(Scargo_ref_cd_dom);
			if(chk2_dom.contains("y"))
			{
				SUMMRY_USD_VAL_INVOICE_DOM.add(nf3.format(usd_val_invoice_dom));
			}
			else
			{
				SUMMRY_USD_VAL_INVOICE_DOM.add("-");
			}
			if(chk3_dom.contains("y"))
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(final_seller_inv_amt_inr_dom));
			}
			else
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM.add("-");
			}
			if(chk4_dom.contains("y"))
			{
				SUMMRY_TOTAL_CD_AMT_DOM.add(nf3.format(tot_cd_amt_dom));
			}
			else
			{
				SUMMRY_TOTAL_CD_AMT_DOM.add("-");
			}
			if(chk5_dom.contains("y"))
			{
				SUMMRY_TOTAL_PAID_REFUND_DOM.add(nf3.format(tot_paid_refund_dom));
			}
			else
			{
				SUMMRY_TOTAL_PAID_REFUND_DOM.add("-");
			}
			if(chk6_dom.contains("y"))
			{
				SUMMRY_CD_PAID_DOM.add(nf3.format(cd_paid_dom));
			}
			else
			{
				SUMMRY_CD_PAID_DOM.add("-");
			}
			if(actual_unloaded_qty_dom != 0)
			{
				SUMMRY_INR_PER_MMBTU_DOM.add(nf2.format(cd_paid_dom/actual_unloaded_qty_dom));
			}
			else
			{
				SUMMRY_INR_PER_MMBTU_DOM.add("-"); 
			}
			
			if(chk7_dom.contains("y"))
			{
				SUMMRY_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
			}
			else
			{
				SUMMRY_CUSTOM_DUTY_USD_DOM.add("-");
			}
			if(chk8_dom.contains("y"))
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(custom_duty_usd_dom));
			}
			else
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM.add("-");
			}
			if(chk9_dom.contains("y"))
			{
				SUMMRY_COST_OF_PURCHASE_USD_DOM.add(nf3.format(cost_of_purchase_usd_dom));
			}
			else
			{
				SUMMRY_COST_OF_PURCHASE_USD_DOM.add("-");
			}
			if(actual_unloaded_qty_dom != 0)
			{
				SUMMRY_USD_PER_MMBTU_DOM.add(nf2.format((cost_of_purchase_usd_dom/actual_unloaded_qty_dom)));
			}
			else
			{
				SUMMRY_USD_PER_MMBTU_DOM.add("-"); 
			}
			//System.out.println(" "+chk1);
		}
		
		
		
		//System.out.println(" "+SUMMRY_ACTUAL_UNLOADED_QTY);
		//System.out.println(" "+SUMMRY_CARGO_REF_CD);
		//System.out.println(" "+SUMMRY_USD_VAL_INVOICE);
		
	
	}
	public void get_Purchase_Summary_Approval()
	{

		//System.out.println("get_Purchase_Summary "+ACT_ARRV_MONTH);
		
		/*
		 * ACT_ARRV_MONTH
	ACTUAL_UNLOADED_QTY
	USD_VAL_INVOICE
	FINAL_SELLER_INV_AMT_INR
	TOTAL_CD_AMT
	TOTAL_PAID_REFUND
	CD_PAID
	INR_PER_MMBTU
	USD_VAL_INVOICE
	CUSTOM_DUTY_USD
	ADDL_CUSTOM_DUTY_USD
	COST_OF_PURCHASE_USD
	USD_PER_MMBTU

public Vector SUMMRY_ACT_ARRV_MONTH = new Vector();
	public Vector SUMMRY_ACTUAL_UNLOADED_QTY = new Vector();
	public Vector SUMMRY_USD_VAL_INVOICE = new Vector();
	public Vector SUMMRY_FINAL_SELLER_INV_AMT_INR = new Vector();
	
	public Vector SUMMRY_TOTAL_CD_AMT = new Vector();
	public Vector SUMMRY_TOTAL_PAID_REFUND = new Vector();
	public Vector SUMMRY_CD_PAID = new Vector();
	
	public Vector SUMMRY_INR_PER_MMBTU = new Vector();
	
	public Vector SUMMRY_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_ADDL_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_COST_OF_PURCHASE_USD = new Vector();
	public Vector SUMMRY_USD_PER_MMBTU = new Vector();
	
		 */
		
		if(!ACT_ARRV_MONTH.isEmpty())
		{
			//CARGO_REF_CD
			
			String chk1 = "";
			String chk2 = "";
			String chk3 = "";
			String chk4 = "";
			String chk5 = "";
			String chk6 = "";
			String chk7 = "";
			String chk8 = "";
			String chk9 = "";
			
			String arrv_month = ACT_ARRV_MONTH.elementAt(0).toString().trim();
			double actual_unloaded_qty = 0;
			String Scargo_ref_cd = "";
			
			double usd_val_invoice = 0;
			
			double final_seller_inv_amt_inr = 0;
			double tot_cd_amt = 0;
			double tot_paid_refund = 0;
			double cd_paid = 0;
			double custom_duty_usd = 0;
			double addl_custom_duty_usd = 0;
			double cost_of_purchase_usd = 0;
			//COST_OF_PURCHASE_USD
			
			for(int i = 0; i<ACT_ARRV_MONTH.size(); i++)
			{
				
				if(arrv_month.equals(ACT_ARRV_MONTH.elementAt(i).toString().trim()))
				{
					//System.out.println(ACT_ARRV_MONTH.elementAt(i).toString().trim());
					Scargo_ref_cd += CARGO_REF_CD.elementAt(i).toString().trim()+", ";
					
					if(!ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty += Double.parseDouble(ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1 += "y";
						
					}
					else
					{
						actual_unloaded_qty += 0; 
						chk1 += "-";
					}
					
					if(!USD_VAL_INVOICE.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice += Double.parseDouble(USD_VAL_INVOICE.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2 += "y";
					}
					else
					{
						usd_val_invoice += 0; chk2 += "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr += Double.parseDouble(FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3 += "y";
					}
					else
					{
						final_seller_inv_amt_inr += 0; chk3 += "-";
					}
					
					if(!TOTAL_CD_AMT.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt += Double.parseDouble(TOTAL_CD_AMT.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4 += "y";
					}
					else
					{
						tot_cd_amt += 0; chk4 += "-";
					}
					
					if(!TOTAL_PAID_REFUND.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund += Double.parseDouble(TOTAL_PAID_REFUND.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5 += "y";
					}
					else
					{
						tot_paid_refund += 0; chk5 += "-";
					}
					
					if(!CD_PAID.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid += Double.parseDouble(CD_PAID.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6 += "y";
					}
					else
					{
						cd_paid += 0; chk6 += "-";
					}
					
					if(!CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd += Double.parseDouble(CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7 += "y";
					}
					else
					{
						custom_duty_usd += 0; chk7 += "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd += Double.parseDouble(ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8 += "y";
					}
					else
					{
						addl_custom_duty_usd += 0; chk8 += "-";
					}
					
					if(!COST_OF_PURCHASE_USD.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd += Double.parseDouble(COST_OF_PURCHASE_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9 += "y";
					}
					else
					{
						cost_of_purchase_usd += 0; chk9 += "-";
					}
					//
					
				}
				else
				{
					
					SUMMRY_ACT_ARRV_MONTH.add(""+arrv_month);
					if(chk1.contains("y"))
					{
						SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
					}
					else
					{
						SUMMRY_ACTUAL_UNLOADED_QTY.add("-");
					}
					SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
					if(chk2.contains("y"))
					{
						SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
					}
					else
					{
						SUMMRY_USD_VAL_INVOICE.add("-");
					}
					if(chk3.contains("y"))
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
					}
					else
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR.add("-");
					}
					if(chk4.contains("y"))
					{
						SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
					}
					else
					{
						SUMMRY_TOTAL_CD_AMT.add("-");
					}
					if(chk5.contains("y"))
					{
						SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
					}
					else
					{
						SUMMRY_TOTAL_PAID_REFUND.add("-");
					}
					if(chk6.contains("y"))
					{
						SUMMRY_CD_PAID.add(nf3.format(cd_paid));
					}
					else
					{
						SUMMRY_CD_PAID.add("-");
					}
					if(actual_unloaded_qty != 0)
					{
						SUMMRY_INR_PER_MMBTU.add(nf2.format(cd_paid/actual_unloaded_qty));
					}
					else
					{
						SUMMRY_INR_PER_MMBTU.add("-"); 
					}
					
					if(chk7.contains("y"))
					{
						SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
					}
					else
					{
						SUMMRY_CUSTOM_DUTY_USD.add("-");
					}
					if(chk8.contains("y"))
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(addl_custom_duty_usd));
					}
					else
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD.add("-");
					}
					if(chk9.contains("y"))
					{
						SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));
					}
					else
					{
						SUMMRY_COST_OF_PURCHASE_USD.add("-");
					}
					if(actual_unloaded_qty != 0)
					{
						SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
					}
					else
					{
						SUMMRY_USD_PER_MMBTU.add("-"); 
					}
					
					Scargo_ref_cd = "";
					
					Scargo_ref_cd = CARGO_REF_CD.elementAt(i).toString().trim()+", ";
					if(!ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty = Double.parseDouble(ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1 += "y";
					}
					else
					{
						actual_unloaded_qty = 0; chk1 = "-";
						
					}
					
					if(!USD_VAL_INVOICE.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice = Double.parseDouble(USD_VAL_INVOICE.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2 += "y";
					}
					else
					{
						usd_val_invoice = 0; chk2 = "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr = Double.parseDouble(FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3 += "y";
					}
					else
					{
						final_seller_inv_amt_inr = 0; chk3 = "-";
					}
					
					if(!TOTAL_CD_AMT.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt = Double.parseDouble(TOTAL_CD_AMT.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4 += "y";
					}
					else
					{
						tot_cd_amt = 0; chk4 = "-";
					}
					
					if(!TOTAL_PAID_REFUND.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund = Double.parseDouble(TOTAL_PAID_REFUND.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5 += "y";
					}
					else
					{
						tot_paid_refund = 0; chk5 = "-";
					}
					
					if(!CD_PAID.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid = Double.parseDouble(CD_PAID.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6 += "y";
					}
					else
					{
						cd_paid = 0; chk6 = "-";
					}
					
					if(!CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd = Double.parseDouble(CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7 += "y";
					}
					else
					{
						custom_duty_usd = 0; chk7 = "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd = Double.parseDouble(ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8 += "y";
					}
					else
					{
						addl_custom_duty_usd = 0; chk8 = "-";
					}
					
					if(!COST_OF_PURCHASE_USD.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd = Double.parseDouble(COST_OF_PURCHASE_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9 += "y";
					}
					else
					{
						cost_of_purchase_usd = 0;
						chk9 = "-";
					}
					
				}
				arrv_month = ACT_ARRV_MONTH.elementAt(i).toString().trim();
			}
			SUMMRY_ACT_ARRV_MONTH.add(""+arrv_month);
			//SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
			
			/*SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			
			SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			SUMMRY_CD_PAID.add(nf3.format(cd_paid));*/
			SUMMRY_INR_PER_MMBTU.add(nf2.format((cd_paid/actual_unloaded_qty)));
			
			/*SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));*/
			SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
			
			if(chk1.contains("y"))
			{
				SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			}
			else
			{
				SUMMRY_ACTUAL_UNLOADED_QTY.add("-");
			}
			SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
			if(chk2.contains("y"))
			{
				SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			}
			else
			{
				SUMMRY_USD_VAL_INVOICE.add("-");
			}
			if(chk3.contains("y"))
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			}
			else
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR.add("-");
			}
			if(chk4.contains("y"))
			{
				SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			}
			else
			{
				SUMMRY_TOTAL_CD_AMT.add("-");
			}
			if(chk5.contains("y"))
			{
				SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			}
			else
			{
				SUMMRY_TOTAL_PAID_REFUND.add("-");
			}
			if(chk6.contains("y"))
			{
				SUMMRY_CD_PAID.add(nf3.format(cd_paid));
			}
			else
			{
				SUMMRY_CD_PAID.add("-");
			}
			if(actual_unloaded_qty != 0)
			{
				SUMMRY_INR_PER_MMBTU.add(nf2.format(cd_paid/actual_unloaded_qty));
			}
			else
			{
				SUMMRY_INR_PER_MMBTU.add("-"); 
			}
			
			if(chk7.contains("y"))
			{
				SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			}
			else
			{
				SUMMRY_CUSTOM_DUTY_USD.add("-");
			}
			if(chk8.contains("y"))
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			}
			else
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD.add("-");
			}
			if(chk9.contains("y"))
			{
				SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));
			}
			else
			{
				SUMMRY_COST_OF_PURCHASE_USD.add("-");
			}
			if(actual_unloaded_qty != 0)
			{
				SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
			}
			else
			{
				SUMMRY_USD_PER_MMBTU.add("-"); 
			}
			//System.out.println(" "+chk1);
		}
		
		
		
		//System.out.println(" "+SUMMRY_ACTUAL_UNLOADED_QTY);
		//System.out.println(" "+SUMMRY_CARGO_REF_CD);
		//System.out.println(" "+SUMMRY_USD_VAL_INVOICE);
		
	
	}
	public void get_Purchase_Summary()
	{
		//System.out.println("get_Purchase_Summary "+ACT_ARRV_MONTH);
		
		/*
		 * ACT_ARRV_MONTH
	ACTUAL_UNLOADED_QTY
	USD_VAL_INVOICE
	FINAL_SELLER_INV_AMT_INR
	TOTAL_CD_AMT
	TOTAL_PAID_REFUND
	CD_PAID
	INR_PER_MMBTU
	USD_VAL_INVOICE
	CUSTOM_DUTY_USD
	ADDL_CUSTOM_DUTY_USD
	COST_OF_PURCHASE_USD
	USD_PER_MMBTU

public Vector SUMMRY_ACT_ARRV_MONTH = new Vector();
	public Vector SUMMRY_ACTUAL_UNLOADED_QTY = new Vector();
	public Vector SUMMRY_USD_VAL_INVOICE = new Vector();
	public Vector SUMMRY_FINAL_SELLER_INV_AMT_INR = new Vector();
	
	public Vector SUMMRY_TOTAL_CD_AMT = new Vector();
	public Vector SUMMRY_TOTAL_PAID_REFUND = new Vector();
	public Vector SUMMRY_CD_PAID = new Vector();
	
	public Vector SUMMRY_INR_PER_MMBTU = new Vector();
	
	public Vector SUMMRY_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_ADDL_CUSTOM_DUTY_USD = new Vector();
	public Vector SUMMRY_COST_OF_PURCHASE_USD = new Vector();
	public Vector SUMMRY_USD_PER_MMBTU = new Vector();
	
		 */
		
		if(!ACT_ARRV_MONTH.isEmpty())
		{
			//CARGO_REF_CD
			
			String chk1 = "";
			String chk2 = "";
			String chk3 = "";
			String chk4 = "";
			String chk5 = "";
			String chk6 = "";
			String chk7 = "";
			String chk8 = "";
			String chk9 = "";
			
			String arrv_month = ACT_ARRV_MONTH.elementAt(0).toString().trim();
			double actual_unloaded_qty = 0;
			String Scargo_ref_cd = "";
			
			double usd_val_invoice = 0;
			
			double final_seller_inv_amt_inr = 0;
			double tot_cd_amt = 0;
			double tot_paid_refund = 0;
			double cd_paid = 0;
			double custom_duty_usd = 0;
			double addl_custom_duty_usd = 0;
			double cost_of_purchase_usd = 0;
			//COST_OF_PURCHASE_USD
			
			for(int i = 0; i<ACT_ARRV_MONTH.size(); i++)
			{
				
				if(arrv_month.equals(ACT_ARRV_MONTH.elementAt(i).toString().trim()))
				{
					//System.out.println(ACT_ARRV_MONTH.elementAt(i).toString().trim());
					Scargo_ref_cd += CARGO_REF_CD.elementAt(i).toString().trim()+", ";
					
					if(!ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty += Double.parseDouble(ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1 += "y";
						
					}
					else
					{
						actual_unloaded_qty += 0; 
						chk1 += "-";
					}
					
					if(!USD_VAL_INVOICE.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice += Double.parseDouble(USD_VAL_INVOICE.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2 += "y";
					}
					else
					{
						usd_val_invoice += 0; chk2 += "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr += Double.parseDouble(FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3 += "y";
					}
					else
					{
						final_seller_inv_amt_inr += 0; chk3 += "-";
					}
					
					if(!TOTAL_CD_AMT.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt += Double.parseDouble(TOTAL_CD_AMT.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4 += "y";
					}
					else
					{
						tot_cd_amt += 0; chk4 += "-";
					}
					
					if(!TOTAL_PAID_REFUND.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund += Double.parseDouble(TOTAL_PAID_REFUND.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5 += "y";
					}
					else
					{
						tot_paid_refund += 0; chk5 += "-";
					}
					
					if(!CD_PAID.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid += Double.parseDouble(CD_PAID.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6 += "y";
					}
					else
					{
						cd_paid += 0; chk6 += "-";
					}
					
					if(!CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd += Double.parseDouble(CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7 += "y";
					}
					else
					{
						custom_duty_usd += 0; chk7 += "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd += Double.parseDouble(ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8 += "y";
					}
					else
					{
						addl_custom_duty_usd += 0; chk8 += "-";
					}
					
					if(!COST_OF_PURCHASE_USD.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd += Double.parseDouble(COST_OF_PURCHASE_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9 += "y";
					}
					else
					{
						cost_of_purchase_usd += 0; chk9 += "-";
					}
					//
					
				}
				else
				{
					
					SUMMRY_ACT_ARRV_MONTH.add(""+arrv_month);
					if(chk1.contains("y"))
					{
						SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
					}
					else
					{
						SUMMRY_ACTUAL_UNLOADED_QTY.add("-");
					}
					SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
					if(chk2.contains("y"))
					{
						SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
					}
					else
					{
						SUMMRY_USD_VAL_INVOICE.add("-");
					}
					if(chk3.contains("y"))
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
					}
					else
					{
						SUMMRY_FINAL_SELLER_INV_AMT_INR.add("-");
					}
					if(chk4.contains("y"))
					{
						SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
					}
					else
					{
						SUMMRY_TOTAL_CD_AMT.add("-");
					}
					if(chk5.contains("y"))
					{
						SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
					}
					else
					{
						SUMMRY_TOTAL_PAID_REFUND.add("-");
					}
					if(chk6.contains("y"))
					{
						SUMMRY_CD_PAID.add(nf3.format(cd_paid));
					}
					else
					{
						SUMMRY_CD_PAID.add("-");
					}
					if(actual_unloaded_qty != 0)
					{
						SUMMRY_INR_PER_MMBTU.add(nf2.format(cd_paid/actual_unloaded_qty));
					}
					else
					{
						SUMMRY_INR_PER_MMBTU.add("-"); 
					}
					
					if(chk7.contains("y"))
					{
						SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
					}
					else
					{
						SUMMRY_CUSTOM_DUTY_USD.add("-");
					}
					if(chk8.contains("y"))
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(addl_custom_duty_usd));
					}
					else
					{
						SUMMRY_ADDL_CUSTOM_DUTY_USD.add("-");
					}
					if(chk9.contains("y"))
					{
						SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));
					}
					else
					{
						SUMMRY_COST_OF_PURCHASE_USD.add("-");
					}
					if(actual_unloaded_qty != 0)
					{
						SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
					}
					else
					{
						SUMMRY_USD_PER_MMBTU.add("-"); 
					}
					
					Scargo_ref_cd = "";
					
					Scargo_ref_cd = CARGO_REF_CD.elementAt(i).toString().trim()+", ";
					if(!ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().equals("-"))
					{
						actual_unloaded_qty = Double.parseDouble(ACTUAL_UNLOADED_QTY.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk1 += "y";
					}
					else
					{
						actual_unloaded_qty = 0; chk1 = "-";
						
					}
					
					if(!USD_VAL_INVOICE.elementAt(i).toString().trim().equals("-"))
					{
						usd_val_invoice = Double.parseDouble(USD_VAL_INVOICE.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk2 += "y";
					}
					else
					{
						usd_val_invoice = 0; chk2 = "-";
					}
					
					if(!FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						final_seller_inv_amt_inr = Double.parseDouble(FINAL_SELLER_INV_AMT_INR.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk3 += "y";
					}
					else
					{
						final_seller_inv_amt_inr = 0; chk3 = "-";
					}
					
					if(!TOTAL_CD_AMT.elementAt(i).toString().trim().equals("-"))
					{
						tot_cd_amt = Double.parseDouble(TOTAL_CD_AMT.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk4 += "y";
					}
					else
					{
						tot_cd_amt = 0; chk4 = "-";
					}
					
					if(!TOTAL_PAID_REFUND.elementAt(i).toString().trim().equals("-"))
					{
						tot_paid_refund = Double.parseDouble(TOTAL_PAID_REFUND.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk5 += "y";
					}
					else
					{
						tot_paid_refund = 0; chk5 = "-";
					}
					
					if(!CD_PAID.elementAt(i).toString().trim().equals("-"))
					{
						cd_paid = Double.parseDouble(CD_PAID.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk6 += "y";
					}
					else
					{
						cd_paid = 0; chk6 = "-";
					}
					
					if(!CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						custom_duty_usd = Double.parseDouble(CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk7 += "y";
					}
					else
					{
						custom_duty_usd = 0; chk7 = "-";
					}
					
					if(!ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().equals("-"))
					{
						addl_custom_duty_usd = Double.parseDouble(ADDL_CUSTOM_DUTY_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk8 += "y";
					}
					else
					{
						addl_custom_duty_usd = 0; chk8 = "-";
					}
					
					if(!COST_OF_PURCHASE_USD.elementAt(i).toString().trim().equals("-"))
					{
						cost_of_purchase_usd = Double.parseDouble(COST_OF_PURCHASE_USD.elementAt(i).toString().trim().replaceAll(",","").trim());
						chk9 += "y";
					}
					else
					{
						cost_of_purchase_usd = 0;
						chk9 = "-";
					}
					
				}
				arrv_month = ACT_ARRV_MONTH.elementAt(i).toString().trim();
			}
			SUMMRY_ACT_ARRV_MONTH.add(""+arrv_month);
			//SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
			
			/*SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			
			SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			SUMMRY_CD_PAID.add(nf3.format(cd_paid));*/
			SUMMRY_INR_PER_MMBTU.add(nf2.format((cd_paid/actual_unloaded_qty)));
			
			/*SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));*/
			SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
			
			if(chk1.contains("y"))
			{
				SUMMRY_ACTUAL_UNLOADED_QTY.add(nf3.format(actual_unloaded_qty));
			}
			else
			{
				SUMMRY_ACTUAL_UNLOADED_QTY.add("-");
			}
			SUMMRY_CARGO_REF_CD.add(Scargo_ref_cd);
			if(chk2.contains("y"))
			{
				SUMMRY_USD_VAL_INVOICE.add(nf3.format(usd_val_invoice));
			}
			else
			{
				SUMMRY_USD_VAL_INVOICE.add("-");
			}
			if(chk3.contains("y"))
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR.add(nf3.format(final_seller_inv_amt_inr));
			}
			else
			{
				SUMMRY_FINAL_SELLER_INV_AMT_INR.add("-");
			}
			if(chk4.contains("y"))
			{
				SUMMRY_TOTAL_CD_AMT.add(nf3.format(tot_cd_amt));
			}
			else
			{
				SUMMRY_TOTAL_CD_AMT.add("-");
			}
			if(chk5.contains("y"))
			{
				SUMMRY_TOTAL_PAID_REFUND.add(nf3.format(tot_paid_refund));
			}
			else
			{
				SUMMRY_TOTAL_PAID_REFUND.add("-");
			}
			if(chk6.contains("y"))
			{
				SUMMRY_CD_PAID.add(nf3.format(cd_paid));
			}
			else
			{
				SUMMRY_CD_PAID.add("-");
			}
			if(actual_unloaded_qty != 0)
			{
				SUMMRY_INR_PER_MMBTU.add(nf2.format(cd_paid/actual_unloaded_qty));
			}
			else
			{
				SUMMRY_INR_PER_MMBTU.add("-"); 
			}
			
			if(chk7.contains("y"))
			{
				SUMMRY_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			}
			else
			{
				SUMMRY_CUSTOM_DUTY_USD.add("-");
			}
			if(chk8.contains("y"))
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD.add(nf3.format(custom_duty_usd));
			}
			else
			{
				SUMMRY_ADDL_CUSTOM_DUTY_USD.add("-");
			}
			if(chk9.contains("y"))
			{
				SUMMRY_COST_OF_PURCHASE_USD.add(nf3.format(cost_of_purchase_usd));
			}
			else
			{
				SUMMRY_COST_OF_PURCHASE_USD.add("-");
			}
			if(actual_unloaded_qty != 0)
			{
				SUMMRY_USD_PER_MMBTU.add(nf2.format((cost_of_purchase_usd/actual_unloaded_qty)));
			}
			else
			{
				SUMMRY_USD_PER_MMBTU.add("-"); 
			}
			//System.out.println(" "+chk1);
		}
		
		
		
		//System.out.println(" "+SUMMRY_ACTUAL_UNLOADED_QTY);
		//System.out.println(" "+SUMMRY_CARGO_REF_CD);
		//System.out.println(" "+SUMMRY_USD_VAL_INVOICE);
		
	}
	//New Purchase Register Details Introduced by Samik Shah 0n 26/10/2010 ...
	//Last Modified By Samik Shah On 16th August, 2011 ...
	//Last Modified By Samik Shah On 9th September, 2011 ...
	Vector Vtitle_DRCR=new Vector();
	public void get_Purchase_dtls_domestic_Approval_DRCR()
	{
		try {
			
			//System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb_dom = new Vector();
			Vector temp_usd_invoice_dom = new Vector();
			Vector temp_usd_dr_cr_dom = new Vector();
			Vector temp_inv_amt_dom_DRCR = new Vector();			
			Vector temp_tot_cd_amt_dom = new Vector();
			Vector temp_tot_pay_refund_dom = new Vector();
			Vector temp_cd_paid_dom = new Vector();
			Vector final_seller_amt_dom = new Vector();
			Vector unloaded_qty_dom = new Vector();
			String from_dt_dom = "01/"+month+"/"+year;
			String to_dt_dom = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt_dom = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			String tds_flag="";
			queryString1 = "SELECT TURNOVER_FLAG FROM FMS7_SUPPLIER_TURNOVER_DTL WHERE supplier_cd=1";
			//System.out.println("Seller Payment Details Query = "+queryString);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				tds_flag= rset1.getString(1)==null?"":rset1.getString(1);
			}
			Vector temp_cargo_dom=new Vector();
			Vector temp_seq_dom=new Vector();
			
			/*String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq_dom.add("Y");
				else
					temp_seq_dom.add("N");
			}*/
			

			String trdcd=" AND PARTY_CD="+trader_cd+" ";
			String split1="";
			split1=" AND SPLIT_SEQ='0'";
			/*queryString = "SELECT B.CARGO_REF_cd, C.TRD_CD FROM " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE  B.MAN_CD=C.MAN_CD AND " +
					  "(B.DELV_From_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) OR B.DELV_to_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')))  AND "
			  		+ "B.DOM_buy_flag='Y' ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;*/
			queryString = "SELECT CARGO_REF_NO,PARTY_CD FROM FMS7_DOM_PUR_INV_DRCR_dTL WHERE (DR_CR_DT between "
					+ " to_date('"+from_dt_dom+"','dd/mm/yyyy') and " +
					  "to_date('"+to_dt_dom+"','dd/mm/yyyy'))";
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
				if(flag_accounting.equalsIgnoreCase("Approval")){
					
					/*queryString = "SELECT A.INVOICE_NO FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO='"+rset.getString(1)+"' "
							+ "AND SPLIT_SEQ='0' ";				
					//System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{

						CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
						TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));
						queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
								  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
							
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{
								VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
							}else{
								VESSEL_NM_DOM.add("");
							}
							queryString = "SELECT TO_CHAR(period_st_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(period_end_DT,'DD/MM/YYYY') FROM FMS7_DOM_PUR_INV_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
								
								rset1 = stmt1.executeQuery(queryString);
								if(rset1.next())
								{
									String st_dt=rset1.getString(1)==null?"":rset1.getString(1);
									String end_dt=rset1.getString(2)==null?"":rset1.getString(2);
									duration_dom.add(st_dt+" - "+end_dt);
								}else{
									duration_dom.add("");
								}
					
					}*/
				}else{
					/*CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));*/
					//temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
					/*queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
						
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
						}else{
							VESSEL_NM_DOM.add("");
						}*/
						
				}
			}
		//	}
			
			
			double usd_mmbtu=0;
			String exchg_rate_2_dom = "";
			//for(int i=0; i<temp_cargo_dom.size(); i++)
			{
				
				/*if(SPLIT_SEQ_DOM.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ_DOM.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"B";
				}
				else
				{*/
					
					
					queryString = "SELECT DR_CR_QTY,DR_CR_EXCHG_RT_VAL,DR_CR_AMT_INR,DR_CR_TAX_AMT,to_char(DR_CR_DT,'Month'),DR_CR_QTY"
								+ ",party_cd,remark,DR_CR_no,to_char(DR_CR_DT,'dd/mm/yyyy'),DR_CR_no,TO_CHAR(DR_CR_DT,'DD/MM/YYYY'),"
								+ "DR_CR_PRICE, DR_CR_AMT_USD, TO_CHAR(DR_CR_DUE_DT,'DD/MM/YYYY'),APPROVED_FLAG,"
								+ "CARGO_REF_NO,contract_no,contract_rev_no,to_char(PAY_EXCHG_RT_DT,'dd/mm/yyyy'), PAY_EXCHG_RT_VAL"
								+ " ,invoice_no,plant_cd,DR_CR_FLAG,invoice_no,adj_sign,adj_amt,buyer_plant_cd "
								+ "FROM FMS7_DOM_PUR_INV_DRCR_dTL WHERE (DR_CR_DT between "
								+ " to_date('"+from_dt_dom+"','dd/mm/yyyy') and " +
								  "to_date('"+to_dt_dom+"','dd/mm/yyyy')) AND APPROVED_FLAG='Y' and cargo_ref_no like '2%'";
					if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
					{
						queryString = queryString + trdcd;
					}
						//System.out.println("query---"+queryString);
						rset1 = stmt1.executeQuery(queryString);
						while(rset1.next())
						{
							String adj_sign=rset1.getString(26)==null?"0":rset1.getString(26);
							String adj_amt=rset1.getString(27)==null?"0":rset1.getString(27);
							String bu_unit="";
							if(rset1.getString(28).equals("0")){
								bu_unit="SEIPL -REG(GJ)";
							}else{
								queryString1 = "SELECT PLANT_NAME,PLANT_SHORT_ABBR FROM FMS7_SUPPLIER_PLANT_DTL "
										+ "WHERE SUPPLIER_CD='"+supplier_cd+"' AND SEQ_NO='"+rset1.getString(28)+"'";
								rset2=stmt2.executeQuery(queryString1);
								if(rset2.next())
								{
									bu_unit=rset2.getString(2)==null?"":rset2.getString(2);
								}
							}
							Vsupp_plant_Abbr_DOM_DRCR.add(bu_unit);
							CARGO_REF_CD_DOM_DRCR.add(rset1.getString(17)==null?"0":rset1.getString(17));
							PAY_EXCHG_RT_DT_DRCR.add(rset1.getString(20)==null?"":rset1.getString(20));
							PAY_EXCHG_RT_VAL_DRCR.add(rset1.getString(21)==null?"":rset1.getString(21));
							VESSEL_NM_DOM_DRCR.add("");
							inv_type_flag_DRCR.add("SG");
							String flag=rset1.getString(24)==null?"":rset1.getString(24);
							if(flag.equals("D")){
								DR_CR_FLAG_DOM_DRCR.add("Debit");
							}else if(flag.equals("C")){
								DR_CR_FLAG_DOM_DRCR.add("Credit");
							}else{
								DR_CR_FLAG_DOM_DRCR.add("");
							}
							DR_CR_ORI_INV_NO.add(rset1.getString(25)==null?"":rset1.getString(25));
							String trader_cd=rset1.getString(7)==null?"0":rset1.getString(7);
							TRD_CD_DOM_DRCR.add(rset1.getString(7)==null?"0":rset1.getString(7));
							ACTUAL_UNLOADED_QTY_DOM_DRCR.add(rset1.getString(1)==null?"-":nf3.format(Double.parseDouble(rset1.getString(1))));
							unloaded_qty_dom.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							ACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							purchase_total_qty_dom_DRCR += Double.parseDouble(rset1.getString(1)==null?"0":nf.format(Double.parseDouble(rset1.getString(1))));
							exchg_rate_2_dom=rset1.getString(2)==null?"0":rset1.getString(2);
							String inv_curr="";
							if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
								TRADER_INV_CURRENCY_DRCR.add("2");
								inv_curr="2";
							}else{
								TRADER_INV_CURRENCY_DRCR.add("");
								inv_curr="";
							}
							String trd_cd="";
							queryString="SELECT MAN_CD,DOM_BUY_FLAG FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+rset1.getString(17)+"'";
							rset2=stmt2.executeQuery(queryString);
							if(rset2.next()){
								CARGO_DOM_FLAG_DRCR.add(rset2.getString(2)==null?"":rset2.getString(2));
								queryString="SELECT trd_cd FROM FMS7_MAN_REQ_MST WHERE man_CD='"+rset2.getString(1)+"'";
								rset=stmt.executeQuery(queryString);
								if(rset.next()){
									trd_cd=rset.getString(1)==null?"":rset.getString(1);
								}
							}else{
								CARGO_DOM_FLAG_DRCR.add("");
							}
							queryString = "SELECT EXCHNG_RATE_CD FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
									+ "and  SN_NO='"+rset1.getString(18)+"' and SN_REV_NO ='"+rset1.getString(19)+"'  and cont_type='Y'";
							rset3 = stmt3.executeQuery(queryString);
							if(rset3.next())
							{
								Exchg_rt_cd_DRCR.add(rset3.getString(1)==null?"":rset3.getString(1));
							}else{
								Exchg_rt_cd_DRCR.add("");
							}
							if(!trd_cd.equals(trader_cd)){
								queryString = "SELECT payment_currency FROM FMS7_TRADER_OTHER_PLANT_MST A WHERE SN_NO='"+rset1.getString(18)+"' AND "
										+ " SN_REV_NO='"+rset1.getString(19)+"' and customer_cd='"+trader_cd+"' and flag='Y'";
								//System.out.println("queryString--billing sg---"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									TRADER_PAY_CURRENCY_DRCR.add(rset3.getString(1)==null?"":rset3.getString(1));
								}else{
									TRADER_PAY_CURRENCY_DRCR.add("");
								}
							}else{
								queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trader_cd+"' "
										+ "and   SN_NO='"+rset1.getString(18)+"' and SN_REV_NO ='"+rset1.getString(19)+"'  and cont_type='Y'";
								//System.out.println("queryString--billing sg-"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									TRADER_PAY_CURRENCY_DRCR.add(rset3.getString(1)==null?"":rset3.getString(1));
								}else{
									TRADER_PAY_CURRENCY_DRCR.add("");
								}
							}
							EXCHG_RATE_VALUE_DOM_DRCR.add(rset1.getString(2)==null?"-":nf2.format(Double.parseDouble(rset1.getString(2))));
							INVOICE_AMT_DOM_DRCR.add(rset1.getString(3)==null?"0":nf.format(Double.parseDouble(rset1.getString(3))));
							INVOICE_TAX_AMT_DOM_DRCR.add(rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4))));
							String taxamt=rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4)));
							purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
							temp_inv_amt_dom_DRCR.add(rset1.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(3))));
							ACT_ARRV_MONTH_DOM_DRCR.add(rset1.getString(5)==null?"":rset1.getString(5));
							String inv_type="";
							queryString = "SELECT INVOICE_TYPE FROM FMS7_DOM_PUR_INV_DTL WHERE "
										+ "INVOICE_NO='"+rset1.getString(22)+"' AND PARTY_CD='"+rset1.getString(7)+"' "
										+ " AND CARGO_REF_NO='"+rset1.getString(17)+"' AND PLANT_CD='"+rset1.getString(23)+"' "
										+ "AND CONTRACT_NO='"+rset1.getString(18)+"' AND "
										+ " CONTRACT_REV_NO='"+rset1.getString(19)+"' and cargo_ref_no like '2%' ";
							//System.out.println("TRADER Master query = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{			
								inv_type=rset.getString(1)==null?"":rset.getString(1);
							}
							
							if(tds_flag.equals("Y")){
								double tds_Amt=(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))* Double.parseDouble(tds_perc))/100;
								INVOICE_AMT_TDS_DOM_DRCR.add(nf.format(tds_Amt));
							}else{
								INVOICE_AMT_TDS_DOM_DRCR.add("-");
							}
							if(inv_type.equals("1")){
								inv_type="Monthly";
							}else if(inv_type.equals("2")){
								inv_type="Fortnightly";
							}
							else if(inv_type.equals("3")){
								inv_type="Weekly";
							}
							ACT_ARRV_DT_DOM_DRCR.add(rset1.getString(10)==null?"":rset1.getString(10));
							String rmk=rset1.getString(8)==null?"":rset1.getString(8);
							REMARK_DOM_DRCR.add(rmk);
							
							String usd_amt=rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14)));
							double amtadj=0;
							if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
								if(adj_sign.equals("+")){
									 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
								}else if(adj_sign.equals("-")){
									amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
								}
								USD_VAL_INVOICE_DOM_DRCR.add(nf3.format(amtadj));
								
								USD_VAL_INVOICE_NUMERIC_DOM_DRCR.add(nf.format(amtadj));
								purchase_total_invoice_value_dom_DRCR += Double.parseDouble(nf.format(amtadj));
							}else{
							USD_VAL_INVOICE_DOM_DRCR.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
							
							USD_VAL_INVOICE_NUMERIC_DOM_DRCR.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
							purchase_total_invoice_value_dom_DRCR += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
							}
							double tax_amt_usd=0;
							if(!rmk.equals("")){
								TAX_rmk_DOM_DRCR.add(rmk+"%");
								String temp[]=rmk.split("@");
								if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
									tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
								}else{
								 tax_amt_usd=(Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))* Double.parseDouble(temp[1].trim())/100;
								}
								
							}else{
								TAX_rmk_DOM_DRCR.add("");
							}
							TAX_amt_usd_DOM_DRCR.add(nf.format(tax_amt_usd));
							invoice_type_DOM_DRCR.add(inv_type);
							purchase_total_tax_inr_dom+=tax_amt_usd;
							usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/Double.parseDouble(rset1.getString(1));
							INVOICE_NO_DOM_DRCR.add(rset1.getString(11)==null?"":rset1.getString(11));
							INVOICE_DT_DOM_DRCR.add(rset1.getString(12)==null?"":rset1.getString(12));	
							
							CONF_PRICE_DOM_DRCR.add(rset1.getString(13)==null?"":nf2.format(Double.parseDouble(rset1.getString(13))));
							CONF_PRICE_NUMERIC_DOM_DRCR.add(rset1.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset1.getString(13))));
							
							
							
							DUE_DT_DOM_DRCR.add(rset1.getString(15)==null?"":rset1.getString(15));
							Approve_flag_DOM_DRCR.add(rset1.getString(18)==null?"":rset1.getString(18));
							//String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
							//String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
							duration_dom_DRCR.add("");
							
							queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
							//System.out.println("TRADER Master query = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{			
								TRADER_NAME_DOM_DRCR.add(rset.getString(1)==null?"":rset.getString(1));
								TRADER_ABBR_DOM_DRCR.add(rset.getString(2)==null?"":rset.getString(2));
							}
							else
							{
								TRADER_NAME_DOM_DRCR.add("");
								TRADER_ABBR_DOM_DRCR.add("");
							}
							if(inv_curr.equals("2")){
								String tcs_perc="";
								queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
										+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
										// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
								rset=stmt.executeQuery(queryString);
								//System.out.println("queryString---"+queryString);
								if(rset.next()){
									tcs_perc=rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2)));
								}else{
								}
								
								int fin_yr = Integer.parseInt(rset1.getString(12).substring(6));
								int fin_mon = Integer.parseInt(rset1.getString(12).substring(3,5));
								String financial_year = "";
								int inv_no = 0;
								String invoice_no = "";
								
								if(fin_mon>3) {
									financial_year = ""+fin_yr+"-"+(fin_yr+1);
								} else {
									financial_year = ""+(fin_yr-1)+"-"+fin_yr;
								}
								String tcs_flag="";
								queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+rset1.getString(7)+"'";
								//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
								}
								if(tcs_flag.equals("Y")){
									String net="";
									if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
										net=nf6.format(amtadj);
									}else{
										net=nf6.format(Double.parseDouble(rset1.getString(14)));
									}
									double tcs_amt=(Double.parseDouble(net)+Double.parseDouble(rset1.getString(4)))* Double.parseDouble(tcs_perc)/100;
									INVOICE_TCS_AMT_DRCR.add(nf6.format(tcs_amt));
								}else{
									INVOICE_TCS_AMT_DRCR.add("0");
								}
								
							}else{
								INVOICE_TCS_AMT_DRCR.add("0");
							}
							if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
								String title="";
								double ori_gross=rset1.getDouble(3);
								//System.out.println("ori_gross = "+ori_gross);
								String gross="";
								String gros="";
								if(inv_curr.equals("2")){
									gross=nf.format(rset1.getDouble(14));
								}else{
									gross=nf.format(ori_gross+Double.parseDouble(adj_amt));
								}
								if(adj_sign.equals("+")){
									title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
								}else if(adj_sign.equals("-")){
									title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
								}
								
								
								Vtitle_DRCR.add(title);
							}else{
								Vtitle_DRCR.add("");
							}
						}
			}
//			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
//			{
				if(!all_exchg_rtdt_drcr.equals("")){
					//System.out.println("all_exchg_rtdt---"+all_exchg_rtdt);
					String temp_str[]=all_exchg_rtdt_drcr.split("@");
					for(int k=0;k<temp_str.length;k++){
						if(temp_str[k].equals("-")){
							//System.out.println("PAY_EXCHG_RT_DT.elementAt(k)--in if-"+PAY_EXCHG_RT_DT.elementAt(k));
							Exchg_rt_Dt_DRCR.add(PAY_EXCHG_RT_DT_DRCR.elementAt(k));
						}else{
							//System.out.println("temp_str[k]--in if-"+temp_str[k]);
							Exchg_rt_Dt_DRCR.add(temp_str[k]);
						}
					}
					
				}else{
					for(int i=0; i<CARGO_REF_CD_DOM_DRCR.size(); i++)
						{
							Exchg_rt_Dt_DRCR.add(PAY_EXCHG_RT_DT_DRCR.elementAt(i));
						}
					}
			//}
//			System.out.println("Exchg_rt_Dt-size--"+Exchg_rt_Dt_DRCR.size());
//			System.out.println("Exchg_rt_cd_DRCR-size--"+Exchg_rt_cd_DRCR.size());
//			System.out.println("CARGO_REF_CD_DOM_DRCR-size--"+CARGO_REF_CD_DOM_DRCR.size());
			for(int i=0; i<CARGO_REF_CD_DOM_DRCR.size(); i++)
			{
				String refno="";
				refno=""+CARGO_REF_CD_DOM_DRCR.elementAt(i)+"-"+INVOICE_NO_DOM_DRCR.elementAt(i)+"-"+TRD_CD_DOM_DRCR.elementAt(i);
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL,to_char(to_date(TRANSACTION_DT,'ddmmyyyy'),'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSPR'";
				//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG_DOM_DRCR.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL_DOM_DRCR.add(rset.getString(2)==null?"N":rset.getString(2)); 
					TRANSACTION_DT_DRCR.add(rset.getString(3)==null?"":rset.getString(3));
					//Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG_DOM_DRCR.add("N");
					SUN_APPROVAL_DOM_DRCR.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
					TRANSACTION_DT_DRCR.add(INVOICE_DT_DOM_DRCR.elementAt(i));
				}
				double sbi_tt_selling_exchg_rate_dom = 0;
				double foreign_exchg_rate_dom = 0;
				String exchg_rate_cd_dom = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2_dom = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate_dom = "";
				
				
				String arr_dt_dom = ""+ACT_ARRV_DT_DOM_DRCR.elementAt(i);
				String arrival_date_and_rate_note_dom = "";
				
				if(arr_dt_dom.trim().equals(""))
				{
					arrival_date_and_rate_note_dom += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_dom+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT_DOM_DRCR.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_dom = rset2.getString(1)==null?"0":rset2.getString(1);
					if(!exchg_rate_dom.equals("")){
					sbi_tt_selling_exchg_rate_dom = Double.parseDouble(exchg_rate_dom);
					}
				}
				String gross_amt_inr="";
				int fin_yr = Integer.parseInt(INVOICE_DT_DOM_DRCR.elementAt(i).toString().substring(6));
				int fin_mon = Integer.parseInt(INVOICE_DT_DOM_DRCR.elementAt(i).toString().substring(3,5));
				String financial_year = "";
				int inv_no = 0;
				String invoice_no = "";
				
				if(fin_mon>3) {
					financial_year = ""+fin_yr+"-"+(fin_yr+1);
				} else {
					financial_year = ""+(fin_yr-1)+"-"+fin_yr;
				}
				String tcs_flag="";
				String tcs_perc="";
				
				queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
						+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
						// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
				rset=stmt.executeQuery(queryString);
				//System.out.println("queryString---"+queryString);
				if(rset.next()){
					TCS_PERC_DOM_DRCR.add(rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2))));
					tcs_perc=rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2)));
				}else{
					TCS_PERC_DOM_DRCR.add("");
				}
				TDS_PERC_DOM_DRCR.add("0.1");
				//System.out.println("Exchg_rt_cd_DRCR-size in for--"+Exchg_rt_cd_DRCR.size()+"-----"+Exchg_rt_Dt_DRCR.size());
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+Exchg_rt_cd_DRCR.elementAt(i)+"' AND EFF_DT=TO_DATE('"+Exchg_rt_Dt_DRCR.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset1=stmt1.executeQuery(queryString2);
				if(rset1.next())
				{
					exchgrt=rset1.getString(1)==null?"":rset1.getString(1);
					if(!exchgrt.equals("")){
						//exchg_rt_val_DRCR.add(nf6.format(Double.parseDouble(exchgrt)));
						exchg_rt_val_DRCR.add(String.format("%.2f", Double.parseDouble(exchgrt)));
					}else{
						exchg_rt_val_DRCR.add(exchgrt);
					}

					if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2") && TRADER_PAY_CURRENCY_DRCR.elementAt(i).equals("1")){
						//System.out.println("Finding Out EXCHG_RATE ====in this11======= "+i);
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM_DRCR.elementAt(i)+"'";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							TCS_APP_FLAG_DRCR.add(rset2.getString(1)==null?"":rset2.getString(1));
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TDS_APP_FLAG_DRCR.add("");
						}else{
							TCS_APP_FLAG_DRCR.add("");
							TDS_APP_FLAG_DRCR.add("Y");
						}
						gross_amt_inr=nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))*Double.parseDouble(exchgrt));
						String rmk[]=REMARK_DOM_DRCR.elementAt(i).toString().split("@");
						String tax_per=rmk[1].trim();
						String tax_amt=nf.format((Double.parseDouble(gross_amt_inr)* Double.parseDouble(tax_per))/100);
//						System.out.println("gross_amt_inr--"+gross_amt_inr);
//						System.out.println("tax_amt--"+tax_amt);
						double inv_amt_inr=Double.parseDouble(gross_amt_inr)+Double.parseDouble(tax_amt);
//						System.out.println("inv_amt_inr--"+inv_amt_inr);
						Gross_inr_DOM_DRCR.add(gross_amt_inr);
						Tax_inr_DOM_DRCR.add(tax_amt);
						net_inr_DOM_DRCR.add(nf.format(inv_amt_inr));
						if(tcs_flag.equals("Y")){
							double tcs_amt=(inv_amt_inr * Double.parseDouble(tcs_perc))/100;
							TCS_TDS_AMT_DOM_DRCR.add(nf.format(tcs_amt));
							payable_inr_DOM_DRCR.add(nf.format(inv_amt_inr+tcs_amt));
						}else{
							double tcs_amt=(Double.parseDouble(gross_amt_inr) * 0.1)/100;
							TCS_TDS_AMT_DOM_DRCR.add(nf.format(tcs_amt));
							payable_inr_DOM_DRCR.add(nf.format(inv_amt_inr-tcs_amt));
						}
					}else{
						//System.out.println("Finding Out EXCHG_RATE ====in this11=else====== ");
						Gross_inr_DOM_DRCR.add("-");
						Tax_inr_DOM_DRCR.add("-");
						net_inr_DOM_DRCR.add("-");
						payable_inr_DOM_DRCR.add("-");
						TCS_TDS_AMT_DOM_DRCR.add("-");
						TCS_APP_FLAG_DRCR.add("");
						TDS_APP_FLAG_DRCR.add("Y");
						//exchg_rt_val_DRCR.add("");
					}
				}else{
					//System.out.println("in thissss---"+i);
					exchgrt="";
					if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2") && TRADER_PAY_CURRENCY_DRCR.elementAt(i).equals("1")){
						if(!Exchg_rt_Dt_DRCR.elementAt(i).equals("")){
							exchg_rt_val_DRCR.add("NA");
						}else{
							exchg_rt_val_DRCR.add("");
						}
					}else{
						exchg_rt_val_DRCR.add("");
					}
					if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2") && TRADER_PAY_CURRENCY_DRCR.elementAt(i).equals("1")){
						//System.out.println("in thissss11---"+i);
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM_DRCR.elementAt(i)+"'";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							TCS_APP_FLAG_DRCR.add(rset2.getString(1)==null?"":rset2.getString(1));
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TDS_APP_FLAG_DRCR.add("");
						}else{
							TCS_APP_FLAG_DRCR.add("");
							TDS_APP_FLAG_DRCR.add("Y");
						}
						if(!exchgrt.equals("")){
							//System.out.println("Finding Out EXCHG_RATE ====in this11=22====== ");
							gross_amt_inr=nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))*Double.parseDouble(exchgrt));
							String rmk[]=REMARK_DOM_DRCR.elementAt(i).toString().split("@");
							String tax_per=rmk[1].trim();
							String tax_amt=nf.format((Double.parseDouble(gross_amt_inr)* Double.parseDouble(tax_per))/100);
							double inv_amt_inr=Double.parseDouble(gross_amt_inr)+Double.parseDouble(tax_amt);
							Gross_inr_DOM_DRCR.add(gross_amt_inr);
							Tax_inr_DOM_DRCR.add(tax_amt);
							net_inr_DOM_DRCR.add(nf.format(inv_amt_inr));
							if(tcs_flag.equals("Y")){
								double tcs_amt=(Double.parseDouble(gross_amt_inr) * Double.parseDouble(tcs_perc))/100;
								TCS_TDS_AMT_DOM_DRCR.add(nf.format(tcs_amt));
								payable_inr_DOM_DRCR.add(nf.format(inv_amt_inr+tcs_amt));
							}else{
								double tcs_amt=(Double.parseDouble(gross_amt_inr) * 0.1)/100;
								TCS_TDS_AMT_DOM_DRCR.add(nf.format(tcs_amt));
								payable_inr_DOM_DRCR.add(nf.format(inv_amt_inr-tcs_amt));
							}
						}else{
							TCS_TDS_AMT_DOM_DRCR.add("");
							//TCS_TDS_AMT_DOM.add("");
							Gross_inr_DOM_DRCR.add("-");
							Tax_inr_DOM_DRCR.add("-");
							net_inr_DOM_DRCR.add("-");
							payable_inr_DOM_DRCR.add("-");
							TCS_APP_FLAG_DRCR.add("");
							TDS_APP_FLAG_DRCR.add("Y");
						}
					}
					
					else if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2") && TRADER_PAY_CURRENCY_DRCR.elementAt(i).equals("2")){
//						System.out.println("in thissss-22--"+i);
						//System.out.println("Finding Out EXCHG_RATE ====in this33======= ");
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM_DRCR.elementAt(i)+"'";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							TCS_APP_FLAG_DRCR.add(rset2.getString(1)==null?"":rset2.getString(1));
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TDS_APP_FLAG_DRCR.add("");
						}else{
							TCS_APP_FLAG_DRCR.add("");
							TDS_APP_FLAG_DRCR.add("Y");
						}
						double tcs_amt=0;
						if(tcs_flag.equals("Y")){
							tcs_amt=(Double.parseDouble(USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i)+"") * Double.parseDouble(tcs_perc))/100;
							TCS_TDS_AMT_DOM.add(tcs_amt);
						}else{
							tcs_amt=(Double.parseDouble(USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i)+"") * 0.1)/100;
							TCS_TDS_AMT_DOM_DRCR.add(tcs_amt);
						}
						Gross_inr_DOM_DRCR.add(USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i));
						Tax_inr_DOM_DRCR.add(TAX_amt_usd_DOM_DRCR.elementAt(i));
						net_inr_DOM_DRCR.add(nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM_DRCR.elementAt(i))));
						double totamt=0;
						if(tcs_flag.equals("Y")){
							totamt=Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM_DRCR.elementAt(i))+tcs_amt;
						}else{
							totamt=Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM_DRCR.elementAt(i))-+tcs_amt;
						}
						
						payable_inr_DOM_DRCR.add(nf6.format(totamt));
					}else{
//						System.out.println("Fhiselse 333======="+TCS_TDS_AMT_DOM.size());
//						System.out.println("in thissss-else-"+i);
						TCS_APP_FLAG_DRCR.add("");
						TDS_APP_FLAG_DRCR.add("Y");
						double net_amt=Double.parseDouble(INVOICE_AMT_DOM_DRCR.elementAt(i)+"");
						String tds_amt=nf6.format((net_amt * 0.1)/100);
						double totamt=(Double.parseDouble(INVOICE_TAX_AMT_DOM_DRCR.elementAt(i)+"")+ net_amt)-Double.parseDouble(tds_amt);
						TCS_TDS_AMT_DOM_DRCR.add(tds_amt);
						//TCS_TDS_AMT_DOM.add("");
						Gross_inr_DOM_DRCR.add(INVOICE_AMT_DOM_DRCR.elementAt(i)+"");
						Tax_inr_DOM_DRCR.add(INVOICE_TAX_AMT_DOM_DRCR.elementAt(i)+"");
						net_inr_DOM_DRCR.add(nf.format(Double.parseDouble(INVOICE_AMT_DOM_DRCR.elementAt(i)+"")+Double.parseDouble(INVOICE_TAX_AMT_DOM_DRCR.elementAt(i)+"")));
						/*if(TRADER_INV_CURRENCY.elementAt(i).equals("") && TRADER_PAY_CURRENCY.elementAt(i).equals("")){
							payable_inr_DOM.add("");
						}else{*/
							payable_inr_DOM_DRCR.add(nf6.format(totamt));
						//}
					}
				}
				
				
				if(!exchgrt.equals("") && (!ind.equals(""))){}else{}
				
				FINAL_SELLER_INV_AMT_INR_DOM_DRCR.add(nf3.format(Double.parseDouble(""+temp_inv_amt_dom_DRCR.elementAt(i))));
				purchase_total_inv_value_inr_dom_DRCR += (Double.parseDouble(""+temp_inv_amt_dom_DRCR.elementAt(i)));
				if(!INVOICE_AMT_TDS_DOM_DRCR.elementAt(i).equals("-")){
					purchase_total_cost_inr_dom_DRCR += ((Double.parseDouble(""+INVOICE_AMT_DOM_DRCR.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM_DRCR.elementAt(i)))-Double.parseDouble(""+INVOICE_AMT_TDS_DOM_DRCR.elementAt(i)));
				}else{
					purchase_total_cost_inr_dom_DRCR += (Double.parseDouble(""+INVOICE_AMT_DOM_DRCR.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM_DRCR.elementAt(i)));
				}
				
			}
			
			for(int i=0; i<CARGO_REF_CD_DOM_DRCR.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR_DOM_DRCR.elementAt(i)).equals("-") && temp_inv_amt_dom_DRCR.elementAt(i)!=null && !temp_inv_amt_dom_DRCR.elementAt(i).equals("") && !temp_inv_amt_dom_DRCR.elementAt(i).equals("0") )
				{
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM_DRCR.elementAt(i));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM_DRCR.elementAt(i));
					double tdsamt =0;
					if(!(""+ACTUAL_UNLOADED_QTY_DOM_DRCR.elementAt(i)).equals("-"))
					{
						if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2")){
							if(TCS_APP_FLAG_DRCR.elementAt(i).equals("Y")){
								tdsamt=(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))*Double.parseDouble(""+TCS_PERC_DOM_DRCR.elementAt(i)))/100;
							}
						}else{
							//tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
							tdsamt = 0;
						}
					}else{
						tdsamt = 0;
					}
					if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2")){
						if(TCS_APP_FLAG_DRCR.elementAt(i).equals("Y")){
							CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT_DRCR.elementAt(i))));
							CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT_DRCR.elementAt(i))));
						}else{
							CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
							CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						}
					}else{
						CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}
				}
				else
				{
					//CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM_DRCR.elementAt(i));
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM_DRCR.elementAt(i));
					double tdsamt =0;
					if(!(""+ACTUAL_UNLOADED_QTY_DOM_DRCR.elementAt(i)).equals("-"))
					{
						if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2")){
							if(TCS_APP_FLAG_DRCR.elementAt(i).equals("Y")){
								tdsamt=(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM_DRCR.elementAt(i))*Double.parseDouble(""+TCS_PERC_DOM_DRCR.elementAt(i)))/100;
							}
						}else{
							//tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
							tdsamt = 0;
						}
					}else{
						tdsamt = 0;
					}
					if(TRADER_INV_CURRENCY_DRCR.elementAt(i).equals("2")){
						if(TCS_APP_FLAG_DRCR.elementAt(i).equals("Y")){
							CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT_DRCR.elementAt(i))));
							CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT_DRCR.elementAt(i))));
						}else{
							CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
							CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						}
					}else{
					CD_PAID_DOM_DRCR.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					CD_PAID_NUMERIC_DOM_DRCR.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}
				}
				
			}																						
		
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void get_Purchase_dtls_domestic_Approval()
	{
		try
		{		
			System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb_dom = new Vector();
			Vector temp_usd_invoice_dom = new Vector();
			Vector temp_usd_dr_cr_dom = new Vector();
			Vector temp_inv_amt_dom = new Vector();			
			Vector temp_tot_cd_amt_dom = new Vector();
			Vector temp_tot_pay_refund_dom = new Vector();
			Vector temp_cd_paid_dom = new Vector();
			Vector final_seller_amt_dom = new Vector();
			Vector unloaded_qty_dom = new Vector();
			String from_dt_dom = "01/"+month+"/"+year;
			String to_dt_dom = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt_dom = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			String tds_flag="";
			queryString1 = "SELECT TURNOVER_FLAG FROM FMS7_SUPPLIER_TURNOVER_DTL WHERE supplier_cd=1";
			//System.out.println("Seller Payment Details Query = "+queryString);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				tds_flag= rset1.getString(1)==null?"":rset1.getString(1);
			}
			Vector temp_cargo_dom=new Vector();
			Vector temp_seq_dom=new Vector();
			
			/*String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq_dom.add("Y");
				else
					temp_seq_dom.add("N");
			}*/
			

			String trdcd=" AND PARTY_CD="+trader_cd+" ";
			String split1="";
			split1=" AND SPLIT_SEQ='0'";
			/*queryString = "SELECT B.CARGO_REF_cd, C.TRD_CD FROM " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE  B.MAN_CD=C.MAN_CD AND " +
					  "(B.DELV_From_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) OR B.DELV_to_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')))  AND "
			  		+ "B.DOM_buy_flag='Y' ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;*/
			queryString = "SELECT CARGO_REF_NO,PARTY_CD FROM FMS7_DOM_PUR_INV_dTL WHERE (INVOICE_DT between "
					+ " to_date('"+from_dt_dom+"','dd/mm/yyyy') and " +
					  "to_date('"+to_dt_dom+"','dd/mm/yyyy'))";
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
				if(flag_accounting.equalsIgnoreCase("Approval")){
					
					/*queryString = "SELECT A.INVOICE_NO FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO='"+rset.getString(1)+"' "
							+ "AND SPLIT_SEQ='0' ";				
					//System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{

						CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
						TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));
						queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
								  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
							
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{
								VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
							}else{
								VESSEL_NM_DOM.add("");
							}
							queryString = "SELECT TO_CHAR(period_st_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(period_end_DT,'DD/MM/YYYY') FROM FMS7_DOM_PUR_INV_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
								
								rset1 = stmt1.executeQuery(queryString);
								if(rset1.next())
								{
									String st_dt=rset1.getString(1)==null?"":rset1.getString(1);
									String end_dt=rset1.getString(2)==null?"":rset1.getString(2);
									duration_dom.add(st_dt+" - "+end_dt);
								}else{
									duration_dom.add("");
								}
					
					}*/
				}else{
					/*CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));*/
					//temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
					/*queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
						
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
						}else{
							VESSEL_NM_DOM.add("");
						}*/
						
				}
			}
		//	}
			
			
			double usd_mmbtu=0;
			String exchg_rate_2_dom = "";
			//for(int i=0; i<temp_cargo_dom.size(); i++)
			{
				
				/*if(SPLIT_SEQ_DOM.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ_DOM.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"B";
				}
				else
				{*/
					
				
				
				
				//Logic for Final Seller Payment
				
				
				/*queryString = "SELECT A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),SUN_APPROVAL,CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" AND SPLIT_SEQ='0' ";		
				System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT_DOM.add(rset.getString(2)==null?"":rset.getString(2));						
					
					CONF_PRICE_DOM.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					CONF_PRICE_NUMERIC_DOM.add(rset.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE_DOM.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					
					USD_VAL_INVOICE_NUMERIC_DOM.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value_dom += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT_DOM.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag_DOM.add(rset.getString(8)==null?"":rset.getString(8));
					Authorize_flag_DOM.add(rset.getString(9)==null?"":rset.getString(9));
					Approve_flag_DOM.add(rset.getString(10)==null?"":rset.getString(10));*/
					
					queryString = "SELECT ALLOC_QTY,EXCHG_RT_VAL,INVOICE_AMT,INVOICE_TAX_AMT,to_char(period_st_dt,'Month'),invoice_type"
								+ ",party_cd,remark,invoice_no,to_char(period_st_dt,'dd/mm/yyyy'),INVOICE_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),"
								+ "CONF_PRICE, INVOICE_AMT_USD, TO_CHAR(DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG,"
								+ "to_char(period_end_dt,'dd/mm/yyyy'),CARGO_REF_NO,contract_no,contract_rev_no,to_char(PAY_EXCHG_RT_DT,'dd/mm/yyyy'), PAY_EXCHG_RT_VAL,buyer_plant_cd "
								+ "FROM FMS7_DOM_PUR_INV_dTL WHERE (INVOICE_DT between "
								+ " to_date('"+from_dt_dom+"','dd/mm/yyyy') and " +
								  "to_date('"+to_dt_dom+"','dd/mm/yyyy')) AND APPROVED_FLAG='Y' and cargo_ref_no like '2%'";
					if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
					{
						queryString = queryString + trdcd;
					}
						//System.out.println("query---"+queryString);
						rset1 = stmt1.executeQuery(queryString);
						while(rset1.next())
						{
							Vtitle.add("");
							CARGO_REF_CD_DOM.add(rset1.getString(20)==null?"0":rset1.getString(20));
							String bu_unit="";
							if(rset1.getString(25).equals("0")){
								bu_unit="SEIPL -REG(GJ)";
							}else{
								queryString1 = "SELECT PLANT_NAME,PLANT_SHORT_ABBR FROM FMS7_SUPPLIER_PLANT_DTL "
										+ "WHERE SUPPLIER_CD='"+supplier_cd+"' AND SEQ_NO='"+rset1.getString(25)+"'";
								rset2=stmt2.executeQuery(queryString1);
								if(rset2.next())
								{
									bu_unit=rset2.getString(2)==null?"":rset2.getString(2);
								}
							}
							Vsupp_plant_Abbr.add(bu_unit);
							PAY_EXCHG_RT_DT.add(rset1.getString(23)==null?"":rset1.getString(23));
							PAY_EXCHG_RT_VAL.add(rset1.getString(24)==null?"":rset1.getString(24));
							VESSEL_NM_DOM.add("");
							inv_type_flag.add("SG");
							String trader_cd=rset1.getString(7)==null?"0":rset1.getString(7);
							TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
							ACTUAL_UNLOADED_QTY_DOM.add(rset1.getString(1)==null?"-":nf3.format(Double.parseDouble(rset1.getString(1))));
							unloaded_qty_dom.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							purchase_total_qty_dom += Double.parseDouble(rset1.getString(1)==null?"0":nf.format(Double.parseDouble(rset1.getString(1))));
							exchg_rate_2_dom=rset1.getString(2)==null?"0":rset1.getString(2);
							String inv_curr="";
							if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
								TRADER_INV_CURRENCY.add("2");
								inv_curr="2";
							}else{
								TRADER_INV_CURRENCY.add("");
								inv_curr="";
							}
							String trd_cd="";
							queryString="SELECT MAN_CD,dom_buy_flag FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+rset1.getString(20)+"'";
							rset2=stmt2.executeQuery(queryString);
							if(rset2.next()){
								CARGO_REF_DOM_FLAG.add(rset2.getString(2)==null?"":rset2.getString(2));
								queryString="SELECT trd_cd FROM FMS7_MAN_REQ_MST WHERE man_CD='"+rset2.getString(1)+"'";
								rset=stmt.executeQuery(queryString);
								if(rset.next()){
									trd_cd=rset.getString(1)==null?"":rset.getString(1);
								}
							}else{
								CARGO_REF_DOM_FLAG.add("");
							}
							queryString = "SELECT EXCHNG_RATE_CD FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
									+ "and  SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y'  ";
							rset3 = stmt3.executeQuery(queryString);
							if(rset3.next())
							{
								Exchg_rt_cd.add(rset3.getString(1)==null?"":rset3.getString(1));
							}else{
								Exchg_rt_cd.add("");
							}
							if(!trd_cd.equals(trader_cd)){
								queryString = "SELECT payment_currency FROM FMS7_TRADER_OTHER_PLANT_MST A WHERE SN_NO='"+rset1.getString(21)+"' AND "
										+ " SN_REV_NO='"+rset1.getString(22)+"' and customer_cd='"+trader_cd+"' and flag='Y'";
								//System.out.println("queryString--billing sg--rset1.getString(11)-"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									//TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
									String pay=rset3.getString(1)==null?"":rset3.getString(1);
									if(pay.equals("") ){
										queryString1 = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
												+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
										//System.out.println("queryString--billing sgabc-"+queryString1);
										rset2 = stmt2.executeQuery(queryString1);
										if(rset2.next())
										{
											//System.out.println("queryString--billing sg-def--"+rset1.getString(11));
											pay=rset2.getString(1)==null?"":rset2.getString(1);
											TRADER_PAY_CURRENCY.add(pay);
											//System.out.println("TRADER_PAY_CURRENCYhere-"+TRADER_PAY_CURRENCY);
										}else{
											TRADER_PAY_CURRENCY.add("");
										}
									}else{
										TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
									}
								}else{
									//TRADER_PAY_CURRENCY.add("");
									queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
											+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
									//System.out.println("queryString--billing sg-"+queryString);
									rset3 = stmt3.executeQuery(queryString);
									if(rset3.next())
									{
										TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
									}else{
										TRADER_PAY_CURRENCY.add("");
									}
								}
							}else{
								queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trader_cd+"' "
										+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
								//System.out.println("queryString--billing sg-"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
								}else{
									TRADER_PAY_CURRENCY.add("");
								}
							}
							EXCHG_RATE_VALUE_DOM.add(rset1.getString(2)==null?"-":nf2.format(Double.parseDouble(rset1.getString(2))));
							INVOICE_AMT_DOM.add(rset1.getString(3)==null?"0":nf.format(Double.parseDouble(rset1.getString(3))));
							INVOICE_TAX_AMT_DOM.add(rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4))));
							String taxamt=rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4)));
							purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
							temp_inv_amt_dom.add(rset1.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(3))));
							ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
							String inv_type=rset1.getString(6)==null?"":rset1.getString(6);
							if(tds_flag.equals("Y")){
								double tds_Amt=(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))* Double.parseDouble(tds_perc))/100;
								INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
							}else{
								INVOICE_AMT_TDS_DOM.add("-");
							}
							if(inv_type.equals("1")){
								inv_type="Monthly";
							}else if(inv_type.equals("2")){
								inv_type="Fortnightly";
							}
							else if(inv_type.equals("3")){
								inv_type="Weekly";
							}
							ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
							String rmk=rset1.getString(8)==null?"":rset1.getString(8);
							REMARK_DOM.add(rmk);
							double tax_amt_usd=0;
							if(!rmk.equals("")){
								TAX_rmk_DOM.add(rmk+"%");
								String temp[]=rmk.split("@");
								 tax_amt_usd=(Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))* Double.parseDouble(temp[1].trim())/100;
								
							}
							TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
							invoice_type_DOM.add(inv_type);
							purchase_total_tax_inr_dom+=tax_amt_usd;
							usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/Double.parseDouble(rset1.getString(1));
							INVOICE_NO_DOM.add(rset1.getString(11)==null?"":rset1.getString(11));
							INVOICE_DT_DOM.add(rset1.getString(12)==null?"":rset1.getString(12));	
							
							CONF_PRICE_DOM.add(rset1.getString(13)==null?"":nf2.format(Double.parseDouble(rset1.getString(13))));
							CONF_PRICE_NUMERIC_DOM.add(rset1.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset1.getString(13))));
							USD_VAL_INVOICE_DOM.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
							
							USD_VAL_INVOICE_NUMERIC_DOM.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
							purchase_total_invoice_value_dom += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
							
							DUE_DT_DOM.add(rset1.getString(15)==null?"":rset1.getString(15));
							Check_flag_DOM.add(rset1.getString(16)==null?"":rset1.getString(16));
							Authorize_flag_DOM.add(rset1.getString(17)==null?"":rset1.getString(17));
							Approve_flag_DOM.add(rset1.getString(18)==null?"":rset1.getString(18));
							String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
							String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
							duration_dom.add(st_dt+" - "+end_dt);
							
							queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
							//System.out.println("TRADER Master query = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{			
								TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
								TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
							}
							else
							{
								TRADER_NAME_DOM.add("");
								TRADER_ABBR_DOM.add("");
							}
							if(inv_curr.equals("2")){
								String tcs_perc="";
								queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
										+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
										// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
								rset=stmt.executeQuery(queryString);
								//System.out.println("queryString---"+queryString);
								if(rset.next()){
									tcs_perc=rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2)));
								}else{
								}
								
								int fin_yr = Integer.parseInt(rset1.getString(12).substring(6));
								int fin_mon = Integer.parseInt(rset1.getString(12).substring(3,5));
								String financial_year = "";
								int inv_no = 0;
								String invoice_no = "";
								
								if(fin_mon>3) {
									financial_year = ""+fin_yr+"-"+(fin_yr+1);
								} else {
									financial_year = ""+(fin_yr-1)+"-"+fin_yr;
								}
								String tcs_flag="";
								queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+rset1.getString(7)+"'";
								//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
								}
								if(tcs_flag.equals("Y")){
									double tcs_amt=(Double.parseDouble(rset1.getString(14))+Double.parseDouble(rset1.getString(4)))* Double.parseDouble(tcs_perc)/100;
									INVOICE_TCS_AMT.add(nf6.format(tcs_amt));
								}else{
									INVOICE_TCS_AMT.add("0");
								}
								
							}else{
								INVOICE_TCS_AMT.add("0");
							}
						}
						
						queryString = "SELECT ALLOC_QTY,EXCHG_RT_VAL,INVOICE_AMT,INVOICE_TAX_AMT,to_char(period_st_dt,'Month'),invoice_type"
								+ ",party_cd,remark,invoice_no,to_char(period_st_dt,'dd/mm/yyyy'),INVOICE_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),"
								+ "CONF_PRICE, INVOICE_AMT_USD, TO_CHAR(DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG,"
								+ "to_char(period_end_dt,'dd/mm/yyyy'),CARGO_REF_NO,contract_no,contract_rev_no,to_char(PAY_EXCHG_RT_DT,'dd/mm/yyyy'), PAY_EXCHG_RT_VAL,"
								+ "adj_sign,adj_amt,buyer_plant_cd "
								+ "FROM FMS7_DOM_PUR_INV_dTL_PG WHERE (INVOICE_DT between "
								+ " to_date('"+from_dt_dom+"','dd/mm/yyyy') and " +
								  "to_date('"+to_dt_dom+"','dd/mm/yyyy')) AND APPROVED_FLAG='Y' and cargo_ref_no like '2%'";
					if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
					{
						queryString = queryString + trdcd;
					}
						//System.out.println("query---"+queryString);
						rset1 = stmt1.executeQuery(queryString);
						while(rset1.next())
						{
							
							String adj_amt=rset1.getString(26)==null?"0":rset1.getString(26);
							String adj_sign=rset1.getString(25)==null?"0":rset1.getString(25);
							CARGO_REF_CD_DOM.add(rset1.getString(20)==null?"0":rset1.getString(20));
							PAY_EXCHG_RT_DT.add(rset1.getString(23)==null?"":rset1.getString(23));
							PAY_EXCHG_RT_VAL.add(rset1.getString(24)==null?"":rset1.getString(24));
							String bu_unit="";
							if(rset1.getString(27).equals("0")){
								bu_unit="SEIPL -REG(GJ)";
							}else{
								queryString1 = "SELECT PLANT_NAME,PLANT_SHORT_ABBR FROM FMS7_SUPPLIER_PLANT_DTL "
										+ "WHERE SUPPLIER_CD='"+supplier_cd+"' AND SEQ_NO='"+rset1.getString(27)+"'";
								rset2=stmt2.executeQuery(queryString1);
								if(rset2.next())
								{
									bu_unit=rset2.getString(2)==null?"":rset2.getString(2);
								}
							}
							Vsupp_plant_Abbr.add(bu_unit);
							VESSEL_NM_DOM.add("");
							inv_type_flag.add("PG");
							String trader_cd=rset1.getString(7)==null?"0":rset1.getString(7);
							TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
							ACTUAL_UNLOADED_QTY_DOM.add(rset1.getString(1)==null?"-":nf3.format(Double.parseDouble(rset1.getString(1))));
							unloaded_qty_dom.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
							purchase_total_qty_dom += Double.parseDouble(rset1.getString(1)==null?"0":nf.format(Double.parseDouble(rset1.getString(1))));
							exchg_rate_2_dom=rset1.getString(2)==null?"0":rset1.getString(2);
							String inv_curr="";
							if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
								TRADER_INV_CURRENCY.add("2");
								inv_curr="2";
							}else{
								TRADER_INV_CURRENCY.add("");
								inv_curr="";
							}
							String trd_cd="";
							queryString="SELECT MAN_CD,dom_buy_flag FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+rset1.getString(20)+"'";
							rset2=stmt2.executeQuery(queryString);
							if(rset2.next()){
								CARGO_REF_DOM_FLAG.add(rset2.getString(2)==null?"":rset2.getString(2));
								queryString="SELECT trd_cd FROM FMS7_MAN_REQ_MST WHERE man_CD='"+rset2.getString(1)+"'";
								rset=stmt.executeQuery(queryString);
								if(rset.next()){
									trd_cd=rset.getString(1)==null?"":rset.getString(1);
								}
							}else{
								CARGO_REF_DOM_FLAG.add("");
							}
							queryString = "SELECT EXCHNG_RATE_CD FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
									+ "and  SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"'  and cont_type='Y'";
							rset3 = stmt3.executeQuery(queryString);
							if(rset3.next())
							{
								Exchg_rt_cd.add(rset3.getString(1)==null?"":rset3.getString(1));
							}else{
								Exchg_rt_cd.add("");
							}
							if(!trd_cd.equals(trader_cd)){
								//System.out.println("trd_cd---"+trd_cd);
								queryString = "SELECT payment_currency FROM FMS7_TRADER_OTHER_PLANT_MST A WHERE SN_NO='"+rset1.getString(21)+"' AND "
										+ " SN_REV_NO='"+rset1.getString(22)+"' and customer_cd='"+trader_cd+"' and flag='Y'";
								//System.out.println("queryString-pg-"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									String pay=rset3.getString(1)==null?"":rset3.getString(1);
									if(pay.equals("") ){
										queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
												+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
										//System.out.println("queryString--billing pg-"+queryString);
										rset4 = stmt4.executeQuery(queryString);
										if(rset4.next())
										{
											TRADER_PAY_CURRENCY.add(rset4.getString(1)==null?"":rset4.getString(1));
										}else{
											TRADER_PAY_CURRENCY.add("");
										}
									}else{
										TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
									}
								}else{
									//TRADER_PAY_CURRENCY.add("");
									queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trd_cd+"' "
											+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
									//System.out.println("queryString--billing pg-"+queryString);
									rset3 = stmt3.executeQuery(queryString);
									if(rset3.next())
									{
										TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
									}else{
										TRADER_PAY_CURRENCY.add("");
									}
								}
							}else{
								//System.out.println("trd_cd-else--"+trd_cd);
								queryString = "SELECT payment_cur_cd FROM FMS7_TRADER_BILLING_DTL WHERE customer_cd='"+trader_cd+"' "
										+ "and   SN_NO='"+rset1.getString(21)+"' and SN_REV_NO ='"+rset1.getString(22)+"' and cont_type='Y' ";
								//System.out.println("queryString--billing pg-"+queryString);
								rset3 = stmt3.executeQuery(queryString);
								if(rset3.next())
								{
									TRADER_PAY_CURRENCY.add(rset3.getString(1)==null?"":rset3.getString(1));
								}else{
									TRADER_PAY_CURRENCY.add("");
								}
							}
							EXCHG_RATE_VALUE_DOM.add(rset1.getString(2)==null?"-":nf2.format(Double.parseDouble(rset1.getString(2))));
							INVOICE_AMT_DOM.add(rset1.getString(3)==null?"0":nf.format(Double.parseDouble(rset1.getString(3))));
							INVOICE_TAX_AMT_DOM.add(rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4))));
							String taxamt=rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4)));
							purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
							temp_inv_amt_dom.add(rset1.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(3))));
							ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
							String inv_type=rset1.getString(6)==null?"":rset1.getString(6);
							if(tds_flag.equals("Y")){
								double tds_Amt=(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))* Double.parseDouble(tds_perc))/100;
								INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
							}else{
								INVOICE_AMT_TDS_DOM.add("-");
							}
							if(inv_type.equals("1")){
								inv_type="Monthly";
							}else if(inv_type.equals("2")){
								inv_type="Fortnightly";
							}
							else if(inv_type.equals("3")){
								inv_type="Weekly";
							}
							ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
							String rmk=rset1.getString(8)==null?"":rset1.getString(8);
							REMARK_DOM.add(rmk);
							
							String usd_amt=rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14)));
							double amtadj=0;
							if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
								//System.out.println("here in this--"+adj_amt);
								if(adj_sign.equals("+")){
									 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
								}else if(adj_sign.equals("-")){
									amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
								}
								USD_VAL_INVOICE_DOM.add(nf3.format(amtadj));
								
								USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amtadj));
								purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amtadj));
							}else{
								//System.out.println("here in this else");
								USD_VAL_INVOICE_DOM.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
								
								USD_VAL_INVOICE_NUMERIC_DOM.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
								purchase_total_invoice_value_dom += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
							}
							double tax_amt_usd=0;
							if(!rmk.equals("")){
								TAX_rmk_DOM.add(rmk+"%");
								String temp[]=rmk.split("@");
								if(!adj_amt.equals("") && inv_curr.equals("2")){
									tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
								}else{
								 tax_amt_usd=(Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))* Double.parseDouble(temp[1].trim())/100;
								}
								
							}
							TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
							invoice_type_DOM.add(inv_type);
							purchase_total_tax_inr_dom+=tax_amt_usd;
							usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/Double.parseDouble(rset1.getString(1));
							INVOICE_NO_DOM.add(rset1.getString(11)==null?"":rset1.getString(11));
							INVOICE_DT_DOM.add(rset1.getString(12)==null?"":rset1.getString(12));	
							
							CONF_PRICE_DOM.add(rset1.getString(13)==null?"":nf2.format(Double.parseDouble(rset1.getString(13))));
							CONF_PRICE_NUMERIC_DOM.add(rset1.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset1.getString(13))));
//							USD_VAL_INVOICE_DOM.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
//							
//							USD_VAL_INVOICE_NUMERIC_DOM.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
//							purchase_total_invoice_value_dom += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
							
							DUE_DT_DOM.add(rset1.getString(15)==null?"":rset1.getString(15));
							Check_flag_DOM.add(rset1.getString(16)==null?"":rset1.getString(16));
							Authorize_flag_DOM.add(rset1.getString(17)==null?"":rset1.getString(17));
							Approve_flag_DOM.add(rset1.getString(18)==null?"":rset1.getString(18));
							String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
							String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
							duration_dom.add(st_dt+" - "+end_dt);
							
							queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
							//System.out.println("TRADER Master query = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{			
								TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
								TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
							}
							else
							{
								TRADER_NAME_DOM.add("");
								TRADER_ABBR_DOM.add("");
							}
							
							if(inv_curr.equals("2")){
								String tcs_perc="";
								queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
										+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
										// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
								rset=stmt.executeQuery(queryString);
								//System.out.println("queryString---"+queryString);
								if(rset.next()){
									tcs_perc=rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2)));
								}else{
								}
								
								int fin_yr = Integer.parseInt(rset1.getString(12).substring(6));
								int fin_mon = Integer.parseInt(rset1.getString(12).substring(3,5));
								String financial_year = "";
								int inv_no = 0;
								String invoice_no = "";
								
								if(fin_mon>3) {
									financial_year = ""+fin_yr+"-"+(fin_yr+1);
								} else {
									financial_year = ""+(fin_yr-1)+"-"+fin_yr;
								}
								String tcs_flag="";
								queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+rset1.getString(7)+"'";
								//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
								}
								if(tcs_flag.equals("Y")){
									//System.out.println(""+);
									String tax=nf6.format(Double.parseDouble(rset1.getString(4)));
									String net="";
									if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
										net=nf6.format(amtadj);
									}else{
										net=nf6.format(Double.parseDouble(rset1.getString(14)));
									}
									double tcs_amt=(Double.parseDouble(net)+Double.parseDouble(tax))* Double.parseDouble(tcs_perc)/100;
//									System.out.println("tax--"+tax);
									//System.out.println("net--"+net);
									INVOICE_TCS_AMT.add(nf6.format(tcs_amt));
								}else{
									INVOICE_TCS_AMT.add("0");
								}
								
							}else{
								INVOICE_TCS_AMT.add("0");
							}
							if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
								String title="";
								double ori_gross=rset1.getDouble(1) * rset1.getDouble(13);
								//System.out.println("ori_gross = "+ori_gross);
								String gross="";
								String gros="";
								if(inv_curr.equals("2")){
									gross=nf.format(ori_gross);
								}else{
									gros=nf.format(ori_gross);
									//System.out.println("ori_gross = "+gros);
									gross=nf.format(Double.parseDouble(gros) * Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)));
								}
								if(adj_sign.equals("+")){
									title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
								}else if(adj_sign.equals("-")){
									title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
								}
								
								Vtitle.add(title);
							}else{
								Vtitle.add("");
							}
						}
						/*else{
							ACTUAL_UNLOADED_QTY_DOM.add("-");
							unloaded_qty_dom.add("0");
							ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add("0");
							//exchg_rt_dom.add("");
							EXCHG_RATE_VALUE_DOM.add("-");
							INVOICE_AMT_DOM.add("0");
							INVOICE_TAX_AMT_DOM.add("0");
							temp_inv_amt_dom.add("0.00");
							ACT_ARRV_MONTH_DOM.add("");
							ACT_ARRV_DT_DOM.add("");
							TAX_rmk_DOM.add("");
							TAX_amt_usd_DOM.add("0");
							invoice_type_DOM.add("");
						}*/
					
					//SUN_APPROVAL.add(rset.getString(7)==null?"":rset.getString(7)); //Commented By Samik Shah On 23rd August, 2011 ...
				/*}
				else
				{
					INVOICE_NO_DOM.add("");
					INVOICE_DT_DOM.add("");						
					ACTUAL_UNLOADED_QTY_DOM.add("-");
					ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add("0.00");
					CONF_PRICE_DOM.add("");
					CONF_PRICE_NUMERIC_DOM.add("0.0000");
					USD_VAL_INVOICE_DOM.add("-");
					USD_VAL_INVOICE_NUMERIC_DOM.add("0.00");
					DUE_DT_DOM.add("");
					temp_inv_amt_dom.add("0");
					unloaded_qty_dom.add("0");
					Check_flag_DOM.add("");
					Authorize_flag_DOM.add("");
					Approve_flag_DOM.add("");
				//	exchg_rt_dom.add("");
					EXCHG_RATE_VALUE_DOM.add("-");
					INVOICE_AMT_DOM.add("0");
					INVOICE_TAX_AMT_DOM.add("0");
					ACT_ARRV_MONTH_DOM.add("");
					ACT_ARRV_DT_DOM.add("");
					TAX_rmk_DOM.add("");
					TAX_amt_usd_DOM.add("0");
					invoice_type_DOM.add("");
					
					//SUN_APPROVAL.add(""); //Commented By Samik Shah On 23rd August, 2011 ...
				}*/
			}
			//System.out.println("after this ---"+TRD_CD_DOM+"---"+CARGO_REF_CD_DOM);
//			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
//			{
				if(!all_exchg_rtdt.equals("")){
					//System.out.println("all_exchg_rtdt---"+all_exchg_rtdt);
					String temp_str[]=all_exchg_rtdt.split("@");
					for(int k=0;k<temp_str.length;k++){
						if(temp_str[k].equals("-")){
							//System.out.println("PAY_EXCHG_RT_DT.elementAt(k)--in if-"+PAY_EXCHG_RT_DT.elementAt(k));
							Exchg_rt_Dt.add(PAY_EXCHG_RT_DT.elementAt(k));
						}else{
							//System.out.println("temp_str[k]--in if-"+temp_str[k]);
							Exchg_rt_Dt.add(temp_str[k]);
						}
					}
					
				}else{
					for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
						{
							Exchg_rt_Dt.add(PAY_EXCHG_RT_DT.elementAt(i));
						}
					}
			//}
			//System.out.println("Exchg_rt_Dt---"+Exchg_rt_Dt);
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{
				//System.out.println("Exchg_rt_Dt-in for--"+Exchg_rt_Dt);
				String refno="";
				refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+INVOICE_NO_DOM.elementAt(i)+"-"+TRD_CD_DOM.elementAt(i);
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL,to_char(to_date(TRANSACTION_DT,'ddmmyyyy'),'dd/mm/yyyy') FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSPR'";
				//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG_DOM.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL_DOM.add(rset.getString(2)==null?"N":rset.getString(2)); 
					TRANSACTION_DT.add(rset.getString(3)==null?"":rset.getString(3));
					//Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG_DOM.add("N");
					SUN_APPROVAL_DOM.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
					TRANSACTION_DT.add(INVOICE_DT_DOM.elementAt(i));
				}
				double sbi_tt_selling_exchg_rate_dom = 0;
				double foreign_exchg_rate_dom = 0;
				String exchg_rate_cd_dom = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2_dom = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate_dom = "";
				
				
				String arr_dt_dom = ""+ACT_ARRV_DT_DOM.elementAt(i);
				String arrival_date_and_rate_note_dom = "";
				
				if(arr_dt_dom.trim().equals(""))
				{
					arrival_date_and_rate_note_dom += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_dom+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT_DOM.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_dom = rset2.getString(1)==null?"0":rset2.getString(1);
					if(!exchg_rate_dom.equals("")){
						sbi_tt_selling_exchg_rate_dom = Double.parseDouble(exchg_rate_dom);
					}
				}
				String gross_amt_inr="";
				int fin_yr = Integer.parseInt(INVOICE_DT_DOM.elementAt(i).toString().substring(6));
				int fin_mon = Integer.parseInt(INVOICE_DT_DOM.elementAt(i).toString().substring(3,5));
				String financial_year = "";
				int inv_no = 0;
				String invoice_no = "";
				
				if(fin_mon>3) {
					financial_year = ""+fin_yr+"-"+(fin_yr+1);
				} else {
					financial_year = ""+(fin_yr-1)+"-"+fin_yr;
				}
				String tcs_flag="";
				String tcs_perc="";
				
				queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
						+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
						// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
				rset=stmt.executeQuery(queryString);
				//System.out.println("queryString---"+queryString);
				if(rset.next()){
					TCS_PERC_DOM.add(rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2))));
					tcs_perc=rset.getString(2)==null?"":nf2.format(Double.parseDouble(rset.getString(2)));
				}else{
					TCS_PERC_DOM.add("");
				}
				TDS_PERC_DOM.add("0.1");
//				System.out.println("Exchg_rt_cd.size()---"+Exchg_rt_cd.size());
//				System.out.println("Exchg_rt_Dt.size()---"+Exchg_rt_Dt.size());
//				System.out.println("exchg_rt_val.size()---"+exchg_rt_val.size());
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+Exchg_rt_cd.elementAt(i)+"' AND EFF_DT=TO_DATE('"+Exchg_rt_Dt.elementAt(i)+"','DD/MM/YYYY')";
				System.out.println("Finding Out EXCHG_RATE =========== "+queryString2+"-------"+INVOICE_NO_DOM.elementAt(i));
				rset1=stmt1.executeQuery(queryString2);
				if(rset1.next())
				{
					//System.out.println("Finding Out EXCHG_RATE ===in if======== ");
					exchgrt=rset1.getString(1)==null?"":rset1.getString(1);
					if(!exchgrt.equals("")){
						//exchg_rt_val.add(nf6.format(Double.parseDouble(exchgrt)));
						exchg_rt_val.add(String.format("%.2f", Double.parseDouble(exchgrt)));
					}else{
						exchg_rt_val.add(exchgrt);
					}
//					System.out.println("TRADER_INV_CURRENCY.elementAt(i)======== "+TRADER_INV_CURRENCY.elementAt(i));
//					System.out.println("TRADER_PAY_CURRENCY.elementAt(i)======== "+TRADER_PAY_CURRENCY.elementAt(i));
					if(TRADER_INV_CURRENCY.elementAt(i).equals("2") && TRADER_PAY_CURRENCY.elementAt(i).equals("1")){
						System.out.println("Finding Out EXCHG_RATE ====in this11======= "+INVOICE_NO_DOM.elementAt(i));
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM.elementAt(i)+"'";
						System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TCS_APP_FLAG.add(tcs_flag);
							TDS_APP_FLAG.add("");
						}else{
							TCS_APP_FLAG.add("");
							TDS_APP_FLAG.add("Y");
						}
						gross_amt_inr=nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))*Double.parseDouble(exchgrt));
						String rmk[]=REMARK_DOM.elementAt(i).toString().split("@");
						String tax_per=rmk[1].trim();
						String tax_amt=nf.format((Double.parseDouble(gross_amt_inr)* Double.parseDouble(tax_per))/100);
//						System.out.println("gross_amt_inr--"+gross_amt_inr);
//						System.out.println("tax_amt--"+tax_amt);
						double inv_amt_inr=Double.parseDouble(gross_amt_inr)+Double.parseDouble(tax_amt);
//						System.out.println("inv_amt_inr--"+inv_amt_inr);
						Gross_inr_DOM.add(gross_amt_inr);
						Tax_inr_DOM.add(tax_amt);
						net_inr_DOM.add(nf.format(inv_amt_inr));
						if(tcs_flag.equals("Y")){
							double tcs_amt=(inv_amt_inr * Double.parseDouble(tcs_perc))/100;
							TCS_TDS_AMT_DOM.add(nf.format(tcs_amt));
							payable_inr_DOM.add(nf.format(inv_amt_inr+tcs_amt));
						}else{
							double tcs_amt=(Double.parseDouble(gross_amt_inr) * 0.1)/100;
							TCS_TDS_AMT_DOM.add(nf.format(tcs_amt));
							payable_inr_DOM.add(nf.format(inv_amt_inr-tcs_amt));
						}
					}else{
						System.out.println("Finding Out EXCHG_RATE ====in this11=else====== "+INVOICE_NO_DOM.elementAt(i));
						Gross_inr_DOM.add("-");
						Tax_inr_DOM.add("-");
						net_inr_DOM.add("-");
						payable_inr_DOM.add("-");
						TCS_TDS_AMT_DOM.add("-");
						TCS_APP_FLAG.add("");
						TDS_APP_FLAG.add("Y");
						//exchg_rt_val.add("");
					}
				}else{
					//System.out.println("Finding Out EXCHG_RATE ===in else======== "+INVOICE_NO_DOM.elementAt(i));
					exchgrt="";
					if(TRADER_INV_CURRENCY.elementAt(i).equals("2") && TRADER_PAY_CURRENCY.elementAt(i).equals("1")){
						if(!Exchg_rt_Dt.elementAt(i).equals("")){
							exchg_rt_val.add("NA");
						}else{
							exchg_rt_val.add("");
						}
					}else{
						exchg_rt_val.add("");
					}
					if(TRADER_INV_CURRENCY.elementAt(i).equals("2") && TRADER_PAY_CURRENCY.elementAt(i).equals("1")){
						System.out.println("in thissss11-else--"+INVOICE_NO_DOM.elementAt(i));
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TRADER_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM.elementAt(i)+"'";
						System.out.println("Finding Out EXCHG_RATE ===else======== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TCS_APP_FLAG.add(tcs_flag);
							TDS_APP_FLAG.add("");
						}else{
							TCS_APP_FLAG.add("");
							TDS_APP_FLAG.add("Y");
						}
						if(!exchgrt.equals("")){
							//System.out.println("Finding Out EXCHG_RATE ====in this11=22====== ");
							gross_amt_inr=nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))*Double.parseDouble(exchgrt));
							String rmk[]=REMARK_DOM.elementAt(i).toString().split("@");
							String tax_per=rmk[1].trim();
							String tax_amt=nf.format((Double.parseDouble(gross_amt_inr)* Double.parseDouble(tax_per))/100);
							double inv_amt_inr=Double.parseDouble(gross_amt_inr)+Double.parseDouble(tax_amt);
							Gross_inr_DOM.add(gross_amt_inr);
							Tax_inr_DOM.add(tax_amt);
							net_inr_DOM.add(nf.format(inv_amt_inr));
							if(tcs_flag.equals("Y")){
								double tcs_amt=(Double.parseDouble(gross_amt_inr) * Double.parseDouble(tcs_perc))/100;
								TCS_TDS_AMT_DOM.add(nf.format(tcs_amt));
								payable_inr_DOM.add(nf.format(inv_amt_inr+tcs_amt));
							}else{
								double tcs_amt=(Double.parseDouble(gross_amt_inr) * 0.1)/100;
								TCS_TDS_AMT_DOM.add(nf.format(tcs_amt));
								payable_inr_DOM.add(nf.format(inv_amt_inr-tcs_amt));
							}
						}else{
							TCS_TDS_AMT_DOM.add("");
							//TCS_TDS_AMT_DOM.add("");
							Gross_inr_DOM.add("-");
							Tax_inr_DOM.add("-");
							net_inr_DOM.add("-");
							payable_inr_DOM.add("-");
//							TCS_APP_FLAG.add("");
//							TDS_APP_FLAG.add("Y");
						}
					}
					
					else if(TRADER_INV_CURRENCY.elementAt(i).equals("2") && TRADER_PAY_CURRENCY.elementAt(i).equals("2")){
//						System.out.println("in thissss-22--"+i);
						//System.out.println("Finding Out EXCHG_RATE ====in this33======= ");
						queryString2 = "SELECT TURNOVER_FLAG FROM FMS7_TURNOVER_DTL WHERE financial_year='"+financial_year+"' and TRADER_cd='"+TRD_CD_DOM.elementAt(i)+"'";
						//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							TCS_APP_FLAG.add(rset2.getString(1)==null?"":rset2.getString(1));
							tcs_flag=rset2.getString(1)==null?"":rset2.getString(1);
							TDS_APP_FLAG.add("");
						}else{
							TCS_APP_FLAG.add("");
							TDS_APP_FLAG.add("Y");
						}
						double tcs_amt=0;
						if(tcs_flag.equals("Y")){
							tcs_amt=(Double.parseDouble(USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i)+"") * Double.parseDouble(tcs_perc))/100;
							TCS_TDS_AMT_DOM.add(tcs_amt);
						}else{
							tcs_amt=(Double.parseDouble(USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i)+"") * 0.1)/100;
							TCS_TDS_AMT_DOM.add(tcs_amt);
						}
						Gross_inr_DOM.add(USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i));
						Tax_inr_DOM.add(TAX_amt_usd_DOM.elementAt(i));
						net_inr_DOM.add(nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM.elementAt(i))));
						double totamt=0;
						if(tcs_flag.equals("Y")){
							totamt=Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM.elementAt(i))+tcs_amt;
						}else{
							totamt=Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))+Double.parseDouble(""+TAX_amt_usd_DOM.elementAt(i))-+tcs_amt;
						}
						
						payable_inr_DOM.add(nf6.format(totamt));
					}else{
						//System.out.println("Fhiselse 333======="+TCS_TDS_AMT_DOM.size());
						System.out.println("in thissss-else-"+INVOICE_NO_DOM.elementAt(i));
						TCS_APP_FLAG.add("");
						TDS_APP_FLAG.add("Y");
						double net_amt=Double.parseDouble(INVOICE_AMT_DOM.elementAt(i)+"");
						String tds_amt=nf6.format((net_amt * 0.1)/100);
						double totamt=(Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i)+"")+ net_amt)-Double.parseDouble(tds_amt);
						TCS_TDS_AMT_DOM.add(tds_amt);
						//TCS_TDS_AMT_DOM.add("");
						Gross_inr_DOM.add(INVOICE_AMT_DOM.elementAt(i)+"");
						Tax_inr_DOM.add(INVOICE_TAX_AMT_DOM.elementAt(i)+"");
						net_inr_DOM.add(nf.format(Double.parseDouble(INVOICE_AMT_DOM.elementAt(i)+"")+Double.parseDouble(INVOICE_TAX_AMT_DOM.elementAt(i)+"")));
						/*if(TRADER_INV_CURRENCY.elementAt(i).equals("") && TRADER_PAY_CURRENCY.elementAt(i).equals("")){
							payable_inr_DOM.add("");
						}else{*/
							payable_inr_DOM.add(nf6.format(totamt));
						//}
					}
				}
				
//				System.out.println("Exchg_rt_cd.size()--end-"+Exchg_rt_cd.size());
//				System.out.println("Exchg_rt_Dt.size()--end-"+Exchg_rt_Dt.size());
//				System.out.println("exchg_rt_val.size()--end-"+exchg_rt_val.size());
				if(!exchgrt.equals("") && (!ind.equals(""))){}else{}
				if(sbi_tt_selling_exchg_rate_dom>0)
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add(nf2.format(sbi_tt_selling_exchg_rate_dom));
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM.add(nf2.format(sbi_tt_selling_exchg_rate_dom));
//					FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add(nf.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					
					final_seller_amt_dom.add(nf.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					//purchase_total_inv_value_inr_dom += (sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
					
					
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add("-");
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM.add("0.0000");
//					FINAL_SELLER_INV_AMT_INR_DOM.add("-");
					FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add("0.00");
					final_seller_amt_dom.add("0.00");
					if(arrival_date_and_rate_note_dom.trim().length()<5)
					{
						arrival_date_and_rate_note_dom += "\nSBI TT Selling rate is missing for Actual Arrival Date: "+arr_dt_dom.trim();
					}
				}
				FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				purchase_total_inv_value_inr_dom += (Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
				if(!INVOICE_AMT_TDS_DOM.elementAt(i).equals("-")){
					purchase_total_cost_inr_dom += ((Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i)))-Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i)));
				}else{
					purchase_total_cost_inr_dom += (Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i)));
				}
				//FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				//System.out.println("FINAL_SELLER_INV_AMT_INR_DOM---"+FINAL_SELLER_INV_AMT_INR_DOM);
				ARRIVAL_DATE_RATE_NOTE_DOM.add(arrival_date_and_rate_note_dom.trim());
				
				String prov_cd_payment_date_dom = "";
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY,TO_CHAR(CUSTOM_DUTY_DT,'dd/mm/yyyy') FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" ";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ_DOM.elementAt(i).equals("1") || SPLIT_SEQ_DOM.elementAt(i).equals("0"))
					{
					//EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt_dom.add(rset.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))>0)
					{
						purchase_total_cd_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						//purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						TOTAL_CD_AMT_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))));
						TOTAL_CD_AMT_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT_DOM.add("-");
						TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
					}
					prov_cd_payment_date_dom = rset.getString(3)==null?"":rset.getString(3);
					}
					else
					{
						TOTAL_CD_AMT_DOM.add("-");
						TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
						temp_tot_cd_amt_dom.add("0.00");
					}
				}
				else
				{
					//EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT_DOM.add("-");
					TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
					temp_tot_cd_amt_dom.add("0.00");
				}
				
				String prov_cd_date_and_rate_note_dom = "";
				
				if(prov_cd_payment_date_dom.trim().equals(""))
				{
					prov_cd_date_and_rate_note_dom += "\n"+"Provisional Custom Duty Payment Date is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_2_dom+"' AND EFF_DT=TO_DATE('"+prov_cd_payment_date_dom+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_2_dom = rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate_dom = Double.parseDouble(exchg_rate_2_dom);
					//EXCHG_RATE_VALUE_DOM.add(rset2.getString(1)==null?"-":nf2.format(Double.parseDouble(rset2.getString(1))));
					if(prov_cd_date_and_rate_note_dom.trim().length()<5 && foreign_exchg_rate_dom<0.0001)
					{
						prov_cd_date_and_rate_note_dom += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date_dom.trim();
					}
				}
				else
				{
					//EXCHG_RATE_VALUE_DOM.add("-");
					if(prov_cd_date_and_rate_note_dom.trim().length()<5)
					{
						prov_cd_date_and_rate_note_dom += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date_dom.trim();
					}
				}
				
				CUSTOM_DUTY_DATE_RATE_NOTE_DOM.add(prov_cd_date_and_rate_note_dom.trim());
				//System.out.println("arrival_date_and_rate_note = "+arrival_date_and_rate_note+",  prov_cd_date_and_rate_note = "+prov_cd_date_and_rate_note);
				
				//Logic for FMS7_FINAL_CUSTOM_DUTY
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND,INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					//if(SPLIT_SEQ_DOM.elementAt(i).equals("1") || SPLIT_SEQ_DOM.elementAt(i).equals("0"))
					//{
					temp_tot_pay_refund_dom.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						//purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						custom_duty_interest_total_inr_dom += Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
						TOTAL_PAID_REFUND_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))));
						TOTAL_PAID_REFUND_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))));
						CUSTOM_DUTY_INTEREST_DOM.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					}
					else
					{
						TOTAL_PAID_REFUND_DOM.add("-");
						TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
						CUSTOM_DUTY_INTEREST_DOM.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
					}
					/*}
					else
					{
						TOTAL_PAID_REFUND_DOM.add("-");
						TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
						CUSTOM_DUTY_INTEREST_DOM.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
						temp_tot_pay_refund_dom.add("0.00");
					}*/
				}
				else
				{
					TOTAL_PAID_REFUND_DOM.add("-");
					TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
					CUSTOM_DUTY_INTEREST_DOM.add("-");
					CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
					temp_tot_pay_refund_dom.add("0.00");
				}
			}
			System.out.println("TCS_APP_FLAG--"+TCS_APP_FLAG+"-INVOICE_NO_DOM--"+INVOICE_NO_DOM);
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i)).equals("-") && temp_inv_amt_dom.elementAt(i)!=null && !temp_inv_amt_dom.elementAt(i).equals("") && !temp_inv_amt_dom.elementAt(i).equals("0") && temp_tot_cd_amt_dom.elementAt(i)!=null && !temp_tot_cd_amt_dom.elementAt(i).equals("") && !temp_tot_cd_amt_dom.elementAt(i).equals("0"))
				{
					temp_cd_paid_dom.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
//					CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
//					CD_PAID_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i));
					double tdsamt =0;
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(TRADER_INV_CURRENCY.elementAt(i).equals("2")){
							if(TCS_APP_FLAG.elementAt(i).equals("Y")){
								tdsamt=(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))*Double.parseDouble(""+TCS_PERC_DOM.elementAt(i)))/100;
							}
						}else{
							//tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
							tdsamt = 0;
						}
					}else{
						tdsamt = 0;
					}
					if(TRADER_INV_CURRENCY.elementAt(i).equals("2")){
						if(TCS_APP_FLAG.elementAt(i).equals("Y")){
							CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT.elementAt(i))));
							CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT.elementAt(i))));
						}else{
							CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
							CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						}
					}else{
						CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))>0)
						{
							INR_PER_MMBTU_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU_DOM.add("-");
							INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU_DOM.add("-");
						INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
					}
				}
				else
				{
					//CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i));
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i));
					double tdsamt =0;
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(TRADER_INV_CURRENCY.elementAt(i).equals("2")){
							if(TCS_APP_FLAG.elementAt(i).equals("Y")){
								tdsamt=(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))*Double.parseDouble(""+TCS_PERC_DOM.elementAt(i)))/100;
							}
						}else{
							//tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
							tdsamt = 0;
						}
					}else{
						tdsamt = 0;
					}
					if(TRADER_INV_CURRENCY.elementAt(i).equals("2")){
						if(TCS_APP_FLAG.elementAt(i).equals("Y")){
							CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT.elementAt(i))));
							CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom+Double.parseDouble(""+INVOICE_TCS_AMT.elementAt(i))));
						}else{
							CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
							CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						}
					}else{
					CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}
					//double total_amt_dom = Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)));
					
					temp_cd_paid_dom.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					//CD_PAID_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))>0)
						{
							INR_PER_MMBTU_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU_DOM.add("-");
							INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU_DOM.add("-");
						INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
					}
				}
				
				double cd_usd_dom = 0;
				double addl_cd_usd_dom = 0;
				double total_cost_dom = 0;
				double usd_per_mmbtu_dom = 0;
				
				if(!(""+temp_tot_cd_amt_dom.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE_DOM.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					CUSTOM_DUTY_USD_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					purchase_total_cd_usd_dom += Double.parseDouble(nf.format(cd_usd_dom));
				}
				else
				{
					CUSTOM_DUTY_USD_DOM.add("-");
					CUSTOM_DUTY_USD_NUMERIC_DOM.add("0.00");
				}
				
				if(!(""+temp_tot_pay_refund_dom.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE_DOM.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					addl_cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					purchase_total_addl_cd_usd_dom += Double.parseDouble(nf.format(addl_cd_usd_dom));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add("-");
					ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM.add("0.00");
				}
				
				//total_cost_dom = Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)) + cd_usd_dom + addl_cd_usd_dom;
				total_cost_dom = Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i)) + Double.parseDouble(""+TAX_amt_usd_DOM.elementAt(i));
				//purchase_total_inv_value_usd_dom += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				if(!USD_VAL_INVOICE_DOM.elementAt(i).equals("-"))
				purchase_total_inv_value_usd_dom += Double.parseDouble(nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))));
				
				if(total_cost_dom>0 && Double.parseDouble(""+unloaded_qty_dom.elementAt(i))>0)
				{
					usd_per_mmbtu_dom = total_cost_dom/Double.parseDouble(""+unloaded_qty_dom.elementAt(i));
				}
				
				if(total_cost_dom>0)
				{
					COST_OF_PURCHASE_USD_DOM.add(nf3.format(total_cost_dom));
					COST_OF_PURCHASE_USD_NUMERIC_DOM.add(nf.format(total_cost_dom));
					purchase_total_cost_usd_dom += Double.parseDouble(nf.format(total_cost_dom));
				}
				else
				{
					COST_OF_PURCHASE_USD_DOM.add("-");
					COST_OF_PURCHASE_USD_NUMERIC_DOM.add("0.00");
				}
				
				if(usd_per_mmbtu_dom>0)
				{
					//USD_PER_MMBTU_DOM.add(nf2.format(usd_per_mmbtu_dom));
					//USD_PER_MMBTU_NUMERIC_DOM.add(nf2.format(usd_per_mmbtu_dom));
					USD_PER_MMBTU_DOM.add(nf2.format(usd_mmbtu));
					USD_PER_MMBTU_NUMERIC_DOM.add(nf2.format(usd_mmbtu));
				}
				else
				{
					USD_PER_MMBTU_DOM.add("-");
					USD_PER_MMBTU_NUMERIC_DOM.add("0.0000");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void get_Purchase_dtls_domestic()
	{
		try
		{		
//			System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb_dom = new Vector();
			Vector temp_usd_invoice_dom = new Vector();
			Vector temp_usd_dr_cr_dom = new Vector();
			Vector temp_inv_amt_dom = new Vector();			
			Vector temp_tot_cd_amt_dom = new Vector();
			Vector temp_tot_pay_refund_dom = new Vector();
			Vector temp_cd_paid_dom = new Vector();
			Vector final_seller_amt_dom = new Vector();
			Vector unloaded_qty_dom = new Vector();
			String from_dt_dom = "01/"+month+"/"+year;
			String to_dt_dom = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt_dom = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			Vector temp_cargo_dom=new Vector();
			Vector temp_cargo_dom_flg=new Vector();
			Vector temp_trd_cd=new Vector();
			Vector temp_seq_dom=new Vector();
			
			/*String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq_dom.add("Y");
				else
					temp_seq_dom.add("N");
			}*/
			

			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String split1="";
			split1=" AND SPLIT_SEQ='0'";
			queryString = "SELECT  B.CARGO_REF_cd, C.TRD_CD,B.DOM_BUY_FLAG FROM " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE  B.MAN_CD=C.MAN_CD AND " +
					  "(B.DELV_From_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) OR B.DELV_to_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')))  AND "
			  		+ "(B.DOM_buy_flag='Y' OR B.DOM_buy_flag='T') ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
				temp_trd_cd.add(rset.getString(2)==null?"":rset.getString(2));
				temp_cargo_dom_flg.add(rset.getString(3)==null?"":rset.getString(3));
				if(flag_accounting.equalsIgnoreCase("Approval")){
					
					/*queryString = "SELECT A.INVOICE_NO FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO='"+rset.getString(1)+"' "
							+ "AND SPLIT_SEQ='0' ";				
					//System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{

						CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
						TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));
						queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
								  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
							
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{
								VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
							}else{
								VESSEL_NM_DOM.add("");
							}
							queryString = "SELECT TO_CHAR(period_st_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(period_end_DT,'DD/MM/YYYY') FROM FMS7_DOM_PUR_INV_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
								
								rset1 = stmt1.executeQuery(queryString);
								if(rset1.next())
								{
									String st_dt=rset1.getString(1)==null?"":rset1.getString(1);
									String end_dt=rset1.getString(2)==null?"":rset1.getString(2);
									duration_dom.add(st_dt+" - "+end_dt);
								}else{
									duration_dom.add("");
								}
					
					}*/
				}else{
					/*CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));*/
					//temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
					/*queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
						
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
						}else{
							VESSEL_NM_DOM.add("");
						}*/
						
				}
			}
			queryString = "SELECT  distinct B.CARGO_REF_no, B.PARTY_CD FROM " +
					  "FMS7_DOM_PUR_INV_DTL B WHERE   " +
					  "(B.period_st_dt between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) OR B.period_end_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')))  AND "
			  		+ "B.CARGO_REF_no like '2%' order by B.CARGO_REF_no";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
		//	System.out.println("queryString--"+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next()){
				String cargo_no=rset.getString(1)==null?"":rset.getString(1);
				if(!temp_cargo_dom.contains(cargo_no)){
					temp_cargo_dom.add(rset.getString(1)==null?"":rset.getString(1));
					temp_trd_cd.add(rset.getString(2)==null?"":rset.getString(2));
					queryString="SELECT DOM_BUY_FLAG FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+cargo_no+"'";
					rset1=stmt1.executeQuery(queryString);
					if(rset1.next()){
						temp_cargo_dom_flg.add(rset1.getString(1)==null?"":rset1.getString(1));
					}else{
						temp_cargo_dom_flg.add("");
					}
				}
			}
		//	}
//System.out.println("temp_cargo_dom---"+temp_cargo_dom);			
			
			double usd_mmbtu=0;
			String exchg_rate_2_dom = "";
			Vector duration=new Vector();
			Vector duration2=new Vector();
			String dur1="";
				/*for(int jk=1;jk<=12;jk++){
					//System.out.println("dur11---"+month+"---"+to_month);
					//if(jk>=Integer.parseInt(month) && jk<=Integer.parseInt(to_month)){
						//System.out.println("dur11-->>>>>>>>>>>-");
						if(jk<10){
							dur1="01/0"+jk+"/"+year+"-15/0"+jk+"/"+year;
						}else{
							dur1="01/"+jk+"/"+year+"-15/"+jk+"/"+year;
						}
						//System.out.println("dur11---"+dur1);
						duration.add(dur1);
						 String to_dt="";
						 if(jk<10){
						    queryString = "Select To_char(Last_Day(to_date('0"+jk+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
						 }else{
							 queryString = "Select To_char(Last_Day(to_date('"+jk+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
						 }
							////System.out.println("Last Date Of The Selected Month = "+queryString);
							rset = stmt.executeQuery(queryString);			
							if(rset.next())
							{
								to_dt = rset.getString(1)==null?"0":rset.getString(1);
							}
							if(jk<10){
								//duration2.add("16/0"+jk+"/"+year+"-"+to_dt);
								duration.add("16/0"+jk+"/"+year+"-"+to_dt);
							}else{
								duration.add("16/"+jk+"/"+year+"-"+to_dt);
							}
				//	}
				}*/
			
			int totMonth = 0;
			String totMonthSql = "SELECT MONTHS_BETWEEN "
					+ " (TO_DATE('"+to_dt_dom+"','dd/mm/yyyy'),"
					+ " TO_DATE('"+from_dt_dom+"','dd/mm/yyyy') )+1 Months"
					+ " FROM DUAL";
			rset = stmt.executeQuery(totMonthSql);
			if(rset.next()) {
				totMonth = rset.getInt(1);
			}
			int tempMonth = Integer.parseInt(month);
			int tempYear = Integer.parseInt(year);
			
			for(int i = 0 ; i < totMonth ; i++) {
				
				if(tempMonth > 12) {
					tempYear++;
					tempMonth = 01;
				}
				String appendZero = "";
				if(tempMonth < 10) {
					appendZero = "0";
				}
				
				String firstFort = "01/"+appendZero+""+tempMonth+"/"+tempYear;
				String firstFort_1 = "15/"+appendZero+""+tempMonth+"/"+tempYear;
				dur1=firstFort+"-"+firstFort_1;
				String secondFort = "16/"+appendZero+""+tempMonth+"/"+tempYear;
				String secondFort_1 = "";
				
				queryString="Select To_char(Last_Day(to_date('"+tempMonth+"/"+tempYear+"','mm/yyyy')),'dd/mm/yyyy') from dual";
				rset=stmt.executeQuery(queryString);			
				if(rset.next())
				{
					secondFort_1=rset.getString(1)==null?"0":rset.getString(1);
				} 
				String dur2=secondFort+"-"+secondFort_1;
				duration.add(dur1);
				duration.add(dur2);
				tempMonth++;
				
				
				
//				System.out.println("firstFort****"+firstFort+"****"+firstFort_1);
//				System.out.println("secondFort****"+secondFort+"****"+secondFort_1);
			}
				
//			    System.out.println("-2--"+duration2);
				//System.out.println("-1--"+duration);
				String tds_flag="";
				queryString1 = "SELECT TURNOVER_FLAG FROM FMS7_SUPPLIER_TURNOVER_DTL WHERE supplier_cd=1";
				//System.out.println("Seller Payment Details Query = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tds_flag= rset1.getString(1)==null?"":rset1.getString(1);
				}
			for(int i=0; i<temp_cargo_dom.size(); i++)
			{
				/*if(SPLIT_SEQ_DOM.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ_DOM.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+"B";
				}
				else
				{*/
					
				
				
				
				//Logic for Final Seller Payment
				
				
				/*queryString = "SELECT A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),SUN_APPROVAL,CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" AND SPLIT_SEQ='0' ";		
				System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT_DOM.add(rset.getString(2)==null?"":rset.getString(2));						
					
					CONF_PRICE_DOM.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					CONF_PRICE_NUMERIC_DOM.add(rset.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE_DOM.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					
					USD_VAL_INVOICE_NUMERIC_DOM.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value_dom += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT_DOM.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag_DOM.add(rset.getString(8)==null?"":rset.getString(8));
					Authorize_flag_DOM.add(rset.getString(9)==null?"":rset.getString(9));
					Approve_flag_DOM.add(rset.getString(10)==null?"":rset.getString(10));*/
				
//				    System.out.println("-1--"+duration);
//				    System.out.println("-2--"+duration2);
				/*queryString = "SELECT CARGO_SEL FROM FMS7_TRADER_CONT_MST  ";
			//	System.out.println("query---"+queryString);
				rset1 = stmt1.executeQuery(queryString);
				while(rset1.next())
				{
					String cargo=rset1.getString(1)==null?"":rset1.getString(1);
					if(cargo.contains(""+temp_cargo_dom.elementAt(i))){
						queryString = "SELECT distinct(sn_no),customer_cd  "
							+ "FROM FMS7_trader_cont_mst WHERE cargo_sel='"+cargo+"' ";
						rset2=stmt2.executeQuery(queryString);
						while(rset2.next()){
							queryString = "SELECT billing_freq FROM FMS7_trader_billing_dtl WHERE sn_no='"+rset2.getString(1)+"' and "
									+ "customer_cd='"+rset2.getString(2)+"' ";
								rset3=stmt3.executeQuery(queryString);
								while(rset3.next()){
									bill_freq=rset3.getString(1)==null?"":rset3.getString(1);
								}
						}
						
						
					}
				}*/
					//for(int k=0;k<2;k++){
				//System.out.println("durat--"+duration.size());
						for(int k=0;k<duration.size();k++){
							int cnt=0;
							String temp1[]=duration.elementAt(k).toString().split("-");
							String frmdt=temp1[0];
							String todt=temp1[1];
							String frm_dt="01/"+month+"/"+year;
							String to_dt="02/"+to_month+"/"+to_year;
							String take_flag="";
							queryString = "SELECT TO_DATE('"+frmdt+"','dd/mm/yyyy') FROM DUAL WHERE to_date('"+frmdt+"','dd/mm/yyyy') BETWEEN "
										+ "  to_date('"+frm_dt+"','dd/mm/yyyy') and to_date('"+to_dt+"','dd/mm/yyyy')";
							
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{
								take_flag="Y";
							}else{
								take_flag="";
							}
							if(take_flag.equals("Y")){
							queryString = "SELECT ALLOC_QTY,EXCHG_RT_VAL,INVOICE_AMT,INVOICE_TAX_AMT,to_char(period_st_dt,'Month'),invoice_type"
									+ ",party_cd,remark,invoice_no,to_char(period_st_dt,'dd/mm/yyyy'),INVOICE_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),"
									+ "CONF_PRICE, INVOICE_AMT_USD, TO_CHAR(DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG,"
									+ "to_char(period_end_dt,'dd/mm/yyyy'),SPLIT_FLAG,CONTRACT_NO,CONTRACT_REV_NO,pLANT_cd,buyer_plant_cd "
								+ "FROM FMS7_DOM_PUR_INV_dTL WHERE CARGO_REF_NO='"+temp_cargo_dom.elementAt(i)+"' and period_st_dt=to_date('"+frmdt+"','dd/mm/yyyy')"
										+ " and period_end_dt=to_date('"+todt+"','dd/mm/yyyy') ";
							System.out.println("query---"+queryString);
							rset1 = stmt1.executeQuery(queryString);
							while(rset1.next())
							{
								System.out.println("query--in this-");
								Vector sg_drcr_no=new Vector();
								CARGO_REF_DOM_FLAG.add(temp_cargo_dom_flg.elementAt(i));
								String aprv_flag=rset1.getString(18)==null?"":rset1.getString(18);
								String cont_no=rset1.getString(21)==null?"0":rset1.getString(21);
								String cont_rev_no=rset1.getString(22)==null?"0":rset1.getString(22);
								String platcd=rset1.getString(23)==null?"0":rset1.getString(23);
								String bu_unit="";
								if(rset1.getString(24).equals("0")){
									bu_unit="SEIPL -REG(GJ)";
								}else{
									queryString1 = "SELECT PLANT_NAME,PLANT_SHORT_ABBR FROM FMS7_SUPPLIER_PLANT_DTL "
											+ "WHERE SUPPLIER_CD='"+supplier_cd+"' AND SEQ_NO='"+rset1.getString(24)+"'";
									rset2=stmt2.executeQuery(queryString1);
									if(rset2.next())
									{
										bu_unit=rset2.getString(2)==null?"":rset2.getString(2);
									}
								}
								if(aprv_flag.equalsIgnoreCase("") || aprv_flag.equalsIgnoreCase("N")){
									System.out.println("query in this11");
									Vector pg_drcr_no=new Vector();
									queryString = "SELECT ALLOC_QTY,EXCHG_RT_VAL,INVOICE_AMT,INVOICE_TAX_AMT,to_char(period_st_dt,'Month'),invoice_type"
											+ ",party_cd,remark,invoice_no,to_char(period_st_dt,'dd/mm/yyyy'),INVOICE_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),"
											+ "CONF_PRICE, INVOICE_AMT_USD, TO_CHAR(DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG,"
											+ "to_char(period_end_dt,'dd/mm/yyyy'),SPLIT_FLAG,CONTRACT_NO,CONTRACT_REV_NO,pLANT_cd,adj_sign,adj_amt "
											+ "FROM FMS7_DOM_PUR_INV_dTL_PG WHERE CARGO_REF_NO='"+temp_cargo_dom.elementAt(i)+"' and period_st_dt=to_date('"+frmdt+"','dd/mm/yyyy')"
											+ " and period_end_dt=to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+rset1.getString(7)+"' and approved_flag='Y' "
											+ " and buyer_plant_cd='"+rset1.getString(24)+"'";
									//System.out.println("query---"+queryString);
									rset2 = stmt2.executeQuery(queryString);
									if(rset2.next()){
										String adj_sign=rset2.getString(24)==null?"":rset2.getString(24);
										String adj_amt=rset2.getString(25)==null?"":rset2.getString(25);
										pg_drcr_no.add(rset2.getString(11)==null?"":rset2.getString(11));
										cont_no=rset2.getString(21)==null?"0":rset2.getString(21);
										cont_rev_no=rset2.getString(22)==null?"0":rset2.getString(22);
										platcd=rset2.getString(23)==null?"0":rset2.getString(23);
										CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
										Vsupp_plant_Abbr.add(bu_unit);
										VESSEL_NM_DOM.add("");
										contract_no_dom.add(rset2.getString(21)==null?"":rset2.getString(21));
										contract_rev_no_dom.add(rset2.getString(22)==null?"":rset2.getString(22));
										plant_cd_dom.add(rset2.getString(23)==null?"":rset2.getString(23));
										TRD_CD_DOM.add(rset2.getString(7)==null?"0":rset2.getString(7));
										ACTUAL_UNLOADED_QTY_DOM.add(rset2.getString(1)==null?"-":nf3.format(Double.parseDouble(rset2.getString(1))));
										unloaded_qty_dom.add(rset2.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset2.getString(1))));
										ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset2.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset2.getString(1))));
										purchase_total_qty_dom += Double.parseDouble(rset2.getString(1)==null?"0":nf.format(Double.parseDouble(rset2.getString(1))));
										exchg_rate_2_dom=rset2.getString(2)==null?"0":rset2.getString(2);
										String inv_currency="";
										if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
											TRADER_INV_CURRENCY.add("2");
											inv_currency="2";
										}else{
											TRADER_INV_CURRENCY.add("");
										}
										EXCHG_RATE_VALUE_DOM.add(rset2.getString(2)==null?"-":nf2.format(Double.parseDouble(rset2.getString(2))));
										INVOICE_AMT_DOM.add(rset2.getString(3)==null?"0":nf.format(Double.parseDouble(rset2.getString(3))));
										INVOICE_TAX_AMT_DOM.add(rset2.getString(4)==null?"0":nf.format(Double.parseDouble(rset2.getString(4))));
										String taxamt=rset2.getString(4)==null?"0":nf.format(Double.parseDouble(rset2.getString(4)));
										purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
										temp_inv_amt_dom.add(rset2.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset2.getString(3))));
										ACT_ARRV_MONTH_DOM.add(rset2.getString(5)==null?"":rset2.getString(5));
										String inv_type=rset2.getString(6)==null?"":rset2.getString(6);
										if(tds_flag.equals("Y")){
											double tds_Amt=(Double.parseDouble(nf.format(Double.parseDouble(rset2.getString(3)==null?"0":rset2.getString(3))))* Double.parseDouble(tds_perc))/100;
											INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
										}else{
											INVOICE_AMT_TDS_DOM.add("-");
										}
										if(inv_type.equals("1")){
											inv_type="Monthly";
										}else if(inv_type.equals("2")){
											inv_type="Fortnightly";
										}
										else if(inv_type.equals("3")){
											inv_type="Weekly";
										}
										ACT_ARRV_DT_DOM.add(rset2.getString(10)==null?"":rset2.getString(10));
										String rmk=rset2.getString(8)==null?"":rset2.getString(8);
										String usd_amt=rset2.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset2.getString(14)));
										double amtadj=0;
										if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_currency.equals("2")){
											if(adj_sign.equals("+")){
												 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
											}else if(adj_sign.equals("-")){
												amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
											}
											USD_VAL_INVOICE_DOM.add(nf3.format(amtadj));
											
											USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amtadj));
											purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amtadj));
										}else{
											USD_VAL_INVOICE_DOM.add(rset2.getString(14)==null?"-":nf3.format(Double.parseDouble(rset2.getString(14))));
											
											USD_VAL_INVOICE_NUMERIC_DOM.add(rset2.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset2.getString(14))));
											purchase_total_invoice_value_dom += Double.parseDouble(rset2.getString(14)==null?"0":nf.format(Double.parseDouble(rset2.getString(14))));
										}
										double tax_amt_usd=0;
										if(!rmk.equals("")){
											TAX_rmk_DOM.add(rmk+"%");
											String temp[]=rmk.split("@");
											if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_currency.equals("2")){
												tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
											}else{
											 tax_amt_usd=(Double.parseDouble(rset2.getString(14)==null?"0":rset2.getString(14)))* Double.parseDouble(temp[1].trim())/100;
											}
											
										}else{
											TAX_rmk_DOM.add("");
										}
										TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
										invoice_type_DOM.add(inv_type);
										purchase_total_tax_inr_dom+=tax_amt_usd;
										usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset2.getString(14)==null?"0":rset2.getString(14)))/Double.parseDouble(rset2.getString(1));
										INVOICE_NO_DOM.add(rset2.getString(11)==null?"":rset2.getString(11));
										INVOICE_DT_DOM.add(rset2.getString(12)==null?"":rset2.getString(12));	
										
										CONF_PRICE_DOM.add(rset2.getString(13)==null?"":nf2.format(Double.parseDouble(rset2.getString(13))));
										CONF_PRICE_NUMERIC_DOM.add(rset2.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset2.getString(13))));
										
										
										
										DUE_DT_DOM.add(rset2.getString(15)==null?"":rset2.getString(15));
										Check_flag_DOM.add(rset2.getString(16)==null?"":rset2.getString(16));
										Authorize_flag_DOM.add(rset2.getString(17)==null?"":rset2.getString(17));
										Approve_flag_DOM.add(rset2.getString(18)==null?"":rset2.getString(18));
										String st_dt=rset2.getString(10)==null?"":rset2.getString(10);
										String end_dt=rset2.getString(19)==null?"":rset2.getString(19);
										duration_dom.add(st_dt+" - "+end_dt);
										
										queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset2.getString(7)+"";
										//System.out.println("TRADER Master query = "+queryString);
										rset = stmt.executeQuery(queryString);
										if(rset.next())
										{			
											TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
											TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
										}
										else
										{
											TRADER_NAME_DOM.add("");
											TRADER_ABBR_DOM.add("");
										}
										cnt++;
										String split_flag=rset2.getString(20)==null?"":rset2.getString(20);
										if(split_flag.equals("Y")){
											String split_val="";
											queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset2.getString(21)+"' "
													+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
													+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
													+ " customer_cd='"+rset2.getString(7)+"' AND FLAG='Y'";
											//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{
												split_val=rset.getString(1)==null?"":rset.getString(1);
											}else{
												queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset2.getString(21)+"' "
													+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
													+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
													+ " customer_cd='"+rset2.getString(7)+"'   AND FLAG='Y'";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													split_val=rset.getString(1)==null?"":rset.getString(1);
												}
											}
											
											
											queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
											//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{
												String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
												String partycd="";
												queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset3 = stmt3.executeQuery(queryString);
												if(rset3.next())
												{
													partycd=rset3.getString(1)==null?"":rset3.getString(1);
												}
												
												//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
												queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
														+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset3 = stmt3.executeQuery(queryString);
												if(rset3.next())
												{
													QTY_MSG_DOM.add(split_val+" % of "+rset3.getDouble(1));
												}else{
													QTY_MSG_DOM.add("");
												}
											}else{
												QTY_MSG_DOM.add("");
											}
										}else{
											QTY_MSG_DOM.add("");
										}
										if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
											String title="";
											double ori_gross=rset2.getDouble(1) * rset2.getDouble(13);
											//System.out.println("ori_gross = "+ori_gross);
											String gross="";
											String gros="";
											if(inv_currency.equals("2")){
												gross=nf.format(ori_gross);
											}else{
												gros=nf.format(ori_gross);
												//System.out.println("ori_gross = "+gros);
												gross=nf.format(Double.parseDouble(gros) * Double.parseDouble(rset2.getString(2)==null?"0":rset2.getString(2)));
											}
											if(adj_sign.equals("+")){
												title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
											}else if(adj_sign.equals("-")){
												title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
											}
											
											Vtitle.add(title);
										}else{
											Vtitle.add("");
										}
										
										//if(Approve_flag_DOM.elementAt(i).equals("Y")){
										for(int kk=0;kk<pg_drcr_no.size();kk++){
											queryString="SELECT dr_cr_no FROM FMS7_DOM_PUR_INV_DRCR_DTL WHERE party_Cd='"+rset2.getString(7)+"'"
													+ " and cargo_ref_no='"+temp_cargo_dom.elementAt(i)+"' and contract_no='"+cont_no+"'"
													+ " and plant_cd='"+platcd+"' "
													+ " and buyer_plant_cd='"+rset1.getString(24)+"' and invoice_no='"+pg_drcr_no.elementAt(kk)+"' ";
							//				System.out.println("queryString---"+queryString);
											rset3 = stmt3.executeQuery(queryString);
											while(rset3.next())
											{
												if(!pg_drcr_no.contains(rset3.getString(1)))
												pg_drcr_no.add(rset3.getString(1)==null?"":rset3.getString(1));
											}
										}
										for(int kk=0;kk<pg_drcr_no.size();kk++){
										queryString = "SELECT DR_CR_AMT_USD,DR_CR_AMT_INR,DR_CR_QTY,DR_CR_PRICE,DR_CR_NO,DR_CR_EXCHG_RT_VAL,DR_CR_TAX_AMT "
													+ ",TO_CHAR(DR_CR_DT,'DD/MM/YYYY'),TO_CHAR(DR_CR_due_DT,'DD/MM/YYYY'),approved_flag,adj_sign,adj_Amt "
													+ "FROM FMS7_DOM_PUR_INV_DRCR_DTL "
													+ " WHERE CARGO_REF_NO='"+temp_cargo_dom.elementAt(i)+"' and party_Cd ='"+rset2.getString(7)+"' "
													+ "and contract_no='"+cont_no+"' and contract_rev_no='"+cont_rev_no+"' "
													+ "and plant_cd='"+platcd+"' and dr_cr_no='"+pg_drcr_no.elementAt(kk)+"' and buyer_plant_cd='"+rset1.getString(24)+"'";
										//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
										rset3 = stmt3.executeQuery(queryString);
										if(rset3.next())
										{
											//Vtitle.add("");
											adj_amt=rset3.getString(12)==null?"":rset3.getString(12);
											adj_sign=rset3.getString(11)==null?"":rset3.getString(11);
											CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
											Vsupp_plant_Abbr.add(bu_unit);
											VESSEL_NM_DOM.add("");
											contract_no_dom.add("");
											contract_rev_no_dom.add("");
											plant_cd_dom.add("");
											TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
											ACTUAL_UNLOADED_QTY_DOM.add(rset3.getString(3)==null?"-":nf3.format(Double.parseDouble(rset3.getString(3))));
											unloaded_qty_dom.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
											ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
											purchase_total_qty_dom += Double.parseDouble(rset3.getString(3)==null?"0":nf.format(Double.parseDouble(rset3.getString(3))));
											exchg_rate_2_dom=rset3.getString(6)==null?"0":rset3.getString(6);
											String inv_curr="";
											if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
												TRADER_INV_CURRENCY.add("2");
												inv_curr="2";
											}else{
												TRADER_INV_CURRENCY.add("");
											}
											EXCHG_RATE_VALUE_DOM.add(rset3.getString(6)==null?"-":nf2.format(Double.parseDouble(rset3.getString(6))));
											INVOICE_AMT_DOM.add(rset3.getString(2)==null?"0":nf.format(Double.parseDouble(rset3.getString(2))));
											INVOICE_TAX_AMT_DOM.add(rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7))));
											taxamt=rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7)));
											purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
											if(inv_curr.equals("2")){
												temp_inv_amt_dom.add("0");
											}else{
												temp_inv_amt_dom.add(rset3.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(2))));
											}
											
											ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
											inv_type=rset1.getString(6)==null?"":rset1.getString(6);
											if(tds_flag.equals("Y")){
												if(inv_curr.equals("2")){
													INVOICE_AMT_TDS_DOM.add("-");
												}else{
												double tds_Amt=((Double.parseDouble(rset3.getString(2)==null?"0":rset3.getString(2)))* Double.parseDouble(tds_perc))/100;
												INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
												}
											}else{
												INVOICE_AMT_TDS_DOM.add("-");
											}
											if(inv_type.equals("1")){
												inv_type="Monthly";
											}else if(inv_type.equals("2")){
												inv_type="Fortnightly";
											}
											else if(inv_type.equals("3")){
												inv_type="Weekly";
											}
											ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
											rmk=rset1.getString(8)==null?"":rset1.getString(8);
											usd_amt=rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1)));
											amtadj=0;
											if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_currency.equals("2")){
												if(adj_sign.equals("+")){
													 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
												}else if(adj_sign.equals("-")){
													amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
												}
												USD_VAL_INVOICE_DOM.add(nf3.format(amtadj));
												
												USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amtadj));
												purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amtadj));
											}else{
												USD_VAL_INVOICE_DOM.add(rset3.getString(1)==null?"-":nf3.format(Double.parseDouble(rset3.getString(1))));
												USD_VAL_INVOICE_NUMERIC_DOM.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
												purchase_total_invoice_value_dom += Double.parseDouble(rset3.getString(1)==null?"0":nf.format(Double.parseDouble(rset3.getString(1))));							
											}
											tax_amt_usd=0;
											if(!rmk.equals("")){
												TAX_rmk_DOM.add(rmk+"%");
												String temp[]=rmk.split("@");
												if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_currency.equals("2")){
													tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
												}else{
												 tax_amt_usd=(Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))* Double.parseDouble(temp[1].trim())/100;
												}
												
											}
											TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
											invoice_type_DOM.add(inv_type);
											purchase_total_tax_inr_dom+=tax_amt_usd;
											usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))/Double.parseDouble(rset3.getString(3));
											INVOICE_NO_DOM.add(rset3.getString(5)==null?"":rset3.getString(5));
											INVOICE_DT_DOM.add(rset3.getString(8)==null?"":rset3.getString(8));	
											CONF_PRICE_DOM.add(rset3.getString(4)==null?"":nf2.format(Double.parseDouble(rset3.getString(4))));
											CONF_PRICE_NUMERIC_DOM.add(rset3.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset3.getString(4))));
											//USD_VAL_INVOICE_DOM.add(rset3.getString(1)==null?"-":nf3.format(Double.parseDouble(rset3.getString(1))));
											//USD_VAL_INVOICE_NUMERIC_DOM.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
											//purchase_total_invoice_value_dom += Double.parseDouble(rset3.getString(1)==null?"0":nf.format(Double.parseDouble(rset3.getString(1))));
											
											DUE_DT_DOM.add(rset3.getString(9)==null?"":rset3.getString(9));
											Check_flag_DOM.add("");
											Authorize_flag_DOM.add("");
											Approve_flag_DOM.add(rset3.getString(10)==null?"":rset3.getString(10));
											st_dt=rset1.getString(10)==null?"":rset1.getString(10);
											end_dt=rset1.getString(19)==null?"":rset1.getString(19);
											duration_dom.add(st_dt+" - "+end_dt);
											queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
											//System.out.println("TRADER Master query = "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{			
												TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
												TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
											}
											else
											{
												TRADER_NAME_DOM.add("");
												TRADER_ABBR_DOM.add("");
											}
											cnt++;
											split_flag=rset1.getString(20)==null?"":rset1.getString(20);
											if(split_flag.equals("Y")){
												String split_val="";
												queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'  AND FLAG='Y'";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													split_val=rset.getString(1)==null?"":rset.getString(1);
												}else{
													queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'   AND FLAG='Y'";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset = stmt.executeQuery(queryString);
													if(rset.next())
													{
														split_val=rset.getString(1)==null?"":rset.getString(1);
													}
												}
												
												
												queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
													String partycd="";
													queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset4 = stmt4.executeQuery(queryString);
													if(rset4.next())
													{
														partycd=rset4.getString(1)==null?"":rset4.getString(1);
													}
													
													//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
													queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
															+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset4 = stmt4.executeQuery(queryString);
													if(rset4.next())
													{
														QTY_MSG_DOM.add(split_val+" % of "+rset4.getDouble(1));
													}else{
														QTY_MSG_DOM.add("");
													}
												}else{
													QTY_MSG_DOM.add("");
												}
											}else{
												QTY_MSG_DOM.add("");
											}
											
											if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
												String title="";
												double ori_gross=rset3.getDouble(2);
												//System.out.println("ori_gross = "+ori_gross);
												String gross="";
												String gros="";
												if(inv_curr.equals("2")){
													gross=nf.format(rset3.getDouble(1));
												}else{
													gross=nf.format(ori_gross+Double.parseDouble(adj_amt));
												}
												if(adj_sign.equals("+")){
													title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
												}else if(adj_sign.equals("-")){
													title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
												}
												
												Vtitle.add(title);
											}else{
												Vtitle.add("");
											}
										}
									}
										
										//}
									}else{

										 sg_drcr_no.add(rset1.getString(11)==null?"":rset1.getString(11));
										 Vtitle.add("");
										 CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
										 Vsupp_plant_Abbr.add(bu_unit);
											VESSEL_NM_DOM.add("");
											contract_no_dom.add(rset1.getString(21)==null?"":rset1.getString(21));
											contract_rev_no_dom.add(rset1.getString(22)==null?"":rset1.getString(22));
											plant_cd_dom.add(rset1.getString(23)==null?"":rset1.getString(23));
											TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
											ACTUAL_UNLOADED_QTY_DOM.add(rset1.getString(1)==null?"-":nf3.format(Double.parseDouble(rset1.getString(1))));
											unloaded_qty_dom.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
											ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
											purchase_total_qty_dom += Double.parseDouble(rset1.getString(1)==null?"0":nf.format(Double.parseDouble(rset1.getString(1))));
											exchg_rate_2_dom=rset1.getString(2)==null?"0":rset1.getString(2);
											if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
												TRADER_INV_CURRENCY.add("2");
											}else{
												TRADER_INV_CURRENCY.add("");
											}
											EXCHG_RATE_VALUE_DOM.add(rset1.getString(2)==null?"-":nf2.format(Double.parseDouble(rset1.getString(2))));
											INVOICE_AMT_DOM.add(rset1.getString(3)==null?"0":nf.format(Double.parseDouble(rset1.getString(3))));
											INVOICE_TAX_AMT_DOM.add(rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4))));
											String taxamt=rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4)));
											purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
											temp_inv_amt_dom.add(rset1.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(3))));
											ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
											String inv_type=rset1.getString(6)==null?"":rset1.getString(6);
											if(tds_flag.equals("Y")){
												double tds_Amt=(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))* Double.parseDouble(tds_perc))/100;
												INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
											}else{
												INVOICE_AMT_TDS_DOM.add("-");
											}
											if(inv_type.equals("1")){
												inv_type="Monthly";
											}else if(inv_type.equals("2")){
												inv_type="Fortnightly";
											}
											else if(inv_type.equals("3")){
												inv_type="Weekly";
											}
											ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
											String rmk=rset1.getString(8)==null?"":rset1.getString(8);
											double tax_amt_usd=0;
											if(!rmk.equals("")){
												TAX_rmk_DOM.add(rmk+"%");
												String temp[]=rmk.split("@");
												 tax_amt_usd=(Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))* Double.parseDouble(temp[1].trim())/100;
												
											}else{
												TAX_rmk_DOM.add("");
											}
											TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
											invoice_type_DOM.add(inv_type);
											purchase_total_tax_inr_dom+=tax_amt_usd;
											usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/Double.parseDouble(rset1.getString(1));
											INVOICE_NO_DOM.add(rset1.getString(11)==null?"":rset1.getString(11));
											INVOICE_DT_DOM.add(rset1.getString(12)==null?"":rset1.getString(12));	
											
											CONF_PRICE_DOM.add(rset1.getString(13)==null?"":nf2.format(Double.parseDouble(rset1.getString(13))));
											CONF_PRICE_NUMERIC_DOM.add(rset1.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset1.getString(13))));
											USD_VAL_INVOICE_DOM.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
											
											USD_VAL_INVOICE_NUMERIC_DOM.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
											purchase_total_invoice_value_dom += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
											
											DUE_DT_DOM.add(rset1.getString(15)==null?"":rset1.getString(15));
											Check_flag_DOM.add(rset1.getString(16)==null?"":rset1.getString(16));
											Authorize_flag_DOM.add(rset1.getString(17)==null?"":rset1.getString(17));
											Approve_flag_DOM.add(rset1.getString(18)==null?"":rset1.getString(18));
											String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
											String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
											duration_dom.add(st_dt+" - "+end_dt);
											
											queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
											//System.out.println("TRADER Master query = "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{			
												TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
												TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
											}
											else
											{
												TRADER_NAME_DOM.add("");
												TRADER_ABBR_DOM.add("");
											}
											cnt++;
											String split_flag=rset1.getString(20)==null?"":rset1.getString(20);
											if(split_flag.equals("Y")){
												String split_val="";
												queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'  AND FLAG='Y'";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													split_val=rset.getString(1)==null?"":rset.getString(1);
												}else{
													queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'   AND FLAG='Y'";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset = stmt.executeQuery(queryString);
													if(rset.next())
													{
														split_val=rset.getString(1)==null?"":rset.getString(1);
													}
												}
												
												
												queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
													String partycd="";
													queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset2 = stmt2.executeQuery(queryString);
													if(rset2.next())
													{
														partycd=rset2.getString(1)==null?"":rset2.getString(1);
													}
													
													//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
													queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
															+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset2 = stmt2.executeQuery(queryString);
													if(rset2.next())
													{
														QTY_MSG_DOM.add(split_val+" % of "+rset2.getDouble(1));
													}else{
														QTY_MSG_DOM.add("");
													}
												}else{
													QTY_MSG_DOM.add("");
												}
											}else{
												QTY_MSG_DOM.add("");
											}
											
											//FOR DEBIT CREDIT
											for(int kk=0;kk<sg_drcr_no.size();kk++){
												queryString="SELECT dr_cr_no FROM FMS7_DOM_PUR_INV_DRCR_DTL WHERE party_Cd='"+rset1.getString(7)+"'"
														+ " and cargo_ref_no='"+temp_cargo_dom.elementAt(i)+"' and contract_no='"+cont_no+"'"
														+ " and plant_cd='"+platcd+"' "
														+ " and buyer_plant_cd='"+rset1.getString(24)+"' and invoice_no='"+sg_drcr_no.elementAt(kk)+"' ";
								//				System.out.println("queryString---"+queryString);
												rset3 = stmt3.executeQuery(queryString);
												while(rset3.next())
												{
													if(!sg_drcr_no.contains(rset3.getString(1)))
													sg_drcr_no.add(rset3.getString(1)==null?"":rset3.getString(1));
												}
											}
											for(int kk=0;kk<sg_drcr_no.size();kk++){
												queryString = "SELECT DR_CR_AMT_USD,DR_CR_AMT_INR,DR_CR_QTY,DR_CR_PRICE,DR_CR_NO,DR_CR_EXCHG_RT_VAL,DR_CR_TAX_AMT "
														+ ",TO_CHAR(DR_CR_DT,'DD/MM/YYYY'),TO_CHAR(DR_CR_due_DT,'DD/MM/YYYY'),approved_flag,adj_sign,adj_amt FROM FMS7_DOM_PUR_INV_DRCR_DTL "
														+ " WHERE CARGO_REF_NO='"+temp_cargo_dom.elementAt(i)+"' and party_Cd ='"+rset1.getString(7)+"' "
														+ "and contract_no='"+cont_no+"' and contract_rev_no='"+cont_rev_no+"' "
														+ "and plant_cd='"+platcd+"' and dr_cr_no='"+sg_drcr_no.elementAt(kk)+"' and buyer_plant_cd='"+rset1.getString(24)+"'";
												//System.out.println("Confirmed Credit Debit Query= "+queryString);
												rset3 = stmt3.executeQuery(queryString);
												if(rset3.next())
												{
												//Vtitle.add("");
												String adj_amt=rset3.getString(12)==null?"":rset3.getString(12);
												String adj_sign=rset3.getString(11)==null?"":rset3.getString(11);
												CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
												Vsupp_plant_Abbr.add(bu_unit);
												VESSEL_NM_DOM.add("");
												contract_no_dom.add("");
												contract_rev_no_dom.add("");
												plant_cd_dom.add("");
												TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
												ACTUAL_UNLOADED_QTY_DOM.add(rset3.getString(3)==null?"-":nf3.format(Double.parseDouble(rset3.getString(3))));
												unloaded_qty_dom.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
												ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
												purchase_total_qty_dom += Double.parseDouble(rset3.getString(3)==null?"0":nf.format(Double.parseDouble(rset3.getString(3))));
												exchg_rate_2_dom=rset3.getString(6)==null?"0":rset3.getString(6);
												String inv_curr="";
												if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
													TRADER_INV_CURRENCY.add("2");
													inv_curr="2";
												}else{
													TRADER_INV_CURRENCY.add("");
												}
												EXCHG_RATE_VALUE_DOM.add(rset3.getString(6)==null?"-":nf2.format(Double.parseDouble(rset3.getString(6))));
												INVOICE_AMT_DOM.add(rset3.getString(2)==null?"0":nf.format(Double.parseDouble(rset3.getString(2))));
												INVOICE_TAX_AMT_DOM.add(rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7))));
												taxamt=rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7)));
												purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
												//temp_inv_amt_dom.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
												if(inv_curr.equals("2")){
													temp_inv_amt_dom.add("0");
												}else{
													temp_inv_amt_dom.add(rset3.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(2))));
												}
												
												ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
												inv_type=rset1.getString(6)==null?"":rset1.getString(6);
												if(tds_flag.equals("Y")){
													if(inv_curr.equals("2")){
														INVOICE_AMT_TDS_DOM.add("-");
													}else{
														double tds_Amt=((Double.parseDouble(rset3.getString(2)==null?"0":rset3.getString(2)))* Double.parseDouble(tds_perc))/100;
													INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
													}
												}else{
													INVOICE_AMT_TDS_DOM.add("-");
												}
												if(inv_type.equals("1")){
													inv_type="Monthly";
												}else if(inv_type.equals("2")){
													inv_type="Fortnightly";
												}
												else if(inv_type.equals("3")){
													inv_type="Weekly";
												}
												ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
												rmk=rset1.getString(8)==null?"":rset1.getString(8);
												String usd_amt=rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1)));
												double amtadj=0;
												if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
													if(adj_sign.equals("+")){
														 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
													}else if(adj_sign.equals("-")){
														amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
													}
													USD_VAL_INVOICE_DOM.add(nf3.format(amtadj));
													
													USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amtadj));
													purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amtadj));
												}else{
												USD_VAL_INVOICE_DOM.add(rset3.getString(1)==null?"-":nf3.format(Double.parseDouble(rset3.getString(1))));
												USD_VAL_INVOICE_NUMERIC_DOM.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
												purchase_total_invoice_value_dom += Double.parseDouble(rset3.getString(1)==null?"0":nf.format(Double.parseDouble(rset3.getString(1))));
												}
												tax_amt_usd=0;
												if(!rmk.equals("")){
													TAX_rmk_DOM.add(rmk+"%");
													String temp[]=rmk.split("@");
													if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
														tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
													}else{
													 tax_amt_usd=(Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))* Double.parseDouble(temp[1].trim())/100;
													}
													
												}
												TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
												invoice_type_DOM.add(inv_type);
												purchase_total_tax_inr_dom+=tax_amt_usd;
												usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))/Double.parseDouble(rset3.getString(3));
												INVOICE_NO_DOM.add(rset3.getString(5)==null?"":rset3.getString(5));
												INVOICE_DT_DOM.add(rset3.getString(8)==null?"":rset3.getString(8));	
												CONF_PRICE_DOM.add(rset3.getString(4)==null?"":nf2.format(Double.parseDouble(rset3.getString(4))));
												CONF_PRICE_NUMERIC_DOM.add(rset3.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset3.getString(4))));
												
												DUE_DT_DOM.add(rset3.getString(9)==null?"":rset3.getString(9));
												Check_flag_DOM.add("");
												Authorize_flag_DOM.add("");
												Approve_flag_DOM.add(rset3.getString(10)==null?"":rset3.getString(10));
												st_dt=rset1.getString(10)==null?"":rset1.getString(10);
												end_dt=rset1.getString(19)==null?"":rset1.getString(19);
												duration_dom.add(st_dt+" - "+end_dt);
												queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
												//System.out.println("TRADER Master query = "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{			
													TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
													TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
												}
												else
												{
													TRADER_NAME_DOM.add("");
													TRADER_ABBR_DOM.add("");
												}
												cnt++;
												split_flag=rset1.getString(20)==null?"":rset1.getString(20);
												if(split_flag.equals("Y")){
													String split_val="";
													queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset1.getString(21)+"' "
															+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
															+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
															+ " customer_cd='"+rset1.getString(7)+"'  AND FLAG='Y'";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset = stmt.executeQuery(queryString);
													if(rset.next())
													{
														split_val=rset.getString(1)==null?"":rset.getString(1);
													}else{
														queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset1.getString(21)+"' "
															+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
															+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
															+ " customer_cd='"+rset1.getString(7)+"'   AND FLAG='Y'";
														//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
														rset = stmt.executeQuery(queryString);
														if(rset.next())
														{
															split_val=rset.getString(1)==null?"":rset.getString(1);
														}
													}
													
													
													queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset = stmt.executeQuery(queryString);
													if(rset.next())
													{
														String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
														String partycd="";
														queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
														//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
														rset4 = stmt4.executeQuery(queryString);
														if(rset4.next())
														{
															partycd=rset4.getString(1)==null?"":rset4.getString(1);
														}
														
														//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
														queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
																+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
														//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
														rset4 = stmt4.executeQuery(queryString);
														if(rset4.next())
														{
															QTY_MSG_DOM.add(split_val+" % of "+rset4.getDouble(1));
														}else{
															QTY_MSG_DOM.add("");
														}
													}else{
														QTY_MSG_DOM.add("");
													}
												}else{
													QTY_MSG_DOM.add("");
												}
												if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
													String title="";
													double ori_gross=rset3.getDouble(2);
													//System.out.println("ori_gross = "+ori_gross);
													String gross="";
													String gros="";
													if(inv_curr.equals("2")){
														gross=nf.format(rset3.getDouble(1));
													}else{
														gross=nf.format(ori_gross+Double.parseDouble(adj_amt));
													}
													if(adj_sign.equals("+")){
														title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
													}else if(adj_sign.equals("-")){
														title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
													}
													
													Vtitle.add(title);
												}else{
													Vtitle.add("");
												}
											}
										 }
									 
									}
								 }else{
									 sg_drcr_no.add(rset1.getString(11)==null?"":rset1.getString(11));
									 Vtitle.add("");
									 CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
									 Vsupp_plant_Abbr.add(bu_unit);
										VESSEL_NM_DOM.add("");
										contract_no_dom.add(rset1.getString(21)==null?"":rset1.getString(21));
										contract_rev_no_dom.add(rset1.getString(22)==null?"":rset1.getString(22));
										plant_cd_dom.add(rset1.getString(23)==null?"":rset1.getString(23));
										TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
										ACTUAL_UNLOADED_QTY_DOM.add(rset1.getString(1)==null?"-":nf3.format(Double.parseDouble(rset1.getString(1))));
										unloaded_qty_dom.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
										ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset1.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(1))));
										purchase_total_qty_dom += Double.parseDouble(rset1.getString(1)==null?"0":nf.format(Double.parseDouble(rset1.getString(1))));
										exchg_rate_2_dom=rset1.getString(2)==null?"0":rset1.getString(2);
										if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
											TRADER_INV_CURRENCY.add("2");
										}else{
											TRADER_INV_CURRENCY.add("");
										}
										EXCHG_RATE_VALUE_DOM.add(rset1.getString(2)==null?"-":nf2.format(Double.parseDouble(rset1.getString(2))));
										INVOICE_AMT_DOM.add(rset1.getString(3)==null?"0":nf.format(Double.parseDouble(rset1.getString(3))));
										INVOICE_TAX_AMT_DOM.add(rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4))));
										String taxamt=rset1.getString(4)==null?"0":nf.format(Double.parseDouble(rset1.getString(4)));
										purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
										temp_inv_amt_dom.add(rset1.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(3))));
										ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
										String inv_type=rset1.getString(6)==null?"":rset1.getString(6);
										if(tds_flag.equals("Y")){
											double tds_Amt=(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))* Double.parseDouble(tds_perc))/100;
											INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
										}else{
											INVOICE_AMT_TDS_DOM.add("-");
										}
										if(inv_type.equals("1")){
											inv_type="Monthly";
										}else if(inv_type.equals("2")){
											inv_type="Fortnightly";
										}
										else if(inv_type.equals("3")){
											inv_type="Weekly";
										}
										ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
										String rmk=rset1.getString(8)==null?"":rset1.getString(8);
										double tax_amt_usd=0;
										if(!rmk.equals("")){
											TAX_rmk_DOM.add(rmk+"%");
											String temp[]=rmk.split("@");
											 tax_amt_usd=(Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))* Double.parseDouble(temp[1].trim())/100;
											
										}else{
											TAX_rmk_DOM.add("");
										}
										TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
										invoice_type_DOM.add(inv_type);
										purchase_total_tax_inr_dom+=tax_amt_usd;
										usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/Double.parseDouble(rset1.getString(1));
										INVOICE_NO_DOM.add(rset1.getString(11)==null?"":rset1.getString(11));
										INVOICE_DT_DOM.add(rset1.getString(12)==null?"":rset1.getString(12));	
										
										CONF_PRICE_DOM.add(rset1.getString(13)==null?"":nf2.format(Double.parseDouble(rset1.getString(13))));
										CONF_PRICE_NUMERIC_DOM.add(rset1.getString(13)==null?"0.0000":nf2.format(Double.parseDouble(rset1.getString(13))));
										USD_VAL_INVOICE_DOM.add(rset1.getString(14)==null?"-":nf3.format(Double.parseDouble(rset1.getString(14))));
										
										USD_VAL_INVOICE_NUMERIC_DOM.add(rset1.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset1.getString(14))));
										purchase_total_invoice_value_dom += Double.parseDouble(rset1.getString(14)==null?"0":nf.format(Double.parseDouble(rset1.getString(14))));
										
										DUE_DT_DOM.add(rset1.getString(15)==null?"":rset1.getString(15));
										Check_flag_DOM.add(rset1.getString(16)==null?"":rset1.getString(16));
										Authorize_flag_DOM.add(rset1.getString(17)==null?"":rset1.getString(17));
										Approve_flag_DOM.add(rset1.getString(18)==null?"":rset1.getString(18));
										String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
										String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
										duration_dom.add(st_dt+" - "+end_dt);
										
										queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
										//System.out.println("TRADER Master query = "+queryString);
										rset = stmt.executeQuery(queryString);
										if(rset.next())
										{			
											TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
											TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
										}
										else
										{
											TRADER_NAME_DOM.add("");
											TRADER_ABBR_DOM.add("");
										}
										cnt++;
										String split_flag=rset1.getString(20)==null?"":rset1.getString(20);
										if(split_flag.equals("Y")){
											String split_val="";
											queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset1.getString(21)+"' "
													+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
													+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
													+ " customer_cd='"+rset1.getString(7)+"'  AND FLAG='Y'";
											//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{
												split_val=rset.getString(1)==null?"":rset.getString(1);
											}else{
												queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset1.getString(21)+"' "
													+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
													+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
													+ " customer_cd='"+rset1.getString(7)+"'   AND FLAG='Y'";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													split_val=rset.getString(1)==null?"":rset.getString(1);
												}
											}
											
											
											queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
											//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{
												String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
												String partycd="";
												queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset2 = stmt2.executeQuery(queryString);
												if(rset2.next())
												{
													partycd=rset2.getString(1)==null?"":rset2.getString(1);
												}
												
												//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
												queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
														+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset2 = stmt2.executeQuery(queryString);
												if(rset2.next())
												{
													QTY_MSG_DOM.add(split_val+" % of "+rset2.getDouble(1));
												}else{
													QTY_MSG_DOM.add("");
												}
											}else{
												QTY_MSG_DOM.add("");
											}
										}else{
											QTY_MSG_DOM.add("");
										}
										
										//FOR DEBIT CREDIT
										for(int kk=0;kk<sg_drcr_no.size();kk++){
											queryString="SELECT dr_cr_no FROM FMS7_DOM_PUR_INV_DRCR_DTL WHERE party_Cd='"+rset1.getString(7)+"'"
													+ " and cargo_ref_no='"+temp_cargo_dom.elementAt(i)+"' and contract_no='"+cont_no+"'"
													+ " and plant_cd='"+platcd+"' "
													+ " and buyer_plant_cd='"+rset1.getString(24)+"' and invoice_no='"+sg_drcr_no.elementAt(kk)+"' ";
							//				System.out.println("queryString---"+queryString);
											rset3 = stmt3.executeQuery(queryString);
											while(rset3.next())
											{
												if(!sg_drcr_no.contains(rset3.getString(1)))
												sg_drcr_no.add(rset3.getString(1)==null?"":rset3.getString(1));
											}
										}
										for(int kk=0;kk<sg_drcr_no.size();kk++){
											queryString = "SELECT DR_CR_AMT_USD,DR_CR_AMT_INR,DR_CR_QTY,DR_CR_PRICE,DR_CR_NO,DR_CR_EXCHG_RT_VAL,DR_CR_TAX_AMT "
													+ ",TO_CHAR(DR_CR_DT,'DD/MM/YYYY'),TO_CHAR(DR_CR_due_DT,'DD/MM/YYYY'),approved_flag,adj_sign,adj_amt FROM FMS7_DOM_PUR_INV_DRCR_DTL "
													+ " WHERE CARGO_REF_NO='"+temp_cargo_dom.elementAt(i)+"' and party_Cd ='"+rset1.getString(7)+"' "
													+ "and contract_no='"+cont_no+"' and contract_rev_no='"+cont_rev_no+"' "
													+ "and plant_cd='"+platcd+"' and dr_cr_no='"+sg_drcr_no.elementAt(kk)+"' and buyer_plant_cd='"+rset1.getString(24)+"'";
											//System.out.println("Confirmed Credit Debit Query= "+queryString);
											rset3 = stmt3.executeQuery(queryString);
											if(rset3.next())
											{
											//Vtitle.add("");
											String adj_amt=rset3.getString(12)==null?"":rset3.getString(12);
											String adj_sign=rset3.getString(11)==null?"":rset3.getString(11);
											CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
											Vsupp_plant_Abbr.add(bu_unit);
											VESSEL_NM_DOM.add("");
											contract_no_dom.add("");
											contract_rev_no_dom.add("");
											plant_cd_dom.add("");
											TRD_CD_DOM.add(rset1.getString(7)==null?"0":rset1.getString(7));
											ACTUAL_UNLOADED_QTY_DOM.add(rset3.getString(3)==null?"-":nf3.format(Double.parseDouble(rset3.getString(3))));
											unloaded_qty_dom.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
											ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(rset3.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(3))));
											purchase_total_qty_dom += Double.parseDouble(rset3.getString(3)==null?"0":nf.format(Double.parseDouble(rset3.getString(3))));
											exchg_rate_2_dom=rset3.getString(6)==null?"0":rset3.getString(6);
											String inv_curr="";
											if(exchg_rate_2_dom.equals("0") || exchg_rate_2_dom.equals("")){
												TRADER_INV_CURRENCY.add("2");
												inv_curr="2";
											}else{
												TRADER_INV_CURRENCY.add("");
											}
											EXCHG_RATE_VALUE_DOM.add(rset3.getString(6)==null?"-":nf2.format(Double.parseDouble(rset3.getString(6))));
											INVOICE_AMT_DOM.add(rset3.getString(2)==null?"0":nf.format(Double.parseDouble(rset3.getString(2))));
											INVOICE_TAX_AMT_DOM.add(rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7))));
											taxamt=rset3.getString(7)==null?"0":nf.format(Double.parseDouble(rset3.getString(7)));
											purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
											//temp_inv_amt_dom.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
											if(inv_curr.equals("2")){
												temp_inv_amt_dom.add("0");
											}else{
												temp_inv_amt_dom.add(rset3.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(2))));
											}
											
											ACT_ARRV_MONTH_DOM.add(rset1.getString(5)==null?"":rset1.getString(5));
											inv_type=rset1.getString(6)==null?"":rset1.getString(6);
											if(tds_flag.equals("Y")){
												if(inv_curr.equals("2")){
													INVOICE_AMT_TDS_DOM.add("-");
												}else{
													double tds_Amt=((Double.parseDouble(rset3.getString(2)==null?"0":rset3.getString(2)))* Double.parseDouble(tds_perc))/100;
												INVOICE_AMT_TDS_DOM.add(nf.format(tds_Amt));
												}
											}else{
												INVOICE_AMT_TDS_DOM.add("-");
											}
											if(inv_type.equals("1")){
												inv_type="Monthly";
											}else if(inv_type.equals("2")){
												inv_type="Fortnightly";
											}
											else if(inv_type.equals("3")){
												inv_type="Weekly";
											}
											ACT_ARRV_DT_DOM.add(rset1.getString(10)==null?"":rset1.getString(10));
											rmk=rset1.getString(8)==null?"":rset1.getString(8);
											String usd_amt=rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1)));
											double amtadj=0;
											if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
												if(adj_sign.equals("+")){
													 amtadj=Double.parseDouble(usd_amt)+Double.parseDouble(adj_amt);
												}else if(adj_sign.equals("-")){
													amtadj=Double.parseDouble(usd_amt)-Double.parseDouble(adj_amt);
												}
												USD_VAL_INVOICE_DOM.add(nf3.format(amtadj));
												
												USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amtadj));
												purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amtadj));
											}else{
											USD_VAL_INVOICE_DOM.add(rset3.getString(1)==null?"-":nf3.format(Double.parseDouble(rset3.getString(1))));
											USD_VAL_INVOICE_NUMERIC_DOM.add(rset3.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset3.getString(1))));
											purchase_total_invoice_value_dom += Double.parseDouble(rset3.getString(1)==null?"0":nf.format(Double.parseDouble(rset3.getString(1))));
											}
											tax_amt_usd=0;
											if(!rmk.equals("")){
												TAX_rmk_DOM.add(rmk+"%");
												String temp[]=rmk.split("@");
												if(!adj_amt.equals("") && (!adj_amt.equals("0")) && inv_curr.equals("2")){
													tax_amt_usd=(amtadj)* Double.parseDouble(temp[1].trim())/100;
												}else{
												 tax_amt_usd=(Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))* Double.parseDouble(temp[1].trim())/100;
												}
												
											}
											TAX_amt_usd_DOM.add(nf.format(tax_amt_usd));
											invoice_type_DOM.add(inv_type);
											purchase_total_tax_inr_dom+=tax_amt_usd;
											usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset3.getString(1)==null?"0":rset3.getString(1)))/Double.parseDouble(rset3.getString(3));
											INVOICE_NO_DOM.add(rset3.getString(5)==null?"":rset3.getString(5));
											INVOICE_DT_DOM.add(rset3.getString(8)==null?"":rset3.getString(8));	
											CONF_PRICE_DOM.add(rset3.getString(4)==null?"":nf2.format(Double.parseDouble(rset3.getString(4))));
											CONF_PRICE_NUMERIC_DOM.add(rset3.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset3.getString(4))));
											
											DUE_DT_DOM.add(rset3.getString(9)==null?"":rset3.getString(9));
											Check_flag_DOM.add("");
											Authorize_flag_DOM.add("");
											Approve_flag_DOM.add(rset3.getString(10)==null?"":rset3.getString(10));
											st_dt=rset1.getString(10)==null?"":rset1.getString(10);
											end_dt=rset1.getString(19)==null?"":rset1.getString(19);
											duration_dom.add(st_dt+" - "+end_dt);
											queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+rset1.getString(7)+"";
											//System.out.println("TRADER Master query = "+queryString);
											rset = stmt.executeQuery(queryString);
											if(rset.next())
											{			
												TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
												TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
											}
											else
											{
												TRADER_NAME_DOM.add("");
												TRADER_ABBR_DOM.add("");
											}
											cnt++;
											split_flag=rset1.getString(20)==null?"":rset1.getString(20);
											if(split_flag.equals("Y")){
												String split_val="";
												queryString = "SELECT split_value from fms7_trader_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'  AND FLAG='Y'";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													split_val=rset.getString(1)==null?"":rset.getString(1);
												}else{
													queryString = "SELECT split_value from fms7_trader_OTHER_plant_mst A where sn_no='"+rset1.getString(21)+"' "
														+ " and sn_rev_no=(select max(sn_rev_no) from fms7_trader_OTHER_plant_mst B where A.sn_no=B.SN_NO AND A.SN_REV_NO=B.SN_REV_NO"
														+ " AND A.CUSTOMER_CD=B.CUSTOMER_CD ) and "
														+ " customer_cd='"+rset1.getString(7)+"'   AND FLAG='Y'";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset = stmt.executeQuery(queryString);
													if(rset.next())
													{
														split_val=rset.getString(1)==null?"":rset.getString(1);
													}
												}
												
												
												queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
												//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
												rset = stmt.executeQuery(queryString);
												if(rset.next())
												{
													String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
													String partycd="";
													queryString = "SELECT TRD_CD FROM FMS7_MAN_REQ_MST WHERE MAN_CD='"+rset.getString(1)+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset4 = stmt4.executeQuery(queryString);
													if(rset4.next())
													{
														partycd=rset4.getString(1)==null?"":rset4.getString(1);
													}
													
													//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
													queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
															+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+partycd+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset4 = stmt4.executeQuery(queryString);
													if(rset4.next())
													{
														QTY_MSG_DOM.add(split_val+" % of "+rset4.getDouble(1));
													}else{
														QTY_MSG_DOM.add("");
													}
												}else{
													QTY_MSG_DOM.add("");
												}
											}else{
												QTY_MSG_DOM.add("");
											}
											if(!adj_amt.equals("") && (!adj_amt.equals("0"))){
												String title="";
												double ori_gross=rset3.getDouble(2);
												//System.out.println("ori_gross = "+ori_gross);
												String gross="";
												String gros="";
												if(inv_curr.equals("2")){
													gross=nf.format(rset3.getDouble(1));
												}else{
													gross=nf.format(ori_gross+Double.parseDouble(adj_amt));
												}
												if(adj_sign.equals("+")){
													title="Gross Amount ("+gross+") + Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
												}else if(adj_sign.equals("-")){
													title="Gross Amount ("+gross+") - Adjustment Amount ("+nf.format(Double.parseDouble(adj_amt))+")=Purchase Value";
												}
												
												Vtitle.add(title);
											}else{
												Vtitle.add("");
											}
										}
									 }
								 }
							}
						}
							System.out.println("INVOICE_NO_DOM--"+INVOICE_NO_DOM);
							double alloC_qty=0;
							queryString = "SELECT MAN_CD,MAN_CONF_CD,CARGO_SEQ_NO,price FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+temp_cargo_dom.elementAt(i)+"' ";
							//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{
								String cont_mapp_id="B-%-"+rset.getString(2)+"-0-"+rset.getString(1)+"-"+rset.getString(3);
								
								//queryString = "SELECT nvl(SUM(EXIT_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
								queryString = "SELECT nvl(SUM(ENTRY_TOT_ENE),'0') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
										+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+temp_trd_cd.elementAt(i)+"' ";
								//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
								rset1 = stmt1.executeQuery(queryString);
								while(rset1.next())
									{
										if(cnt==0){
											alloC_qty=rset1.getDouble(1);
											if(alloC_qty>0){
												Vtitle.add("");
											CARGO_REF_CD_DOM.add(temp_cargo_dom.elementAt(i));
											CARGO_REF_DOM_FLAG.add(temp_cargo_dom_flg.elementAt(i));
											Vsupp_plant_Abbr.add("");
											contract_no_dom.add("");
											contract_rev_no_dom.add("");
											plant_cd_dom.add("");
											VESSEL_NM_DOM.add("");
											TRD_CD_DOM.add(temp_trd_cd.elementAt(i));
											ACTUAL_UNLOADED_QTY_DOM.add(nf3.format(alloC_qty));
											unloaded_qty_dom.add(nf.format(alloC_qty));
											ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add(nf.format(alloC_qty));
											purchase_total_qty_dom += Double.parseDouble(nf.format(alloC_qty));
											exchg_rate_2_dom="0";
											TRADER_INV_CURRENCY.add("");
											EXCHG_RATE_VALUE_DOM.add("-");
											INVOICE_AMT_DOM.add("0");
											INVOICE_TAX_AMT_DOM.add("0");
											String taxamt="0";
											INVOICE_AMT_TDS_DOM.add("-");
											purchase_total_tax_inr_dom+=Double.parseDouble((taxamt));
											temp_inv_amt_dom.add("0");
											queryString = "Select To_char(to_date('"+frmdt+"','dd/mm/yyyy'),'Month') from dual";
											////System.out.println("From Selected Month = "+queryString);
											rset2 = stmt2.executeQuery(queryString);			
											if(rset2.next())
											{
												mon = rset2.getString(1)==null?"0":rset2.getString(1);
											}
											ACT_ARRV_MONTH_DOM.add(mon);
											String inv_type="2";
											if(inv_type.equals("1")){
												inv_type="Monthly";
											}else if(inv_type.equals("2")){
												inv_type="Fortnightly";
											}
											else if(inv_type.equals("3")){
												inv_type="Weekly";
											}
											ACT_ARRV_DT_DOM.add(frmdt);
											double amt_usd=alloC_qty* Double.parseDouble(rset.getString(4)==null?"0":rset.getString(4));
											String rmk="";
											double tax_amt_usd=0;
											/*if(!rmk.equals("")){
												TAX_rmk_DOM.add(rmk+"%");
												String temp[]=rmk.split("@");
												 tax_amt_usd=(amt_usd)* Double.parseDouble(temp[1].trim())/100;
												
											}*/
											
											
											invoice_type_DOM.add(inv_type);
											purchase_total_tax_inr_dom+=tax_amt_usd;
											//usd_mmbtu=(tax_amt_usd+Double.parseDouble(rset1.getString(14)==null?"0":rset1.getString(14)))/alloC_qty);
											INVOICE_NO_DOM.add("");
											INVOICE_DT_DOM.add("");	
											
											CONF_PRICE_DOM.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
											CONF_PRICE_NUMERIC_DOM.add(nf2.format(amt_usd));
											USD_VAL_INVOICE_DOM.add(nf3.format(amt_usd));
											
											USD_VAL_INVOICE_NUMERIC_DOM.add(nf.format(amt_usd));
											purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amt_usd));
											
											DUE_DT_DOM.add("");
											Check_flag_DOM.add("");
											Authorize_flag_DOM.add("");
											Approve_flag_DOM.add("");
											QTY_MSG_DOM.add("");
	//										String st_dt=rset1.getString(10)==null?"":rset1.getString(10);
	//										String end_dt=rset1.getString(19)==null?"":rset1.getString(19);
											queryString = "SELECT to_char((sysdate),'dd/mm/yyyy') FROM dual where sysdate "
													+ "between to_date('"+frmdt+"','dd/mm/yyyy') and to_date('"+todt+"','dd/mm/yyyy') ";
											//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
											rset2 = stmt2.executeQuery(queryString);
											if(rset2.next())
												{
													queryString = "SELECT to_char(Max(alloc_dt),'dd/mm/yyyy') FROM FMS9_PO_ALLOC_MST WHERE CONT_MAPPING_ID like '"+cont_mapp_id+"' and alloc_dt between "
															+ " to_date('"+frmdt+"','dd/mm/yyyy') and  to_date('"+todt+"','dd/mm/yyyy') and party_cd='"+temp_trd_cd.elementAt(i)+"' ";
													//System.out.println("QRY-001: FMS7_CONT_EXCHG_RATE_MST: "+queryString);
													rset2 = stmt2.executeQuery(queryString);
													if(rset2.next())
														{
															duration_dom.add(frmdt+" - "+rset2.getString(1));
														}else{
															duration_dom.add(frmdt+" - "+todt);
														}
												}else{
													duration_dom.add(frmdt+" - "+todt);
												}
											
											
											
											queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+temp_trd_cd.elementAt(i)+"";
											//System.out.println("TRADER Master query = "+queryString);
											rset2 = stmt2.executeQuery(queryString);
											if(rset2.next())
											{			
												TRADER_NAME_DOM.add(rset2.getString(1)==null?"":rset2.getString(1));
												TRADER_ABBR_DOM.add(rset2.getString(2)==null?"":rset2.getString(2));
											}
											else
											{
												TRADER_NAME_DOM.add("");
												TRADER_ABBR_DOM.add("");
											}
											//
											String nTax_Structure_dtl="";
											String nTax_struct_cd="";
											int tax_factor = 0;
											String tax_code="";
											String tax_abbr="";
											queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_TRADER_TAX_STRUCT_DTL A WHERE " +
													   "trader_cd='"+temp_trd_cd.elementAt(i)+"' AND plant_seq_no='"+plant_seq_no+"' AND " +
													   "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_TRADER_TAX_STRUCT_DTL B WHERE " +
											 		  "A.trader_cd=B.trader_cd AND A.plant_seq_no=B.plant_seq_no AND " +
											 		  "B.tax_struct_dt<=TO_DATE('"+frmdt+"','DD/MM/YYYY'))";
											rset4 = stmt4.executeQuery(queryString);
//											System.out.println("queryString---"+queryString);
											if(rset4.next())
											{
												nTax_Structure_dtl = rset4.getString(1)==null?"":rset4.getString(1);
												nTax_struct_cd = rset4.getString(2)==null?"0":rset4.getString(2);
												
												double tax_amt=0;
												queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
														  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+nTax_struct_cd+"' AND " +
														  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+nTax_struct_cd+"' AND " +
														  "B.app_date<=TO_DATE('"+frmdt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
												//System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
												rset2=stmt2.executeQuery(queryString);
												while(rset2.next())
												{
													tax_factor= Integer.parseInt((rset2.getString(2)));
													tax_code=rset2.getString(1)==null?"":rset2.getString(1);
													if(rset2.getString(3).equals("1"))
													{
														//tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
														tax_amt = (amt_usd*Double.parseDouble(rset2.getString(2)))/100;
//														System.out.println("tax_Amt"+invoice_amt);
														
													}
													else if(rset2.getString(3).equals("2"))
													{
														queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
																  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+nTax_struct_cd+"' AND " +
																  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+nTax_struct_cd+"' AND " +
																  "B.app_date<=TO_DATE('"+frmdt+"','DD/MM/YYYY')) AND A.tax_code="+rset2.getString(4)+"";
													//////System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
												 		rset3=stmt3.executeQuery(queryString1);
												 		if(rset3.next())
												 		{
												 			if(rset3.getString(3).equals("1"))
															{
																//tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
												 				tax_amt = (amt_usd*Double.parseDouble(rset3.getString(2)))/100;
															}
														
											 			tax_amt = (tax_amt*Double.parseDouble(rset2.getString(2)))/100;
												 		}
												 		else
												 		{
												 			tax_amt = 0;
												 		}
													}
													else
													{
														tax_amt = 0;
													}
													queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
															  "tax_code='"+tax_code+"'";
													rset3 = stmt3.executeQuery(queryString);
													if(rset3.next())
													{
														tax_abbr = rset3.getString(1).trim()==null?"":rset3.getString(1).trim();
													}
												//customer_Invoice_Tax_Amt.add(nf.format(Math.round(tax_amt)));
												String tax_str=nf.format(tax_amt);
												String tax_line=tax_abbr+" @ "+tax_factor+" %";
												TAX_amt_usd_DOM.add(tax_str);
												TAX_rmk_DOM.add(tax_line);
											}
											}else{
												TAX_amt_usd_DOM.add("0");
												TAX_rmk_DOM.add("");
											}
										}
										}
								}
					}
					
						/*else{
							ACTUAL_UNLOADED_QTY_DOM.add("-");
							unloaded_qty_dom.add("0");
							ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add("0");
							//exchg_rt_dom.add("");
							EXCHG_RATE_VALUE_DOM.add("-");
							INVOICE_AMT_DOM.add("0");
							INVOICE_TAX_AMT_DOM.add("0");
							temp_inv_amt_dom.add("0.00");
							ACT_ARRV_MONTH_DOM.add("");
							ACT_ARRV_DT_DOM.add("");
							TAX_rmk_DOM.add("");
							TAX_amt_usd_DOM.add("0");
							invoice_type_DOM.add("");
						}*/
					
					//SUN_APPROVAL.add(rset.getString(7)==null?"":rset.getString(7)); //Commented By Samik Shah On 23rd August, 2011 ...
				/*}
				else
				{
					INVOICE_NO_DOM.add("");
					INVOICE_DT_DOM.add("");						
					ACTUAL_UNLOADED_QTY_DOM.add("-");
					ACTUAL_UNLOADED_QTY_NUMERIC_DOM.add("0.00");
					CONF_PRICE_DOM.add("");
					CONF_PRICE_NUMERIC_DOM.add("0.0000");
					USD_VAL_INVOICE_DOM.add("-");
					USD_VAL_INVOICE_NUMERIC_DOM.add("0.00");
					DUE_DT_DOM.add("");
					temp_inv_amt_dom.add("0");
					unloaded_qty_dom.add("0");
					Check_flag_DOM.add("");
					Authorize_flag_DOM.add("");
					Approve_flag_DOM.add("");
				//	exchg_rt_dom.add("");
					EXCHG_RATE_VALUE_DOM.add("-");
					INVOICE_AMT_DOM.add("0");
					INVOICE_TAX_AMT_DOM.add("0");
					ACT_ARRV_MONTH_DOM.add("");
					ACT_ARRV_DT_DOM.add("");
					TAX_rmk_DOM.add("");
					TAX_amt_usd_DOM.add("0");
					invoice_type_DOM.add("");
					
					//SUN_APPROVAL.add(""); //Commented By Samik Shah On 23rd August, 2011 ...
				}*/
							
						}
			}
//			System.out.println("---"+CARGO_REF_CD_DOM);
//			System.out.println("-USD_VAL_INVOICE_NUMERIC_DOM--"+USD_VAL_INVOICE_NUMERIC_DOM.size());
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{
				
				if(!Dist_CARGO_REF_CD_DOM.contains(CARGO_REF_CD_DOM.elementAt(i))){
					Dist_CARGO_REF_CD_DOM.add(CARGO_REF_CD_DOM.elementAt(i));
				}
				if(!Dist_INVOICE_NO_DOM.contains(INVOICE_NO_DOM.elementAt(i)) && (!INVOICE_NO_DOM.elementAt(i).equals(""))){
					Dist_INVOICE_NO_DOM.add(INVOICE_NO_DOM.elementAt(i));
				}
				
				String refno="";
				refno=""+CARGO_REF_CD_DOM.elementAt(i)+"-"+INVOICE_NO_DOM.elementAt(i);
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSPR'";
//				System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG_DOM.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL_DOM.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG_DOM.add("N");
					SUN_APPROVAL_DOM.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				double sbi_tt_selling_exchg_rate_dom = 0;
				double foreign_exchg_rate_dom = 0;
				String exchg_rate_cd_dom = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2_dom = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate_dom = "";
				
				
				String arr_dt_dom = ""+ACT_ARRV_DT_DOM.elementAt(i);
				String arrival_date_and_rate_note_dom = "";
				
				if(arr_dt_dom.trim().equals(""))
				{
					arrival_date_and_rate_note_dom += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_dom+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT_DOM.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_dom = rset2.getString(1)==null?"0":rset2.getString(1);
					if(!exchg_rate_dom.equals("")){
						sbi_tt_selling_exchg_rate_dom = Double.parseDouble(exchg_rate_dom);
					}
				}
				
				if(sbi_tt_selling_exchg_rate_dom>0)
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add(nf2.format(sbi_tt_selling_exchg_rate_dom));
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM.add(nf2.format(sbi_tt_selling_exchg_rate_dom));
//					FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add(nf.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					
					final_seller_amt_dom.add(nf.format(sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					//purchase_total_inv_value_inr_dom += (sbi_tt_selling_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
					
					
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add("-");
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM.add("0.0000");
//					FINAL_SELLER_INV_AMT_INR_DOM.add("-");
					FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add("0.00");
					final_seller_amt_dom.add("0.00");
					if(arrival_date_and_rate_note_dom.trim().length()<5)
					{
						arrival_date_and_rate_note_dom += "\nSBI TT Selling rate is missing for Actual Arrival Date: "+arr_dt_dom.trim();
					}
				}
				FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				purchase_total_inv_value_inr_dom += (Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
				if(!INVOICE_AMT_TDS_DOM.elementAt(i).equals("-")){
					purchase_total_cost_inr_dom += ((Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i)))-Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i)));
				}else{
					purchase_total_cost_inr_dom += (Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i))+Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i)));
				}
				//FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				//System.out.println("FINAL_SELLER_INV_AMT_INR_DOM---"+FINAL_SELLER_INV_AMT_INR_DOM);
				ARRIVAL_DATE_RATE_NOTE_DOM.add(arrival_date_and_rate_note_dom.trim());
				
				String prov_cd_payment_date_dom = "";
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY,TO_CHAR(CUSTOM_DUTY_DT,'dd/mm/yyyy') FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" ";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ_DOM.elementAt(i).equals("1") || SPLIT_SEQ_DOM.elementAt(i).equals("0"))
					{
					//EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt_dom.add(rset.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))>0)
					{
						purchase_total_cd_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						//purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						TOTAL_CD_AMT_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))));
						TOTAL_CD_AMT_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT_DOM.add("-");
						TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
					}
					prov_cd_payment_date_dom = rset.getString(3)==null?"":rset.getString(3);
					}
					else
					{
						TOTAL_CD_AMT_DOM.add("-");
						TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
						temp_tot_cd_amt_dom.add("0.00");
					}
				}
				else
				{
					//EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT_DOM.add("-");
					TOTAL_CD_AMT_NUMERIC_DOM.add("0.00");
					temp_tot_cd_amt_dom.add("0.00");
				}
				
				String prov_cd_date_and_rate_note_dom = "";
				
				if(prov_cd_payment_date_dom.trim().equals(""))
				{
					prov_cd_date_and_rate_note_dom += "\n"+"Provisional Custom Duty Payment Date is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_2_dom+"' AND EFF_DT=TO_DATE('"+prov_cd_payment_date_dom+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_2_dom = rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate_dom = Double.parseDouble(exchg_rate_2_dom);
					//EXCHG_RATE_VALUE_DOM.add(rset2.getString(1)==null?"-":nf2.format(Double.parseDouble(rset2.getString(1))));
					if(prov_cd_date_and_rate_note_dom.trim().length()<5 && foreign_exchg_rate_dom<0.0001)
					{
						prov_cd_date_and_rate_note_dom += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date_dom.trim();
					}
				}
				else
				{
					//EXCHG_RATE_VALUE_DOM.add("-");
					if(prov_cd_date_and_rate_note_dom.trim().length()<5)
					{
						prov_cd_date_and_rate_note_dom += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date_dom.trim();
					}
				}
				
				CUSTOM_DUTY_DATE_RATE_NOTE_DOM.add(prov_cd_date_and_rate_note_dom.trim());
				//System.out.println("arrival_date_and_rate_note = "+arrival_date_and_rate_note+",  prov_cd_date_and_rate_note = "+prov_cd_date_and_rate_note);
				
				//Logic for FMS7_FINAL_CUSTOM_DUTY
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND,INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					//if(SPLIT_SEQ_DOM.elementAt(i).equals("1") || SPLIT_SEQ_DOM.elementAt(i).equals("0"))
					//{
					temp_tot_pay_refund_dom.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						//purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						custom_duty_interest_total_inr_dom += Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
						TOTAL_PAID_REFUND_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))));
						TOTAL_PAID_REFUND_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))));
						CUSTOM_DUTY_INTEREST_DOM.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					}
					else
					{
						TOTAL_PAID_REFUND_DOM.add("-");
						TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
						CUSTOM_DUTY_INTEREST_DOM.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
					}
					/*}
					else
					{
						TOTAL_PAID_REFUND_DOM.add("-");
						TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
						CUSTOM_DUTY_INTEREST_DOM.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
						temp_tot_pay_refund_dom.add("0.00");
					}*/
				}
				else
				{
					TOTAL_PAID_REFUND_DOM.add("-");
					TOTAL_PAID_REFUND_NUMERIC_DOM.add("0.00");
					CUSTOM_DUTY_INTEREST_DOM.add("-");
					CUSTOM_DUTY_INTEREST_NUMERIC_DOM.add("0.00");
					temp_tot_pay_refund_dom.add("0.00");
				}
			}
			//System.out.println("Dist_CARGO_REF_CD_DOM--"+Dist_CARGO_REF_CD_DOM);
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i)).equals("-") && temp_inv_amt_dom.elementAt(i)!=null && !temp_inv_amt_dom.elementAt(i).equals("") && !temp_inv_amt_dom.elementAt(i).equals("0") && temp_tot_cd_amt_dom.elementAt(i)!=null && !temp_tot_cd_amt_dom.elementAt(i).equals("") && !temp_tot_cd_amt_dom.elementAt(i).equals("0"))
				{
					temp_cd_paid_dom.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
//					CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
//					CD_PAID_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i));
					double tdsamt = 0;
					if(!(""+INVOICE_AMT_TDS_DOM.elementAt(i)).equals("-"))
					{
						tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
					}else{
						tdsamt = 0;
					}
					if(tds_flag.equalsIgnoreCase("Y")){
						//System.out.println("total_amt_dom---"+total_amt_dom);
						CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}else{
						CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom));
						CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom));
					}
					
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))>0)
						{
							INR_PER_MMBTU_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU_DOM.add("-");
							INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU_DOM.add("-");
						INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
					}
				}
				else
				{
					//CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					double total_tax_amt_dom = Double.parseDouble(""+INVOICE_TAX_AMT_DOM.elementAt(i));
					double total_amt_dom = Double.parseDouble(""+INVOICE_AMT_DOM.elementAt(i));
					double tdsamt =0;
					if(!(""+INVOICE_AMT_TDS_DOM.elementAt(i)).equals("-"))
					{
						tdsamt = Double.parseDouble(""+INVOICE_AMT_TDS_DOM.elementAt(i));
					}else{
						tdsamt = 0;
					}
					
					if(tds_flag.equalsIgnoreCase("Y")){
						CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom-tdsamt));
						CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom-tdsamt));
					}else{
						CD_PAID_DOM.add(nf3.format(total_amt_dom+total_tax_amt_dom));
						CD_PAID_NUMERIC_DOM.add(nf.format(total_amt_dom+total_tax_amt_dom));
					}
					//double total_amt_dom = Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)));
					
					temp_cd_paid_dom.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					//CD_PAID_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))>0)
						{
							INR_PER_MMBTU_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC_DOM.add(nf2.format((total_amt_dom+total_tax_amt_dom)/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU_DOM.add("-");
							INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU_DOM.add("-");
						INR_PER_MMBTU_NUMERIC_DOM.add("0.0000");
					}
				}
				
				double cd_usd_dom = 0;
				double addl_cd_usd_dom = 0;
				double total_cost_dom = 0;
				double usd_per_mmbtu_dom = 0;
				
				if(!(""+temp_tot_cd_amt_dom.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE_DOM.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					CUSTOM_DUTY_USD_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					purchase_total_cd_usd_dom += Double.parseDouble(nf.format(cd_usd_dom));
				}
				else
				{
					CUSTOM_DUTY_USD_DOM.add("-");
					CUSTOM_DUTY_USD_NUMERIC_DOM.add("0.00");
				}
				
				if(!(""+temp_tot_pay_refund_dom.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE_DOM.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					addl_cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE_DOM.elementAt(i))));
					purchase_total_addl_cd_usd_dom += Double.parseDouble(nf.format(addl_cd_usd_dom));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add("-");
					ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM.add("0.00");
				}
				
				//total_cost_dom = Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)) + cd_usd_dom + addl_cd_usd_dom;
				//System.out.println("USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i)--"+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i));
				//System.out.println("TAX_amt_usd_DOM.elementAt(i)--"+TAX_amt_usd_DOM.elementAt(i));
				total_cost_dom = Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i)) + Double.parseDouble(""+TAX_amt_usd_DOM.elementAt(i));
				//purchase_total_inv_value_usd_dom += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				if(!USD_VAL_INVOICE_DOM.elementAt(i).equals("-"))
				purchase_total_inv_value_usd_dom += Double.parseDouble(nf.format(Double.parseDouble(""+USD_VAL_INVOICE_NUMERIC_DOM.elementAt(i))));
				
				if(total_cost_dom>0 && Double.parseDouble(""+unloaded_qty_dom.elementAt(i))>0)
				{
					usd_per_mmbtu_dom = total_cost_dom/Double.parseDouble(""+unloaded_qty_dom.elementAt(i));
				}
				
				if(total_cost_dom>0)
				{
					COST_OF_PURCHASE_USD_DOM.add(nf3.format(total_cost_dom));
					COST_OF_PURCHASE_USD_NUMERIC_DOM.add(nf.format(total_cost_dom));
					purchase_total_cost_usd_dom += Double.parseDouble(nf.format(total_cost_dom));
				}
				else
				{
					COST_OF_PURCHASE_USD_DOM.add("-");
					COST_OF_PURCHASE_USD_NUMERIC_DOM.add("0.00");
				}
				
				if(usd_per_mmbtu_dom>0)
				{
					//USD_PER_MMBTU_DOM.add(nf2.format(usd_per_mmbtu_dom));
					//USD_PER_MMBTU_NUMERIC_DOM.add(nf2.format(usd_per_mmbtu_dom));
					USD_PER_MMBTU_DOM.add(nf2.format(usd_mmbtu));
					USD_PER_MMBTU_NUMERIC_DOM.add(nf2.format(usd_mmbtu));
				}
				else
				{
					USD_PER_MMBTU_DOM.add("-");
					USD_PER_MMBTU_NUMERIC_DOM.add("0.0000");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	public void get_Purchase_dtls_Approval()
	{

		try
		{		
			//System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb = new Vector();
			Vector temp_usd_invoice = new Vector();
			Vector temp_usd_dr_cr = new Vector();
			Vector temp_inv_amt = new Vector();			
			Vector temp_tot_cd_amt = new Vector();
			Vector temp_tot_pay_refund = new Vector();
			Vector temp_cd_paid = new Vector();
			Vector final_seller_amt = new Vector();
			Vector unloaded_qty = new Vector();
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			Vector temp_cargo=new Vector();
			Vector temp_seq=new Vector();
			
			String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq.add("Y");
				else
					temp_seq.add("N");
			}
			

			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String order=" ORDER BY A.ACT_ARRV_DT ";	
			String split1="";
			//System.out.println("trader_cd = "+trader_cd);
			
			for(int k=0;k<temp_cargo.size();k++)
			{
				if(temp_seq.elementAt(k).equals("Y"))
					split1=" AND SPLIT_SEQ IN ('1','2') ";
				else 
					split1=" AND SPLIT_SEQ='0' ";
				
			queryString = "SELECT A.CARGO_REF_NO, A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
					  "TO_CHAR(A.ACT_ARRV_DT,'Month'), C.TRD_CD,A.SPLIT_SEQ FROM FMS7_CARGO_ARRIVAL_DTL A, " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE A.CARGO_REF_NO=B.CARGO_REF_CD AND B.MAN_CD=C.MAN_CD AND " +
					  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) AND A.CARGO_REF_NO='"+temp_cargo.elementAt(k)+"' AND"
					  		+ " (B.DOM_buy_flag ='N' OR  B.DOM_buy_flag is null) ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString+split1+order;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				ACT_ARRV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				ACT_ARRV_MONTH.add(rset.getString(4)==null?"":rset.getString(4));
				TRD_CD.add(rset.getString(5)==null?"0":rset.getString(5));
				SPLIT_SEQ.add(rset.getString(6)==null?"0":rset.getString(6));
			}
			 
			}
			
			
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{
				String refno="";
				if(SPLIT_SEQ.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"B";
				}
				else
				{
					refno=""+CARGO_REF_CD.elementAt(i);
				}
				
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSFI'";
				//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG.add("N");
					SUN_APPROVAL.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRD_CD.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME.add("");
					TRADER_ABBR.add("");
				}
				
				//Logic for Final Seller Payment
				queryString = "SELECT A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),SUN_APPROVAL,CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"' ";				
				//System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));						
					ACTUAL_UNLOADED_QTY.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					unloaded_qty.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					ACTUAL_UNLOADED_QTY_NUMERIC.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					purchase_total_qty += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					CONF_PRICE.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					CONF_PRICE_NUMERIC.add(rset.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					temp_inv_amt.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					USD_VAL_INVOICE_NUMERIC.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag.add(rset.getString(8)==null?"":rset.getString(8));
					Authorize_flag.add(rset.getString(9)==null?"":rset.getString(9));
					Approve_flag.add(rset.getString(10)==null?"":rset.getString(10));
					//SUN_APPROVAL.add(rset.getString(7)==null?"":rset.getString(7)); //Commented By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					INVOICE_NO.add("");
					INVOICE_DT.add("");						
					ACTUAL_UNLOADED_QTY.add("-");
					ACTUAL_UNLOADED_QTY_NUMERIC.add("0.00");
					CONF_PRICE.add("");
					CONF_PRICE_NUMERIC.add("0.0000");
					USD_VAL_INVOICE.add("-");
					USD_VAL_INVOICE_NUMERIC.add("0.00");
					DUE_DT.add("");
					temp_inv_amt.add("0");
					unloaded_qty.add("0");
					Check_flag.add("");
					Authorize_flag.add("");
					Approve_flag.add("");
					//SUN_APPROVAL.add(""); //Commented By Samik Shah On 23rd August, 2011 ...
				}
				
				
				double sbi_tt_selling_exchg_rate = 0;
				double foreign_exchg_rate = 0;
				String exchg_rate_cd = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2 = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate = "";
				String exchg_rate_2 = "";
				
				String arr_dt = ""+ACT_ARRV_DT.elementAt(i);
				String arrival_date_and_rate_note = "";
				
				if(arr_dt.trim().equals(""))
				{
					arrival_date_and_rate_note += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate = rset2.getString(1)==null?"0":rset2.getString(1);
					sbi_tt_selling_exchg_rate = Double.parseDouble(exchg_rate);
				}
				
				if(sbi_tt_selling_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(sbi_tt_selling_exchg_rate));
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add(nf2.format(sbi_tt_selling_exchg_rate));
					FINAL_SELLER_INV_AMT_INR.add(nf3.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					final_seller_amt.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					purchase_total_inv_value_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
					purchase_total_cost_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add("0.0000");
					FINAL_SELLER_INV_AMT_INR.add("-");
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add("0.00");
					final_seller_amt.add("0.00");
					if(arrival_date_and_rate_note.trim().length()<5)
					{
						arrival_date_and_rate_note += "\nSBI TT Selling rate is missing for Actual Arrival Date: "+arr_dt.trim();
					}
				}
				
				ARRIVAL_DATE_RATE_NOTE.add(arrival_date_and_rate_note.trim());
				
				String prov_cd_payment_date = "";
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY,TO_CHAR(CUSTOM_DUTY_DT,'dd/mm/yyyy') FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					//EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt.add(rset.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))>0)
					{
						purchase_total_cd_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						TOTAL_CD_AMT.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
						TOTAL_CD_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
					}
					prov_cd_payment_date = rset.getString(3)==null?"":rset.getString(3);
					}
					else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
						temp_tot_cd_amt.add("0.00");
					}
				}
				else
				{
					//EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT.add("-");
					TOTAL_CD_AMT_NUMERIC.add("0.00");
					temp_tot_cd_amt.add("0.00");
				}
				
				String prov_cd_date_and_rate_note = "";
				
				if(prov_cd_payment_date.trim().equals(""))
				{
					prov_cd_date_and_rate_note += "\n"+"Provisional Custom Duty Payment Date is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND EFF_DT=TO_DATE('"+prov_cd_payment_date+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate = Double.parseDouble(exchg_rate_2);
					EXCHG_RATE_VALUE.add(rset2.getString(1)==null?"-":nf2.format(Double.parseDouble(rset2.getString(1))));
					if(prov_cd_date_and_rate_note.trim().length()<5 && foreign_exchg_rate<0.0001)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					if(prov_cd_date_and_rate_note.trim().length()<5)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				
				CUSTOM_DUTY_DATE_RATE_NOTE.add(prov_cd_date_and_rate_note.trim());
				//System.out.println("arrival_date_and_rate_note = "+arrival_date_and_rate_note+",  prov_cd_date_and_rate_note = "+prov_cd_date_and_rate_note);
				
				//Logic for FMS7_FINAL_CUSTOM_DUTY
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND,INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					temp_tot_pay_refund.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						custom_duty_interest_total_inr += Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
						TOTAL_PAID_REFUND.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						TOTAL_PAID_REFUND_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						CUSTOM_DUTY_INTEREST.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
						CUSTOM_DUTY_INTEREST_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					}
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
						temp_tot_pay_refund.add("0.00");
					}
				}
				else
				{
					TOTAL_PAID_REFUND.add("-");
					TOTAL_PAID_REFUND_NUMERIC.add("0.00");
					CUSTOM_DUTY_INTEREST.add("-");
					CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					temp_tot_pay_refund.add("0.00");
				}
			}
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR.elementAt(i)).equals("-") && temp_inv_amt.elementAt(i)!=null && !temp_inv_amt.elementAt(i).equals("") && !temp_inv_amt.elementAt(i).equals("0") && temp_tot_cd_amt.elementAt(i)!=null && !temp_tot_cd_amt.elementAt(i).equals("") && !temp_tot_cd_amt.elementAt(i).equals("0"))
				{
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				else
				{
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				
				double cd_usd = 0;
				double addl_cd_usd = 0;
				double total_cost = 0;
				double usd_per_mmbtu = 0;
				
				if(!(""+temp_tot_cd_amt.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_cd_usd += Double.parseDouble(nf.format(cd_usd));
				}
				else
				{
					CUSTOM_DUTY_USD.add("-");
					CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				if(!(""+temp_tot_pay_refund.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					addl_cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_addl_cd_usd += Double.parseDouble(nf.format(addl_cd_usd));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD.add("-");
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				total_cost = Double.parseDouble(""+temp_inv_amt.elementAt(i)) + cd_usd + addl_cd_usd;
				purchase_total_inv_value_usd += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt.elementAt(i))));
				
				if(total_cost>0 && Double.parseDouble(""+unloaded_qty.elementAt(i))>0)
				{
					usd_per_mmbtu = total_cost/Double.parseDouble(""+unloaded_qty.elementAt(i));
				}
				
				if(total_cost>0)
				{
					COST_OF_PURCHASE_USD.add(nf3.format(total_cost));
					COST_OF_PURCHASE_USD_NUMERIC.add(nf.format(total_cost));
					purchase_total_cost_usd += Double.parseDouble(nf.format(total_cost));
				}
				else
				{
					COST_OF_PURCHASE_USD.add("-");
					COST_OF_PURCHASE_USD_NUMERIC.add("0.00");
				}
				
				if(usd_per_mmbtu>0)
				{
					USD_PER_MMBTU.add(nf2.format(usd_per_mmbtu));
					USD_PER_MMBTU_NUMERIC.add(nf2.format(usd_per_mmbtu));
				}
				else
				{
					USD_PER_MMBTU.add("-");
					USD_PER_MMBTU_NUMERIC.add("0.0000");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	public void get_Purchase_dtls()
	{
		try
		{		
			//System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb = new Vector();
			Vector temp_usd_invoice = new Vector();
			Vector temp_usd_dr_cr = new Vector();
			Vector temp_inv_amt = new Vector();			
			Vector temp_tot_cd_amt = new Vector();
			Vector temp_tot_pay_refund = new Vector();
			Vector temp_cd_paid = new Vector();
			Vector final_seller_amt = new Vector();
			Vector unloaded_qty = new Vector();
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			Vector temp_cargo=new Vector();
			Vector temp_seq=new Vector();
			
			String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq.add("Y");
				else
					temp_seq.add("N");
			}
			

			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String order=" ORDER BY A.ACT_ARRV_DT ";	
			String split1="";
			//System.out.println("trader_cd = "+trader_cd);
			
			for(int k=0;k<temp_cargo.size();k++)
			{
				if(temp_seq.elementAt(k).equals("Y"))
					split1=" AND SPLIT_SEQ IN ('1','2') ";
				else 
					split1=" AND SPLIT_SEQ='0' ";
				
			queryString = "SELECT A.CARGO_REF_NO, A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
					  "TO_CHAR(A.ACT_ARRV_DT,'Month'), C.TRD_CD,A.SPLIT_SEQ FROM FMS7_CARGO_ARRIVAL_DTL A, " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE A.CARGO_REF_NO=B.CARGO_REF_CD AND B.MAN_CD=C.MAN_CD AND " +
					  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) AND A.CARGO_REF_NO='"+temp_cargo.elementAt(k)+"' AND"
					  		+ " (B.DOM_buy_flag ='N' OR  B.DOM_buy_flag is null) ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString+split1+order;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				ACT_ARRV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				ACT_ARRV_MONTH.add(rset.getString(4)==null?"":rset.getString(4));
				TRD_CD.add(rset.getString(5)==null?"0":rset.getString(5));
				SPLIT_SEQ.add(rset.getString(6)==null?"0":rset.getString(6));
			}
			 
			}
			
			
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{
				String refno="";
				if(SPLIT_SEQ.elementAt(i).equals("1"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"A";
				}
				else if(SPLIT_SEQ.elementAt(i).equals("2"))
				{
					refno=""+CARGO_REF_CD.elementAt(i)+"-"+"B";
				}
				else
				{
					refno=""+CARGO_REF_CD.elementAt(i);
				}
				
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+refno+"' AND JOURNAL_TYPE='FMSFI'";
				//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG.add("N");
					SUN_APPROVAL.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRD_CD.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME.add("");
					TRADER_ABBR.add("");
				}
				
				//Logic for Final Seller Payment
				queryString = "SELECT A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),SUN_APPROVAL,CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"' ";				
				//System.out.println("FMS7_FINAL_SELLER_PAY >>>>>>>>>>>>> Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));						
					ACTUAL_UNLOADED_QTY.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					unloaded_qty.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					ACTUAL_UNLOADED_QTY_NUMERIC.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					purchase_total_qty += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					CONF_PRICE.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					CONF_PRICE_NUMERIC.add(rset.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					temp_inv_amt.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					USD_VAL_INVOICE_NUMERIC.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag.add(rset.getString(8)==null?"":rset.getString(8));
					Authorize_flag.add(rset.getString(9)==null?"":rset.getString(9));
					Approve_flag.add(rset.getString(10)==null?"":rset.getString(10));
					//SUN_APPROVAL.add(rset.getString(7)==null?"":rset.getString(7)); //Commented By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					INVOICE_NO.add("");
					INVOICE_DT.add("");						
					ACTUAL_UNLOADED_QTY.add("-");
					ACTUAL_UNLOADED_QTY_NUMERIC.add("0.00");
					CONF_PRICE.add("");
					CONF_PRICE_NUMERIC.add("0.0000");
					USD_VAL_INVOICE.add("-");
					USD_VAL_INVOICE_NUMERIC.add("0.00");
					DUE_DT.add("");
					temp_inv_amt.add("0");
					unloaded_qty.add("0");
					Check_flag.add("");
					Authorize_flag.add("");
					Approve_flag.add("");
					//SUN_APPROVAL.add(""); //Commented By Samik Shah On 23rd August, 2011 ...
				}
				
				
				double sbi_tt_selling_exchg_rate = 0;
				double foreign_exchg_rate = 0;
				String exchg_rate_cd = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2 = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate = "";
				String exchg_rate_2 = "";
				
				String arr_dt = ""+ACT_ARRV_DT.elementAt(i);
				String arrival_date_and_rate_note = "";
				
				if(arr_dt.trim().equals(""))
				{
					arrival_date_and_rate_note += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate = rset2.getString(1)==null?"0":rset2.getString(1);
					sbi_tt_selling_exchg_rate = Double.parseDouble(exchg_rate);
				}
				
				if(sbi_tt_selling_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(sbi_tt_selling_exchg_rate));
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add(nf2.format(sbi_tt_selling_exchg_rate));
					FINAL_SELLER_INV_AMT_INR.add(nf3.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					final_seller_amt.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					purchase_total_inv_value_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
					purchase_total_cost_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add("0.0000");
					FINAL_SELLER_INV_AMT_INR.add("-");
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add("0.00");
					final_seller_amt.add("0.00");
					if(arrival_date_and_rate_note.trim().length()<5)
					{
						arrival_date_and_rate_note += "\nSBI TT Selling rate is missing for Actual Arrival Date: "+arr_dt.trim();
					}
				}
				
				ARRIVAL_DATE_RATE_NOTE.add(arrival_date_and_rate_note.trim());
				
				String prov_cd_payment_date = "";
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY,TO_CHAR(CUSTOM_DUTY_DT,'dd/mm/yyyy') FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					//EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt.add(rset.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))>0)
					{
						purchase_total_cd_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						TOTAL_CD_AMT.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
						TOTAL_CD_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
					}
					prov_cd_payment_date = rset.getString(3)==null?"":rset.getString(3);
					}
					else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
						temp_tot_cd_amt.add("0.00");
					}
				}
				else
				{
					//EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT.add("-");
					TOTAL_CD_AMT_NUMERIC.add("0.00");
					temp_tot_cd_amt.add("0.00");
				}
				
				String prov_cd_date_and_rate_note = "";
				
				if(prov_cd_payment_date.trim().equals(""))
				{
					prov_cd_date_and_rate_note += "\n"+"Provisional Custom Duty Payment Date is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND EFF_DT=TO_DATE('"+prov_cd_payment_date+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate = Double.parseDouble(exchg_rate_2);
					EXCHG_RATE_VALUE.add(rset2.getString(1)==null?"-":nf2.format(Double.parseDouble(rset2.getString(1))));
					if(prov_cd_date_and_rate_note.trim().length()<5 && foreign_exchg_rate<0.0001)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					if(prov_cd_date_and_rate_note.trim().length()<5)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				
				CUSTOM_DUTY_DATE_RATE_NOTE.add(prov_cd_date_and_rate_note.trim());
				//System.out.println("arrival_date_and_rate_note = "+arrival_date_and_rate_note+",  prov_cd_date_and_rate_note = "+prov_cd_date_and_rate_note);
				
				//Logic for FMS7_FINAL_CUSTOM_DUTY
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND,INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					temp_tot_pay_refund.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						custom_duty_interest_total_inr += Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
						TOTAL_PAID_REFUND.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						TOTAL_PAID_REFUND_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						CUSTOM_DUTY_INTEREST.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
						CUSTOM_DUTY_INTEREST_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					}
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
						temp_tot_pay_refund.add("0.00");
					}
				}
				else
				{
					TOTAL_PAID_REFUND.add("-");
					TOTAL_PAID_REFUND_NUMERIC.add("0.00");
					CUSTOM_DUTY_INTEREST.add("-");
					CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					temp_tot_pay_refund.add("0.00");
				}
			}
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR.elementAt(i)).equals("-") && temp_inv_amt.elementAt(i)!=null && !temp_inv_amt.elementAt(i).equals("") && !temp_inv_amt.elementAt(i).equals("0") && temp_tot_cd_amt.elementAt(i)!=null && !temp_tot_cd_amt.elementAt(i).equals("") && !temp_tot_cd_amt.elementAt(i).equals("0"))
				{
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				else
				{
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				
				double cd_usd = 0;
				double addl_cd_usd = 0;
				double total_cost = 0;
				double usd_per_mmbtu = 0;
				
				if(!(""+temp_tot_cd_amt.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_cd_usd += Double.parseDouble(nf.format(cd_usd));
				}
				else
				{
					CUSTOM_DUTY_USD.add("-");
					CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				if(!(""+temp_tot_pay_refund.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					addl_cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_addl_cd_usd += Double.parseDouble(nf.format(addl_cd_usd));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD.add("-");
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				total_cost = Double.parseDouble(""+temp_inv_amt.elementAt(i)) + cd_usd + addl_cd_usd;
				purchase_total_inv_value_usd += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt.elementAt(i))));
				
				if(total_cost>0 && Double.parseDouble(""+unloaded_qty.elementAt(i))>0)
				{
					usd_per_mmbtu = total_cost/Double.parseDouble(""+unloaded_qty.elementAt(i));
				}
				
				if(total_cost>0)
				{
					COST_OF_PURCHASE_USD.add(nf3.format(total_cost));
					COST_OF_PURCHASE_USD_NUMERIC.add(nf.format(total_cost));
					purchase_total_cost_usd += Double.parseDouble(nf.format(total_cost));
				}
				else
				{
					COST_OF_PURCHASE_USD.add("-");
					COST_OF_PURCHASE_USD_NUMERIC.add("0.00");
				}
				
				if(usd_per_mmbtu>0)
				{
					USD_PER_MMBTU.add(nf2.format(usd_per_mmbtu));
					USD_PER_MMBTU_NUMERIC.add(nf2.format(usd_per_mmbtu));
				}
				else
				{
					USD_PER_MMBTU.add("-");
					USD_PER_MMBTU_NUMERIC.add("0.0000");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	//New Final Custom Details Introduced By Samik Shah On 11th August, 2011 ...
	//Last Modified By Samik Shah On 16th August, 2011 ...
	public void get_Final_CD_dtls()
	{
		try
		{		
			//System.out.println("Inside get_Purchase_dtls() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb = new Vector();
			Vector temp_usd_invoice = new Vector();
			Vector temp_usd_dr_cr = new Vector();
			Vector temp_inv_amt = new Vector();			
			Vector temp_tot_cd_amt = new Vector();
			Vector temp_tot_pay_refund = new Vector();
			Vector temp_cd_paid = new Vector();
			Vector final_seller_amt = new Vector();
			Vector unloaded_qty = new Vector();
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
						
			Vector temp_cargo=new Vector();
			Vector temp_seq=new Vector();
			Vector temp_seq1=new Vector();
			
			String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			while(rset.next())
			{
				temp_cargo.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq1.add("Y");
				else
					temp_seq1.add("N");
			}
			

			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String order=" ORDER BY A.ACT_ARRV_DT ";	
			String split1="";
			//System.out.println("trader_cd = "+q);
			
			for(int k=0;k<temp_cargo.size();k++)
			{
				if(temp_seq1.elementAt(k).equals("Y"))
					split1=" AND SPLIT_SEQ IN ('1') ";
				else 
					split1=" AND SPLIT_SEQ='0' ";
				
							
				
			queryString = "SELECT A.CARGO_REF_NO, A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
					  "TO_CHAR(A.ACT_ARRV_DT,'Month'), C.TRD_CD,A.SPLIT_SEQ FROM FMS7_CARGO_ARRIVAL_DTL A, " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE A.CARGO_REF_NO=B.CARGO_REF_CD AND B.MAN_CD=C.MAN_CD AND " +
					  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) AND A.CARGO_REF_NO='"+temp_cargo.elementAt(k)+"' ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			
			queryString=queryString+split1+order;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				ACT_ARRV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				ACT_ARRV_MONTH.add(rset.getString(4)==null?"":rset.getString(4));
				TRD_CD.add(rset.getString(5)==null?"0":rset.getString(5));
				SPLIT_SEQ.add(rset.getString(6)==null?"0":rset.getString(6));
				temp_seq.add(temp_seq1.elementAt(k));
			}
			}
			 
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{
				queryString = "SELECT XML_GEN_FLAG, SUN_APPROVAL FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  			  "WHERE INV_CARGO_NO='"+CARGO_REF_CD.elementAt(i)+"' AND JOURNAL_TYPE='FMSFC'";
				//System.out.println("Confirmed FMS7_ACCOUNT_APPROVED_DTL Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
					SUN_APPROVAL.add(rset.getString(2)==null?"N":rset.getString(2)); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				else
				{
					XML_GEN_FLAG.add("N");
					SUN_APPROVAL.add("N"); //Introduced By Samik Shah On 23rd August, 2011 ...
				}
				
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRD_CD.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME.add("");
					TRADER_ABBR.add("");
				}
				
				//Logic for Final Seller Payment
				queryString = "SELECT A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),SUN_APPROVAL "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";				
				//System.out.println("Seller Final Invoice Detail Query = "+queryString);
				
				if(temp_seq.elementAt(i).equals("Y"))
					queryString+=" AND SPLIT_SEQ='1'";
				else
					queryString+=" AND SPLIT_SEQ='0'";
				
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//if((SPLIT_SEQ.elementAt(i).equals("1") && temp_seq.elementAt(i).equals("Y")) || (SPLIT_SEQ.elementAt(i).equals("0") && temp_seq.elementAt(i).equals("N")))
							{
					INVOICE_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));						
					ACTUAL_UNLOADED_QTY.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					unloaded_qty.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					ACTUAL_UNLOADED_QTY_NUMERIC.add(rset.getString(3)==null?"0.00":nf.format(Double.parseDouble(rset.getString(3))));
					purchase_total_qty += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					CONF_PRICE.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					CONF_PRICE_NUMERIC.add(rset.getString(4)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					temp_inv_amt.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					USD_VAL_INVOICE_NUMERIC.add(rset.getString(5)==null?"0.00":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));
					//SUN_APPROVAL.add(rset.getString(7)==null?"":rset.getString(7)); //Commented By Samik Shah On 23rd August, 2011 ...
							}
					/*else
					{
						INVOICE_NO.add("");
						INVOICE_DT.add("");						
						ACTUAL_UNLOADED_QTY.add("-");
						ACTUAL_UNLOADED_QTY_NUMERIC.add("0.00");
						CONF_PRICE.add("");
						CONF_PRICE_NUMERIC.add("0.0000");
						USD_VAL_INVOICE.add("-");
						USD_VAL_INVOICE_NUMERIC.add("0.00");
						DUE_DT.add("");
						temp_inv_amt.add("0");
						unloaded_qty.add("0");
					}*/
				}
				else
				{
					INVOICE_NO.add("");
					INVOICE_DT.add("");						
					ACTUAL_UNLOADED_QTY.add("-");
					ACTUAL_UNLOADED_QTY_NUMERIC.add("0.00");
					CONF_PRICE.add("");
					CONF_PRICE_NUMERIC.add("0.0000");
					USD_VAL_INVOICE.add("-");
					USD_VAL_INVOICE_NUMERIC.add("0.00");
					DUE_DT.add("");
					temp_inv_amt.add("0");
					unloaded_qty.add("0");
					//SUN_APPROVAL.add(""); //Commented By Samik Shah On 23rd August, 2011 ...
				}
				
				
				double sbi_tt_selling_exchg_rate = 0;
				double foreign_exchg_rate = 0;
				String exchg_rate_cd = "2"; //For SBI TT Selling Exchange Rate ...
				String exchg_rate_cd_2 = "5"; //For Group Foreign Exchange Rate ...
				String exchg_rate = "";
				String exchg_rate_2 = "";
				
				String arr_dt = ""+ACT_ARRV_DT.elementAt(i);
				String arrival_date_and_rate_note = "";
				
				if(arr_dt.trim().equals(""))
				{
					arrival_date_and_rate_note += "\nActual Arrival Date of Cargo is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+ACT_ARRV_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate = rset2.getString(1)==null?"0":rset2.getString(1);
					sbi_tt_selling_exchg_rate = Double.parseDouble(exchg_rate);
				}
				
				if(sbi_tt_selling_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(sbi_tt_selling_exchg_rate));
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add(nf2.format(sbi_tt_selling_exchg_rate));
					FINAL_SELLER_INV_AMT_INR.add(nf3.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					final_seller_amt.add(nf.format(sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					purchase_total_inv_value_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
					purchase_total_cost_inr += (sbi_tt_selling_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					GROUP_FOREIGN_EXCHG_RATE_NUMERIC.add("0.0000");
					FINAL_SELLER_INV_AMT_INR.add("-");
					FINAL_SELLER_INV_AMT_INR_NUMERIC.add("0.00");
					final_seller_amt.add("0.00");
					if(arrival_date_and_rate_note.trim().length()<5)
					{
						arrival_date_and_rate_note += "\nSBI TT Selling rate is missing for Actual Arrival Date: "+arr_dt.trim();
					}
				}
				
				ARRIVAL_DATE_RATE_NOTE.add(arrival_date_and_rate_note.trim());
				
				String prov_cd_payment_date = "";
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY,TO_CHAR(CUSTOM_DUTY_DT,'dd/mm/yyyy') FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					//if((SPLIT_SEQ.elementAt(i).equals("1") && temp_seq.elementAt(i).equals("Y")) || (SPLIT_SEQ.elementAt(i).equals("0") && temp_seq.elementAt(i).equals("N")))
					{
					//EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt.add(rset.getString(2)==null?"0.00":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))>0)
					{
						purchase_total_cd_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						TOTAL_CD_AMT.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
						TOTAL_CD_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
					}
					prov_cd_payment_date = rset.getString(3)==null?"":rset.getString(3);
					}
				/*	else
					{
						TOTAL_CD_AMT.add("-");
						TOTAL_CD_AMT_NUMERIC.add("0.00");
						temp_tot_cd_amt.add("0.00");
					}*/
				}
				else
				{
					//EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT.add("-");
					TOTAL_CD_AMT_NUMERIC.add("0.00");
					temp_tot_cd_amt.add("0.00");
				}
				
				String prov_cd_date_and_rate_note = "";
				
				if(prov_cd_payment_date.trim().equals(""))
				{
					prov_cd_date_and_rate_note += "\n"+"Provisional Custom Duty Payment Date is missing."; 
				}
				
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND EFF_DT=TO_DATE('"+prov_cd_payment_date+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate = Double.parseDouble(exchg_rate_2);
					EXCHG_RATE_VALUE.add(rset2.getString(1)==null?"-":nf2.format(Double.parseDouble(rset2.getString(1))));
					if(prov_cd_date_and_rate_note.trim().length()<5 && foreign_exchg_rate<0.0001)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					if(prov_cd_date_and_rate_note.trim().length()<5)
					{
						prov_cd_date_and_rate_note += "\n"+"Group Foreign Exchange rate is missing for Custom Payment Date: "+prov_cd_payment_date.trim();
					}
				}
				
				CUSTOM_DUTY_DATE_RATE_NOTE.add(prov_cd_date_and_rate_note.trim());
				//System.out.println("arrival_date_and_rate_note = "+arrival_date_and_rate_note+",  prov_cd_date_and_rate_note = "+prov_cd_date_and_rate_note);
				
				//Logic for FMS7_FINAL_CUSTOM_DUTY
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND,INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
				//	if((SPLIT_SEQ.elementAt(i).equals("1") && temp_seq.elementAt(i).equals("Y")) || (SPLIT_SEQ.elementAt(i).equals("0") && temp_seq.elementAt(i).equals("N")))
					{
					temp_tot_pay_refund.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						custom_duty_interest_total_inr += Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
						TOTAL_PAID_REFUND.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						TOTAL_PAID_REFUND_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
						CUSTOM_DUTY_INTEREST.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
						CUSTOM_DUTY_INTEREST_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					}
					}
					/*else
					{
						TOTAL_PAID_REFUND.add("-");
						TOTAL_PAID_REFUND_NUMERIC.add("0.00");
						CUSTOM_DUTY_INTEREST.add("-");
						CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
						temp_tot_pay_refund.add("0.00");
					}*/
				}
				else
				{
					TOTAL_PAID_REFUND.add("-");
					TOTAL_PAID_REFUND_NUMERIC.add("0.00");
					CUSTOM_DUTY_INTEREST.add("-");
					CUSTOM_DUTY_INTEREST_NUMERIC.add("0.00");
					temp_tot_pay_refund.add("0.00");
				}
			}
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR.elementAt(i)).equals("-") && temp_inv_amt.elementAt(i)!=null && !temp_inv_amt.elementAt(i).equals("") && !temp_inv_amt.elementAt(i).equals("0") && temp_tot_cd_amt.elementAt(i)!=null && !temp_tot_cd_amt.elementAt(i).equals("") && !temp_tot_cd_amt.elementAt(i).equals("0"))
				{
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				else
				{
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID_NUMERIC.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
							INR_PER_MMBTU_NUMERIC.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
							INR_PER_MMBTU_NUMERIC.add("0.0000");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
						INR_PER_MMBTU_NUMERIC.add("0.0000");
					}
				}
				
				double cd_usd = 0;
				double addl_cd_usd = 0;
				double total_cost = 0;
				double usd_per_mmbtu = 0;
				
				if(!(""+temp_tot_cd_amt.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_cd_usd += Double.parseDouble(nf.format(cd_usd));
				}
				else
				{
					CUSTOM_DUTY_USD.add("-");
					CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				if(!(""+temp_tot_pay_refund.elementAt(i)).equals("0") && !(""+EXCHG_RATE_VALUE.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					addl_cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+EXCHG_RATE_VALUE.elementAt(i))));
					purchase_total_addl_cd_usd += Double.parseDouble(nf.format(addl_cd_usd));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD.add("-");
					ADDL_CUSTOM_DUTY_USD_NUMERIC.add("0.00");
				}
				
				total_cost = Double.parseDouble(""+temp_inv_amt.elementAt(i)) + cd_usd + addl_cd_usd;
				purchase_total_inv_value_usd += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt.elementAt(i))));
				
				if(total_cost>0 && Double.parseDouble(""+unloaded_qty.elementAt(i))>0)
				{
					usd_per_mmbtu = total_cost/Double.parseDouble(""+unloaded_qty.elementAt(i));
				}
				
				if(total_cost>0)
				{
					COST_OF_PURCHASE_USD.add(nf3.format(total_cost));
					COST_OF_PURCHASE_USD_NUMERIC.add(nf.format(total_cost));
					purchase_total_cost_usd += Double.parseDouble(nf.format(total_cost));
				}
				else
				{
					COST_OF_PURCHASE_USD.add("-");
					COST_OF_PURCHASE_USD_NUMERIC.add("0.00");
				}
				
				if(usd_per_mmbtu>0)
				{
					USD_PER_MMBTU.add(nf2.format(usd_per_mmbtu));
					USD_PER_MMBTU_NUMERIC.add(nf2.format(usd_per_mmbtu));
				}
				else
				{
					USD_PER_MMBTU.add("-");
					USD_PER_MMBTU_NUMERIC.add("0.0000");
				}
			}
			
			//System.out.println("SUN_APPROVAL >>>>>>>>>>>>> "+SUN_APPROVAL);
			//System.out.println("INVOICE_NO >>>>>>>>>>>>> "+INVOICE_NO);
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_dtls() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	//New Provisional Purchase Details Introduced by Samik Shah 0n 27/10/2010
	//Last Modified By Samik Shah On 27th August, 2011 ...
	public void get_Provisional_Purchase_Details_domestic()
	{

		try
		{		
			//System.out.println("Inside get_Provisional_Purchase_Details() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb_dom = new Vector();
			Vector temp_usd_invoice_dom = new Vector();
			Vector temp_usd_dr_cr_dom = new Vector();
			Vector temp_inv_amt_dom = new Vector();			
			Vector temp_tot_cd_amt_dom = new Vector();
			Vector temp_tot_pay_refund_dom = new Vector();
			Vector temp_cd_paid_dom = new Vector();
			Vector final_seller_amt_dom = new Vector();
			Vector certified_qty_dom = new Vector();
			Vector unloaded_qty_dom = new Vector();
			Vector prov_qty_dom = new Vector();
			String from_dt_dom = "01/"+month+"/"+year;
			String to_dt_dom = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt_dom = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt_dom+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			
			Vector temp_cargo_dom=new Vector();
			Vector temp_seq_dom=new Vector();
			Vector temp_seq1_dom=new Vector();
			
			/*String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			System.out.println("trader_cd = "+q);
			while(rset.next())
			{
				temp_cargo.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq.add("Y");
				else
					temp_seq.add("N");
			}
			

			
			String order=" ORDER BY A.ACT_ARRV_DT ";	
			*/
			//System.out.println("trader_cd = "+trader_cd);
			
			/*for(int k=0;k<temp_cargo.size();k++)
			{
				if(temp_seq.elementAt(k).equals("Y"))
					split1=" AND SPLIT_SEQ IN ('1','2') ";
				else 
					split1=" AND SPLIT_SEQ='0' ";*/
			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String split1="";
			split1=" AND SPLIT_SEQ='0'";
			queryString = "SELECT B.CARGO_REF_cd, C.TRD_CD FROM " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE  B.MAN_CD=C.MAN_CD AND " +
					  "(B.DELV_From_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')) OR B.DELV_to_DT between (to_date('"+from_dt_dom+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt_dom+"','dd/mm/yyyy')))  AND "
			  		+ "B.DOM_buy_flag='Y' ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD_DOM.add(rset.getString(1)==null?"":rset.getString(1));
				/*VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				ACT_ARRV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				ACT_ARRV_MONTH.add(rset.getString(4)==null?"":rset.getString(4));*/
				TRD_CD_DOM.add(rset.getString(2)==null?"0":rset.getString(2));
				//SPLIT_SEQ.add(rset.getString(6)==null?"0":rset.getString(6));
				//String flg=rset.getString(7)==null?"":rset.getString(7);
				/*if(flg.equalsIgnoreCase("Y")){
					DOM_buy_flag.add("PipeLine Gas");
				}else{
					DOM_buy_flag.add("LNG Gas");
				}*/
				
				//temp_seq1.add(temp_seq.elementAt(k));
				
				
				queryString = "SELECT VESSEL_NM, TO_CHAR(ACT_ARRV_DT,'DD/MM/YYYY'), " +
					  "TO_CHAR(ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_dTL WHERE CARGO_REF_NO='"+rset.getString(1)+"'";
				
				rset1 = stmt1.executeQuery(queryString);
				if(rset1.next())
				{
					VESSEL_NM_DOM.add(rset1.getString(1)==null?"":rset1.getString(1));
					ACT_ARRV_DT_DOM.add(rset1.getString(2)==null?"":rset1.getString(2));
					ACT_ARRV_MONTH_DOM.add(rset1.getString(3)==null?"":rset1.getString(3));
				}else{
					VESSEL_NM_DOM.add("");
					ACT_ARRV_DT_DOM.add("");
					ACT_ARRV_MONTH_DOM.add("");
				}
			}
			//}
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{
				double provisional_qty_dom = 0;
				double final_qty_dom = 0;
				double provisional_cd_dom = 0;
				double final_cd_dom = 0;
				
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRD_CD_DOM.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR_DOM.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME_DOM.add("");
					TRADER_ABBR_DOM.add("");
				}
				
				queryString = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.EXP_DELV_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
			  	  			  "FROM FMS7_PROV_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" AND SPLIT_SEQ='0'";
				
				/*if(temp_seq1.elementAt(i).equals("Y"))
						queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
					queryString+=" AND SPLIT_SEQ='0' ";*/
				//System.out.println("Seller Provisional Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO_DOM.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT_DOM.add(rset.getString(2)==null?"":rset.getString(2));						
					PROVISIONAL_QTY_DOM.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					prov_qty_dom.add(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					provisional_qty_dom = Double.parseDouble((rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3)))));
					purchase_prov_total_qty_dom += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					CONF_PRICE_DOM.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE_DOM.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					temp_inv_amt_dom.add(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value_dom += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT_DOM.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag_DOM.add(rset.getString(7)==null?"":rset.getString(7));
					Authorize_flag_DOM.add(rset.getString(8)==null?"":rset.getString(8));
					Approve_flag_DOM.add(rset.getString(9)==null?"":rset.getString(9));
				}
				else
				{
					INVOICE_NO_DOM.add("");
					INVOICE_DT_DOM.add("");	
					Check_flag_DOM.add("");
					Authorize_flag_DOM.add("");
					Approve_flag_DOM.add("");
					queryString="SELECT PRICE,CONFIRM_VOL FROM FMS7_MAN_CONFIRM_CARGO_DTL WHERE CARGO_REF_CD='"+CARGO_REF_CD_DOM.elementAt(i)+"'";
					//System.out.println("queryString---"+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{
						PROVISIONAL_QTY_DOM.add(rset1.getString(2)==null?"-":nf3.format(Double.parseDouble(rset1.getString(2))));
						CONF_PRICE_DOM.add(rset1.getString(1)==null?"":nf2.format(Double.parseDouble(rset1.getString(1))));
						double amt=Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)) * Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						USD_VAL_INVOICE_DOM.add(nf3.format(amt));
						purchase_prov_total_qty_dom += Double.parseDouble(rset1.getString(2)==null?"0":nf.format(Double.parseDouble(rset1.getString(2))));
						purchase_total_invoice_value_dom += Double.parseDouble(nf.format(amt));
					}else{
						PROVISIONAL_QTY_DOM.add("-");
						CONF_PRICE_DOM.add("");
						USD_VAL_INVOICE_DOM.add("-");
					}
					
					
					DUE_DT_DOM.add("");
					temp_inv_amt_dom.add("0");
					prov_qty_dom.add("0");
				}
				
				queryString = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" "
				  			  		+ "AND SPLIT_SEQ='0'";
				
			/*	if(temp_seq1.elementAt(i).equals("Y"))
					queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
				queryString+=" AND SPLIT_SEQ='0' ";*/
				
				//System.out.println("Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					ACTUAL_UNLOADED_QTY_DOM.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					unloaded_qty_dom.add(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					purchase_total_qty_dom += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					final_qty_dom = Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
				}
				else
				{
					ACTUAL_UNLOADED_QTY_DOM.add("-");
					unloaded_qty_dom.add("0");
				}
				
				if(final_qty_dom>0 && provisional_qty_dom>0)
				{
					if((final_qty_dom-provisional_qty_dom)>0)
					{
						CREDIT_NOTE_QTY_DOM.add(nf3.format((final_qty_dom-provisional_qty_dom)));
						purchase_credit_note_total_qty_dom += Double.parseDouble(nf.format((final_qty_dom-provisional_qty_dom)));
					}
					else
					{
						CREDIT_NOTE_QTY_DOM.add("-");
					}
				}
				else
				{
					CREDIT_NOTE_QTY_DOM.add("-");
				}
				
				queryString = "SELECT A.QTY_MMBTU FROM FMS7_CARGO_QQ_DTL A WHERE A.CARGO_REF_NO='"+CARGO_REF_CD_DOM.elementAt(i)+"' "
						+ " AND SPLIT_SEQ='0'";
				
				/*if(temp_seq1.elementAt(i).equals("Y"))
					queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
				queryString+=" AND SPLIT_SEQ='0' ";*/
				
				//System.out.println("Cargo Q & Q Certified mmBTU QTY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					CERTIFIED_QTY_DOM.add(rset.getString(1)==null?"-":nf3.format(Double.parseDouble(rset.getString(1))));
					certified_qty_dom.add(rset.getString(1)==null?"0":nf.format(Double.parseDouble(rset.getString(1))));
					purchase_certified_total_qty_dom += Double.parseDouble(rset.getString(1)==null?"0":nf.format(Double.parseDouble(rset.getString(1))));
				}
				else
				{
					CERTIFIED_QTY_DOM.add("-");
					certified_qty_dom.add("0");
				}
				
				double foreign_exchg_rate_dom = 0;
				String exchg_rate_cd_dom="5";
				String exchg_rate_dom="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd_dom+"' AND EFF_DT=TO_DATE('"+INVOICE_DT_DOM.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate_dom=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate_dom=Double.parseDouble(exchg_rate_dom);
				}
				
				if(foreign_exchg_rate_dom>0)
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add(nf2.format(foreign_exchg_rate_dom));
					FINAL_SELLER_INV_AMT_INR_DOM.add(nf3.format(foreign_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					final_seller_amt_dom.add(nf.format(foreign_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
					purchase_total_inv_value_inr_dom += (foreign_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
					purchase_total_cost_inr_dom += (foreign_exchg_rate_dom*Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)));
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE_DOM.add("-");
					FINAL_SELLER_INV_AMT_INR_DOM.add("-");
					final_seller_amt_dom.add("-");
				}
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+"";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					//if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					//{
					EXCHG_RATE_VALUE_DOM.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt_dom.add(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))>0)
					{
						purchase_total_cd_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						provisional_cd_dom = Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i));
						TOTAL_CD_AMT_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT_DOM.add("-");
					}
					//}
					/*else
					{
						EXCHG_RATE_VALUE_DOM.add("-");	
						TOTAL_CD_AMT_DOM.add("-");
						temp_tot_cd_amt.add("0");
					}*/
				}
				else
				{
					EXCHG_RATE_VALUE_DOM.add("-");	
					TOTAL_CD_AMT_DOM.add("-");
					temp_tot_cd_amt_dom.add("0");
				}
				
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND, INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD_DOM.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					/*if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{*/
					temp_tot_pay_refund_dom.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						final_cd_dom = Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						purchase_total_cost_inr_dom += Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i));
						TOTAL_PAID_REFUND_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))));
					}
					else
					{
						TOTAL_PAID_REFUND_DOM.add("-");
					}
					/*}
					else
					{
						TOTAL_PAID_REFUND.add("-");	
						temp_tot_pay_refund.add("0");
					}*/
				}
				else
				{
					TOTAL_PAID_REFUND_DOM.add("-");	
					temp_tot_pay_refund_dom.add("0");
				}
				
				if(final_cd_dom<0)
				{
					CUSTOM_JBB_DOM.add(nf3.format(provisional_cd_dom+final_cd_dom));
					CUSTOM_PROVISIONS_DOM.add(nf3.format((-1)*final_cd_dom));
					purchase_total_custom_jbb_dom += (provisional_cd_dom+final_cd_dom);
					purchase_total_custom_provisions_dom += ((-1)*final_cd_dom);
				}
				else
				{
					CUSTOM_JBB_DOM.add("-");
					CUSTOM_PROVISIONS_DOM.add("-");
				}
			}
			
			for(int i=0; i<CARGO_REF_CD_DOM.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR_DOM.elementAt(i)).equals("-") && temp_inv_amt_dom.elementAt(i)!=null && !temp_inv_amt_dom.elementAt(i).equals("") && !temp_inv_amt_dom.elementAt(i).equals("0") && temp_tot_cd_amt_dom.elementAt(i)!=null && !temp_tot_cd_amt_dom.elementAt(i).equals("") && !temp_tot_cd_amt_dom.elementAt(i).equals("0"))
				{
					temp_cd_paid_dom.add(nf.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					CD_PAID_DOM.add(nf3.format(Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)))));
					double total_amt_dom = Double.parseDouble(""+final_seller_amt_dom.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i)));
					
					if(!(""+ACTUAL_UNLOADED_QTY_DOM.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))>0)
						{
							INR_PER_MMBTU_DOM.add(nf2.format(total_amt_dom/Double.parseDouble((""+unloaded_qty_dom.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU_DOM.add("-");
						}
					}
					else
					{
						INR_PER_MMBTU_DOM.add("-");
					}
				}
				else
				{
					temp_cd_paid_dom.add("0");
					CD_PAID_DOM.add("-");
					INR_PER_MMBTU_DOM.add("-");
				}
				
				double cd_usd_dom = 0;
				double addl_cd_usd_dom = 0;
				double total_cost_dom = 0;
				double usd_per_mmbtu_dom = 0;
				
				if(!(""+temp_tot_cd_amt_dom.elementAt(i)).equals("0") && !(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i))));
					cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt_dom.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i))));
					purchase_total_cd_usd_dom += Double.parseDouble(nf.format(cd_usd_dom));
				}
				else
				{
					CUSTOM_DUTY_USD_DOM.add("-");
				}
				
				if(!(""+temp_tot_pay_refund_dom.elementAt(i)).equals("0") && !(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i))));
					addl_cd_usd_dom = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund_dom.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE_DOM.elementAt(i))));
					purchase_total_addl_cd_usd_dom += Double.parseDouble(nf.format(addl_cd_usd_dom));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD_DOM.add("-");
				}
				
				total_cost_dom = Double.parseDouble(""+temp_inv_amt_dom.elementAt(i)) + cd_usd_dom + addl_cd_usd_dom;
				purchase_total_inv_value_usd_dom += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt_dom.elementAt(i))));
				
				if(total_cost_dom>0 && Double.parseDouble(""+unloaded_qty_dom.elementAt(i))>0)
				{
					usd_per_mmbtu_dom = total_cost_dom/Double.parseDouble(""+unloaded_qty_dom.elementAt(i));
				}
				
				if(total_cost_dom>0)
				{
					COST_OF_PURCHASE_USD_DOM.add(nf3.format(total_cost_dom));
					purchase_total_cost_usd_dom += Double.parseDouble(nf.format(total_cost_dom));
				}
				else
				{
					COST_OF_PURCHASE_USD_DOM.add("-");
				}
				
				if(usd_per_mmbtu_dom>0)
				{
					USD_PER_MMBTU_DOM.add(nf2.format(usd_per_mmbtu_dom));
				}
				else
				{
					USD_PER_MMBTU_DOM.add("-");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Provisional_Purchase_Details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	public void get_Provisional_Purchase_Details()
	{
		try
		{		
			//System.out.println("Inside get_Provisional_Purchase_Details() Method ...");
			////System.out.println("From month "+month+" To month= "+to_month);
			Vector temp_usd_jbb = new Vector();
			Vector temp_usd_invoice = new Vector();
			Vector temp_usd_dr_cr = new Vector();
			Vector temp_inv_amt = new Vector();			
			Vector temp_tot_cd_amt = new Vector();
			Vector temp_tot_pay_refund = new Vector();
			Vector temp_cd_paid = new Vector();
			Vector final_seller_amt = new Vector();
			Vector certified_qty = new Vector();
			Vector unloaded_qty = new Vector();
			Vector prov_qty = new Vector();
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			
			Vector temp_cargo=new Vector();
			Vector temp_seq=new Vector();
			Vector temp_seq1=new Vector();
			
			String q="SELECT A.CARGO_REF_NO , A.ACT_ARRV_DT,COUNT(A.SPLIT_SEQ) FROM FMS7_CARGO_ARRIVAL_DTL A " +
					  "WHERE A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) GROUP BY A.ACT_ARRV_DT,A.CARGO_REF_NO ORDER BY A.ACT_ARRV_DT ";
			rset=stmt.executeQuery(q);
			System.out.println("trader_cd = "+q);
			while(rset.next())
			{
				temp_cargo.add(rset.getString(1));
				int tempSeq=rset.getInt(3);
				if(tempSeq>1)
					temp_seq.add("Y");
				else
					temp_seq.add("N");
			}
			

			String trdcd=" AND C.TRD_CD="+trader_cd+" ";
			String order=" ORDER BY A.ACT_ARRV_DT ";	
			String split1="";
			//System.out.println("trader_cd = "+trader_cd);
			
			for(int k=0;k<temp_cargo.size();k++)
			{
				if(temp_seq.elementAt(k).equals("Y"))
					split1=" AND SPLIT_SEQ IN ('1','2') ";
				else 
					split1=" AND SPLIT_SEQ='0' ";
				
			queryString = "SELECT A.CARGO_REF_NO, A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
					  "TO_CHAR(A.ACT_ARRV_DT,'Month'), C.TRD_CD,A.SPLIT_SEQ FROM FMS7_CARGO_ARRIVAL_DTL A, " +
					  "FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
					  "WHERE A.CARGO_REF_NO=B.CARGO_REF_CD AND B.MAN_CD=C.MAN_CD AND " +
					  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and " +
					  "(to_date('"+to_dt+"','dd/mm/yyyy')) AND A.CARGO_REF_NO='"+temp_cargo.elementAt(k)+"' "
					  		+ "AND "
			  		+ "(B.DOM_buy_flag ='N' OR  B.DOM_buy_flag is null) ";
			
			if(trader_cd!=null && !trader_cd.trim().equals("") && !trader_cd.trim().equals("0"))
			{
				queryString = queryString + trdcd;
			}
			queryString=queryString+split1+order;
			
			//System.out.println("Confirmed Cargo Arrival Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				VESSEL_NM.add(rset.getString(2)==null?"":rset.getString(2));
				ACT_ARRV_DT.add(rset.getString(3)==null?"":rset.getString(3));
				ACT_ARRV_MONTH.add(rset.getString(4)==null?"":rset.getString(4));
				TRD_CD.add(rset.getString(5)==null?"0":rset.getString(5));
				SPLIT_SEQ.add(rset.getString(6)==null?"0":rset.getString(6));
				//String flg=rset.getString(7)==null?"":rset.getString(7);
				/*if(flg.equalsIgnoreCase("Y")){
					DOM_buy_flag.add("PipeLine Gas");
				}else{
					DOM_buy_flag.add("LNG Gas");
				}*/
				
				temp_seq1.add(temp_seq.elementAt(k));
			}
			}
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{
				double provisional_qty = 0;
				double final_qty = 0;
				double provisional_cd = 0;
				double final_cd = 0;
				
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRD_CD.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME.add("");
					TRADER_ABBR.add("");
				}
				
				queryString = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.EXP_DELV_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),CHECKED_FLAG,AUTHORIZED_FLAG,APPROVED_FLAG "+
			  	  			  "FROM FMS7_PROV_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"'";
				
				/*if(temp_seq1.elementAt(i).equals("Y"))
						queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
					queryString+=" AND SPLIT_SEQ='0' ";*/
				//System.out.println("Seller Provisional Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					INVOICE_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));						
					PROVISIONAL_QTY.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					prov_qty.add(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					provisional_qty = Double.parseDouble((rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3)))));
					purchase_prov_total_qty += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					CONF_PRICE.add(rset.getString(4)==null?"":nf2.format(Double.parseDouble(rset.getString(4))));
					USD_VAL_INVOICE.add(rset.getString(5)==null?"-":nf3.format(Double.parseDouble(rset.getString(5))));
					temp_inv_amt.add(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					purchase_total_invoice_value += Double.parseDouble(rset.getString(5)==null?"0":nf.format(Double.parseDouble(rset.getString(5))));
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));
					Check_flag.add(rset.getString(7)==null?"":rset.getString(7));
					Authorize_flag.add(rset.getString(8)==null?"":rset.getString(8));
					Approve_flag.add(rset.getString(9)==null?"":rset.getString(9));
				}
				else
				{
					INVOICE_NO.add("");
					INVOICE_DT.add("");						
					PROVISIONAL_QTY.add("-");
					CONF_PRICE.add("");
					USD_VAL_INVOICE.add("-");
					DUE_DT.add("");
					temp_inv_amt.add("0");
					prov_qty.add("0");
					Check_flag.add("");
					Authorize_flag.add("");
					Approve_flag.add("");
				}
				
				queryString = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
							  "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
				  			  "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" "
				  			  		+ "AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"'";
				
			/*	if(temp_seq1.elementAt(i).equals("Y"))
					queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
				queryString+=" AND SPLIT_SEQ='0' ";*/
				
				//System.out.println("Seller Final Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					ACTUAL_UNLOADED_QTY.add(rset.getString(3)==null?"-":nf3.format(Double.parseDouble(rset.getString(3))));
					unloaded_qty.add(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					purchase_total_qty += Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
					final_qty = Double.parseDouble(rset.getString(3)==null?"0":nf.format(Double.parseDouble(rset.getString(3))));
				}
				else
				{
					ACTUAL_UNLOADED_QTY.add("-");
					unloaded_qty.add("0");
				}
				
				if(final_qty>0 && provisional_qty>0)
				{
					if((final_qty-provisional_qty)>0)
					{
						CREDIT_NOTE_QTY.add(nf3.format((final_qty-provisional_qty)));
						purchase_credit_note_total_qty += Double.parseDouble(nf.format((final_qty-provisional_qty)));
					}
					else
					{
						CREDIT_NOTE_QTY.add("-");
					}
				}
				else
				{
					CREDIT_NOTE_QTY.add("-");
				}
				
				queryString = "SELECT A.QTY_MMBTU FROM FMS7_CARGO_QQ_DTL A WHERE A.CARGO_REF_NO='"+CARGO_REF_CD.elementAt(i)+"' "
						+ " AND SPLIT_SEQ='"+SPLIT_SEQ.elementAt(i)+"'";
				
				/*if(temp_seq1.elementAt(i).equals("Y"))
					queryString+=" AND SPLIT_SEQ IN ('1','2') ";
				else
				queryString+=" AND SPLIT_SEQ='0' ";*/
				
				//System.out.println("Cargo Q & Q Certified mmBTU QTY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					CERTIFIED_QTY.add(rset.getString(1)==null?"-":nf3.format(Double.parseDouble(rset.getString(1))));
					certified_qty.add(rset.getString(1)==null?"0":nf.format(Double.parseDouble(rset.getString(1))));
					purchase_certified_total_qty += Double.parseDouble(rset.getString(1)==null?"0":nf.format(Double.parseDouble(rset.getString(1))));
				}
				else
				{
					CERTIFIED_QTY.add("-");
					certified_qty.add("0");
				}
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					FINAL_SELLER_INV_AMT_INR.add(nf3.format(foreign_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					final_seller_amt.add(nf.format(foreign_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i))));
					purchase_total_inv_value_inr += (foreign_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
					purchase_total_cost_inr += (foreign_exchg_rate*Double.parseDouble(""+temp_inv_amt.elementAt(i)));
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					FINAL_SELLER_INV_AMT_INR.add("-");
					final_seller_amt.add("-");
				}
				
				queryString = "SELECT EXCHG_RATE,CUSTOM_DUTY_PAY FROM FMS7_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+"";
				//System.out.println("FMS7_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					EXCHG_RATE_VALUE.add(rset.getString(1)==null?"-":nf2.format(Double.parseDouble(rset.getString(1))));						
					temp_tot_cd_amt.add(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))));
					if(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))>0)
					{
						purchase_total_cd_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						provisional_cd = Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_cd_amt.elementAt(i));
						TOTAL_CD_AMT.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))));
					}
					else
					{
						TOTAL_CD_AMT.add("-");
					}
					}
					else
					{
						EXCHG_RATE_VALUE.add("-");	
						TOTAL_CD_AMT.add("-");
						temp_tot_cd_amt.add("0");
					}
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");	
					TOTAL_CD_AMT.add("-");
					temp_tot_cd_amt.add("0");
				}
				
				queryString = "SELECT CUSTOM_DUTY_PAY_REFUND, INTERST_X_DAYS FROM FMS7_FINAL_CUSTOM_DUTY WHERE CARGO_REF_NO="+CARGO_REF_CD.elementAt(i)+" ";
				//System.out.println("FMS7_FINAL_CUSTOM_DUTY Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())	
				{
					if(SPLIT_SEQ.elementAt(i).equals("1") || SPLIT_SEQ.elementAt(i).equals("0"))
					{
					temp_tot_pay_refund.add(nf.format(Double.parseDouble(rset.getString(1)==null?"0.00":nf.format(Double.parseDouble(rset.getString(1))))-Double.parseDouble(rset.getString(2)==null?"0":nf.format(Double.parseDouble(rset.getString(2))))));
					if(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))!=0)
					{
						purchase_total_addl_cd_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						final_cd = Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						purchase_total_cost_inr += Double.parseDouble(""+temp_tot_pay_refund.elementAt(i));
						TOTAL_PAID_REFUND.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))));
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");
					}
					}
					else
					{
						TOTAL_PAID_REFUND.add("-");	
						temp_tot_pay_refund.add("0");
					}
				}
				else
				{
					TOTAL_PAID_REFUND.add("-");	
					temp_tot_pay_refund.add("0");
				}
				
				if(final_cd<0)
				{
					CUSTOM_JBB.add(nf3.format(provisional_cd+final_cd));
					CUSTOM_PROVISIONS.add(nf3.format((-1)*final_cd));
					purchase_total_custom_jbb += (provisional_cd+final_cd);
					purchase_total_custom_provisions += ((-1)*final_cd);
				}
				else
				{
					CUSTOM_JBB.add("-");
					CUSTOM_PROVISIONS.add("-");
				}
			}
			
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{										
				if(!(""+FINAL_SELLER_INV_AMT_INR.elementAt(i)).equals("-") && temp_inv_amt.elementAt(i)!=null && !temp_inv_amt.elementAt(i).equals("") && !temp_inv_amt.elementAt(i).equals("0") && temp_tot_cd_amt.elementAt(i)!=null && !temp_tot_cd_amt.elementAt(i).equals("") && !temp_tot_cd_amt.elementAt(i).equals("0"))
				{
					temp_cd_paid.add(nf.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					CD_PAID.add(nf3.format(Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)))));
					double total_amt = Double.parseDouble(""+final_seller_amt.elementAt(i))+(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i)))+(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i)));
					
					if(!(""+ACTUAL_UNLOADED_QTY.elementAt(i)).equals("-"))
					{
						if(Double.parseDouble((""+unloaded_qty.elementAt(i)))>0)
						{
							INR_PER_MMBTU.add(nf2.format(total_amt/Double.parseDouble((""+unloaded_qty.elementAt(i)))));
						}
						else
						{
							INR_PER_MMBTU.add("-");
						}
					}
					else
					{
						INR_PER_MMBTU.add("-");
					}
				}
				else
				{
					temp_cd_paid.add("0");
					CD_PAID.add("-");
					INR_PER_MMBTU.add("-");
				}
				
				double cd_usd = 0;
				double addl_cd_usd = 0;
				double total_cost = 0;
				double usd_per_mmbtu = 0;
				
				if(!(""+temp_tot_cd_amt.elementAt(i)).equals("0") && !(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i)).equals("-"))
				{
					CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i))));
					cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_cd_amt.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i))));
					purchase_total_cd_usd += Double.parseDouble(nf.format(cd_usd));
				}
				else
				{
					CUSTOM_DUTY_USD.add("-");
				}
				
				if(!(""+temp_tot_pay_refund.elementAt(i)).equals("0") && !(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i)).equals("-"))
				{
					ADDL_CUSTOM_DUTY_USD.add(nf3.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i))));
					addl_cd_usd = Double.parseDouble(nf.format(Double.parseDouble(""+temp_tot_pay_refund.elementAt(i))/Double.parseDouble(""+GROUP_FOREIGN_EXCHG_RATE.elementAt(i))));
					purchase_total_addl_cd_usd += Double.parseDouble(nf.format(addl_cd_usd));
				}
				else
				{
					ADDL_CUSTOM_DUTY_USD.add("-");
				}
				
				total_cost = Double.parseDouble(""+temp_inv_amt.elementAt(i)) + cd_usd + addl_cd_usd;
				purchase_total_inv_value_usd += Double.parseDouble(nf.format(Double.parseDouble(""+temp_inv_amt.elementAt(i))));
				
				if(total_cost>0 && Double.parseDouble(""+unloaded_qty.elementAt(i))>0)
				{
					usd_per_mmbtu = total_cost/Double.parseDouble(""+unloaded_qty.elementAt(i));
				}
				
				if(total_cost>0)
				{
					COST_OF_PURCHASE_USD.add(nf3.format(total_cost));
					purchase_total_cost_usd += Double.parseDouble(nf.format(total_cost));
				}
				else
				{
					COST_OF_PURCHASE_USD.add("-");
				}
				
				if(usd_per_mmbtu>0)
				{
					USD_PER_MMBTU.add(nf2.format(usd_per_mmbtu));
				}
				else
				{
					USD_PER_MMBTU.add("-");
				}
			}																						
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Provisional_Purchase_Details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void get_Sales_dtls_partial()
	{

		try
		{	
			//System.out.println("Inside --> get_Sales_dtls_partial() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
																	
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
						
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='S' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='S' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
								
				String contract_no = "";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
					
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
			}
			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='L' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='L' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
			}
			
			
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
					
			
			start_index_2 = end_index_1+1;
			end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			
			////System.out.println("start_index_2 = "+start_index_2+",  And  end_index_2 = "+end_index_2);
			
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			
			
			Final_sum_tcq = nf.format(sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_details_partial() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	//Introduce By Milan Dalsaniya on MD20111229
	private String get_tot(String itm)
	{
		double val = 0;
		String chk = "";
		if(!itm.equals("-") && (!itm.equals("")))
		{
			val = Double.parseDouble(itm.replaceAll("," , ""));
			chk = "y";
		}
		else
		{
			val = 0;
			chk = "-";
		}
		return chk+"#"+val;
	}
	//Introduce By Milan Dalsaniya on MD20111229	
	private void add_val(Vector v, double val, NumberFormat frmt, String chk)
	{
		if(chk.contains("y"))
		{
			v.add(frmt.format(val));
		}
		else
		{
			v.add("-");
		}
		////System.out.println(v);
	}
	
	public void get_Sales_Summary_old_20151125()
	{


		try {
			//System.out.println("11"+SN_NO);
			//System.out.println(SUMMRY_CONT_TYP);
			//System.out.println(SN_NO.size());
			//System.out.println(SUMMRY_CONT_TYP.size());
			//System.out.println(MONTH);
			//System.out.println(start_index_1);
			//System.out.println(end_index_1);
			//System.out.println(start_index_2);
			//System.out.println(end_index_2);
			summry_start_index_1 = start_index_1;
			summry_end_index_1 = 0;
			
			
			if(!MONTH.isEmpty())
			{
				String chk1 = "";
				String chk2 = "";
				String chk3 = "";
				String chk4 = "";
				String chk5 = "";
				String chk6 = "";
				String chk7 = "";
				String chk8 = "";
				String chk9 = "";
				String chk10 = "";
				String chk11 = "";
				String chk12 = "";
				String chk13 = "";
				String chk14 = "";
				String chk15 = "";
				String chk16 = "";
				String chk17 = "";
				String chk18 = "";
				String chk19 = "";
				String chk20 = "";
				String chk21="";
				
				
				String month = MONTH.elementAt(0).toString().trim();
				String cont_typ = SUMMRY_CONT_TYP.elementAt(0).toString().trim();
				double tcq = 0;
				double rem_supply = 0;
				double tot_qty = 0;
				double gross_amt_usd = 0;
				double gross_amt_inr = 0;
				double vat_amt = 0;
				double add_tax = 0;
				double sales_tax_amt = 0;
				double service_tax = 0;
				double edu_cess_tax = 0;
				double hedu_cess_tax = 0;
				double net_amt_inr = 0;
				double gross_amt_usd_group_for_exchg = 0;
				double vat_amt_usd = 0;
				double add_tax_usd = 0;
				double sales_tax_amt_usd = 0;
				double sevice_tax_usd = 0;
				double edu_cess_tax_usd = 0;
				double hedu_cess_tax_usd = 0;
				double net_amt_usd = 0;
				double tax_amt_inr = 0;
				//NET_AMT_USD
				for(int i=0; i<MONTH.size(); i++)
			  	{ 
					//kkk
					if(month.equals(MONTH.elementAt(i).toString().trim()) && cont_typ.equals(SUMMRY_CONT_TYP.elementAt(i).toString().trim()))
					{
						String val1[] = get_tot(TCQ.elementAt(i).toString().trim()).split("#");
						tcq += Double.parseDouble(val1[1]);
						chk1 += val1[0];
						
						String val2[] = get_tot(REM_SUPPLY.elementAt(i).toString().trim()).split("#");
						rem_supply += Double.parseDouble(val2[1]);
						chk2 += val2[0];
						
						String val3[] = get_tot(TOTAL_QTY.elementAt(i).toString().trim()).split("#");
						tot_qty += Double.parseDouble(val3[1]);
						chk3 += val3[0];
						
						String val4[] = get_tot(GROSS_AMT_USD.elementAt(i).toString().trim()).split("#");
						gross_amt_usd += Double.parseDouble(val4[1]);
						chk4 += val4[0];
						
						String val5[] = get_tot(GROSS_AMT_INR.elementAt(i).toString().trim()).split("#");
						gross_amt_inr += Double.parseDouble(val5[1]);
						chk5 += val5[0];
						
						String val6[] = get_tot(VAT_AMT.elementAt(i).toString().trim()).split("#");
						vat_amt += Double.parseDouble(val6[1]);
						chk6 += val6[0];
						
						String val7[] = get_tot(ADD_TAX.elementAt(i).toString().trim()).split("#");
						add_tax += Double.parseDouble(val7[1]);
						chk7 += val7[0];
						
						String val8[] = get_tot(SALES_TAX_AMT.elementAt(i).toString().trim()).split("#");
						sales_tax_amt += Double.parseDouble(val8[1]);
						chk8 += val8[0];

						String val9[] = get_tot(SERVICE_TAX.elementAt(i).toString().trim()).split("#");
						service_tax += Double.parseDouble(val9[1]);
						chk9 += val9[0];
						
						String val10[] = get_tot(EDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
						edu_cess_tax += Double.parseDouble(val10[1]);
						chk10 += val10[0];
						
						String val11[] = get_tot(HEDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
						hedu_cess_tax += Double.parseDouble(val11[1]);
						chk11 += val11[0];
						
						String val12[] = get_tot(NET_AMT_INR.elementAt(i).toString().trim()).split("#");
						net_amt_inr += Double.parseDouble(val12[1]);
						chk12 += val12[0];
						
						String val13[] = get_tot(GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(i).toString().trim()).split("#");
						gross_amt_usd_group_for_exchg += Double.parseDouble(val13[1]);
						chk13 += val13[0];
						
						String val14[] = get_tot(VAT_AMT_USD.elementAt(i).toString().trim()).split("#");
						vat_amt_usd += Double.parseDouble(val14[1]);
						chk14 += val14[0];
						
						String val15[] = get_tot(ADD_TAX_USD.elementAt(i).toString().trim()).split("#");
						add_tax_usd += Double.parseDouble(val15[1]);
						chk15 += val15[0];
						
						String val16[] = get_tot(SALES_TAX_AMT_USD.elementAt(i).toString().trim()).split("#");
						sales_tax_amt_usd += Double.parseDouble(val16[1]);
						chk16 += val16[0];
						
						String val17[] = get_tot(SERVICE_TAX_USD.elementAt(i).toString().trim()).split("#");
						sevice_tax_usd += Double.parseDouble(val17[1]);
						chk17 += val17[0];
						
						String val18[] = get_tot(EDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
						edu_cess_tax_usd += Double.parseDouble(val18[1]);
						chk18 += val18[0];
						
						String val19[] = get_tot(HEDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
						hedu_cess_tax_usd += Double.parseDouble(val19[1]);
						chk19 += val19[0];
						
						String val20[] = get_tot(NET_AMT_USD.elementAt(i).toString().trim()).split("#");
						net_amt_usd += Double.parseDouble(val20[1]);
						chk20 += val20[0];
						
						String val21[] = get_tot(TAX_AMT_INR.elementAt(i).toString().trim()).split("#");
						tax_amt_inr += Double.parseDouble(val21[1]);
						chk21 += val21[0];
						
						//System.out.println(i+" if "+month+" = "+MONTH.elementAt(i).toString().trim()+" "+cont_typ+" "+SUMMRY_CONT_TYP.elementAt(i));
						//
					}
					else
					{
//						//System.out.println(i+" else "+month+" != "+MONTH.elementAt(i).toString().trim()+" "+cont_typ+" "+SUMMRY_CONT_TYP.elementAt(i));
						SUMMRY_MONTH.add(month);
						if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("S"))
						{
							summry_end_index_1++;
							summry_end_index_2 = summry_end_index_1;
							summry_end_index_3 = summry_end_index_2;//ADDED FOR LTCORA AND CN
							
//							//System.out.println("SS "+summry_end_index_1+"--"+summry_end_index_2+"<-->"+summry_end_index_3);
						}
						else if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("R"))
						{
							
							summry_end_index_2 = summry_end_index_2+1;
							summry_end_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
//							//System.out.println("RR "+summry_end_index_2+"<-->"+summry_end_index_3);
						}
						else if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("T"))//ADDED FOR LTCORA AND CN
						{
							
							summry_end_index_3 = summry_end_index_3+1;
//							//System.out.println("TT "+summry_end_index_3);
						}
						add_val(SUMMRY_TCQ, tcq, nf3, chk1);
						
						add_val(SUMMRY_REM_SUPPLY, rem_supply, nf3, chk2);
						add_val(SUMMRY_TOTAL_QTY, tot_qty, nf3, chk3);
						add_val(SUMMRY_GROSS_AMT_USD, gross_amt_usd, nf3, chk4);
						add_val(SUMMRY_GROSS_AMT_INR, gross_amt_inr, nf3, chk5);
						add_val(SUMMRY_VAT_AMT, vat_amt, nf3, chk6);
						add_val(SUMMRY_ADD_TAX, add_tax, nf3, chk7);
						add_val(SUMMRY_SALES_TAX_AMT, sales_tax_amt, nf3, chk8);
						add_val(SUMMRY_SERVICE_TAX, service_tax, nf3, chk9);
						add_val(SUMMRY_EDU_CESS_TAX, edu_cess_tax, nf3, chk10);
						
						if(tot_qty != 0)
						{
							SUMMRY_inr_per_mmbtu.add(nf2.format(gross_amt_inr/tot_qty));
							SUMMRY_SALE_PRICE.add(nf2.format(gross_amt_usd_group_for_exchg/tot_qty));
						}
						else
						{
							SUMMRY_inr_per_mmbtu.add("-");
							SUMMRY_SALE_PRICE.add("-");
						}
						
						add_val(SUMMRY_HEDU_CESS_TAX, hedu_cess_tax, nf3, chk11);
						add_val(SUMMRY_NET_AMT_INR, net_amt_inr, nf3, chk12);
						add_val(SUMMRY_TAX_AMT_INR, tax_amt_inr, nf3, chk21);
						add_val(SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG, gross_amt_usd_group_for_exchg, nf3, chk13);
						add_val(SUMMRY_VAT_AMT_USD, vat_amt_usd, nf3, chk14);
						add_val(SUMMRY_ADD_TAX_USD, add_tax_usd, nf3, chk15);
						add_val(SUMMRY_SALES_TAX_AMT_USD, sales_tax_amt_usd, nf3, chk16);
						add_val(SUMMRY_SERVICE_TAX_USD, sevice_tax_usd, nf3, chk17);
						add_val(SUMMRY_EDU_CESS_TAX_USD, edu_cess_tax_usd, nf3, chk18);
						add_val(SUMMRY_HEDU_CESS_TAX_USD, hedu_cess_tax_usd, nf3, chk19);
						add_val(SUMMRY_NET_AMT_USD, net_amt_usd, nf3, chk20);
						//=========================================================================
						String item[] = get_tot(TCQ.elementAt(i).toString().trim()).split("#");
						tcq = Double.parseDouble(item[1]);
						chk1 = item[0];
						
						String val2[] = get_tot(REM_SUPPLY.elementAt(i).toString().trim()).split("#");
						rem_supply = Double.parseDouble(val2[1]);
						chk2 = val2[0];
						
						String val3[] = get_tot(TOTAL_QTY.elementAt(i).toString().trim()).split("#");
						tot_qty = Double.parseDouble(val3[1]);
						chk3 = val3[0];
						
						String val4[] = get_tot(GROSS_AMT_USD.elementAt(i).toString().trim()).split("#");
						gross_amt_usd = Double.parseDouble(val4[1]);
						chk4 = val4[0];
						
						String val5[] = get_tot(GROSS_AMT_INR.elementAt(i).toString().trim()).split("#");
						gross_amt_inr = Double.parseDouble(val5[1]);
						chk5 = val5[0];
						
						String val6[] = get_tot(VAT_AMT.elementAt(i).toString().trim()).split("#");
						vat_amt = Double.parseDouble(val6[1]);
						chk6 = val6[0];
						
						String val7[] = get_tot(ADD_TAX.elementAt(i).toString().trim()).split("#");
						add_tax = Double.parseDouble(val7[1]);
						chk7 = val7[0];
						
						String val8[] = get_tot(SALES_TAX_AMT.elementAt(i).toString().trim()).split("#");
						sales_tax_amt = Double.parseDouble(val8[1]);
						chk8 = val8[0];

						String val9[] = get_tot(SERVICE_TAX.elementAt(i).toString().trim()).split("#");
						service_tax = Double.parseDouble(val9[1]);
						chk9 = val9[0];
						
						String val10[] = get_tot(EDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
						edu_cess_tax = Double.parseDouble(val10[1]);
						chk10 = val10[0];
						
						String val11[] = get_tot(HEDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
						hedu_cess_tax = Double.parseDouble(val11[1]);
						chk11 = val11[0];
						
						String val12[] = get_tot(NET_AMT_INR.elementAt(i).toString().trim()).split("#");
						net_amt_inr = Double.parseDouble(val12[1]);
						chk12 = val12[0];
						
						String val13[] = get_tot(GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(i).toString().trim()).split("#");
						gross_amt_usd_group_for_exchg = Double.parseDouble(val13[1]);
						chk13 = val13[0];
						
						String val14[] = get_tot(VAT_AMT_USD.elementAt(i).toString().trim()).split("#");
						vat_amt_usd = Double.parseDouble(val14[1]);
						chk14 = val14[0];
						
						String val15[] = get_tot(ADD_TAX_USD.elementAt(i).toString().trim()).split("#");
						add_tax_usd = Double.parseDouble(val15[1]);
						chk15 = val15[0];
						
						String val16[] = get_tot(SALES_TAX_AMT_USD.elementAt(i).toString().trim()).split("#");
						sales_tax_amt_usd = Double.parseDouble(val16[1]);
						chk16 = val16[0];
						
						String val17[] = get_tot(SERVICE_TAX_USD.elementAt(i).toString().trim()).split("#");
						sevice_tax_usd = Double.parseDouble(val17[1]);
						chk17 = val17[0];
						
						String val18[] = get_tot(EDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
						edu_cess_tax_usd = Double.parseDouble(val18[1]);
						chk18 = val18[0];
						
						String val19[] = get_tot(HEDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
						hedu_cess_tax_usd = Double.parseDouble(val19[1]);
						chk19 = val19[0];
						
						String val20[] = get_tot(NET_AMT_USD.elementAt(i).toString().trim()).split("#");
						net_amt_usd = Double.parseDouble(val20[1]);
						chk20 = val20[0];
						
						String val21[] = get_tot(TAX_AMT_INR.elementAt(i).toString().trim()).split("#");
						tax_amt_inr += Double.parseDouble(val21[1]);
						chk21 += val21[0];
					}
					
					month = MONTH.elementAt(i).toString().trim();
					cont_typ = SUMMRY_CONT_TYP.elementAt(i).toString().trim();
			  	}
				//System.out.println("Month-->"+month);
				SUMMRY_MONTH.add(month);
				add_val(SUMMRY_TCQ, tcq, nf3, chk1);
				
				add_val(SUMMRY_REM_SUPPLY, rem_supply, nf3, chk2);
				add_val(SUMMRY_TOTAL_QTY, tot_qty, nf3, chk3);
				add_val(SUMMRY_GROSS_AMT_USD, gross_amt_usd, nf3, chk4);
				add_val(SUMMRY_GROSS_AMT_INR, gross_amt_inr, nf3, chk5);
				add_val(SUMMRY_VAT_AMT, vat_amt, nf3, chk6);
				add_val(SUMMRY_ADD_TAX, add_tax, nf3, chk7);
				add_val(SUMMRY_SALES_TAX_AMT, sales_tax_amt, nf3, chk8);
				add_val(SUMMRY_SERVICE_TAX, service_tax, nf3, chk9);
				add_val(SUMMRY_EDU_CESS_TAX, edu_cess_tax, nf3, chk10);
				
				if(tot_qty != 0)
				{
					SUMMRY_inr_per_mmbtu.add(nf2.format(gross_amt_inr/tot_qty));
					SUMMRY_SALE_PRICE.add(nf2.format(gross_amt_usd_group_for_exchg/tot_qty));
				}
				else
				{
					SUMMRY_inr_per_mmbtu.add("-");
					SUMMRY_SALE_PRICE.add("-");
				}
				
				add_val(SUMMRY_HEDU_CESS_TAX, hedu_cess_tax, nf3, chk11);
				add_val(SUMMRY_NET_AMT_INR, net_amt_inr, nf3, chk12);
				add_val(SUMMRY_TAX_AMT_INR, tax_amt_inr, nf3, chk21);
				add_val(SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG, gross_amt_usd_group_for_exchg, nf3, chk13);
				add_val(SUMMRY_VAT_AMT_USD, vat_amt_usd, nf3, chk14);
				add_val(SUMMRY_ADD_TAX_USD, add_tax_usd, nf3, chk15);
				add_val(SUMMRY_SALES_TAX_AMT_USD, sales_tax_amt_usd, nf3, chk16);
				add_val(SUMMRY_SERVICE_TAX_USD, sevice_tax_usd, nf3, chk17);
				add_val(SUMMRY_EDU_CESS_TAX_USD, edu_cess_tax_usd, nf3, chk18);
				add_val(SUMMRY_HEDU_CESS_TAX_USD, hedu_cess_tax_usd, nf3, chk19);
				add_val(SUMMRY_NET_AMT_USD, net_amt_usd, nf3, chk20);
				
				if(For1.equals("REGAS"))
				{
					summry_start_index_2 = 0;
					summry_start_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
				}
				else if(For1.equals("LTCORA_CN"))
				{
					summry_start_index_3 = 0;
				}
				else
				{
					summry_start_index_2 = summry_end_index_1+1;
					summry_start_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
				}
				//summry_end_index_1++;
				//summry_start_index_2++;
				//summry_end_index_2++;
				//summry_start_index_3++;
				//summry_end_index_3++;
//				//System.out.println("======");
//				//System.out.println(summry_start_index_1);
//				//System.out.println(summry_end_index_1);
//				//System.out.println(summry_start_index_2);
//				//System.out.println(summry_end_index_2);
//				//System.out.println(summry_start_index_3);
//				//System.out.println(summry_end_index_3);
			}
			
			
//			//System.out.println(SUMMRY_TCQ);
//			//System.out.println(SUMMRY_MONTH);
		
		} catch (NumberFormatException e) {
			//System.out.println("Exception generated from get_Sales_Summary() "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	
	//Introduce By Milan Dalsaniya on MD20111229
	public void get_Sales_Summary()			//BK20151125	//* Added new SBC value here
	{

		try {////System.out.println("11"+SN_NO);
			//	//System.out.println(SUMMRY_CONT_TYP);
			//	//System.out.println(SN_NO.size());
			//	//System.out.println(SUMMRY_CONT_TYP.size());
			//	//System.out.println(MONTH);
			//	//System.out.println(start_index_1);
			//	//System.out.println(end_index_1);
			//	//System.out.println(start_index_2);
			//	//System.out.println(end_index_2);
				summry_start_index_1 = start_index_1;
				summry_end_index_1 = 0;
				
				
				if(!MONTH.isEmpty())
				{
					String chk1 = "";
					String chk2 = "";
					String chk3 = "";
					String chk4 = "";
					String chk5 = "";
					String chk6 = "";
					String chk7 = "";
					String chk8 = "";
					String chk9 = "";
					String chk10 = "";
					String chk11 = "";
					String chk12 = "";
					String chk13 = "";
					String chk14 = "";
					String chk15 = "";
					String chk16 = "";
					String chk17 = "";
					String chk18 = "";
					String chk19 = "";
					String chk20 = "";
					String chk21="";
					String chk22 = "";
					String chk23="";
					String chk24=""; //IGST
					String chk25="";
					String chk26="";
					String chk27 = "";
					String chk28 = "", chk29 = "", chk30 = "", chk31 = "";
					String chk32="";
					
					String month = MONTH.elementAt(0).toString().trim();
					String cont_typ = SUMMRY_CONT_TYP.elementAt(0).toString().trim();
					double tcq = 0;
					double rem_supply = 0;
					double tot_qty = 0;
					double gross_amt_usd = 0;
					double gross_amt_inr = 0;
					double vat_amt = 0;
					double add_tax = 0;
					double sales_tax_amt = 0;
					double service_tax = 0;
					double sbc_tax = 0;
					double edu_cess_tax = 0;
					double hedu_cess_tax = 0;
					double igst_tax = 0;
					double cgst_tax = 0;
					double sgst_tax = 0;
					double zgst_tax = 0;
					double net_amt_inr = 0;
					double gross_amt_usd_group_for_exchg = 0;
					double vat_amt_usd = 0;
					double add_tax_usd = 0;
					double sales_tax_amt_usd = 0;
					double sevice_tax_usd = 0;
					double sbc_tax_usd = 0;
					double edu_cess_tax_usd = 0;
					double hedu_cess_tax_usd = 0;
					double igst_tax_usd = 0;
					double sgst_tax_usd = 0;
					double cgst_tax_usd = 0;
					double zgst_tax_usd = 0;
					double net_amt_usd = 0;
					double tax_amt_inr = 0;
					double tax_tcs_inr=0;
					//NET_AMT_USD
					for(int i=0; i<MONTH.size(); i++)
				  	{ 
						//kkk
						if(month.equals(MONTH.elementAt(i).toString().trim()) && cont_typ.equals(SUMMRY_CONT_TYP.elementAt(i).toString().trim()))
						{
							String val1[] = get_tot(TCQ.elementAt(i).toString().trim()).split("#");
							tcq += Double.parseDouble(val1[1]);
							chk1 += val1[0];
							
							String val2[] = get_tot(REM_SUPPLY.elementAt(i).toString().trim()).split("#");
							rem_supply += Double.parseDouble(val2[1]);
							chk2 += val2[0];
							
							String val3[] = get_tot(TOTAL_QTY.elementAt(i).toString().trim()).split("#");
							tot_qty += Double.parseDouble(val3[1]);
							chk3 += val3[0];
							
							String val4[] = get_tot(GROSS_AMT_USD.elementAt(i).toString().trim()).split("#");
							gross_amt_usd += Double.parseDouble(val4[1]);
							chk4 += val4[0];
							
							String val5[] = get_tot(GROSS_AMT_INR.elementAt(i).toString().trim()).split("#");
							gross_amt_inr += Double.parseDouble(val5[1]);
							chk5 += val5[0];
							
							String val6[] = get_tot(VAT_AMT.elementAt(i).toString().trim()).split("#");
							vat_amt += Double.parseDouble(val6[1]);
							chk6 += val6[0];
							
							String val7[] = get_tot(ADD_TAX.elementAt(i).toString().trim()).split("#");
							add_tax += Double.parseDouble(val7[1]);
							chk7 += val7[0];
							
							String val8[] = get_tot(SALES_TAX_AMT.elementAt(i).toString().trim()).split("#");
							sales_tax_amt += Double.parseDouble(val8[1]);
							chk8 += val8[0];

							String val9[] = get_tot(SERVICE_TAX.elementAt(i).toString().trim()).split("#");
							service_tax += Double.parseDouble(val9[1]);
							chk9 += val9[0];
							
							String val22[] = get_tot(SBC_TAX.elementAt(i).toString().trim()).split("#");
							sbc_tax += Double.parseDouble(val22[1]);
							chk22 += val22[0];
//							System.out.println("IGST_TAX.elementAt(i).----------"+IGST_TAX.elementAt(i));
							String val24[] = get_tot(IGST_TAX.elementAt(i).toString().trim()).split("#");
							igst_tax += Double.parseDouble(val24[1]);
							chk24 += val24[0];
							
							String val25[] = get_tot(SGST_TAX.elementAt(i).toString().trim()).split("#");
							sgst_tax += Double.parseDouble(val25[1]);
							chk25 += val25[0];
							
							String val26[] = get_tot(CGST_TAX.elementAt(i).toString().trim()).split("#");
							cgst_tax += Double.parseDouble(val26[1]);
							chk26 += val26[0];
							
							String val27[] = get_tot(ZGST_TAX.elementAt(i).toString().trim()).split("#");
							zgst_tax += Double.parseDouble(val27[1]);
							chk27 += val27[0];
							
							String val10[] = get_tot(EDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
							edu_cess_tax += Double.parseDouble(val10[1]);
							chk10 += val10[0];
							
							String val11[] = get_tot(HEDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
							hedu_cess_tax += Double.parseDouble(val11[1]);
							chk11 += val11[0];
							
							String val12[] = get_tot(NET_AMT_INR.elementAt(i).toString().trim()).split("#");
							net_amt_inr += Double.parseDouble(val12[1]);
							chk12 += val12[0];
							
							String val13[] = get_tot(GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(i).toString().trim()).split("#");
							gross_amt_usd_group_for_exchg += Double.parseDouble(val13[1]);
							chk13 += val13[0];
							
							String val14[] = get_tot(VAT_AMT_USD.elementAt(i).toString().trim()).split("#");
							vat_amt_usd += Double.parseDouble(val14[1]);
							chk14 += val14[0];
							
							String val15[] = get_tot(ADD_TAX_USD.elementAt(i).toString().trim()).split("#");
							add_tax_usd += Double.parseDouble(val15[1]);
							chk15 += val15[0];
							
							String val16[] = get_tot(SALES_TAX_AMT_USD.elementAt(i).toString().trim()).split("#");
							sales_tax_amt_usd += Double.parseDouble(val16[1]);
							chk16 += val16[0];
							
							String val17[] = get_tot(SERVICE_TAX_USD.elementAt(i).toString().trim()).split("#");
							sevice_tax_usd += Double.parseDouble(val17[1]);
							chk17 += val17[0];
							
							String val23[] = get_tot(SBC_TAX_USD.elementAt(i).toString().trim()).split("#");
							sbc_tax_usd += Double.parseDouble(val23[1]);
							chk23 += val23[0];
							
							String val28[] = get_tot(IGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							igst_tax_usd += Double.parseDouble(val28[1]);
							chk28 += val28[0];
							
							String val29[] = get_tot(SGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							sgst_tax_usd += Double.parseDouble(val29[1]);
							chk29 += val29[0];
							
							String val30[] = get_tot(CGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							cgst_tax_usd += Double.parseDouble(val30[1]);
							chk30 += val30[0];
							
							String val31[] = get_tot(ZGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							zgst_tax_usd += Double.parseDouble(val31[1]);
							chk31 += val31[0];
							
							String val18[] = get_tot(EDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
							edu_cess_tax_usd += Double.parseDouble(val18[1]);
							chk18 += val18[0];
							
							String val19[] = get_tot(HEDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
							hedu_cess_tax_usd += Double.parseDouble(val19[1]);
							chk19 += val19[0];
							
							String val20[] = get_tot(NET_AMT_USD.elementAt(i).toString().trim()).split("#");
							net_amt_usd += Double.parseDouble(val20[1]);
							chk20 += val20[0];
							
							String val21[] = get_tot(TAX_AMT_INR.elementAt(i).toString().trim()).split("#");
							tax_amt_inr += Double.parseDouble(val21[1]);
							chk21 += val21[0];
							
							String val32[] = get_tot(Vtcs_amt.elementAt(i).toString().trim()).split("#");
							tax_tcs_inr += Double.parseDouble(val32[1]);
							chk32 += val32[0];
							
						//	//System.out.println(i+" if "+month+" = "+MONTH.elementAt(i).toString().trim()+" "+cont_typ+" "+SUMMRY_CONT_TYP.elementAt(i));
							//
						}
						else
						{
						//	//System.out.println(i+" else "+month+" != "+MONTH.elementAt(i).toString().trim()+" "+cont_typ+" "+SUMMRY_CONT_TYP.elementAt(i));
							SUMMRY_MONTH.add(month);
							if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("S"))
							{
								summry_end_index_1++;
								summry_end_index_2 = summry_end_index_1;
								summry_end_index_3 = summry_end_index_2;//ADDED FOR LTCORA AND CN
								
						//		//System.out.println("SS "+summry_end_index_1+"--"+summry_end_index_2+"<-->"+summry_end_index_3);
							}
							else if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("R"))
							{
								
								summry_end_index_2 = summry_end_index_2+1;
								summry_end_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
						//		//System.out.println("RR "+summry_end_index_2+"<-->"+summry_end_index_3);
							}
							else if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("T"))//ADDED FOR LTCORA AND CN
							{
								
								summry_end_index_3 = summry_end_index_3+1;
						//		//System.out.println("TT "+summry_end_index_3);
							}
							else if(SUMMRY_CONT_TYP.elementAt(i).toString().trim().equalsIgnoreCase("E"))//ADDED FOR LTCORA AND CN
							{
								
								summry_end_index_5 = summry_end_index_5+1;
						//		//System.out.println("TT "+summry_end_index_3);
							}
							add_val(SUMMRY_TCQ, tcq, nf3, chk1);
							
							add_val(SUMMRY_REM_SUPPLY, rem_supply, nf3, chk2);
							add_val(SUMMRY_TOTAL_QTY, tot_qty, nf3, chk3);
							add_val(SUMMRY_GROSS_AMT_USD, gross_amt_usd, nf3, chk4);
							add_val(SUMMRY_GROSS_AMT_INR, gross_amt_inr, nf3, chk5);
							add_val(SUMMRY_VAT_AMT, vat_amt, nf3, chk6);
							add_val(SUMMRY_ADD_TAX, add_tax, nf3, chk7);
							add_val(SUMMRY_SALES_TAX_AMT, sales_tax_amt, nf3, chk8);
							add_val(SUMMRY_TAX_TCS_AMT, tax_tcs_inr, nf3, chk32);
							add_val(SUMMRY_SERVICE_TAX, service_tax, nf3, chk9);
							add_val(SUMMRY_SBC_TAX, sbc_tax, nf3, chk22);
							add_val(SUMMRY_EDU_CESS_TAX, edu_cess_tax, nf3, chk10);
							
							
							if(tot_qty != 0)
							{
								SUMMRY_inr_per_mmbtu.add(nf2.format(gross_amt_inr/tot_qty));
								SUMMRY_SALE_PRICE.add(nf2.format(gross_amt_usd_group_for_exchg/tot_qty));
							}
							else
							{
								SUMMRY_inr_per_mmbtu.add("-");
								SUMMRY_SALE_PRICE.add("-");
							}
							
							add_val(SUMMRY_HEDU_CESS_TAX, hedu_cess_tax, nf3, chk11);
							add_val(SUMMRY_NET_AMT_INR, net_amt_inr, nf3, chk12);
							add_val(SUMMRY_TAX_AMT_INR, tax_amt_inr, nf3, chk21);
							add_val(SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG, gross_amt_usd_group_for_exchg, nf3, chk13);
							add_val(SUMMRY_VAT_AMT_USD, vat_amt_usd, nf3, chk14);
							add_val(SUMMRY_ADD_TAX_USD, add_tax_usd, nf3, chk15);
							add_val(SUMMRY_SALES_TAX_AMT_USD, sales_tax_amt_usd, nf3, chk16);
							add_val(SUMMRY_SERVICE_TAX_USD, sevice_tax_usd, nf3, chk17);
							add_val(SUMMRY_SBC_TAX_USD, sbc_tax_usd, nf3, chk23);
							add_val(SUMMRY_EDU_CESS_TAX_USD, edu_cess_tax_usd, nf3, chk18);
							add_val(SUMMRY_HEDU_CESS_TAX_USD, hedu_cess_tax_usd, nf3, chk19);
							add_val(SUMMRY_NET_AMT_USD, net_amt_usd, nf3, chk20);
							add_val(SUMMRY_IGST_TAX,igst_tax,nf3,chk24);
							add_val(SUMMRY_SGST_TAX,sgst_tax,nf3,chk25);
							add_val(SUMMRY_CGST_TAX,cgst_tax,nf3,chk26);
							add_val(SUMMRY_ZGST_TAX,zgst_tax,nf3,chk27);
							add_val(SUMMRY_IGST_TAX_USD,igst_tax_usd,nf3,chk28);
							add_val(SUMMRY_SGST_TAX_USD,sgst_tax_usd,nf3,chk29);
							add_val(SUMMRY_CGST_TAX_USD,cgst_tax_usd,nf3,chk30);
							add_val(SUMMRY_ZGST_TAX_USD,zgst_tax_usd,nf3,chk31);
							//=========================================================================
							String item[] = get_tot(TCQ.elementAt(i).toString().trim()).split("#");
							tcq = Double.parseDouble(item[1]);
							chk1 = item[0];
							
							String val2[] = get_tot(REM_SUPPLY.elementAt(i).toString().trim()).split("#");
							rem_supply = Double.parseDouble(val2[1]);
							chk2 = val2[0];
							
							String val3[] = get_tot(TOTAL_QTY.elementAt(i).toString().trim()).split("#");
							tot_qty = Double.parseDouble(val3[1]);
							chk3 = val3[0];
							
							String val4[] = get_tot(GROSS_AMT_USD.elementAt(i).toString().trim()).split("#");
							gross_amt_usd = Double.parseDouble(val4[1]);
							chk4 = val4[0];
							
							String val5[] = get_tot(GROSS_AMT_INR.elementAt(i).toString().trim()).split("#");
							gross_amt_inr = Double.parseDouble(val5[1]);
							chk5 = val5[0];
							
							String val6[] = get_tot(VAT_AMT.elementAt(i).toString().trim()).split("#");
							vat_amt = Double.parseDouble(val6[1]);
							chk6 = val6[0];
							
							String val7[] = get_tot(ADD_TAX.elementAt(i).toString().trim()).split("#");
							add_tax = Double.parseDouble(val7[1]);
							chk7 = val7[0];
							
							String val8[] = get_tot(SALES_TAX_AMT.elementAt(i).toString().trim()).split("#");
							sales_tax_amt = Double.parseDouble(val8[1]);
							chk8 = val8[0];
							
							String val32[] = get_tot(Vtcs_amt.elementAt(i).toString().trim()).split("#");
							tax_tcs_inr = Double.parseDouble(val32[1]);
							chk32 = val32[0];

							String val9[] = get_tot(SERVICE_TAX.elementAt(i).toString().trim()).split("#");
							service_tax = Double.parseDouble(val9[1]);
							chk9 = val9[0];
							
							String val22[] = get_tot(SBC_TAX.elementAt(i).toString().trim()).split("#");
							sbc_tax = Double.parseDouble(val22[1]);
							chk22 = val22[0];
							
							String val10[] = get_tot(EDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
							edu_cess_tax = Double.parseDouble(val10[1]);
							chk10 = val10[0];
							
							String val11[] = get_tot(HEDU_CESS_TAX.elementAt(i).toString().trim()).split("#");
							hedu_cess_tax = Double.parseDouble(val11[1]);
							chk11 = val11[0];
							
							String val12[] = get_tot(NET_AMT_INR.elementAt(i).toString().trim()).split("#");
							net_amt_inr = Double.parseDouble(val12[1]);
							chk12 = val12[0];
							
							String val13[] = get_tot(GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(i).toString().trim()).split("#");
							gross_amt_usd_group_for_exchg = Double.parseDouble(val13[1]);
							chk13 = val13[0];
							
							String val14[] = get_tot(VAT_AMT_USD.elementAt(i).toString().trim()).split("#");
							vat_amt_usd = Double.parseDouble(val14[1]);
							chk14 = val14[0];
							
							String val15[] = get_tot(ADD_TAX_USD.elementAt(i).toString().trim()).split("#");
							add_tax_usd = Double.parseDouble(val15[1]);
							chk15 = val15[0];
							
							String val16[] = get_tot(SALES_TAX_AMT_USD.elementAt(i).toString().trim()).split("#");
							sales_tax_amt_usd = Double.parseDouble(val16[1]);
							chk16 = val16[0];
							
							String val17[] = get_tot(SERVICE_TAX_USD.elementAt(i).toString().trim()).split("#");
							sevice_tax_usd = Double.parseDouble(val17[1]);
							chk17 = val17[0];
							
							String val23[] = get_tot(SBC_TAX_USD.elementAt(i).toString().trim()).split("#");
							sbc_tax_usd = Double.parseDouble(val23[1]);
							chk23 = val23[0];
							
							String val18[] = get_tot(EDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
							edu_cess_tax_usd = Double.parseDouble(val18[1]);
							chk18 = val18[0];
							
							String val19[] = get_tot(HEDU_CESS_TAX_USD.elementAt(i).toString().trim()).split("#");
							hedu_cess_tax_usd = Double.parseDouble(val19[1]);
							chk19 = val19[0];
							
							String val20[] = get_tot(NET_AMT_USD.elementAt(i).toString().trim()).split("#");
							net_amt_usd = Double.parseDouble(val20[1]);
							chk20 = val20[0];
							
							String val21[] = get_tot(TAX_AMT_INR.elementAt(i).toString().trim()).split("#");
							tax_amt_inr += Double.parseDouble(val21[1]);
							chk21 += val21[0];
							
							String val28[] = get_tot(IGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							igst_tax_usd += Double.parseDouble(val28[1]);
							chk28 += val28[0];
							
							String val29[] = get_tot(SGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							sgst_tax_usd += Double.parseDouble(val29[1]);
							chk29 += val29[0];
							
							String val30[] = get_tot(CGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							cgst_tax_usd += Double.parseDouble(val30[1]);
							chk30 += val30[0];
							
							String val31[] = get_tot(ZGST_TAX_USD.elementAt(i).toString().trim()).split("#");
							zgst_tax_usd += Double.parseDouble(val31[1]);
							chk31 += val31[0];
							
							String val24[] = get_tot(IGST_TAX.elementAt(i).toString().trim()).split("#");
							igst_tax += Double.parseDouble(val24[1]);
							chk24 += val24[0];
							
							String val25[] = get_tot(SGST_TAX.elementAt(i).toString().trim()).split("#");
							sgst_tax += Double.parseDouble(val25[1]);
							chk25 += val25[0];
							
							String val26[] = get_tot(CGST_TAX.elementAt(i).toString().trim()).split("#");
							cgst_tax += Double.parseDouble(val26[1]);
							chk26 += val26[0];
							
							String val27[] = get_tot(ZGST_TAX.elementAt(i).toString().trim()).split("#");
							zgst_tax += Double.parseDouble(val27[1]);
							chk27 += val27[0];
						}
						
						month = MONTH.elementAt(i).toString().trim();
						cont_typ = SUMMRY_CONT_TYP.elementAt(i).toString().trim();
				  	}
				//	//System.out.println("Month-->"+month);
					SUMMRY_MONTH.add(month);
					add_val(SUMMRY_TCQ, tcq, nf3, chk1);
					
					add_val(SUMMRY_REM_SUPPLY, rem_supply, nf3, chk2);
					add_val(SUMMRY_TOTAL_QTY, tot_qty, nf3, chk3);
					add_val(SUMMRY_GROSS_AMT_USD, gross_amt_usd, nf3, chk4);
					add_val(SUMMRY_GROSS_AMT_INR, gross_amt_inr, nf3, chk5);
					add_val(SUMMRY_VAT_AMT, vat_amt, nf3, chk6);
					add_val(SUMMRY_ADD_TAX, add_tax, nf3, chk7);
					add_val(SUMMRY_SALES_TAX_AMT, sales_tax_amt, nf3, chk8);
					add_val(SUMMRY_TAX_TCS_AMT, tax_tcs_inr, nf3, chk32);
					add_val(SUMMRY_SERVICE_TAX, service_tax, nf3, chk9);
					add_val(SUMMRY_SBC_TAX, sbc_tax, nf3, chk22);
					add_val(SUMMRY_EDU_CESS_TAX, edu_cess_tax, nf3, chk10);
					add_val(SUMMRY_IGST_TAX,igst_tax,nf3,chk24);
					add_val(SUMMRY_SGST_TAX,sgst_tax,nf3,chk25);
					add_val(SUMMRY_CGST_TAX,cgst_tax,nf3,chk26);
					add_val(SUMMRY_ZGST_TAX,zgst_tax,nf3,chk27);
					add_val(SUMMRY_IGST_TAX_USD,igst_tax_usd,nf3,chk28);
					add_val(SUMMRY_SGST_TAX_USD,sgst_tax_usd,nf3,chk29);
					add_val(SUMMRY_CGST_TAX_USD,cgst_tax_usd,nf3,chk30);
					add_val(SUMMRY_ZGST_TAX_USD,zgst_tax_usd,nf3,chk31);
					
					if(tot_qty != 0)
					{
						SUMMRY_inr_per_mmbtu.add(nf2.format(gross_amt_inr/tot_qty));
						SUMMRY_SALE_PRICE.add(nf2.format(gross_amt_usd_group_for_exchg/tot_qty));
					}
					else
					{
						SUMMRY_inr_per_mmbtu.add("-");
						SUMMRY_SALE_PRICE.add("-");
					}
					
					add_val(SUMMRY_HEDU_CESS_TAX, hedu_cess_tax, nf3, chk11);
					add_val(SUMMRY_NET_AMT_INR, net_amt_inr, nf3, chk12);
					add_val(SUMMRY_TAX_AMT_INR, tax_amt_inr, nf3, chk21);
					add_val(SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG, gross_amt_usd_group_for_exchg, nf3, chk13);
					add_val(SUMMRY_VAT_AMT_USD, vat_amt_usd, nf3, chk14);
					add_val(SUMMRY_ADD_TAX_USD, add_tax_usd, nf3, chk15);
					add_val(SUMMRY_SALES_TAX_AMT_USD, sales_tax_amt_usd, nf3, chk16);
					add_val(SUMMRY_SERVICE_TAX_USD, sevice_tax_usd, nf3, chk17);
					add_val(SUMMRY_SBC_TAX_USD, sbc_tax_usd, nf3, chk23);
					add_val(SUMMRY_EDU_CESS_TAX_USD, edu_cess_tax_usd, nf3, chk18);
					add_val(SUMMRY_HEDU_CESS_TAX_USD, hedu_cess_tax_usd, nf3, chk19);
					add_val(SUMMRY_NET_AMT_USD, net_amt_usd, nf3, chk20);
					
					
					if(For1.equals("REGAS"))
					{
						summry_start_index_2 = 0;
						summry_start_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
					}
					else if(For1.equals("LTCORA_CN"))
					{
						summry_start_index_3 = 0;
					}else if (For1.equals("Deficiency")) {
						
						summry_start_index_5 = 0;
					}
					else
					{
						summry_start_index_2 = summry_end_index_1+1;
						summry_start_index_3 = summry_end_index_2+1;//ADDED FOR LTCORA AND CN
						summry_start_index_5 = summry_end_index_3+1;
						summry_end_index_3 = SUMMRY_NET_AMT_USD.size()-2;
						
					}
					//summry_end_index_1++;
					//summry_start_index_2++;
					//summry_end_index_2++;
					//summry_start_index_3++;
					//summry_end_index_3++;
			//		//System.out.println("======");
			//		//System.out.println(summry_start_index_1);
			//		//System.out.println(summry_end_index_1);
			//		//System.out.println(summry_start_index_2);
			//		//System.out.println(summry_end_index_2);
			//		//System.out.println(summry_start_index_3);
//					System.out.println(SUMMRY_IGST_TAX+"=="+SUMMRY_GROSS_AMT_INR);
				}
				
				
//				//System.out.println(SUMMRY_TCQ);
//				//System.out.println(SUMMRY_MONTH);
				} catch (NumberFormatException e) {
			//System.out.println("Exception generated from get_Sales_Summary() "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	
	public void modifyColumn() throws SQLException {
		try {
			int count = 0;
			
			String query="SELECT COUNT(COLUMN_NAME) FROM COLS WHERE "
					+ "TABLE_NAME = 'FMS7_TAX_MST' AND COLUMN_NAME= 'SUN_ACC_CODE_SUG'   ";
//			//System.out.println("Alter table query"+query);
			rset = stmt.executeQuery(query);
			if(rset.next())
			{
				count = rset.getInt(1);
			}
			
			if(count==0) {
				query="ALTER TABLE FMS7_TAX_MST ADD SUN_ACC_CODE_SUG VARCHAR2(10)";
				stmt.executeUpdate(query);
				conn.commit();
			}
		}
		catch(Exception e) {
			conn.rollback();
			e.printStackTrace();
		}
	}
	
	Vector contact_Customer_GST_NO = new Vector();
	Vector contact_Customer_CST_NO = new Vector();
//	Vector contact_Suppl_GST_NO = new Vector();
//	Vector contact_Suppl_CST_NO = new Vector();
//	Vector contact_Suppl_Service_Tax_NO = new Vector();
	Vector contact_Customer_GVAT_NO = new Vector();
	Vector contact_Customer_MVAT_NO = new Vector();
	Vector DLNG_contact_Customer_GST_NO = new Vector();
	public Vector getDLNG_contact_Customer_GST_NO() {
		return DLNG_contact_Customer_GST_NO;
	}

	public void setDLNG_contact_Customer_GST_NO(Vector dLNG_contact_Customer_GST_NO) {
		DLNG_contact_Customer_GST_NO = dLNG_contact_Customer_GST_NO;
	}

	public Vector getDLNG_contact_Customer_CST_NO() {
		return DLNG_contact_Customer_CST_NO;
	}

	public void setDLNG_contact_Customer_CST_NO(Vector dLNG_contact_Customer_CST_NO) {
		DLNG_contact_Customer_CST_NO = dLNG_contact_Customer_CST_NO;
	}

	public Vector getDLNG_contact_Customer_GVAT_NO() {
		return DLNG_contact_Customer_GVAT_NO;
	}

	public void setDLNG_contact_Customer_GVAT_NO(Vector dLNG_contact_Customer_GVAT_NO) {
		DLNG_contact_Customer_GVAT_NO = dLNG_contact_Customer_GVAT_NO;
	}

	public Vector getDLNG_contact_Customer_MVAT_NO() {
		return DLNG_contact_Customer_MVAT_NO;
	}

	public void setDLNG_contact_Customer_MVAT_NO(Vector dLNG_contact_Customer_MVAT_NO) {
		DLNG_contact_Customer_MVAT_NO = dLNG_contact_Customer_MVAT_NO;
	}

	Vector DLNG_contact_Customer_CST_NO = new Vector();
	Vector DLNG_contact_Customer_GVAT_NO = new Vector();
	Vector DLNG_contact_Customer_MVAT_NO = new Vector();
	Vector vSTAT_NO = new Vector();
	Vector DLNG_vSTAT_NO= new Vector();
	public Vector getDLNG_vSTAT_NO() {
		return DLNG_vSTAT_NO;
	}

	public void setDLNG_vSTAT_NO(Vector dLNG_vSTAT_NO) {
		DLNG_vSTAT_NO = dLNG_vSTAT_NO;
	}

	Vector sug_hlpl_inv_seq_no = new Vector();
	Vector sug_invoice_dt = new Vector();
	Vector sug_period_start_dt = new Vector();
	Vector sug_period_end_dt = new Vector();
	Vector sug_sale_price = new Vector();
	Vector sug_due_dt = new Vector();
	Vector sug_total_qty = new Vector();
	Vector sug_gross_amt_inr = new Vector();
	Vector sug_net_amt_inr = new Vector();
	Vector sug_financial_year = new Vector();
	Vector sug_customer_cd = new Vector();
	Vector sug_tax_struct_cd = new Vector();
	Vector sug_sn_no = new Vector();
	Vector sug_sn_rev_no = new Vector();
	Vector sug_fgsa_no = new Vector();
	Vector sug_fgsa_rev_no = new Vector();
	Vector sug_invoice_month = new Vector();
	Vector sug_contract_type = new Vector();
	Vector sug_contact_person_cd = new Vector();
	Vector sug_tax_amt_inr = new Vector();
	Vector sug_plant_seq_no = new Vector();
	Vector sug_tax_flag = new Vector();
	Vector sug_cust_inv_seq_no = new Vector();
	Vector sug_sun_approval = new Vector();
	Vector sug_mapping_id = new Vector();
	Vector sug_new_inv_seq_no=new Vector();
	Vector sug_customer_name = new Vector();
	Vector sug_qty = new Vector();
	Vector sug_XML_GEN_FLAG = new Vector();
	Vector sug_customer_Invoice_Tax_Code = new Vector();
	Vector sug_customer_Invoice_Tax_Amt = new Vector();
	Vector sug_customer_Invoice_Tax_Name = new Vector();
	Vector sug_customer_Invoice_Tax_Rate = new Vector();
	Vector sug_customer_Invoice_Tax_Abbr = new Vector();
	Map sug_customer_tax_cd = new HashMap();
	Map sug_customer_tax_amt = new HashMap();
	Map sug_customer_tax_name = new HashMap();
	Map sug_customer_tax_abbr = new HashMap();
	Map sug_customer_tax_rate = new HashMap();
	
	//deficiency
	Vector def_hlpl_inv_seq_no = new Vector();
	Vector def_invoice_dt = new Vector();
	Vector def_period_start_dt = new Vector();
	Vector def_period_end_dt = new Vector();
	Vector def_sale_price = new Vector();
	Vector def_due_dt = new Vector();
	Vector def_total_qty = new Vector();
	Vector def_gross_amt_inr = new Vector();
	Vector def_net_amt_inr = new Vector();
	Vector def_financial_year = new Vector();
	Vector def_customer_cd = new Vector();
	Vector def_tax_struct_cd = new Vector();
	Vector def_sn_no = new Vector();
	Vector def_sn_rev_no = new Vector();
	Vector def_fgsa_no = new Vector();
	Vector def_fgsa_rev_no = new Vector();
	Vector def_invoice_month = new Vector();
	Vector def_contract_type = new Vector();
	Vector def_contact_person_cd = new Vector();
	Vector def_tax_amt_inr = new Vector();
	Vector def_plant_seq_no = new Vector();
	Vector def_tax_flag = new Vector();
	Vector def_cust_inv_seq_no = new Vector();
	Vector def_sun_approval = new Vector();
	Vector def_mapping_id = new Vector();
	Vector def_new_inv_seq_no=new Vector();
	Vector def_customer_name = new Vector();
	Vector def_qty = new Vector();
	Vector def_XML_GEN_FLAG = new Vector();
	Vector def_customer_Invoice_Tax_Code = new Vector();
	Vector def_customer_Invoice_Tax_Amt = new Vector();
	Vector def_customer_Invoice_Tax_Name = new Vector();
	Vector def_customer_Invoice_Tax_Rate = new Vector();
	Vector def_customer_Invoice_Tax_Abbr = new Vector();
	Map def_customer_tax_cd = new HashMap();
	Map def_customer_tax_amt = new HashMap();
	Map def_customer_tax_name = new HashMap();
	Map def_customer_tax_abbr = new HashMap();
	Map def_customer_tax_rate = new HashMap();
	Vector DEF_IGST_TAX = new Vector();
	Vector DEF_SGST_TAX = new Vector();
	//
	
	//ADVANCE INVOICE
	Vector adv_hlpl_inv_seq_no = new Vector();
	Vector adv_invoice_dt = new Vector();
	Vector adv_period_start_dt = new Vector();
	Vector adv_period_end_dt = new Vector();
	Vector adv_sale_price = new Vector();
	Vector adv_due_dt = new Vector();
	Vector adv_total_qty = new Vector();
	Vector adv_gross_amt_inr = new Vector();
	Vector adv_net_amt_inr = new Vector();
	Vector adv_financial_year = new Vector();
	Vector adv_customer_cd = new Vector();
	Vector adv_tax_struct_cd = new Vector();
	Vector adv_sn_no = new Vector();
	Vector adv_sn_rev_no = new Vector();
	Vector adv_fgsa_no = new Vector();
	Vector adv_fgsa_rev_no = new Vector();
	Vector adv_invoice_month = new Vector();
	Vector adv_contract_type = new Vector();
	Vector adv_contact_person_cd = new Vector();
	Vector adv_tax_amt_inr = new Vector();
	Vector adv_plant_seq_no = new Vector();
	Vector adv_tax_flag = new Vector();
	Vector adv_cust_inv_seq_no = new Vector();
	Vector adv_sun_approval = new Vector();
	Vector adv_mapping_id = new Vector();
	Vector adv_new_inv_seq_no=new Vector();
	Vector adv_customer_name = new Vector();
	Vector adv_qty = new Vector();
	Vector adv_XML_GEN_FLAG = new Vector();
	Vector adv_customer_Invoice_Tax_Code = new Vector();
	Vector adv_customer_Invoice_Tax_Amt = new Vector();
	Vector adv_customer_Invoice_Tax_Name = new Vector();
	Vector adv_customer_Invoice_Tax_Rate = new Vector();
	Vector adv_customer_Invoice_Tax_Abbr = new Vector();
	Vector adv_pay_type = new Vector();
	Map adv_customer_tax_cd = new HashMap();
	Map adv_customer_tax_amt = new HashMap();
	Map adv_customer_tax_name = new HashMap();
	Map adv_customer_tax_abbr = new HashMap();
	Map adv_customer_tax_rate = new HashMap();
	Vector storage_hlpl_inv_seq_no=new Vector();
	Vector storage_invoice_dt=new Vector();
	Vector storage_period_start_dt=new Vector();
	Vector storage_period_end_dt=new Vector();
	Vector storage_sale_price=new Vector();
	Vector storage_due_dt=new Vector();
	Vector storage_total_qty=new Vector();
	Vector storage_gross_amt_inr=new Vector();
	Vector storage_net_amt_inr=new Vector();
	Vector storage_financial_year=new Vector();
	Vector storage_customer_cd=new Vector();
	Vector storage_tax_struct_cd=new Vector();
	Vector storage_sn_no=new Vector();
	Vector storage_currency_typ=new Vector();
	Vector storage_sn_rev_no=new Vector();
	Vector storage_fgsa_no=new Vector();
	Vector storage_fgsa_rev_no=new Vector();
	Vector storage_invoice_month=new Vector();
	Vector storage_GROSS_AMT_USD=new Vector();
	Vector storage_exch_rate_val=new Vector();
	Vector storage_contract_type=new Vector();
	Vector storage_mapping_id=new Vector();
	Vector storage_sun_approval=new Vector();
	Vector storage_cust_inv_seq_no=new Vector();
	Vector storage_plant_seq_no=new Vector();
	Vector storage_tax_flag=new Vector();
	Vector storage_tax_amt_inr=new Vector();
	Vector storage_contact_person_cd=new Vector();
	Vector storage_new_inv_seq_no=new Vector();
	Vector storage_customer_name=new Vector();
	Vector storage_XML_GEN_FLAG=new Vector();
	Vector storage_qty=new Vector();
	Vector storage_customer_Invoice_Tax_Abbr=new Vector();
	Vector storage_customer_Invoice_Tax_Name=new Vector();
	Map storage_customer_tax_name=new HashMap();
	Map storage_customer_tax_abbr=new HashMap();
	Vector storage_customer_Invoice_Tax_Rate=new Vector();
	Vector storage_customer_Invoice_Tax_Amt=new Vector();
	Map storage_customer_tax_cd=new HashMap();
	Map storage_customer_tax_rate=new HashMap();
	Map storage_customer_tax_amt=new HashMap();
	Vector storage_customer_Invoice_Tax_Code=new Vector();
	String Scust_cd="";
	String Smapp_id="";
	String Shlpl_inv_seq_no="";
	String cont_type="";
	Vector Malloc_dt=new Vector();
	Vector Mopening_balance_qty=new Vector();
	Vector Mofftake_qty=new Vector();
	Vector Mst_charges=new Vector();
	Vector Mamount=new Vector();
	Vector disc_day=new Vector();
	String totamount="";
	
	NumberFormat nf_1 = new DecimalFormat("0.00");
	NumberFormat nf_11 = new DecimalFormat("###,###,###,###.00");
	NumberFormat nf_2 = new DecimalFormat("0.00");
	
	//Fro Late payment//
	Vector LM_hlpl_inv_seq_no=new Vector();
	Vector LM_invoice_dt=new Vector();
	Vector LM_period_start_dt=new Vector();
	Vector LM_period_end_dt=new Vector();
	Vector LM_sale_price=new Vector();
	Vector LM_due_dt=new Vector();
	Vector LM_total_qty=new Vector();
	Vector LM_gross_amt_inr=new Vector();
	Vector LM_net_amt_inr=new Vector();
	Vector LM_financial_year=new Vector();
	Vector LM_customer_cd=new Vector();
	Vector LM_tax_struct_cd=new Vector();
	Vector LM_sn_no=new Vector();
	Vector LM_currency_typ=new Vector();
	Vector LM_sn_rev_no=new Vector();
	Vector LM_fgsa_no=new Vector();
	Vector LM_fgsa_rev_no=new Vector();
	Vector LM_invoice_month=new Vector();
	Vector LM_GROSS_AMT_USD=new Vector();
	Vector LM_exch_rate_val=new Vector();
	Vector LM_INT_DAY=new Vector();
	Vector LM_INT_RATE=new Vector();
	Vector LM_contract_type=new Vector();
	Vector LM_mapping_id=new Vector();
	Vector LM_sun_approval=new Vector();
	Vector LM_cust_inv_seq_no=new Vector();
	Vector LM_plant_seq_no=new Vector();
	Vector LM_tax_flag=new Vector();
	Vector LM_tax_amt_inr=new Vector();
	Vector LM_contact_person_cd=new Vector();
	Vector LM_new_inv_seq_no=new Vector();
	Vector LM_customer_name=new Vector();
	Vector LM_XML_GEN_FLAG=new Vector();
	Vector LM_qty=new Vector();
	Vector LM_customer_Invoice_Tax_Abbr=new Vector();
	Vector LM_customer_Invoice_Tax_Name=new Vector();
	Map LM_customer_tax_name=new HashMap();
	Map LM_customer_tax_abbr=new HashMap();
	Vector LM_customer_Invoice_Tax_Rate=new Vector();
	Vector LM_customer_Invoice_Tax_Amt=new Vector();
	Map LM_customer_tax_cd=new HashMap();
	Map LM_customer_tax_rate=new HashMap();
	Map LM_customer_tax_amt=new HashMap();
	Vector LM_customer_Invoice_Tax_Code=new Vector();
	
	
	
	//Fro DLNG Late payment//
		Vector DLNG_LM_hlpl_inv_seq_no=new Vector();
		Vector DLNG_LM_invoice_dt=new Vector();
		Vector DLNG_LM_period_start_dt=new Vector();
		Vector DLNG_LM_period_end_dt=new Vector();
		Vector DLNG_LM_sale_price=new Vector();
		Vector DLNG_LM_due_dt=new Vector();
		Vector DLNG_LM_total_qty=new Vector();
		Vector DLNG_LM_gross_amt_inr=new Vector();
		Vector DLNG_LM_net_amt_inr=new Vector();
		Vector DLNG_LM_financial_year=new Vector();
		Vector DLNG_LM_customer_cd=new Vector();
		Vector DLNG_LM_tax_struct_cd=new Vector();
		Vector DLNG_LM_sn_no=new Vector();
		Vector DLNG_LM_currency_typ=new Vector();
		Vector DLNG_LM_sn_rev_no=new Vector();
		Vector DLNG_LM_fgsa_no=new Vector();
		Vector DLNG_LM_fgsa_rev_no=new Vector();
		Vector DLNG_LM_invoice_month=new Vector();
		Vector DLNG_LM_GROSS_AMT_USD=new Vector();
		Vector DLNG_LM_exch_rate_val=new Vector();
		Vector DLNG_LM_INT_DAY=new Vector();
		Vector DLNG_LM_INT_RATE=new Vector();
		Vector DLNG_LM_contract_type=new Vector();
		Vector DLNG_LM_mapping_id=new Vector();
		Vector DLNG_LM_sun_approval=new Vector();
		//Vector DLNG_LM_cust_inv_seq_no=new Vector();
		Vector DLNG_LM_plant_seq_no=new Vector();
		Vector DLNG_LM_tax_flag=new Vector();
		Vector DLNG_LM_tax_amt_inr=new Vector();
		Vector DLNG_LM_contact_person_cd=new Vector();
		Vector DLNG_LM_new_inv_seq_no=new Vector();
		Vector DLNG_LM_customer_name=new Vector();
		Vector DLNG_LM_XML_GEN_FLAG=new Vector();
		Vector DLNG_LM_qty=new Vector();
		Vector DLNG_LM_RATE_IGST=new Vector();
		Vector DLNG_LM_RATE_CGST=new Vector();
		Vector DLNG_LM_RATE_SGST=new Vector();
		Vector DLNG_LM_AMT_IGST=new Vector();
		Vector DLNG_LM_AMT_CGST=new Vector();
		Vector DLNG_LM_AMT_SGST=new Vector();
		Vector DLNG_LM_customer_Invoice_Tax_Abbr=new Vector();
		Vector DLNG_LM_customer_Invoice_Tax_Name=new Vector();
		Map DLNG_LM_customer_tax_name=new HashMap();
		Map DLNG_LM_customer_tax_abbr=new HashMap();
		Vector DLNG_LM_customer_Invoice_Tax_Rate=new Vector();
		Vector DLNG_LM_customer_Invoice_Tax_Amt=new Vector();
		Map DLNG_LM_customer_tax_cd=new HashMap();
		Map DLNG_LM_customer_tax_rate=new HashMap();
		Map DLNG_LM_customer_tax_amt=new HashMap();
		Vector DLNG_LM_customer_Invoice_Tax_Code=new Vector();
	
	public void get_Advance_Invoice_dtl() throws SQLException
	{
		try {
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO,PAY_TYPE "+
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='C' AND FLAG='A' " 
				  		+ "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO,PAY_TYPE "+
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CONTRACT_TYPE='C' AND FLAG='A' " 
						  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
//			System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
						invoice_no = ""+inv_no;
					}
					
					adv_hlpl_inv_seq_no.add(invoice_no);
					adv_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					adv_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					adv_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					adv_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					adv_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					adv_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					adv_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					adv_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					adv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					adv_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					adv_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					adv_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					adv_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					adv_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					adv_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					adv_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					adv_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					adv_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					adv_tax_amt_inr.add(rset.getString(20)==null?"0":rset.getString(20));
					adv_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					adv_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					adv_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					adv_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					adv_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					adv_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					adv_pay_type.add(rset.getString(27)==null?"":rset.getString(27));
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						adv_customer_name.add(rset1.getString(1));
					} else {
						adv_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								adv_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								adv_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<adv_mapping_id.size();i++)
				{
					String adv_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+adv_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+adv_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						adv_val = rset.getString(1);
					} else {
						adv_val = "0";
					}
					double adv_amt = 0;
					adv_amt = (Double.parseDouble(""+adv_total_qty.elementAt(i)) * Double.parseDouble(adv_val)) / 100;
					adv_qty.add(""+nf_1.format(adv_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+adv_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+adv_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+adv_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
//				//System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
					////System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						adv_customer_Invoice_Tax_Abbr.add(tax_abbr);
						adv_customer_Invoice_Tax_Name.add(tax_nm);
						adv_customer_tax_name.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,tax_nm);
						adv_customer_tax_abbr.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						adv_customer_Invoice_Tax_Abbr.add("");
						adv_customer_Invoice_Tax_Name.add("");
						adv_customer_tax_name.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,"");
						adv_customer_tax_abbr.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+adv_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+adv_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+adv_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+adv_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+adv_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					adv_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					adv_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					adv_customer_tax_cd.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,tax);
					adv_customer_tax_rate.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					adv_customer_tax_amt.put(adv_hlpl_inv_seq_no.elementAt(i)+":"+adv_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				adv_customer_Invoice_Tax_Code.add(tax_cd);
				
				
				if(tax_gst) {
					String val = ""+adv_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						adv_net_amt_inr.remove(i);
						adv_net_amt_inr.add(i, val);
					}
					val = ""+adv_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						adv_tax_amt_inr.remove(i);
						adv_tax_amt_inr.add(i, val);
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void View_Storage_Invoice_Att1()throws Exception{
		try {
			
			double Mtotalamount=0;
			queryString="SELECT TO_CHAR(ALLOC_DT,'DD-Mon-YY'),OPEN_BALANCE_QTY,OFFTAKE_QTY,RATE,STORAGE_TYPE,FLAG FROM "
						+ "FMS8_STORAGE_INV_CHARGES_DTL  WHERE MAPPING_ID='"+Smapp_id+"' AND FLAG!='Y' AND FINANCIAL_YEAR='"+financial_year+"' "
						+ "AND CONTRACT_TYPE='"+cont_type+"' AND HLPL_INV_SEQ_NO='"+Shlpl_inv_seq_no+"' AND REV_NO =(SELECT MAX(REV_NO) "
						+ "FROM FMS8_STORAGE_INV_CHARGES_DTL WHERE MAPPING_ID='"+Smapp_id+"' AND FINANCIAL_YEAR='"+financial_year+"' "
						+ "AND CONTRACT_TYPE='"+cont_type+"' AND HLPL_INV_SEQ_NO='"+Shlpl_inv_seq_no+"' AND FLAG!='Y') order by alloc_dt";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString--"+queryString);
			while(rset.next()){
				Malloc_dt.add(rset.getString(1)==null?"":rset.getString(1));
				String Mopen_balc=rset.getString(2)==null?"":rset.getString(2);
				Mopening_balance_qty.add(nf.format(Double.parseDouble(Mopen_balc)));
				Mofftake_qty.add(rset.getString(3)==null?"":rset.getString(3));
				
				Mst_charges.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"":rset.getString(4))));
				String storage_type=rset.getString(5)==null?"":rset.getString(5);
				disc_day.add(rset.getString(6)==null?"":rset.getString(6));
				String temp_chk_flag=rset.getString(6)==null?"":rset.getString(6);
				double amt=(Double.parseDouble(Mopen_balc) * Double.parseDouble(rset.getString(4)==null?"":rset.getString(4)));
				if(!temp_chk_flag.equals("Y")){
					Mtotalamount=Mtotalamount+amt;
				}
				Mamount.add(nf.format(amt));
				totamount=nf.format(Mtotalamount);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void get_Dlng_Invoice_dtl()throws SQLException{
		try
		{	
			//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String sbc_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			String kkc_code = "0"; //SB20160620
			String igst_code = "0";
			String cgst_code = "0";
			String sgst_code = "0";
			String zgst_code = "0";
			Vector new_vat_code = new Vector();
			Vector new_cst_code= new Vector();
			
			Vector DLNG_tmp_group_gross_usd_amt = new Vector();
			//RS23062017
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='Zero GST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
//			System.out.println("====zgst_code==="+zgst_code);
			////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) = 'VAT'"; 
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'VAT%' AND UPPER(SHT_NM) != 'VAT' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_vat_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'CST%' AND UPPER(SHT_NM) != 'CST' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_cst_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sbc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			//SB20160620: For KKC ///////////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='KKC' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				kkc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			

			queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
					+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
					// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString---"+queryString);
			if(rset.next()){
				
				queryString1 = "SELECT sht_nm,tax_name,tax_code FROM FMS7_TAX_MST WHERE " +
						  "tax_code="+rset.getString(1)+"";
				//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tcs_nm=rset1.getString(2)==null?"":rset1.getString(2);
					tcs_sht_nm=rset1.getString(1)==null?"":rset1.getString(1);
					tcs_cd=rset1.getString(3)==null?"":rset1.getString(3);
					tcs_nm=tcs_sht_nm;
				}
			}
		
			////////////////////////////////
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			tot_trans_grossinr=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			int j=-1;
			//MD
			
			if((For1.equals("DLNG") || For1.equalsIgnoreCase("0")) && !invoice_type.equals("R") ){
				if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CoDe " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
					  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
				else
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CoDe " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
					  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
		//System.out.println("Sales Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					DLNG_SUMMRY_CONT_TYP.add(cont_type);
					DLNG_inv_flag.add("DLNG");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					DLNG_HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					DLNG_PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					DLNG_PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						DLNG_SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						DLNG_SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						DLNG_SALE_PRICE.add("-");
						DLNG_SALE_PRICE_NUMERIC.add("0.0000");
					}
					DLNG_DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					DLNG_TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					DLNG_TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					//sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					dlng_sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					DLNG_EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					DLNG_GROSS_AMT_USD.add(rset.getString(9)==null?"":nf2.format(Double.parseDouble(rset.getString(9))));
					DLNG_GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					DLNG_sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					dlng_sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
//					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));  //Hiren_20200804
					DLNG_GROSS_AMT_INR.add(rset.getString(10)==null?"":rset.getString(10)); 
					DLNG_GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					DLNG_GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					dlng_sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					dlng_sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					dlng_sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					//temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					DLNG_NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					DLNG_NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					dlng_sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					DLNG_temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					DLNG_FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					DLNG_CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					DLNG_TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					//DLNG_sUP_.add(rset.getString(14)==null?"":rset.getString(14));
					String sup_st_cd=rset.getString(33)==null?"0":rset.getString(33);
//					if(sup_st_cd.equals("0")){
//						sup_st_cd="24";
//					}
					if(!sup_st_cd.equals("0")){
						queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
						//System.out.println("Sales Details Query for state name = "+queryString);
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{			
							String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
							if(!cost_cd.equals("-")){
								DLNG_cost_center_code_.add("Y");
							}else{
								DLNG_cost_center_code_.add("N");
							}
						}else{
							DLNG_cost_center_code_.add("N");
						}
					}else{
						DLNG_cost_center_code_.add("Y");
					}
					
					String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
					String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
					String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
					String tmp_sn_rev_no = rset.getString(16)==null?"0":rset.getString(16);
					String tmp_fgsa_rev_no = rset.getString(18)==null?"0":rset.getString(18);
									
					String contract_no = "",agr_base="";
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						queryString2 = "SELECT SN_REF_NO,TCQ FROM DLNG_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FLSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
							sum_tcq_dlng += Double.parseDouble(rset2.getString(2)==null?"0":rset2.getString(2));
						}
						else
						{
							contract_no = tmp_sn_no;
						}
						
						queryString2 = "SELECT FLSA_BASE FROM DLNG_FLSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FLSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							agr_base = rset2.getString(1)==null?"":rset2.getString(1);
							DLNG_Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							DLNG_Agreement_base.add("");
						}
						
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						queryString2 = "SELECT LOA_REF_NO,TCQ FROM DLNG_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
							sum_tcq_dlng += Double.parseDouble(rset2.getString(2)==null?"0":rset2.getString(2));
						}
						else
						{
							contract_no = tmp_sn_no;
						}
						
						queryString2 = "SELECT TENDER_BASE FROM DLNG_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
							   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							agr_base = rset2.getString(1)==null?"":rset2.getString(1);
							DLNG_Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							DLNG_Agreement_base.add("");
						}
					}
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+contract_no;
						DLNG_SEGMENT_NAME.add("Sales");
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+contract_no;
						DLNG_SEGMENT_NAME.add("LOA");
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						DLNG_SEGMENT_NAME.add("Regas");
					}
					DLNG_SN_NO.add(contract_name);
					DLNG_temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					DLNG_SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					DLNG_FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					DLNG_temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					DLNG_FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
					DLNG_MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					DLNG_CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					//SEGMENT_NAME.add("Sales");
					DLNG_PLANT_SEQ_NO.add(rset.getString(27));
					DLNG_SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
					DLNG_Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					DLNG_NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32)); //RS23062017
					DLNG_AdvADJ_FLAG.add("");
					//FOR TCS pART
					String queryStrr="Select tcs_amt from fms7_invoice_tcs_dtl where hlpl_inv_seq_no='"+rset.getString(1)+"' and "
							+ "financial_year='"+rset.getString(12)+"' and customer_cd='"+tmp_cust_cd+"' and contract_type='"+cont_type+"' and  invoice_type='SALES' AND FLAG='Y' and COMMODITY_TYPE='DLNG'";
					rset2=stmt2.executeQuery(queryStrr);
					//System.out.println("queryString--"+queryStrr);
					if(rset2.next()){
						DLNG_Vtcs_amt.add(rset2.getString(1)==null?"":rset2.getString(1));
					}else{
						DLNG_Vtcs_amt.add("");
					}
					//
					
					//RG20200229 added for GTA part
					if(agr_base.equals("D")){
						String queryString_tr="";
						String transp_charges="";
						String temp_grossamt="";
						if(cont_type.equals("S")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM DLNG_SN_MST WHERE FLSA_NO='"+tmp_fgsa_no+"' AND FLSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
						}else if(cont_type.equals("L")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM DLNG_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
							
						}
						rset2=stmt2.executeQuery(queryString_tr);
						//System.out.println("queryString--"+queryString_tr);
						if(rset2.next()){
							DLNG_trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
							
							transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
//							if(!transp_charges.equals("")){
//								transp_charges=nf.format(Double.parseDouble(rset2.getString(1)==null?"":rset2.getString(1)));
//							}
							
							//System.out.println("transp_charges---"+transp_charges);
							
						}else {
							DLNG_trans_charges.add("-");
						}
						//System.out.println("---rset.getString(7)--"+rset.getString(7)+"--transp_charges--"+transp_charges);
						if(!transp_charges.equals("")){
							temp_grossamt=""+(Double.parseDouble(rset.getString(10)==null?"":rset.getString(10))+Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							DLNG_temp_gross_amt.add(temp_grossamt);
							DLNG_trans_gross_inr.add(Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							tot_trans_grossinr+=Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges);
							//System.out.println("---temp====="+temp_grossamt);
						}else{
							DLNG_temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							DLNG_trans_gross_inr.add("-");
						}
						
					}else{
						DLNG_temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
						DLNG_trans_charges.add("-");
						DLNG_trans_gross_inr.add("-");
					}
				}
//				start_index_4 = end_index_1+1;
//				end_index_4 = HLPL_INV_SEQ_NO.size()-1;
				
			}
			//System.out.println("--DLNG_cost_center_code_---"+DLNG_cost_center_code_);
			for(int i=0; i<DLNG_CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					DLNG_CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					DLNG_CUSTOMER_NAME.add("");
					DLNG_CUSTOMER_ABBR.add("");
				}
				if(!DLNG_TOTAL_QTY.elementAt(i).equals("") && DLNG_TOTAL_QTY.elementAt(i)!=null && !DLNG_TOTAL_QTY.elementAt(i).equals("0"))
				{
					DLNG_AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+DLNG_temp_net_amt.elementAt(i))/ Double.parseDouble(""+DLNG_TOTAL_QTY.elementAt(i))));
				}
				else
				{
					DLNG_AVG_PRICE_MMBTU.add("-");
				}
				if(!DLNG_EXCHG_RATE.elementAt(i).equals("") && DLNG_EXCHG_RATE.elementAt(i)!=null)
				{
					DLNG_EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+DLNG_EXCHG_RATE.elementAt(i))));
					//DLNG_EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+DLNG_EXCHG_RATE.elementAt(i))));
				}
				else
				{
					DLNG_EXCHG_RATE_VALUE.add("-");
					//DLNG_EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
				
				
				
				/**************added to display tin nos as per mr. venkat requested *************/
				boolean flag_v=false;
					
				if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				else if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
				{
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='R' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				if(flag_v)
				{
					DLNG_vSTAT_NO.add("1");
				}
				else
				{
					DLNG_vSTAT_NO.add("0");
				}
				
				if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "and B.stat_cd='1001' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_GST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_GST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1002' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_CST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_CST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1003' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_GVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_GVAT_NO.add("");
					}
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1004' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_MVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_MVAT_NO.add("");
					}
				}
				else if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
				{
					DLNG_contact_Customer_GST_NO.add("");
					DLNG_contact_Customer_CST_NO.add("");
					DLNG_contact_Customer_GVAT_NO.add("");
					DLNG_contact_Customer_MVAT_NO.add("");
				}
			}
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			double sum_LTCORA_CN_tcq = 0;
			for(int i=0; i<DLNG_SN_NO.size(); i++)
			{
				if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+DLNG_INVOICE_DT.elementAt(i)+"','DD/MM/YYYY'))";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =var_sales_rate; //SB20200327
					}
					if(var_sales_rate==0) //SB20200327
					{
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' ";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =ori_sale_price; //SB20200327
					}
				}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
						queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM DLNG_SN_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+"  " +
								"AND SN_REV_NO="+DLNG_SN_REV_NO.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" AND FLSA_REV_NO="+DLNG_FGSA_REV_NO.elementAt(i)+" " +
								"AND FLSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+"";
					//	//System.out.println("SN Master query TCQ= "+queryString);
						rset = stmt.executeQuery(queryString);
					}else{}
						if(rset.next())
						{			
							DLNG_START_DT.add(rset.getString(1)==null?"":rset.getString(1));
							DLNG_END_DT.add(rset.getString(2)==null?"":rset.getString(2));
							sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
							DLNG_TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
							DLNG_TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
							//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							if(var_sales_rate==0) //SB20200327
							{
								DLNG_RATE.add(rset.getString(4)==null?"0":rset.getString(4));
								DLNG_RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							}
							else
							{
								DLNG_RATE.add(invoice_Sales_Rate);
								DLNG_RATE_NUMERIC.add(nf2.format(invoice_Sales_Rate));
							}
						}
						else
						{
							DLNG_START_DT.add("");
							DLNG_END_DT.add("");
							DLNG_TCQ.add("0.00");
							DLNG_TCQ_NUMERIC.add("0.00");
							DLNG_RATE.add("");
							DLNG_RATE_NUMERIC.add("0.0000");
						}
					
				}
				else if(((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
				double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+DLNG_INVOICE_DT.elementAt(i)+"','DD/MM/YYYY'))";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =var_sales_rate; //SB20200327
				}
				if(var_sales_rate==0) //SB20200327
				{
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' ";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =ori_sale_price; //SB20200327
				}
			}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
				if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM DLNG_LOA_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+DLNG_SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+DLNG_temp_sn_no.elementAt(i)+" AND TENDER_NO="+DLNG_temp_fgsa_no.elementAt(i)+"";
				//	//System.out.println("LOA Master query TCQ = "+queryString);
					rset = stmt.executeQuery(queryString);
				}else{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
							"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+DLNG_SN_REV_NO.elementAt(i)+" " +
							"AND LOA_NO="+DLNG_temp_sn_no.elementAt(i)+" AND TENDER_NO="+DLNG_temp_fgsa_no.elementAt(i)+"";
						//	//System.out.println("LOA Master query TCQ = "+queryString);
							rset = stmt.executeQuery(queryString);
				}
					if(rset.next())
					{			
						DLNG_START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						DLNG_END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						DLNG_TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						DLNG_TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
					//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
					//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						if(var_sales_rate==0) //SB20200327
						{
							DLNG_RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							DLNG_RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						}
						else
						{
							DLNG_RATE.add(invoice_Sales_Rate);
							DLNG_RATE_NUMERIC.add(nf2.format(invoice_Sales_Rate));
						}
					}
					else
					{
						DLNG_START_DT.add("");
						DLNG_END_DT.add("");
						DLNG_TCQ.add("0.00");
						DLNG_TCQ_NUMERIC.add("0.00");
						DLNG_RATE.add("");
						DLNG_RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("T")) //ADDED FOR LTCORA AND CN
				{}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
				{}
				else
				{
					DLNG_START_DT.add("");
					DLNG_END_DT.add("");
					DLNG_TCQ.add("-");
					DLNG_TCQ_NUMERIC.add("0.00");
					DLNG_RATE.add("");
					DLNG_RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq_dlng = nf.format(sum_tcq);
//			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
//			Final_sum_LTCORA_CN_tcq = nf.format(sum_LTCORA_CN_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			double sum_LTCORA_CN_rem_supply = 0;//ADDDED FOR LTCORA AND CN
			for(int i=0; i<DLNG_SN_NO.size(); i++)
			{
				double supp_qty = 0;
				if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
					String mappid=DLNG_CUSTOMER_CD.elementAt(i)+"-"+DLNG_temp_fgsa_no.elementAt(i)+"-"+DLNG_FGSA_REV_NO.elementAt(i)+"-"+DLNG_temp_sn_no.elementAt(i)+"-"+DLNG_SN_REV_NO.elementAt(i);
					queryString = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
								  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='"+DLNG_CONTRACT_TYPE.elementAt(i)+"' AND " +
								  "ALLOC_DT<=TO_DATE('"+DLNG_PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY') AND MAPPING_ID='"+mappid+"'";
					
				}else{}
			//	//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					DLNG_CUM_SUPPLY.add(nf.format(supp_qty));
					if((""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
					{
						sum_rem_supply += Double.parseDouble(""+DLNG_TCQ.elementAt(i))- supp_qty;
					}
					DLNG_REM_SUPPLY.add(nf.format(Double.parseDouble(""+DLNG_TCQ.elementAt(i))- supp_qty));
					DLNG_REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					DLNG_CUM_SUPPLY.add("-");
					DLNG_REM_SUPPLY.add("-");
					DLNG_REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply_dlng = nf.format(sum_rem_supply);
//			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
//			Sum_LTCORA_CN_rem_supply=nf.format(sum_LTCORA_CN_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_sbc_tax = new Vector();
			Vector tmp_kkc_tax = new Vector(); //SB20160620
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
			Vector tmp_igst_tax = new Vector();
			Vector tmp_sgst_tax = new Vector();
			Vector tmp_cgst_tax = new Vector();
			Vector tmp_zgst_tax = new Vector();
				
			for(int k=0; k<DLNG_HLPL_INV_SEQ_NO.size(); k++)
			{
				
				/*String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='C' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					sac_code.add(rset.getString(1)==null?"":rset.getString(1));
				} else {
					sac_code.add("");
				}*/
				
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="0";
												
				if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+DLNG_HLPL_INV_SEQ_NO.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+DLNG_HLPL_INV_SEQ_NO.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+DLNG_HLPL_INV_SEQ_NO.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=DLNG_HLPL_INV_SEQ_NO.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR.elementAt(k);
				}
				DLNG_HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				DLNG_TAX_CODE.clear();
				DLNG_FACTOR.clear();						
				DLNG_TAX_AMOUNT.clear();
				DLNG_TAX_ON_TITLE.clear();
				int count = 0;
				//System.out.println("seq no******"+hlpl_inv_no_disp);
				////System.out.println("===JAVA here TAX_AMOUNT=== "+TAX_AMOUNT);
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+DLNG_TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DLNG_TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "B.app_date<=TO_DATE('"+DLNG_PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{			
					String abr = "";
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt=0;
					if(DLNG_temp_gross_amt.elementAt(k).toString().length()!=0)
					{
						gross_amt = Double.parseDouble(""+DLNG_temp_gross_amt.elementAt(k));
					}
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);	
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+DLNG_TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DLNG_TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"B.app_date<=TO_DATE('"+DLNG_PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
				//		//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}	
					}
					else
					{
						tax_amt = ""+0.00;
					}	
					queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+tax_cd+"";
//					System.out.println("fetchin tax abr"+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
						tax_title = "ON "+tax_abbr;
						abr = tax_abbr;
					}
					else
					{
						tax_title = "";
					}	
					//if(DLNG_AdvADJ_FLAG.elementAt(k).equals("Y")) {}
					DLNG_TAX_CODE.add(tax_cd);
					DLNG_FACTOR.add(tax_factor);						
					DLNG_TAX_AMOUNT.add(tax_amt);
					DLNG_TAX_ON_TITLE.add(tax_title);
					count++;
				}
				if(count==0)
				{
					DLNG_TAX_CODE.add("0");
					DLNG_FACTOR.add("0");						
					DLNG_TAX_AMOUNT.add("-");
					DLNG_TAX_ON_TITLE.add("");
				}
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				int count7 = 0;
				int count8 = 0; //SB20160620
				int count9 = 0; //IGST
				int count10 = 0; //SGST
				int count11 = 0; //CGST
				int count12 = 0; //ZERO GST
				
				Map m = new HashMap();
				for(int ii=0;ii<DLNG_MONTH.size();ii++) {
					m.put(""+DLNG_MONTH.elementAt(ii), "1");
				}
				
				double tax_sum = 0;
				double tax_sum_dlng=0;
			//	//System.out.println("---JAVA here TAX_AMOUNT---: "+TAX_AMOUNT);
			//	//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<DLNG_TAX_CODE.size(); i++)
				{									
					if(DLNG_TAX_CODE.elementAt(i).equals(cst_code) || new_cst_code.contains(DLNG_TAX_CODE.elementAt(i)))
					{											
						DLNG_SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						DLNG_SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						//if(k<=end_index_4)
						{
							//System.out.println("here in java--"+DLNG_TAX_AMOUNT.elementAt(i));
							dlng_sales_tax_inr_total += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
						}
						DLNG_tmp_sales_tax.add(""+DLNG_TAX_AMOUNT.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
							}
						}
						DLNG_VAT_AMT.add("-");
						//DLNG_VAT_AMT_NUMERIC.add("0.00");
						DLNG_tmp_vat.add("0");
						count2++;
						DLNG_SALE_VAT_TAX_PERC.add("-"); //Hiren_20200806
						DLNG_SALE_CST_TAX_PERC.add(DLNG_FACTOR.elementAt(i)+""); //Hiren_20200806
					}
					else if(DLNG_TAX_CODE.elementAt(i).equals(vat_code) || new_vat_code.contains(DLNG_TAX_CODE.elementAt(i)))
					{
						DLNG_SALES_TAX_AMT.add("-");
						DLNG_SALES_TAX_AMT_NUMERIC.add("0.00");
						DLNG_tmp_sales_tax.add("0");
						DLNG_VAT_AMT.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						//DLNG_VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						 //if(k<=end_index_4)
						{
							dlng_sales_vat_inr_total += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+DLNG_TAX_AMOUNT.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
							}
						}
						count2++;
						
						DLNG_SALE_VAT_TAX_PERC.add(DLNG_FACTOR.elementAt(i)+"");	 //Hiren_20200806
						DLNG_SALE_CST_TAX_PERC.add("-"); //Hiren_20200806
						DLNG_tmp_vat.add(""+DLNG_TAX_AMOUNT.elementAt(i));
						
					}
					else if(DLNG_TAX_CODE.elementAt(i).equals(tcs_cd))
					{
						// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_tcs_inr_total += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
															
					if(DLNG_TAX_CODE.elementAt(i).equals(addl_code))
					{							
						DLNG_ADD_TAX.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						//DLNG_ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						 //if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_sales_addl_tax_inr_total += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
						}
						// DLNG_tmp_addl_tax.add(""+DLNG_TAX_AMOUNT.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i));
							}
						}
						count3++;
					}
										
					/*if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count4++;
				//		//System.out.println("---IF ST_CODE---JAVA SERVICE_TAX---: "+SERVICE_TAX);
					}*/
					
//					if(TAX_CODE.elementAt(i).equals(sbc_code))
//					{							
//						SBC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						SBC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_1)
//						{
//							sales_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						else if(k<=end_index_2)
//						{
//							regas_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}else if(k<=end_index_4)
//						{
//							dlng_sales_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						tmp_sbc_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							if(inv_flag.elementAt(i).equals("DLNG")){
//								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//							}else{
//								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//							}
//						}
//						count7++;
//					}
					/*if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count5++;
					}*/
										
					/*if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count6++;
					}	*/
					//SB20160620: For KKC ///////
					/*if(TAX_CODE.elementAt(i).equals(kkc_code))
					{//	//System.out.println("KKC :"+TAX_CODE.elementAt(i));						
						KKC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						KKC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_kkc_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count8++;
					}*/
					/////////////////////////////
					/*if(TAX_CODE.elementAt(i).equals(igst_code))
					{					
						TAX_RATE_IGST.add(FACTOR.elementAt(i));
						IGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						IGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_igst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count9++;
					}
					if(TAX_CODE.elementAt(i).equals(sgst_code))
					{	
						TAX_RATE_SGST.add(FACTOR.elementAt(i));
						SGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						SGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_sgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count10++;
					}
					if(TAX_CODE.elementAt(i).equals(cgst_code))
					{	
						TAX_RATE_CGST.add(FACTOR.elementAt(i));
						CGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						CGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_cgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count11++;
					}*/
//					if(TAX_CODE.elementAt(i).equals(zgst_code))
//					{							
//						ZGST_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						ZGST_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_1 && end_index_1!=0)
//						{
//							sales_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_2 && end_index_2!=0)
//						{
//							regas_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						tmp_zgst_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						count12++;
//					}
				}
			//	//System.out.println("A0. tax_amt - Adj= "+tax_sum);
			//	//System.out.println("TOTAL TAX-AMT: "+tax_sum);
				String adjust_amt=""+0;
				
				//if(CONTRACT_TYPE.elementAt(k).equals("C")) {}
				
				
		//		//System.out.println("A. tax_amt - Adj= "+tax_sum);
				
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					DLNG_TAX_AMT_INR.add(nf3.format(tax_sum));
					
					if(DLNG_inv_flag.elementAt(k).equals("DLNG")){
						if(DLNG_CONTRACT_TYPE.elementAt(k).equals("S") || DLNG_CONTRACT_TYPE.elementAt(k).equals("L")) {
							dlng_sales_total_tax_inr_total += tax_sum;
						}
					}else{}
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_sales_total_tax_usd_total += tax_sum;
						}
						
						 DLNG_TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						DLNG_TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					DLNG_TAX_AMT_INR.add("-");
					DLNG_TAX_AMT_USD.add("-");
				}
				
			//	//System.out.println("LTCORA_CN_total_tax_inr_total---"+LTCORA_CN_total_tax_inr_total);			
				
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				double net_amt_usd = tax_sum + Double.parseDouble(""+DLNG_tmp_group_gross_usd_amt.elementAt(k));
			//	//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				 //if(k<=end_index_4)//ADDED FOR LTCORA AND CN
				{
					if(DLNG_inv_flag.elementAt(k).equals("DLNG")){
						dlng_sales_net_amt_usd_total += net_amt_usd;
					}
					
				}
				
				if(net_amt_usd>0)
				{
					DLNG_NET_AMT_USD.add(nf3.format(net_amt_usd));
					//DLNG_NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					DLNG_NET_AMT_USD.add("-");
					//DLNG_NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				//System.out.println("---JAVA SERVICE_TAX---: "+dlng_sales_net_amt_usd_total);
		//		//System.out.println("---JAVA count4---: "+count4);
				
				if(count2==0)
				{
					DLNG_SALES_TAX_AMT.add("-");									
					DLNG_VAT_AMT.add("-");
					DLNG_SALES_TAX_AMT_USD.add("-");									
					//DLNG_VAT_AMT_USD.add("-");
					DLNG_SALES_TAX_AMT_NUMERIC.add("0.00");									
					//DLNG_VAT_AMT_NUMERIC.add("0.00");
					//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
					DLNG_tmp_sales_tax.add("0");
					DLNG_tmp_vat.add("0");
				}
				if(count3==0)
				{
					DLNG_ADD_TAX.add("-");
//					DLNG_ADD_TAX_USD.add("-");
//					DLNG_ADD_TAX_NUMERIC.add("0.00");
//					DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
					//DLNG_tmp_addl_tax.add("0");
				}
				/*if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count7==0)
				{
					SBC_TAX.add("-");
					SBC_TAX_USD.add("-");
					SBC_TAX_NUMERIC.add("0.00");
					SBC_TAX_USD_NUMERIC.add("0.00");
					tmp_sbc_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				if(count8==0)
				{
					KKC_TAX.add("-");
					KKC_TAX_USD.add("-");
					KKC_TAX_NUMERIC.add("0.00");
					KKC_TAX_USD_NUMERIC.add("0.00");
					tmp_kkc_tax.add("0");
				}
				if(count9==0)
				{
					IGST_TAX.add("-");
					IGST_TAX_USD.add("-");
					IGST_TAX_NUMERIC.add("0.00");
					IGST_TAX_USD_NUMERIC.add("0.00");
					tmp_igst_tax.add("0");
					TAX_RATE_IGST.add("-");
				}
				if(count10==0)
				{
					SGST_TAX.add("-");
					SGST_TAX_USD.add("-");
					SGST_TAX_NUMERIC.add("0.00");
					SGST_TAX_USD_NUMERIC.add("0.00");
					tmp_sgst_tax.add("0");
					TAX_RATE_SGST.add("-");
				}
				if(count11==0)
				{
					CGST_TAX.add("-");
					CGST_TAX_USD.add("-");
					CGST_TAX_NUMERIC.add("0.00");
					CGST_TAX_USD_NUMERIC.add("0.00");
					tmp_cgst_tax.add("0");
					TAX_RATE_CGST.add("-");
				}
				if(count12==0)
				{
					ZGST_TAX.add("-");
					ZGST_TAX_USD.add("-");
					ZGST_TAX_NUMERIC.add("0.00");
					ZGST_TAX_USD_NUMERIC.add("0.00");
					tmp_zgst_tax.add("0");
				}*/
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					DLNG_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_sales_tax.elementAt(k))>0)
						{
							DLNG_SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+DLNG_tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							 //if(k<=end_index_4)//ADDED FOR LTCORA AND CN
							{
								dlng_sales_sales_tax_usd_total += (Double.parseDouble(""+DLNG_tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							 DLNG_VAT_AMT_USD.add("-");
							// DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+DLNG_tmp_vat.elementAt(k))>0)
						{
							DLNG_SALES_TAX_AMT_USD.add("-");
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							DLNG_VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+DLNG_tmp_vat.elementAt(k))/foreign_exchg_rate));
							//DLNG_VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_vat.elementAt(k))/foreign_exchg_rate));
							// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
							{
								dlng_sales_vat_usd_total += (Double.parseDouble(""+DLNG_tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_SALES_TAX_AMT_USD.add("-");
							DLNG_VAT_AMT_USD.add("-");
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_addl_tax.elementAt(k))>0)
						{
							DLNG_ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+DLNG_tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							//DLNG_ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							 //if(k<=end_index_4)
							{
								dlng_sales_addl_tax_usd_total += (Double.parseDouble(""+DLNG_tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_ADD_TAX_USD.add("-");
							//DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_service_tax.elementAt(k))>0)
						{
							DLNG_SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+DLNG_tmp_service_tax.elementAt(k))/foreign_exchg_rate));
						//	DLNG_SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							// if(k<=end_index_4)
							{
								dlng_sales_service_tax_usd_total += (Double.parseDouble(""+DLNG_tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_SERVICE_TAX_USD.add("-");
							//DLNG_SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					/*if(count7>0)
					{
						if(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))>0)
						{
							SBC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							SBC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SBC_TAX_USD.add("-");
							SBC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count8>0)
					{
						if(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))>0)
						{
							KKC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							KKC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							KKC_TAX_USD.add("-");
							KKC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count9>0)
					{
						if(Double.parseDouble(""+tmp_igst_tax.elementAt(k))>0)
						{
							IGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							IGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							IGST_TAX_USD.add("-");
							IGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count10>0)
					{
						if(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))>0)
						{
							SGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							SGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SGST_TAX_USD.add("-");
							SGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count11>0)
					{
						if(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))>0)
						{
							CGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							CGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							CGST_TAX_USD.add("-");
							CGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count12>0)
					{
						if(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))>0)
						{
							ZGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							ZGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ZGST_TAX_USD.add("-");
							ZGST_TAX_USD_NUMERIC.add("0.00");
						}
					}*/
				}
				else
				{
					DLNG_GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						DLNG_SALES_TAX_AMT_USD.add("-");									
						DLNG_VAT_AMT_USD.add("-");
						//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						DLNG_ADD_TAX_USD.add("-");
						//DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						DLNG_SERVICE_TAX_USD.add("-");
						//DLNG_SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					/*if(count7>0)
					{
						SBC_TAX_USD.add("-");
						SBC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count8>0)
					{
						KKC_TAX_USD.add("-");
						KKC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count9>0)
					{
						IGST_TAX_USD.add("-");
						IGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count10>0)
					{
						SGST_TAX_USD.add("-");
						SGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count11>0)
					{
						CGST_TAX_USD.add("-");
						CGST_TAX_USD_NUMERIC.add("0.00");
					}if(count12>0)
					{
						ZGST_TAX_USD.add("-");
						ZGST_TAX_USD_NUMERIC.add("0.00");
					}*/
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<DLNG_HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+DLNG_HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+DLNG_CONTRACT_TYPE.elementAt(i)+"' ";
				if(DLNG_CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("T") || DLNG_CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+DLNG_Account_Mapping_id.elementAt(i)+"'";
				}
			//	//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DLNG_XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					DLNG_XML_GEN_FLAG.add("N");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	//HARSH20210920 NEW FUNCATION FOR DLNG SERVICE INVOICE
	public void get_service_Dlng_Invoice_dtl()throws SQLException
	{
		try
		{
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String sbc_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			String kkc_code = "0"; 
			String igst_code = "0";
			String cgst_code = "0";
			String sgst_code = "0";
			String zgst_code = "0";
			Vector new_vat_code = new Vector();
			Vector new_cst_code= new Vector();
			
			Vector DLNG_tmp_group_gross_usd_amt = new Vector();
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='Zero GST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) = 'VAT'"; 
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'VAT%' AND UPPER(SHT_NM) != 'VAT' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_vat_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'CST%' AND UPPER(SHT_NM) != 'CST' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_cst_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sbc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			//SB20160620: For KKC ///////////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='KKC' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				kkc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			

			queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
					+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString---"+queryString);
			if(rset.next()){
				
				queryString1 = "SELECT sht_nm,tax_name,tax_code FROM FMS7_TAX_MST WHERE " +
						  "tax_code="+rset.getString(1)+"";
				//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tcs_nm=rset1.getString(2)==null?"":rset1.getString(2);
					tcs_sht_nm=rset1.getString(1)==null?"":rset1.getString(1);
					tcs_cd=rset1.getString(3)==null?"":rset1.getString(3);
					tcs_nm=tcs_sht_nm;
				}
			}
		
			////////////////////////////////
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			tot_trans_grossinr=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			int j=-1;
			//MD
			
			dlng_sum_igst_amt_Ser=0;
			dlng_sum_cgst_amt_Ser=0;
			dlng_sum_sgst_amt_Ser=0;
			dlng_sum_igst_amt_usd_Ser=0;
			dlng_sum_cgst_amt_usd_Ser=0;
			dlng_sum_sgst_amt_usd_Ser=0;		
			
			if((For1.equals("DLNG_SERVICE") || For1.equalsIgnoreCase("0")) && !invoice_type.equals("R") )
			{
				if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CoDe " +
					  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='V') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
				else
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
					  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CoDe " +
					  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND (CONTRACT_TYPE='V') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
				//System.out.println("Sales Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{	
					String mapID = rset.getString(30)==null?"":rset.getString(30);
					
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					if(!mapID.equals(""))
					{
						cont_type=mapID.substring(0,1);
					}
					DLNG_SUMMRY_CONT_TYP_Ser.add(cont_type);
					DLNG_inv_flag_Ser.add("DLNG");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					DLNG_HLPL_INV_SEQ_NO_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_INVOICE_DT_Ser.add(rset.getString(2)==null?"":rset.getString(2));
					DLNG_PERIOD_START_DT_Ser.add(rset.getString(3)==null?"":rset.getString(3));						
					DLNG_PERIOD_END_DT_Ser.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						DLNG_SALE_PRICE_Ser.add(nf2.format(Double.parseDouble(sale_price)));
						DLNG_SALE_PRICE_NUMERIC_Ser.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						DLNG_SALE_PRICE_Ser.add("-");
						DLNG_SALE_PRICE_NUMERIC_Ser.add("0.0000");
					}
					DLNG_DUE_DT_Ser.add(rset.getString(6)==null?"":rset.getString(6));	
					
					DLNG_TOTAL_QTY_Ser.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					DLNG_TOTAL_QTY_NUMERIC_Ser.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					//sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					dlng_sales_qty_total_Ser += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					DLNG_EXCHG_RATE_Ser.add(rset.getString(8)==null?"":rset.getString(8));
					
					DLNG_GROSS_AMT_USD_Ser.add(rset.getString(9)==null?"":nf2.format(Double.parseDouble(rset.getString(9))));
					DLNG_GROSS_AMT_USD_NUMERIC_Ser.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					DLNG_sales_qty_amt_usd_total_Ser += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					dlng_sales_gross_amt_usd_total_Ser += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
//					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));  //Hiren_20200804
					DLNG_GROSS_AMT_INR_Ser.add(rset.getString(10)==null?"":rset.getString(10)); 
					DLNG_GROSS_AMT_INR_2_Ser.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					DLNG_GROSS_AMT_INR_NUMERIC_Ser.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					dlng_sales_qty_amt_inr_total_Ser += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					dlng_sales_gross_amt_inr_total_Ser += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_Ser.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2_Ser.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC_Ser.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DLNG_tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					dlng_sales_group_foreign_gross_amt_usd_total_Ser += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					//temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					DLNG_NET_AMT_INR_Ser.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					DLNG_NET_AMT_INR_NUMERIC_Ser.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					dlng_sales_net_amt_inr_total_Ser += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					DLNG_temp_net_amt_Ser.add(rset.getString(11)==null?"":rset.getString(11));
					DLNG_FINANCIAL_YEAR_Ser.add(rset.getString(12)==null?"":rset.getString(12));
					DLNG_CUSTOMER_CD_Ser.add(rset.getString(13)==null?"":rset.getString(13));
					DLNG_TAX_STRUCT_CD_Ser.add(rset.getString(14)==null?"":rset.getString(14));
					//DLNG_sUP_.add(rset.getString(14)==null?"":rset.getString(14));
					String sup_st_cd=rset.getString(33)==null?"0":rset.getString(33);
//					if(sup_st_cd.equals("0")){
//						sup_st_cd="24";
//					}
					if(!sup_st_cd.equals("0")){
						queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
						//System.out.println("Sales Details Query for state name = "+queryString);
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{			
							String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
							if(!cost_cd.equals("-")){
								DLNG_cost_center_code__Ser.add("Y");
							}else{
								DLNG_cost_center_code__Ser.add("N");
							}
						}else{
							DLNG_cost_center_code__Ser.add("N");
						}
					}else{
						DLNG_cost_center_code__Ser.add("Y");
					}
					
					String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
					String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
					String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
					String tmp_sn_rev_no = rset.getString(16)==null?"0":rset.getString(16);
					String tmp_fgsa_rev_no = rset.getString(18)==null?"0":rset.getString(18);
									
					String contract_no = "",agr_base="";
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						queryString2 = "SELECT SN_REF_NO,TCQ FROM DLNG_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FLSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL AND SN_REV_NO='"+tmp_sn_rev_no+"' "
								   	   	+ "AND FLSA_REV_NO='"+tmp_fgsa_rev_no+"'";
						//System.out.println("Helloooo :: "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
							//sum_tcq_dlng_Ser += Double.parseDouble(rset2.getString(2)==null?"0":rset2.getString(2));
						}
						else
						{
							contract_no = tmp_sn_no;
						}
						
						queryString2 = "SELECT FLSA_BASE FROM DLNG_FLSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FLSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							agr_base = rset2.getString(1)==null?"":rset2.getString(1);
							DLNG_Agreement_base_Ser.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							DLNG_Agreement_base_Ser.add("");
						}
						
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						queryString2 = "SELECT LOA_REF_NO,TCQ FROM DLNG_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND LOA_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
							//sum_tcq_dlng_Ser += Double.parseDouble(rset2.getString(2)==null?"0":rset2.getString(2));
						}
						else
						{
							contract_no = tmp_sn_no;
						}
						
						queryString2 = "SELECT TENDER_BASE FROM DLNG_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
							   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							agr_base = rset2.getString(1)==null?"":rset2.getString(1);
							DLNG_Agreement_base_Ser.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							DLNG_Agreement_base_Ser.add("");
						}
					}
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+contract_no;
						DLNG_SEGMENT_NAME_Ser.add("Sales");
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+contract_no;
						DLNG_SEGMENT_NAME_Ser.add("LOA");
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						DLNG_SEGMENT_NAME_Ser.add("Regas");
					}
					DLNG_SN_NO_Ser.add(contract_name);
					DLNG_temp_sn_no_Ser.add(rset.getString(15)==null?"":rset.getString(15));
					DLNG_SN_REV_NO_Ser.add(rset.getString(16)==null?"":rset.getString(16));
					DLNG_FGSA_NO_Ser.add(rset.getString(17)==null?"":rset.getString(17));
					DLNG_temp_fgsa_no_Ser.add(rset.getString(17)==null?"":rset.getString(17));
					DLNG_FGSA_REV_NO_Ser.add(rset.getString(18)==null?"":rset.getString(18));
					DLNG_MONTH_Ser.add(rset.getString(19)==null?"":rset.getString(19));
					//DLNG_CONTRACT_TYPE_Ser.add(rset.getString(20)==null?"":rset.getString(20));
					DLNG_CONTRACT_TYPE_Ser.add(cont_type);
					//SEGMENT_NAME.add("Sales");
					DLNG_PLANT_SEQ_NO_Ser.add(rset.getString(27));
					DLNG_SUN_APPROVAL_Ser.add(rset.getString(29)==null?"":rset.getString(29));				
					DLNG_Account_Mapping_id_Ser.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					DLNG_NEW_INV_SEQ_NO_Ser.add(rset.getString(32)==null?"":rset.getString(32)); //RS23062017
					DLNG_AdvADJ_FLAG_Ser.add("");
					//FOR TCS pART
					String queryStrr="Select tcs_amt from fms7_invoice_tcs_dtl where hlpl_inv_seq_no='"+rset.getString(1)+"' and "
							+ "financial_year='"+rset.getString(12)+"' and customer_cd='"+tmp_cust_cd+"' and contract_type='"+cont_type+"' and  invoice_type='SALES' AND FLAG='Y' and COMMODITY_TYPE='DLNG'";
					rset2=stmt2.executeQuery(queryStrr);
					//System.out.println("queryString--"+queryStrr);
					if(rset2.next()){
						DLNG_Vtcs_amt_Ser.add(rset2.getString(1)==null?"":rset2.getString(1));
					}else{
						DLNG_Vtcs_amt_Ser.add("");
					}
					//
					
					//RG20200229 added for GTA part
					if(agr_base.equals("D")){
						String queryString_tr="";
						String transp_charges="";
						String temp_grossamt="";
						if(cont_type.equals("S")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM DLNG_SN_MST WHERE FLSA_NO='"+tmp_fgsa_no+"' AND FLSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
						}else if(cont_type.equals("L")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM DLNG_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
							
						}
						rset2=stmt2.executeQuery(queryString_tr);
						//System.out.println("queryString--"+queryString_tr);
						if(rset2.next()){
							DLNG_trans_charges_Ser.add(rset2.getString(1)==null?"":rset2.getString(1));
							
							transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
//							if(!transp_charges.equals("")){
//								transp_charges=nf.format(Double.parseDouble(rset2.getString(1)==null?"":rset2.getString(1)));
//							}
							
							//System.out.println("transp_charges---"+transp_charges);
							
						}else {
							DLNG_trans_charges_Ser.add("-");
						}
						//System.out.println("---rset.getString(7)--"+rset.getString(7)+"--transp_charges--"+transp_charges);
						if(!transp_charges.equals("")){
							temp_grossamt=""+(Double.parseDouble(rset.getString(10)==null?"":rset.getString(10))+Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							DLNG_temp_gross_amt_Ser.add(temp_grossamt);
							DLNG_trans_gross_inr_Ser.add(Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							tot_trans_grossinr_Ser+=Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges);
							//System.out.println("---temp====="+temp_grossamt);
						}else{
							DLNG_temp_gross_amt_Ser.add(rset.getString(10)==null?"":rset.getString(10));
							DLNG_trans_gross_inr_Ser.add("-");
						}
						
					}else{
						DLNG_temp_gross_amt_Ser.add(rset.getString(10)==null?"":rset.getString(10));
						DLNG_trans_charges_Ser.add("-");
						DLNG_trans_gross_inr_Ser.add("-");
					}
					
					
					double tax_amt_inr = rset.getDouble(22);
					String taxFlag = rset.getString(23)==null?"":rset.getString(23);
					String invoiceNo= rset.getString(1)==null?"":rset.getString(1);
					String financialYear=rset.getString(12)==null?"":rset.getString(12);
					
					queryString2 = "SELECT DISTINCT SAC_CODE FROM DLNG_SERVICE_INVOICE_DTL WHERE INV_SEQ_NO='"+invoiceNo+"' AND FINANCIAL_YEAR='"+financialYear+"'";
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						DLNG_SAC_CODE_Ser.add(rset2.getString(1)==null?"":rset2.getString(1));
					}
					else
					{
						DLNG_SAC_CODE_Ser.add("");
					}
					
					if(!taxFlag.equals(""))
					{
						if(taxFlag.toUpperCase().equals("I"))
						{
							queryString2 = "SELECT DISTINCT RATE_IGST FROM DLNG_SERVICE_INVOICE_DTL WHERE INV_SEQ_NO='"+invoiceNo+"' AND FINANCIAL_YEAR='"+financialYear+"'";
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								DLNG_IGST_RATE_Ser.add(nf.format(rset2.getDouble(1)));
								DLNG_CGST_RATE_Ser.add("-");
								DLNG_SGST_RATE_Ser.add("-");
							}
							else
							{
								DLNG_IGST_RATE_Ser.add("-");
								DLNG_CGST_RATE_Ser.add("-");
								DLNG_SGST_RATE_Ser.add("-");
							}
							dlng_sum_igst_amt_Ser+=tax_amt_inr;
							DLNG_IGST_AMT_Ser.add(nf3.format(tax_amt_inr));
							DLNG_CGST_AMT_Ser.add("-");
							DLNG_SGST_AMT_Ser.add("-");
							
							
							
							DLNG_IGST_AMT_USD_Ser.add("-");
							DLNG_CGST_AMT_USD_Ser.add("-");
							DLNG_SGST_AMT_USD_Ser.add("-");
						}
						else if(taxFlag.toUpperCase().equals("C"))
						{
							dlng_sum_cgst_amt_Ser+=(tax_amt_inr/2);
							dlng_sum_sgst_amt_Ser+=(tax_amt_inr/2);
							DLNG_IGST_AMT_Ser.add("-");
							if(tax_amt_inr > 0)
							{
								DLNG_CGST_AMT_Ser.add(nf3.format(tax_amt_inr/2));
								DLNG_SGST_AMT_Ser.add(nf3.format(tax_amt_inr/2));
							}
							else
							{
								DLNG_CGST_AMT_Ser.add("-");
								DLNG_SGST_AMT_Ser.add("-");
							}
							queryString2 = "SELECT DISTINCT RATE_CGST,RATE_SGST FROM DLNG_SERVICE_INVOICE_DTL WHERE INV_SEQ_NO='"+invoiceNo+"' AND FINANCIAL_YEAR='"+financialYear+"'";
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								DLNG_IGST_RATE_Ser.add("-");
								DLNG_CGST_RATE_Ser.add(nf.format(rset2.getDouble(1)));
								DLNG_SGST_RATE_Ser.add(nf.format(rset2.getDouble(2)));
							}
							else
							{
								DLNG_IGST_RATE_Ser.add("-");
								DLNG_CGST_RATE_Ser.add("-");
								DLNG_SGST_RATE_Ser.add("-");
							}
							DLNG_IGST_AMT_USD_Ser.add("-");
							DLNG_CGST_AMT_USD_Ser.add("-");
							DLNG_SGST_AMT_USD_Ser.add("-");
						}
						else
						{
							DLNG_IGST_AMT_Ser.add("-");
							DLNG_CGST_AMT_Ser.add("-");
							DLNG_SGST_AMT_Ser.add("-");
							DLNG_IGST_RATE_Ser.add("-");
							DLNG_CGST_RATE_Ser.add("-");
							DLNG_SGST_RATE_Ser.add("-");
							
							DLNG_IGST_AMT_USD_Ser.add("-");
							DLNG_CGST_AMT_USD_Ser.add("-");
							DLNG_SGST_AMT_USD_Ser.add("-");
						}
					}
					else
					{
						DLNG_IGST_AMT_Ser.add("-");
						DLNG_CGST_AMT_Ser.add("-");
						DLNG_SGST_AMT_Ser.add("-");
						DLNG_IGST_RATE_Ser.add("-");
						DLNG_CGST_RATE_Ser.add("-");
						DLNG_SGST_RATE_Ser.add("-");
						
						DLNG_IGST_AMT_USD_Ser.add("-");
						DLNG_CGST_AMT_USD_Ser.add("-");
						DLNG_SGST_AMT_USD_Ser.add("-");
					}
					String invoicNumber = rset.getString(32)==null?"":rset.getString(32);
					queryString2 = "SELECT DISTINCT CALC_BASE,RATE FROM DLNG_SERVICE_INVOICE_ATTACH WHERE SERVICE_INVOICE_NO='"+invoicNumber+"'";
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						String calc_base = rset2.getString(1)==null?"":rset2.getString(1);
						double rate = rset2.getDouble(2);
						if(!calc_base.equals(""))
						{
							if(calc_base.equals("1"))
							{
								DLNG_TRNS_MODE_Ser.add("MMBTU");
								DLNG_TRNS_RATE_Ser.add(nf.format(rate));
								DLNG_DISTANCE_KM_Ser.add("-");
								DLNG_CHARGES_LUMPSUM_Ser.add("-");
							}
							else if(calc_base.equals("2"))
							{
								double KM=0;
								queryString1 = "SELECT SUM(KM) FROM DLNG_SERVICE_INVOICE_ATTACH WHERE SERVICE_INVOICE_NO='"+invoicNumber+"'";
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									KM = rset1.getDouble(1);
								}
								
								DLNG_TRNS_MODE_Ser.add("KM");
								DLNG_TRNS_RATE_Ser.add(nf.format(rate));
								DLNG_DISTANCE_KM_Ser.add(nf.format(KM));
								DLNG_CHARGES_LUMPSUM_Ser.add("-");
							}
							else if(calc_base.equals("3"))
							{
								double charges = 0;
								queryString1 = "SELECT DISTINCT AMOUNT FROM DLNG_SERVICE_INVOICE_ATTACH WHERE SERVICE_INVOICE_NO='"+invoicNumber+"'";
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									charges = rset1.getDouble(1);
								}
								
								DLNG_TRNS_MODE_Ser.add("LUMP SUM");
								DLNG_TRNS_RATE_Ser.add(nf.format(rate));
								DLNG_DISTANCE_KM_Ser.add("-");
								DLNG_CHARGES_LUMPSUM_Ser.add(nf.format(charges));
							}
							else
							{
								DLNG_TRNS_MODE_Ser.add("");
								DLNG_TRNS_RATE_Ser.add("");
								DLNG_DISTANCE_KM_Ser.add("-");
								DLNG_CHARGES_LUMPSUM_Ser.add("-");
							}
						}
						else
						{
							DLNG_TRNS_MODE_Ser.add("");
							DLNG_TRNS_RATE_Ser.add("");
							DLNG_DISTANCE_KM_Ser.add("-");
							DLNG_CHARGES_LUMPSUM_Ser.add("-");
						}
					}
					else
					{
						DLNG_TRNS_MODE_Ser.add("");
						DLNG_TRNS_RATE_Ser.add("");
						DLNG_DISTANCE_KM_Ser.add("-");
						DLNG_CHARGES_LUMPSUM_Ser.add("-");
					}
					
					//FECHING GSTIN NO PLANT WISE
					String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(27)+"' "
							+ "AND CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
							+ "WHERE CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(27)+"' "
							+ " AND (EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
					//System.out.println("=="+q_gstin);
					rset1 = stmt1.executeQuery(q_gstin);
					if(rset1.next()) {
						DLNG_GSTIN_NO_Ser.add(rset1.getString(1));
					} else {
						DLNG_GSTIN_NO_Ser.add("");
					}
					
					//FETCHING POS IF PLACE OF SUPPLY IS DIFF FROM PLANT LOCATION
					String plant_loc="", plant_state = "";
					String pos_query = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(13)+"' "
							+ "AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL WHERE "
							+ "CUSTOMER_CD='"+rset.getString(13)+"' AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								plant_loc = rset1.getString(1);
							} 
						} 
					} 
					
					String sup_loc="", sup_state="";
					 pos_query = "SELECT STATE FROM FMS7_SUPPLIER_ADDRESS_MST WHERE SUPPLIER_CD='1' "
							+ "AND ADDRESS_TYPE='B' AND  EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_ADDRESS_MST WHERE "
							+ "SUPPLIER_CD='1' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) "
							+ " AND ADDRESS_TYPE='B' ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 sup_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!sup_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+sup_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								sup_loc = rset1.getString(1);
							} 
						} 
					} 
					
					if(!sup_loc.equals(plant_loc)) {
						DLNG_POS_STATE_Ser.add(sup_state);
					} else {
						DLNG_POS_STATE_Ser.add("");
					}

				}
			}
//				start_index_4 = end_index_1+1;
//				end_index_4 = HLPL_INV_SEQ_NO.size()-1;
				
				
			//System.out.println("--DLNG_cost_center_code_---"+DLNG_cost_center_code_);
			for(int i=0; i<DLNG_CUSTOMER_CD_Ser.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					DLNG_CUSTOMER_NAME_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_CUSTOMER_ABBR_Ser.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					DLNG_CUSTOMER_NAME_Ser.add("");
					DLNG_CUSTOMER_ABBR_Ser.add("");
				}
				if(!DLNG_TOTAL_QTY_Ser.elementAt(i).equals("") && DLNG_TOTAL_QTY_Ser.elementAt(i)!=null && !DLNG_TOTAL_QTY_Ser.elementAt(i).equals("0"))
				{
					DLNG_AVG_PRICE_MMBTU_Ser.add(nf.format(Double.parseDouble(""+DLNG_temp_net_amt_Ser.elementAt(i))/ Double.parseDouble(""+DLNG_TOTAL_QTY_Ser.elementAt(i))));
				}
				else
				{
					DLNG_AVG_PRICE_MMBTU_Ser.add("-");
				}
				if(!DLNG_EXCHG_RATE_Ser.elementAt(i).equals("") && DLNG_EXCHG_RATE_Ser.elementAt(i)!=null)
				{
					DLNG_EXCHG_RATE_VALUE_Ser.add(nf2.format(Double.parseDouble(""+DLNG_EXCHG_RATE_Ser.elementAt(i))));
					//DLNG_EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+DLNG_EXCHG_RATE.elementAt(i))));
				}
				else
				{
					DLNG_EXCHG_RATE_VALUE_Ser.add("-");
					//DLNG_EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
				
				
				
				/**************added to display tin nos as per mr. venkat requested *************/
				boolean flag_v=false;
					
				if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO_Ser.elementAt(i)+" AND B.stat_type='S' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				else if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("T"))
				{
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='R' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				if(flag_v)
				{
					DLNG_vSTAT_NO_Ser.add("1");
				}
				else
				{
					DLNG_vSTAT_NO_Ser.add("0");
				}
				
				if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND " +
								  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO_Ser.elementAt(i)+" AND B.stat_type='S' " +
								  "and B.stat_cd='1001' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_GST_NO_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_GST_NO_Ser.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO_Ser.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1002' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_CST_NO_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_CST_NO_Ser.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO_Ser.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1003' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_GVAT_NO_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_GVAT_NO_Ser.add("");
					}
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND " +
					  "A.plant_seq_no="+DLNG_PLANT_SEQ_NO_Ser.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1004' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DLNG_contact_Customer_MVAT_NO_Ser.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						DLNG_contact_Customer_MVAT_NO_Ser.add("");
					}
				}
				else if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("T") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("C"))
				{
					DLNG_contact_Customer_GST_NO_Ser.add("");
					DLNG_contact_Customer_CST_NO_Ser.add("");
					DLNG_contact_Customer_GVAT_NO_Ser.add("");
					DLNG_contact_Customer_MVAT_NO_Ser.add("");
				}
			}
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			double sum_LTCORA_CN_tcq = 0;
			for(int i=0; i<DLNG_SN_NO_Ser.size(); i++)
			{
				if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+DLNG_INVOICE_DT_Ser.elementAt(i)+"','DD/MM/YYYY'))";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =var_sales_rate; //SB20200327
					}
					if(var_sales_rate==0) //SB20200327
					{
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' ";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =ori_sale_price; //SB20200327
					}
				}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
						queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM DLNG_SN_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+"  " +
								"AND SN_REV_NO="+DLNG_SN_REV_NO_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" AND FLSA_REV_NO="+DLNG_FGSA_REV_NO_Ser.elementAt(i)+" " +
								"AND FLSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+"";
						//System.out.println("SN Master query TCQ= "+queryString);
						rset = stmt.executeQuery(queryString);
					}else{}
						if(rset.next())
						{			
							DLNG_START_DT_Ser.add(rset.getString(1)==null?"":rset.getString(1));
							DLNG_END_DT_Ser.add(rset.getString(2)==null?"":rset.getString(2));
							sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
							DLNG_TCQ_Ser.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
							sum_tcq_dlng_Ser += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
							DLNG_TCQ_NUMERIC_Ser.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
							//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							if(var_sales_rate==0) //SB20200327
							{
								DLNG_RATE_Ser.add(rset.getString(4)==null?"0":rset.getString(4));
								DLNG_RATE_NUMERIC_Ser.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							}
							else
							{
								DLNG_RATE_Ser.add(invoice_Sales_Rate);
								DLNG_RATE_NUMERIC_Ser.add(nf2.format(invoice_Sales_Rate));
							}
						}
						else
						{
							DLNG_START_DT_Ser.add("");
							DLNG_END_DT_Ser.add("");
							DLNG_TCQ_Ser.add("0.00");
							DLNG_TCQ_NUMERIC_Ser.add("0.00");
							DLNG_RATE_Ser.add("");
							DLNG_RATE_NUMERIC_Ser.add("0.0000");
						}
					
				}
				else if(((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
				double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+DLNG_INVOICE_DT_Ser.elementAt(i)+"','DD/MM/YYYY'))";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =var_sales_rate; //SB20200327
				}
				if(var_sales_rate==0) //SB20200327
				{
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+" AND SN_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND FLAG='A' ";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =ori_sale_price; //SB20200327
				}
			}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
				if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM DLNG_LOA_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND LOA_REV_NO="+DLNG_SN_REV_NO_Ser.elementAt(i)+" " +
					"AND LOA_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" AND TENDER_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+"";
					//System.out.println("LOA Master query TCQ if = "+queryString);
					rset = stmt.executeQuery(queryString);
				}else{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
							"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+DLNG_CUSTOMER_CD_Ser.elementAt(i)+" AND LOA_REV_NO="+DLNG_SN_REV_NO_Ser.elementAt(i)+" " +
							"AND LOA_NO="+DLNG_temp_sn_no_Ser.elementAt(i)+" AND TENDER_NO="+DLNG_temp_fgsa_no_Ser.elementAt(i)+"";
							//System.out.println("LOA Master query TCQ else = "+queryString);
							rset = stmt.executeQuery(queryString);
				}
					if(rset.next())
					{			
						DLNG_START_DT_Ser.add(rset.getString(1)==null?"":rset.getString(1));
						DLNG_END_DT_Ser.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						sum_tcq_dlng_Ser += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						DLNG_TCQ_Ser.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						DLNG_TCQ_NUMERIC_Ser.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
					//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
					//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						if(var_sales_rate==0) //SB20200327
						{
							DLNG_RATE_Ser.add(rset.getString(4)==null?"0":rset.getString(4));
							DLNG_RATE_NUMERIC_Ser.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						}
						else
						{
							DLNG_RATE_Ser.add(invoice_Sales_Rate);
							DLNG_RATE_NUMERIC_Ser.add(nf2.format(invoice_Sales_Rate));
						}
					}
					else
					{
						DLNG_START_DT_Ser.add("");
						DLNG_END_DT_Ser.add("");
						DLNG_TCQ_Ser.add("0.00");
						DLNG_TCQ_NUMERIC_Ser.add("0.00");
						DLNG_RATE_Ser.add("");
						DLNG_RATE_NUMERIC_Ser.add("0.0000");
					}		
				}
				else
				{
					DLNG_START_DT_Ser.add("");
					DLNG_END_DT_Ser.add("");
					DLNG_TCQ_Ser.add("0.00");
					DLNG_TCQ_NUMERIC_Ser.add("0.00");
					DLNG_RATE_Ser.add("");
					DLNG_RATE_NUMERIC_Ser.add("0.0000");
				} 
			}
			
			Final_sum_tcq_dlng_Ser = nf.format(sum_tcq);
//			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
//			Final_sum_LTCORA_CN_tcq = nf.format(sum_LTCORA_CN_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			double sum_LTCORA_CN_rem_supply = 0;//ADDDED FOR LTCORA AND CN
			for(int i=0; i<DLNG_SN_NO_Ser.size(); i++)
			{
				double supp_qty = 0;
				if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
					String mappid=DLNG_CUSTOMER_CD_Ser.elementAt(i)+"-"+DLNG_temp_fgsa_no_Ser.elementAt(i)+"-"+DLNG_FGSA_REV_NO_Ser.elementAt(i)+"-"+DLNG_temp_sn_no_Ser.elementAt(i)+"-"+DLNG_SN_REV_NO_Ser.elementAt(i);
					queryString = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
								  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='"+DLNG_CONTRACT_TYPE_Ser.elementAt(i)+"' AND " +
								  "ALLOC_DT<=TO_DATE('"+DLNG_PERIOD_END_DT_Ser.elementAt(i)+"','DD/MM/YYYY') AND MAPPING_ID='"+mappid+"'";
					
				}else{}
				//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					DLNG_CUM_SUPPLY_Ser.add(nf.format(supp_qty));
					if((""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("S") || (""+DLNG_CONTRACT_TYPE_Ser.elementAt(i)).trim().equalsIgnoreCase("L"))
					{
						sum_rem_supply += Double.parseDouble(""+DLNG_TCQ_Ser.elementAt(i))- supp_qty;
					}
					DLNG_REM_SUPPLY_Ser.add(nf.format(Double.parseDouble(""+DLNG_TCQ_Ser.elementAt(i))- supp_qty));
					DLNG_REM_SUPPLY_NUMERIC_Ser.add(nf.format(Double.parseDouble(""+DLNG_TCQ_Ser.elementAt(i))- supp_qty));
				}
				else
				{
					DLNG_CUM_SUPPLY_Ser.add("-");
					DLNG_REM_SUPPLY_Ser.add("-");
					DLNG_REM_SUPPLY_NUMERIC_Ser.add("0.00");
				}				
			}
			Sum_rem_supply_dlng_Ser = nf.format(sum_rem_supply);
//			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
//			Sum_LTCORA_CN_rem_supply=nf.format(sum_LTCORA_CN_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_sbc_tax = new Vector();
			Vector tmp_kkc_tax = new Vector(); //SB20160620
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
			Vector tmp_igst_tax = new Vector();
			Vector tmp_sgst_tax = new Vector();
			Vector tmp_cgst_tax = new Vector();
			Vector tmp_zgst_tax = new Vector();
			//System.out.println("DLNG_HLPL_INV_SEQ_NO_Ser == "+DLNG_HLPL_INV_SEQ_NO_Ser.size());	
			for(int k=0; k<DLNG_HLPL_INV_SEQ_NO_Ser.size(); k++)
			{
				
				/*String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='C' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					sac_code.add(rset.getString(1)==null?"":rset.getString(1));
				} else {
					sac_code.add("");
				}*/
				
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="0";
												
				if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR_Ser.elementAt(k);
				}
				else if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR_Ser.elementAt(k);
				}
				else if(Integer.parseInt(""+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR_Ser.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=DLNG_HLPL_INV_SEQ_NO_Ser.elementAt(k)+"/"+DLNG_FINANCIAL_YEAR_Ser.elementAt(k);
				}
				DLNG_HLPL_INV_SEQ_Ser.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				DLNG_TAX_CODE_Ser.clear();
				DLNG_FACTOR_Ser.clear();						
				DLNG_TAX_AMOUNT_Ser.clear();
				DLNG_TAX_ON_TITLE_Ser.clear();
				int count = 0;
				//System.out.println("seq no******"+hlpl_inv_no_disp);
				////System.out.println("===JAVA here TAX_AMOUNT=== "+TAX_AMOUNT);
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DLNG_TAX_STRUCT_CD_Ser.elementAt(k)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DLNG_TAX_STRUCT_CD_Ser.elementAt(k)+" AND " +
				   			  "B.app_date<=TO_DATE('"+DLNG_PERIOD_END_DT_Ser.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{			
					String abr = "";
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt=0;
					if(DLNG_temp_gross_amt_Ser.elementAt(k).toString().length()!=0)
					{
						gross_amt = Double.parseDouble(""+DLNG_temp_gross_amt_Ser.elementAt(k));
					}
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);	
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DLNG_TAX_STRUCT_CD_Ser.elementAt(k)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DLNG_TAX_STRUCT_CD_Ser.elementAt(k)+" AND " +
										"B.app_date<=TO_DATE('"+DLNG_PERIOD_END_DT_Ser.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//		//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}	
					}
					else
					{
						tax_amt = ""+0.00;
					}	
					queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+tax_cd+"";
//					System.out.println("fetchin tax abr"+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
						tax_title = "ON "+tax_abbr;
						abr = tax_abbr;
					}
					else
					{
						tax_title = "";
					}	
					//if(DLNG_AdvADJ_FLAG.elementAt(k).equals("Y")) {}
					DLNG_TAX_CODE_Ser.add(tax_cd);
					DLNG_FACTOR_Ser.add(tax_factor);						
					DLNG_TAX_AMOUNT_Ser.add(tax_amt);
					DLNG_TAX_ON_TITLE_Ser.add(tax_title);
					count++;
				}
				if(count==0)
				{
					DLNG_TAX_CODE_Ser.add("0");
					DLNG_FACTOR_Ser.add("0");						
					DLNG_TAX_AMOUNT_Ser.add("-");
					DLNG_TAX_ON_TITLE_Ser.add("");
				}
				
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				int count7 = 0;
				int count8 = 0; //SB20160620
				int count9 = 0; //IGST
				int count10 = 0; //SGST
				int count11 = 0; //CGST
				int count12 = 0; //ZERO GST
				
				Map m = new HashMap();
				for(int ii=0;ii<DLNG_MONTH_Ser.size();ii++) {
					m.put(""+DLNG_MONTH_Ser.elementAt(ii), "1");
				}
				
				double tax_sum = 0;
				double tax_sum_dlng=0;
			//	//System.out.println("---JAVA here TAX_AMOUNT---: "+TAX_AMOUNT);
			//	//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<DLNG_TAX_CODE_Ser.size(); i++)
				{									
					if(DLNG_TAX_CODE_Ser.elementAt(i).equals(cst_code) || new_cst_code.contains(DLNG_TAX_CODE_Ser.elementAt(i)))
					{											
						DLNG_SALES_TAX_AMT_Ser.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i))));
						DLNG_SALES_TAX_AMT_NUMERIC_Ser.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i))));
						//if(k<=end_index_4)
						{
							dlng_sales_tax_inr_total_Ser += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						}
						DLNG_tmp_sales_tax_Ser.add(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
							}
						}
						DLNG_VAT_AMT_Ser.add("-");
						//DLNG_VAT_AMT_NUMERIC.add("0.00");
						DLNG_tmp_vat_Ser.add("0");
						count2++;
						DLNG_SALE_VAT_TAX_PERC_Ser.add("-"); 
						DLNG_SALE_CST_TAX_PERC_Ser.add(DLNG_FACTOR_Ser.elementAt(i)+""); 
					}
					else if(DLNG_TAX_CODE_Ser.elementAt(i).equals(vat_code) || new_vat_code.contains(DLNG_TAX_CODE_Ser.elementAt(i)))
					{
						DLNG_SALES_TAX_AMT_Ser.add("-");
						DLNG_SALES_TAX_AMT_NUMERIC_Ser.add("0.00");
						DLNG_tmp_sales_tax_Ser.add("0");
						DLNG_VAT_AMT_Ser.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i))));
						//DLNG_VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						 //if(k<=end_index_4)
						{
							dlng_sales_vat_inr_total_Ser += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						}
						tmp_vat.add(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
							}
						}
						count2++;
						
						DLNG_SALE_VAT_TAX_PERC_Ser.add(DLNG_FACTOR_Ser.elementAt(i)+"");	 //Hiren_20200806
						DLNG_SALE_CST_TAX_PERC_Ser.add("-"); //Hiren_20200806
						DLNG_tmp_vat_Ser.add(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						
					}
					else if(DLNG_TAX_CODE_Ser.elementAt(i).equals(tcs_cd))
					{
						// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_tcs_inr_total_Ser += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						}
						count2++;
					}
															
					if(DLNG_TAX_CODE_Ser.elementAt(i).equals(addl_code))
					{							
						DLNG_ADD_TAX_Ser.add(nf3.format(Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i))));
						//DLNG_ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_TAX_AMOUNT.elementAt(i))));
						// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_sales_addl_tax_inr_total_Ser += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
						}
						// DLNG_tmp_addl_tax.add(""+DLNG_TAX_AMOUNT.elementAt(i));
						if(!(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals(" ") && !(""+DLNG_TAX_AMOUNT_Ser.elementAt(i)).equals("-"))
						{
							if(DLNG_inv_flag_Ser.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+DLNG_TAX_AMOUNT_Ser.elementAt(i));
							}
						}
						count3++;
					}
										
					/*if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count4++;
				//		//System.out.println("---IF ST_CODE---JAVA SERVICE_TAX---: "+SERVICE_TAX);
					}*/
					
//					if(TAX_CODE.elementAt(i).equals(sbc_code))
//					{							
//						SBC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						SBC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_1)
//						{
//							sales_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						else if(k<=end_index_2)
//						{
//							regas_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}else if(k<=end_index_4)
//						{
//							dlng_sales_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//						}
//						tmp_sbc_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							if(inv_flag.elementAt(i).equals("DLNG")){
//								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//							}else{
//								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
//							}
//						}
//						count7++;
//					}
					/*if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count5++;
					}*/
										
					/*if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count6++;
					}	*/
					//SB20160620: For KKC ///////
					/*if(TAX_CODE.elementAt(i).equals(kkc_code))
					{//	//System.out.println("KKC :"+TAX_CODE.elementAt(i));						
						KKC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						KKC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}else if(k<=end_index_4)
						{
							dlng_sales_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_kkc_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}
						}
						count8++;
					}*/
					/////////////////////////////
					/*if(TAX_CODE.elementAt(i).equals(igst_code))
					{					
						TAX_RATE_IGST.add(FACTOR.elementAt(i));
						IGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						IGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_igst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count9++;
					}
					if(TAX_CODE.elementAt(i).equals(sgst_code))
					{	
						TAX_RATE_SGST.add(FACTOR.elementAt(i));
						SGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						SGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_sgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count10++;
					}
					if(TAX_CODE.elementAt(i).equals(cgst_code))
					{	
						TAX_RATE_CGST.add(FACTOR.elementAt(i));
						CGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						CGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}else if(k<=end_index_4 && end_index_4!=0)
						{
							dlng_sales_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_cgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							if(inv_flag.elementAt(i).equals("DLNG")){
								tax_sum_dlng += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
							}else{
								tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
							}
						}
						count11++;
					}*/
//					if(TAX_CODE.elementAt(i).equals(zgst_code))
//					{							
//						ZGST_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						ZGST_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_1 && end_index_1!=0)
//						{
//							sales_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_2 && end_index_2!=0)
//						{
//							regas_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						tmp_zgst_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						count12++;
//					}
				}
			//	//System.out.println("A0. tax_amt - Adj= "+tax_sum);
			//	//System.out.println("TOTAL TAX-AMT: "+tax_sum);
				String adjust_amt=""+0;
				
				//if(CONTRACT_TYPE.elementAt(k).equals("C")) {}
				
				
		//		//System.out.println("A. tax_amt - Adj= "+tax_sum);
				
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					DLNG_TAX_AMT_INR_Ser.add(nf3.format(tax_sum));
					
					if(DLNG_inv_flag_Ser.elementAt(k).equals("DLNG")){
						if(DLNG_CONTRACT_TYPE_Ser.elementAt(k).equals("S") || DLNG_CONTRACT_TYPE_Ser.elementAt(k).equals("L")) {
							dlng_sales_total_tax_inr_total_Ser += tax_sum;
						}
					}else{}
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT_Ser.elementAt(k)+"','DD/MM/YYYY')";
				//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						 //if(k<=end_index_4)//ADDED FOR LTCORA AND CN
						{
							dlng_sales_total_tax_usd_total_Ser += tax_sum;
						}
						
						 DLNG_TAX_AMT_USD_Ser.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						DLNG_TAX_AMT_USD_Ser.add("-");
					}					
				}
				else
				{
					DLNG_TAX_AMT_INR_Ser.add("-");
					DLNG_TAX_AMT_USD_Ser.add("-");
				}
				
			//	//System.out.println("LTCORA_CN_total_tax_inr_total---"+LTCORA_CN_total_tax_inr_total);			
				
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT_Ser.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				double net_amt_usd = tax_sum + Double.parseDouble(""+DLNG_tmp_group_gross_usd_amt.elementAt(k));
			//	//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
				{
					if(DLNG_inv_flag_Ser.elementAt(k).equals("DLNG")){
						dlng_sales_net_amt_usd_total_Ser += net_amt_usd;
					}
					
				}
				
				if(net_amt_usd>0)
				{
					DLNG_NET_AMT_USD_Ser.add(nf3.format(net_amt_usd));
					//DLNG_NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					DLNG_NET_AMT_USD_Ser.add("-");
					//DLNG_NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				//System.out.println("---JAVA SERVICE_TAX---: "+dlng_sales_net_amt_usd_total);
		//		//System.out.println("---JAVA count4---: "+count4);
				
				if(count2==0)
				{
					DLNG_SALES_TAX_AMT_Ser.add("-");									
					DLNG_VAT_AMT_Ser.add("-");
					DLNG_SALES_TAX_AMT_USD_Ser.add("-");									
					//DLNG_VAT_AMT_USD.add("-");
					DLNG_SALES_TAX_AMT_NUMERIC_Ser.add("0.00");									
					//DLNG_VAT_AMT_NUMERIC.add("0.00");
					//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
					DLNG_tmp_sales_tax_Ser.add("0");
					DLNG_tmp_vat_Ser.add("0");
				}
				if(count3==0)
				{
					DLNG_ADD_TAX_Ser.add("-");
//					DLNG_ADD_TAX_USD.add("-");
//					DLNG_ADD_TAX_NUMERIC.add("0.00");
//					DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
					//DLNG_tmp_addl_tax.add("0");
				}
				/*if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count7==0)
				{
					SBC_TAX.add("-");
					SBC_TAX_USD.add("-");
					SBC_TAX_NUMERIC.add("0.00");
					SBC_TAX_USD_NUMERIC.add("0.00");
					tmp_sbc_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				if(count8==0)
				{
					KKC_TAX.add("-");
					KKC_TAX_USD.add("-");
					KKC_TAX_NUMERIC.add("0.00");
					KKC_TAX_USD_NUMERIC.add("0.00");
					tmp_kkc_tax.add("0");
				}
				if(count9==0)
				{
					IGST_TAX.add("-");
					IGST_TAX_USD.add("-");
					IGST_TAX_NUMERIC.add("0.00");
					IGST_TAX_USD_NUMERIC.add("0.00");
					tmp_igst_tax.add("0");
					TAX_RATE_IGST.add("-");
				}
				if(count10==0)
				{
					SGST_TAX.add("-");
					SGST_TAX_USD.add("-");
					SGST_TAX_NUMERIC.add("0.00");
					SGST_TAX_USD_NUMERIC.add("0.00");
					tmp_sgst_tax.add("0");
					TAX_RATE_SGST.add("-");
				}
				if(count11==0)
				{
					CGST_TAX.add("-");
					CGST_TAX_USD.add("-");
					CGST_TAX_NUMERIC.add("0.00");
					CGST_TAX_USD_NUMERIC.add("0.00");
					tmp_cgst_tax.add("0");
					TAX_RATE_CGST.add("-");
				}
				if(count12==0)
				{
					ZGST_TAX.add("-");
					ZGST_TAX_USD.add("-");
					ZGST_TAX_NUMERIC.add("0.00");
					ZGST_TAX_USD_NUMERIC.add("0.00");
					tmp_zgst_tax.add("0");
				}*/
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+DLNG_INVOICE_DT_Ser.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					DLNG_GROUP_FOREIGN_EXCHG_RATE_Ser.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_sales_tax_Ser.elementAt(k))>0)
						{
							DLNG_SALES_TAX_AMT_USD_Ser.add(nf3.format(Double.parseDouble(""+DLNG_tmp_sales_tax_Ser.elementAt(k))/foreign_exchg_rate));
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							// if(k<=end_index_4)//ADDED FOR LTCORA AND CN
							{
								dlng_sales_sales_tax_usd_total_Ser += (Double.parseDouble(""+DLNG_tmp_sales_tax_Ser.elementAt(k))/foreign_exchg_rate);
							}
							 DLNG_VAT_AMT_USD_Ser.add("-");
							// DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+DLNG_tmp_vat_Ser.elementAt(k))>0)
						{
							DLNG_SALES_TAX_AMT_USD_Ser.add("-");
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							DLNG_VAT_AMT_USD_Ser.add(nf3.format(Double.parseDouble(""+DLNG_tmp_vat_Ser.elementAt(k))/foreign_exchg_rate));
							//DLNG_VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_vat.elementAt(k))/foreign_exchg_rate));
							 //if(k<=end_index_4)//ADDED FOR LTCORA AND CN
							{
								dlng_sales_vat_usd_total_Ser += (Double.parseDouble(""+DLNG_tmp_vat_Ser.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_SALES_TAX_AMT_USD_Ser.add("-");
							DLNG_VAT_AMT_USD_Ser.add("-");
							//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_addl_tax_Ser.elementAt(k))>0)
						{
							DLNG_ADD_TAX_USD_Ser.add(nf3.format(Double.parseDouble(""+DLNG_tmp_addl_tax_Ser.elementAt(k))/foreign_exchg_rate));
							//DLNG_ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							// if(k<=end_index_4)
							{
								dlng_sales_addl_tax_usd_total_Ser += (Double.parseDouble(""+DLNG_tmp_addl_tax_Ser.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_ADD_TAX_USD_Ser.add("-");
							//DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+DLNG_tmp_service_tax_Ser.elementAt(k))>0)
						{
							DLNG_SERVICE_TAX_USD_Ser.add(nf3.format(Double.parseDouble(""+DLNG_tmp_service_tax_Ser.elementAt(k))/foreign_exchg_rate));
						//	DLNG_SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+DLNG_tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							 //if(k<=end_index_4)
							{
								dlng_sales_service_tax_usd_total_Ser += (Double.parseDouble(""+DLNG_tmp_service_tax_Ser.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							DLNG_SERVICE_TAX_USD_Ser.add("-");
							//DLNG_SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					/*if(count7>0)
					{
						if(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))>0)
						{
							SBC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							SBC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SBC_TAX_USD.add("-");
							SBC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count8>0)
					{
						if(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))>0)
						{
							KKC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							KKC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							KKC_TAX_USD.add("-");
							KKC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count9>0)
					{
						if(Double.parseDouble(""+tmp_igst_tax.elementAt(k))>0)
						{
							IGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							IGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							IGST_TAX_USD.add("-");
							IGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count10>0)
					{
						if(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))>0)
						{
							SGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							SGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SGST_TAX_USD.add("-");
							SGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count11>0)
					{
						if(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))>0)
						{
							CGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							CGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							CGST_TAX_USD.add("-");
							CGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count12>0)
					{
						if(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))>0)
						{
							ZGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							ZGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}else if(k<=end_index_4)
							{
								dlng_sales_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ZGST_TAX_USD.add("-");
							ZGST_TAX_USD_NUMERIC.add("0.00");
						}
					}*/
				}
				else
				{
					DLNG_GROUP_FOREIGN_EXCHG_RATE_Ser.add("-");
					if(count2>0)
					{
						DLNG_SALES_TAX_AMT_USD_Ser.add("-");									
						DLNG_VAT_AMT_USD_Ser.add("-");
						//DLNG_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						//DLNG_VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						DLNG_ADD_TAX_USD_Ser.add("-");
						//DLNG_ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						DLNG_SERVICE_TAX_USD_Ser.add("-");
						//DLNG_SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					/*if(count7>0)
					{
						SBC_TAX_USD.add("-");
						SBC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count8>0)
					{
						KKC_TAX_USD.add("-");
						KKC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count9>0)
					{
						IGST_TAX_USD.add("-");
						IGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count10>0)
					{
						SGST_TAX_USD.add("-");
						SGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count11>0)
					{
						CGST_TAX_USD.add("-");
						CGST_TAX_USD_NUMERIC.add("0.00");
					}if(count12>0)
					{
						ZGST_TAX_USD.add("-");
						ZGST_TAX_USD_NUMERIC.add("0.00");
					}*/
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<DLNG_HLPL_INV_SEQ_Ser.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+DLNG_HLPL_INV_SEQ_Ser.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+DLNG_CONTRACT_TYPE_Ser.elementAt(i)+"' ";
				if(DLNG_CONTRACT_TYPE_Ser.elementAt(i).toString().equalsIgnoreCase("T") || DLNG_CONTRACT_TYPE_Ser.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+DLNG_Account_Mapping_id_Ser.elementAt(i)+"'";
				}
			//	//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DLNG_XML_GEN_FLAG_Ser.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					DLNG_XML_GEN_FLAG_Ser.add("N");
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	public void get_DLNG_Latepayment_Invoice_dtl()throws SQLException{
		try {
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE,OFFSPEC_QTY,OFFSPEC_RATE "+
				  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE in ('M','I') AND FLAG in ('M','I') and approved_flag='Y' " 
				  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE,OFFSPEC_QTY,OFFSPEC_RATE "+
						  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CONTRACT_TYPE in ('M','I') AND FLAG in ('M','I') and approved_flag='Y' " 
						  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
//			System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "0000"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "000"+inv_no;
					}
					else if(inv_no<1000)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<10000)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
							invoice_no = ""+inv_no;
					}
					
					
					DLNG_LM_hlpl_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_LM_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					DLNG_LM_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					DLNG_LM_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					DLNG_LM_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					DLNG_LM_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					DLNG_LM_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					DLNG_LM_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					DLNG_LM_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					DLNG_LM_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					DLNG_LM_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					DLNG_LM_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					DLNG_LM_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					DLNG_LM_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					DLNG_LM_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					DLNG_LM_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					DLNG_LM_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					DLNG_LM_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					DLNG_LM_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					DLNG_LM_tax_amt_inr.add(rset.getString(20)==null?"":rset.getString(20));
					DLNG_LM_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					DLNG_LM_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					//LM_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					DLNG_LM_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					DLNG_LM_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					DLNG_LM_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					DLNG_LM_currency_typ.add(rset.getString(27)==null?"":rset.getString(27));
					DLNG_LM_GROSS_AMT_USD.add(rset.getString(28)==null?"":rset.getString(28));
					DLNG_LM_exch_rate_val.add(rset.getString(29)==null?"":rset.getString(29));
					DLNG_LM_INT_DAY.add(rset.getString(30)==null?"":rset.getString(30));
					DLNG_LM_INT_RATE.add(rset.getString(31)==null?"":rset.getString(31));
					
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						DLNG_LM_customer_name.add(rset1.getString(1));
					} else {
						DLNG_LM_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								DLNG_LM_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								DLNG_LM_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<DLNG_LM_mapping_id.size();i++)
				{
					String LM_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+DLNG_LM_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+DLNG_LM_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						LM_val = rset.getString(1);
					} else {
						LM_val = "0";
					}
					double LM_amt = 0;
					LM_amt = (Double.parseDouble(""+DLNG_LM_total_qty.elementAt(i)) * Double.parseDouble(LM_val)) / 100;
					DLNG_LM_qty.add(""+nf_1.format(LM_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				double tax_amt_inr=0;
				if(!DLNG_LM_tax_amt_inr.elementAt(i).equals("")){
						Double.parseDouble(DLNG_LM_tax_amt_inr.elementAt(i)+"");
				}
				if(!DLNG_LM_tax_flag.elementAt(i).equals(""))
				{
					if(DLNG_LM_tax_flag.elementAt(i).equals("I"))
					{
						
							DLNG_LM_RATE_IGST.add(nf.format(Double.parseDouble(DLNG_LM_tax_struct_cd.elementAt(i)+"")));
							DLNG_LM_RATE_CGST.add("-");
							DLNG_LM_RATE_SGST.add("-");
						
							DLNG_LM_AMT_IGST.add(nf3.format(Double.parseDouble(DLNG_LM_tax_amt_inr.elementAt(i)+"")));
							DLNG_LM_AMT_CGST.add("-");
							DLNG_LM_AMT_SGST.add("-");
						
					}
					else if(DLNG_LM_tax_flag.elementAt(i).equals("C"))
					{
						DLNG_LM_RATE_IGST.add("-");
						DLNG_LM_AMT_IGST.add("-");
						if(tax_amt_inr > 0)
						{
							DLNG_LM_AMT_CGST.add(nf3.format(tax_amt_inr/2));
							DLNG_LM_AMT_SGST.add(nf3.format(tax_amt_inr/2));
						}
						else
						{
							DLNG_LM_AMT_SGST.add("-");
							DLNG_LM_AMT_CGST.add("-");
						}
						if(!DLNG_LM_tax_amt_inr.elementAt(i).equals("")){
						DLNG_LM_RATE_CGST.add(nf.format(Double.parseDouble(DLNG_LM_tax_struct_cd.elementAt(i)+"")));
						DLNG_LM_RATE_SGST.add(nf.format(Double.parseDouble(DLNG_LM_tax_struct_cd.elementAt(i)+"")));
						}else{
							DLNG_LM_RATE_SGST.add("-");
							DLNG_LM_RATE_CGST.add("-");
						}
					}
					else
					{
						DLNG_LM_RATE_IGST.add("-");
						DLNG_LM_RATE_CGST.add("-");
						DLNG_LM_RATE_SGST.add("-");
						DLNG_LM_AMT_SGST.add("-");
						DLNG_LM_AMT_CGST.add("-");
						DLNG_LM_AMT_IGST.add("-");
					}
				}
				else
				{
					DLNG_LM_RATE_IGST.add("-");
					DLNG_LM_RATE_CGST.add("-");
					DLNG_LM_RATE_SGST.add("-");
					DLNG_LM_AMT_SGST.add("-");
					DLNG_LM_AMT_CGST.add("-");
					DLNG_LM_AMT_IGST.add("-");
				}
				/*queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+DLNG_LM_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DLNG_LM_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+DLNG_LM_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
//				System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
					////System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						DLNG_LM_customer_Invoice_Tax_Abbr.add(tax_abbr);
						DLNG_LM_customer_Invoice_Tax_Name.add(tax_nm);
						DLNG_LM_customer_tax_name.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,tax_nm);
						DLNG_LM_customer_tax_abbr.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						DLNG_LM_customer_Invoice_Tax_Abbr.add("");
						DLNG_LM_customer_Invoice_Tax_Name.add("");
						DLNG_LM_customer_tax_name.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,"");
						DLNG_LM_customer_tax_abbr.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+DLNG_LM_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+DLNG_LM_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DLNG_LM_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+DLNG_LM_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+DLNG_LM_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					DLNG_LM_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					DLNG_LM_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					DLNG_LM_customer_tax_cd.put(DLNG_LM_hlpl_inv_seq_no.elementAt(i)+":"+DLNG_LM_mapping_id.elementAt(i)+":"+tax,tax);
					DLNG_LM_customer_tax_rate.put(DLNG_LM_hlpl_inv_seq_no.elementAt(i)+":"+DLNG_LM_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					DLNG_LM_customer_tax_amt.put(DLNG_LM_hlpl_inv_seq_no.elementAt(i)+":"+DLNG_LM_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				DLNG_LM_customer_Invoice_Tax_Code.add(tax_cd);*/
				
				
				if(tax_gst) {
					String val = ""+DLNG_LM_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						DLNG_LM_net_amt_inr.remove(i);
						DLNG_LM_net_amt_inr.add(i, val);
					}
					val = ""+DLNG_LM_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						DLNG_LM_tax_amt_inr.remove(i);
						DLNG_LM_tax_amt_inr.add(i, val);
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	
	}
	public void get_Latepayment_Invoice_dtl()throws SQLException{

		try {
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE,OFFSPEC_QTY,OFFSPEC_RATE "+
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE in ('M','I') AND FLAG in ('M','I') and approved_flag='Y' " 
				  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE,OFFSPEC_QTY,OFFSPEC_RATE "+
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CONTRACT_TYPE in ('M','I') AND FLAG in ('M','I') and approved_flag='Y' " 
						  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
//			System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "0000"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "000"+inv_no;
					}
					else if(inv_no<1000)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<10000)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
							invoice_no = ""+inv_no;
					}
					
					
					LM_hlpl_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
					LM_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					LM_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					LM_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					LM_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					LM_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					LM_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					LM_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					LM_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					LM_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					LM_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					LM_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					LM_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					LM_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					LM_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					LM_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					LM_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					LM_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					LM_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					LM_tax_amt_inr.add(rset.getString(20)==null?"-":rset.getString(20));
					LM_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					LM_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					LM_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					LM_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					LM_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					LM_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					LM_currency_typ.add(rset.getString(27)==null?"":rset.getString(27));
					LM_GROSS_AMT_USD.add(rset.getString(28)==null?"":rset.getString(28));
					LM_exch_rate_val.add(rset.getString(29)==null?"":rset.getString(29));
					LM_INT_DAY.add(rset.getString(30)==null?"":rset.getString(30));
					LM_INT_RATE.add(rset.getString(31)==null?"":rset.getString(31));
					
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						LM_customer_name.add(rset1.getString(1));
					} else {
						LM_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								LM_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								LM_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<LM_mapping_id.size();i++)
				{
					String LM_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+LM_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+LM_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						LM_val = rset.getString(1);
					} else {
						LM_val = "0";
					}
					double LM_amt = 0;
					LM_amt = (Double.parseDouble(""+LM_total_qty.elementAt(i)) * Double.parseDouble(LM_val)) / 100;
					LM_qty.add(""+nf_1.format(LM_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+LM_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+LM_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+LM_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
//				//System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
					////System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						LM_customer_Invoice_Tax_Abbr.add(tax_abbr);
						LM_customer_Invoice_Tax_Name.add(tax_nm);
						LM_customer_tax_name.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,tax_nm);
						LM_customer_tax_abbr.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						LM_customer_Invoice_Tax_Abbr.add("");
						LM_customer_Invoice_Tax_Name.add("");
						LM_customer_tax_name.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,"");
						LM_customer_tax_abbr.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+LM_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+LM_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+LM_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+LM_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+LM_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					LM_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					LM_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					LM_customer_tax_cd.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,tax);
					LM_customer_tax_rate.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					LM_customer_tax_amt.put(LM_hlpl_inv_seq_no.elementAt(i)+":"+LM_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				LM_customer_Invoice_Tax_Code.add(tax_cd);
				
				
				if(tax_gst) {
					String val = ""+LM_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						LM_net_amt_inr.remove(i);
						LM_net_amt_inr.add(i, val);
					}
					val = ""+LM_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						LM_tax_amt_inr.remove(i);
						LM_tax_amt_inr.add(i, val);
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	
	}
	public void get_Storage_Invoice_dtl() throws SQLException
	{
		try {
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE "+
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				 // "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='B' AND FLAG='B' "
				 "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='B' AND FLAG IN ('B','X') "
				  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO,INV_CUR_FLAG,GROSS_AMT_USD,EXCHG_RATE_VALUE "+
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						 // "AND CONTRACT_TYPE='B' AND FLAG='B' " 
						 "AND CONTRACT_TYPE='B' AND FLAG IN ('B','X') "
						  + "ORDER BY  HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'Month'),FINANCIAL_YEAR";
			}
//			System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "0000"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "000"+inv_no;
					}
					else if(inv_no<1000)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<10000)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
							invoice_no = ""+inv_no;
					}
					
					
					storage_hlpl_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
					storage_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					storage_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					storage_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					storage_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					storage_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					storage_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					storage_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					storage_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					storage_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					storage_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					storage_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					storage_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					storage_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					storage_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					storage_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					storage_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					storage_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					storage_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					storage_tax_amt_inr.add(rset.getString(20)==null?"0":rset.getString(20));
					storage_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					storage_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					storage_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					storage_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					storage_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					storage_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					storage_currency_typ.add(rset.getString(27)==null?"":rset.getString(27));
					storage_GROSS_AMT_USD.add(rset.getString(28)==null?"":rset.getString(28));
					storage_exch_rate_val.add(rset.getString(29)==null?"":rset.getString(29));
					
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						storage_customer_name.add(rset1.getString(1));
					} else {
						storage_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								storage_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								storage_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<storage_mapping_id.size();i++)
				{
					String storage_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+storage_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+storage_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						storage_val = rset.getString(1);
					} else {
						storage_val = "0";
					}
					double storage_amt = 0;
					storage_amt = (Double.parseDouble(""+storage_total_qty.elementAt(i)) * Double.parseDouble(storage_val)) / 100;
					storage_qty.add(""+nf_1.format(storage_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+storage_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+storage_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+storage_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
//				//System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
					////System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						storage_customer_Invoice_Tax_Abbr.add(tax_abbr);
						storage_customer_Invoice_Tax_Name.add(tax_nm);
						storage_customer_tax_name.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,tax_nm);
						storage_customer_tax_abbr.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						storage_customer_Invoice_Tax_Abbr.add("");
						storage_customer_Invoice_Tax_Name.add("");
						storage_customer_tax_name.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,"");
						storage_customer_tax_abbr.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+storage_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+storage_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+storage_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+storage_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+storage_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					storage_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					storage_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					storage_customer_tax_cd.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,tax);
					storage_customer_tax_rate.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					storage_customer_tax_amt.put(storage_hlpl_inv_seq_no.elementAt(i)+":"+storage_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				storage_customer_Invoice_Tax_Code.add(tax_cd);
				
				
				if(tax_gst) {
					String val = ""+storage_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						storage_net_amt_inr.remove(i);
						storage_net_amt_inr.add(i, val);
					}
					val = ""+storage_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						storage_tax_amt_inr.remove(i);
						storage_tax_amt_inr.add(i, val);
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void get_Deficiency_dtl() throws SQLException
	{
		try {

			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO "+
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			  "AND CONTRACT_TYPE='E' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO "+
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			  "AND CONTRACT_TYPE='E' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
//			System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "000"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<1000)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
						invoice_no = ""+inv_no;
					}
					
					def_hlpl_inv_seq_no.add(invoice_no);
					def_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					def_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					def_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					//def_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					def_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					//def_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					def_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					def_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					def_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					def_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					def_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					def_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					def_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					def_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					def_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					def_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					def_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					def_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					def_tax_amt_inr.add(rset.getString(20)==null?"0":rset.getString(20));
					def_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					def_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					def_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					def_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					def_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					def_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					
DEF_qty_total=0;
					
					queryString="SELECT nvl(sum(QUANTITY),0)"
							+ " from fms8_other_invoice_dtl where "
							+ " INV_SEQ_NO='"+rset.getString(1)+"' "
							+ " AND FINANCIAL_YEAR='"+rset.getString(10)+"'"
							+ " AND CONTRACT_TYPE='E'  ";
					//System.out.println("---dfbmdbf--"+queryString);
					rset1=stmt1.executeQuery(queryString);
					if(rset1.next())
					{
						//TOTAL_QTY.add(nf.format(Double.parseDouble(""+ rset1.getString(1)==null?"":rset1.getString(1))));
//						System.out.println("rset.getString(10)------"+rset.getString(10)+"---rset1.getString(1)--"+rset1.getString(1));
						def_sale_price.add(nf2.format(Double.parseDouble(""+rset.getString(8))/ Double.parseDouble(""+rset1.getString(1))));
						DEF_qty_total += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}else {
						//TOTAL_QTY.add("0");
						def_sale_price.add("-");
					}
					def_total_qty.add(DEF_qty_total);
					
						String tax_cd="";
						queryString="SELECT TAX_DETAILS "
								+ " from fms8_other_invoice_dtl where "
								+ " INV_SEQ_NO='"+rset.getString(1)+"' "
								+ " AND FINANCIAL_YEAR='"+rset.getString(10)+"'"
								+ " AND CONTRACT_TYPE='E'  ";
						//System.out.println("---dfbmdbf--"+queryString);
						rset1=stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							tax_cd = rset1.getString(1)==null?"":rset1.getString(1);
						}
						
						if(tax_cd.contains("IGST")) {
							String temp_arr[] = tax_cd.split("-");
							String tax_per = temp_arr[1].substring(0, temp_arr[1].length()-1);
							String igst_tax_amt = nf.format(Math.round((Double.parseDouble(rset.getString(8)+"")*Double.parseDouble(tax_per.trim()+""))/100));
							DEF_IGST_TAX.add(igst_tax_amt);
						}else {
							DEF_IGST_TAX.add("-");
						}
						if(tax_cd.contains("SGST") || tax_cd.contains("CGST")) {
							String temp_arr[] = tax_cd.split("-");
							String tax_per = temp_arr[2].substring(0, temp_arr[2].length()-1);
							String sgst_tax_amt = nf.format(Math.round((Double.parseDouble(rset.getString(8)+"")*Double.parseDouble(tax_per.trim()+""))/100));
							DEF_SGST_TAX.add(sgst_tax_amt);
						}else {
							DEF_SGST_TAX.add("-");
						}
					
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						def_customer_name.add(rset1.getString(1));
					} else {
						def_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								def_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								def_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<def_mapping_id.size();i++)
				{
					String sug_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+def_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+def_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						sug_val = rset.getString(1);
					} else {
						sug_val = "0";
					}
					double sug_amt = 0;
					sug_amt = (Double.parseDouble(""+def_total_qty.elementAt(i)) * Double.parseDouble(sug_val)) / 100;
					def_qty.add(""+nf_1.format(sug_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+def_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+def_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+def_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
				//System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
					////System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						def_customer_Invoice_Tax_Abbr.add(tax_abbr);
						def_customer_Invoice_Tax_Name.add(tax_nm);
						def_customer_tax_name.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,tax_nm);
						def_customer_tax_abbr.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						def_customer_Invoice_Tax_Abbr.add("");
						def_customer_Invoice_Tax_Name.add("");
						def_customer_tax_name.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,"");
						def_customer_tax_abbr.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+def_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+def_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+def_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+def_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+def_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					def_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					def_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					def_customer_tax_cd.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,tax);
					def_customer_tax_rate.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					def_customer_tax_amt.put(def_hlpl_inv_seq_no.elementAt(i)+":"+def_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				def_customer_Invoice_Tax_Code.add(tax_cd);
				
				//System.out.println("tax_amt--"+tax_amt);
				if(tax_gst) {
					String val = ""+def_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						def_net_amt_inr.remove(i);
						def_net_amt_inr.add(i, val);
					}
					val = ""+def_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						def_tax_amt_inr.remove(i);
						def_tax_amt_inr.add(i, val);
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	public void get_SUG_dtl() throws SQLException
	{
		try
		{
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}

			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,NEW_INV_SEQ_NO "+
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='C' AND FLAG='U' " //FOR SUG INVOICE
				  		+ "ORDER BY  FINANCIAL_YEAR,TO_CHAR(INVOICE_DT,'Month'),HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID,NEW_INV_SEQ_NO "+
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CONTRACT_TYPE='C' AND FLAG='U' " //FOR SUG INVOICE
						  + "ORDER BY  FINANCIAL_YEAR,TO_CHAR(INVOICE_DT,'Month'),HLPL_INV_SEQ_NO";
			}
			//System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					int inv_no = rset.getInt(1);
					String invoice_no = ""+inv_no;
					if(inv_no<10)
					{
						invoice_no = "000"+inv_no;
					}
					else if(inv_no<100)
					{
						invoice_no = "00"+inv_no;
					}
					else if(inv_no<1000)
					{
						invoice_no = "0"+inv_no;
					}
					else
					{
						invoice_no = ""+inv_no;
					}
					
					sug_hlpl_inv_seq_no.add(invoice_no);
					sug_invoice_dt.add(rset.getString(2)==null?"":rset.getString(2));
					sug_period_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					sug_period_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
					sug_sale_price.add(rset.getString(5)==null?"0":nf_1.format(Double.parseDouble(rset.getString(5))));
					sug_due_dt.add(rset.getString(6)==null?"":rset.getString(6));
					sug_total_qty.add(rset.getString(7)==null?"0":nf_1.format(Double.parseDouble(rset.getString(7))));
					sug_gross_amt_inr.add(rset.getString(8)==null?"0":nf_1.format(Double.parseDouble(rset.getString(8))));
					sug_net_amt_inr.add(rset.getString(9)==null?"0":nf_1.format(Double.parseDouble(rset.getString(9))));
					sug_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					sug_customer_cd.add(rset.getString(11)==null?"":rset.getString(11));
					sug_tax_struct_cd.add(rset.getString(12)==null?"":rset.getString(12));
					sug_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					sug_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					sug_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					sug_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					sug_invoice_month.add(rset.getString(17)==null?"":rset.getString(17));
					sug_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					sug_contact_person_cd.add(rset.getString(19)==null?"":rset.getString(19));
					sug_tax_amt_inr.add(rset.getString(20)==null?"0":rset.getString(20));
					sug_tax_flag.add(rset.getString(21)==null?"":rset.getString(21));
					sug_plant_seq_no.add(rset.getString(22)==null?"":rset.getString(22));
					sug_cust_inv_seq_no.add(rset.getString(23)==null?"":rset.getString(23));
					sug_sun_approval.add(rset.getString(24)==null?"":rset.getString(24));
					sug_mapping_id.add(rset.getString(25)==null?"":rset.getString(25));
					sug_new_inv_seq_no.add(rset.getString(26)==null?"":rset.getString(26));
					
					String query = "SELECT NVL(C.CUSTOMER_ABBR,'') " +
							  "FROM FMS7_CUSTOMER_MST C " +
							  "WHERE  CUSTOMER_CD='"+rset.getString(11)+"' ";
					rset1 = stmt1.executeQuery(query);
					if(rset1.next())
					{
						sug_customer_name.add(rset1.getString(1));
					} else {
						sug_customer_name.add("");
					}
					
					queryString = "SELECT NVL(XML_GEN_FLAG,'N') FROM FMS7_ACCOUNT_APPROVED_DTL " +
							  "WHERE INV_CARGO_NO='"+invoice_no+"/"+rset.getString(10)+"' AND JOURNAL_TYPE='FMSSL' " +
							  "AND CONTRACT_TYPE='"+rset.getString(18)+"' AND MAPPING_ID='"+rset.getString(25)+"'";
//							//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);
							if(rset2.next())
							{
								sug_XML_GEN_FLAG.add(rset2.getString(1)==null?"N":rset2.getString(1));
							}
							else
							{
								sug_XML_GEN_FLAG.add("N");
							}
				}
				
				for(int i=0;i<sug_mapping_id.size();i++)
				{
					String sug_val = "0";
					
					String q = "SELECT SYS_USE_GAS FROM FMS8_LNG_REGAS_CARGO_DTL WHERE "
							+ "MAPPING_ID = '"+sug_mapping_id.elementAt(i)+"' "
							+ "AND CARGO_SEQ_NO='"+sug_sn_no.elementAt(i)+"' ";
//					System.out.println("query"+q);
					rset = stmt.executeQuery(q);
					if(rset.next())
					{
						sug_val = rset.getString(1);
					} else {
						sug_val = "0";
					}
					double sug_amt = 0;
					sug_amt = (Double.parseDouble(""+sug_total_qty.elementAt(i)) * Double.parseDouble(sug_val)) / 100;
					sug_qty.add(""+nf_1.format(sug_amt));
				
				
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				int c = 0;boolean tax_gst = false;
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+sug_tax_struct_cd.elementAt(i)+"' AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+sug_tax_struct_cd.elementAt(i)+"' AND " +
							  "B.app_date<=TO_DATE('"+sug_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
//				System.out.println("STEP-1A.3:FMS7_TAX_STRUCTURE_DTL: "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String tax = rset.getString(1);
					
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code='"+tax+"'";
//					System.out.println("Query For Fetching Tax Name = "+queryString);
					rset2 = stmt2.executeQuery(queryString);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1).trim()==null?"":rset2.getString(1).trim();
						String tax_nm = rset2.getString(2).trim()==null?"":rset2.getString(2).trim();
						if(tax_abbr.contains("GST"))
							tax_gst = true;
						sug_customer_Invoice_Tax_Abbr.add(tax_abbr);
						sug_customer_Invoice_Tax_Name.add(tax_nm);
						sug_customer_tax_name.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,tax_nm);
						sug_customer_tax_abbr.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,tax_abbr);
						
					}
					else
					{
						sug_customer_Invoice_Tax_Abbr.add("");
						sug_customer_Invoice_Tax_Name.add("");
						sug_customer_tax_name.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,"");
						sug_customer_tax_abbr.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,"");
						
					}
					
					if(c==0)
					{
						tax_cd = rset.getString(1);
						
					} else {
						tax_cd +=","+ rset.getString(1);
					}
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+sug_gross_amt_inr.elementAt(i))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+sug_tax_struct_cd.elementAt(i)+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+sug_tax_struct_cd.elementAt(i)+"' AND " +
									  "B.app_date<=TO_DATE('"+sug_invoice_dt.elementAt(i)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
//						//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
				 		rset1=stmt1.executeQuery(queryString1);
				 		if(rset1.next())
				 		{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+sug_gross_amt_inr.elementAt(i))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
				 		}
				 		else
				 		{
				 			tax_amt = 0;
				 		}
					}
					else
					{
						tax_amt = 0;
					}
					
					if(tax_gst) {
						tax_amt = Math.round(tax_amt);
					}
					
					sug_customer_Invoice_Tax_Rate.add(nf_2.format(Double.parseDouble(tax_factor)));
					sug_customer_Invoice_Tax_Amt.add(nf_11.format(tax_amt));
					
					sug_customer_tax_cd.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,tax);
					sug_customer_tax_rate.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,nf_2.format(Double.parseDouble(tax_factor)));
					sug_customer_tax_amt.put(sug_hlpl_inv_seq_no.elementAt(i)+":"+sug_mapping_id.elementAt(i)+":"+tax,nf_11.format(tax_amt));
					
					c++;
				}
				
				sug_customer_Invoice_Tax_Code.add(tax_cd);
				
				
				if(tax_gst) {
					String val = ""+sug_net_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						sug_net_amt_inr.remove(i);
						sug_net_amt_inr.add(i, val);
					}
					val = ""+sug_tax_amt_inr.elementAt(i);
					if(!val.equals("")) {
						val = ""+Math.round(Double.parseDouble(val));
						sug_tax_amt_inr.remove(i);
						sug_tax_amt_inr.add(i, val);
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	String invoice_type = "";
	Vector sac_code = new Vector();
	Vector TAX_RATE_CGST = new Vector();
	Vector TAX_RATE_SGST = new Vector();
	Vector TAX_RATE_IGST = new Vector();
	
	Vector GROSS_AMT_INR_NEW = new Vector();
	Vector GROSS_AMT_USD_NEW = new Vector();
	Vector ADVANCE_ADJ_GROSS_AMT_INR = new Vector();
	Vector ADVANCE_ADJ_GROSS_AMT_USD = new Vector();
	Vector ADVANCE_ADJ_AMT_NEW = new Vector();
	
	public void get_Sales_dtlsNEW()			//BK20151125	//*Added new SBC value here
	{

		try
		{//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String sbc_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			String kkc_code = "0"; //SB20160620
			String igst_code = "0";
			String cgst_code = "0";
			String sgst_code = "0";
			String zgst_code = "0";
			String sgst_code_6="0";
			String cgst_code_6="0";
			Vector new_vat_code = new Vector();
			Vector new_cst_code= new Vector();
			
			Vector tmp_group_gross_usd_amt = new Vector();
			//RS23062017
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='Zero GST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
//			System.out.println("====zgst_code==="+zgst_code);
			////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) = 'VAT'"; 
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'VAT%' AND UPPER(SHT_NM) != 'VAT' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_vat_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'CST%' AND UPPER(SHT_NM) != 'CST' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_cst_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sbc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			//SB20160620: For KKC ///////////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='KKC' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				kkc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			

			queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
					+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
					// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString---"+queryString);
			if(rset.next()){
				
				queryString1 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
						  "tax_code="+rset.getString(1)+"";
				//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tcs_nm=rset1.getString(2)==null?"":rset1.getString(2);
					tcs_sht_nm=rset1.getString(1)==null?"":rset1.getString(1);
					tcs_nm=tcs_sht_nm;
				}
			}
		
			////////////////////////////////
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			tot_trans_grossinr=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			int j=-1;
			
			int n=0; //HARSH20210629 FOR STATE WISE GROUPING
			
			//MD
			if((For1.equals("OWN") || For1.equalsIgnoreCase("0")) && !invoice_type.equals("R") ){
				
				//HARSH20210629 STATE WISE GROUPING
				if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
				{
					queryString="SELECT DISTINCT SUP_STATE_CODE FROM FMS7_INVOICE_MST "
							+ "WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " 
							+"AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY SUP_STATE_CODE DESC";
				}
				else
				{
					queryString="SELECT DISTINCT SUP_STATE_CODE FROM FMS7_INVOICE_MST "
							+ "WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " 
							+"AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY SUP_STATE_CODE DESC";
				}
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String state_cd = rset.getString(1)==null?"0":rset.getString(1);
					VSTATE_CD.add(state_cd);
					if(!state_cd.equals("0") && !state_cd.equals(""))
					{
						queryString1="SELECT STATE_NM FROM STATE_MST WHERE STATE_CODE='"+state_cd+"'";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							VSTATE_NM.add(rset1.getString(1)==null?"":rset1.getString(1));
						}
					}
					else
					{
						VSTATE_NM.add("Other");
					}
				}
				
				//System.out.println(VSTATE_CD);
				////////////////////////////////////////////////
				
				for(int i=0; i<VSTATE_CD.size(); i++) //HARSH20210629
				{
					if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
					{
						queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
						  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CODE,gross_amt_transportation,tariff_trans_flag " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND SUP_STATE_CODE='"+VSTATE_CD.elementAt(i)+"' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					}
					else
					{
						queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
						  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CODE,gross_amt_transportation,tariff_trans_flag " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND SUP_STATE_CODE='"+VSTATE_CD.elementAt(i)+"' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					}
//					System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						j++;
						n++; //HARSH20210629
						String cont_type = rset.getString(20)==null?"":rset.getString(20);
						INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
						SUMMRY_CONT_TYP.add(cont_type);
						String contract_name = "";
						String sale_price = rset.getString(5)==null?"":rset.getString(5);
						HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
						INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
						PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
						PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
						String sup_st_cd=rset.getString(33)==null?"":rset.getString(33);
//						if(sup_st_cd.equals("0")){
//							sup_st_cd="24";
//						}
						if(!sup_st_cd.equals("0")){
							queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
							//System.out.println("Sales Details Query for state name = "+queryString);
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{			
								String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
								if(!cost_cd.equals("-")){
									cost_center_code_.add("Y");
								}else{
									cost_center_code_.add("N");
								}
							}else{
								cost_center_code_.add("N");
							}
						}else{
							cost_center_code_.add("Y");
						}
						if(!sale_price.equals("") && !sale_price.equals(" "))
						{
							SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
						}
						else
						{
							SALE_PRICE.add("-");
							SALE_PRICE_NUMERIC.add("0.0000");
						}
						DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
						
						TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
						TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
						
						EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
						
						GROSS_AMT_USD.add(rset.getString(9)==null?"":nf2.format(Double.parseDouble(rset.getString(9))));
						GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
						sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
		//				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));  //Hiren_20200804
						GROSS_AMT_INR.add(rset.getString(10)==null?"":rset.getString(10)); 
						GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
						GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
						sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="5";
						String exchg_rate="";
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(exchg_rate);
						}
						
						//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
						
						//temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
						
						NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
						NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
						sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
						
						temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
						FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
						CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
						TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
						
						String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
						String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
						String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_rev_no = rset.getString(16)==null?"0":rset.getString(16);
						String tmp_fgsa_rev_no = rset.getString(18)==null?"0":rset.getString(18);
										
						String contract_no = "",agr_base="";
						
						if(cont_type.equalsIgnoreCase("S"))
						{
							queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
							
							queryString2 = "SELECT CONT_BASE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FGSA_NO="+tmp_fgsa_no+" AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"'  AND SN_REV_NO='"+tmp_sn_rev_no+"'";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								agr_base = rset2.getString(1)==null?"":rset2.getString(1);
								Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
								if(agr_base.equals("")){
									queryString2 = "SELECT FGSA_BASE FROM FMS7_FGSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
										   	   "FGSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
									rset3 = stmt3.executeQuery(queryString2);
									if(rset3.next())
									{
										agr_base = rset3.getString(1)==null?"":rset3.getString(1);
										Agreement_base.add(rset3.getString(1)==null?"":rset3.getString(1));
									}
									else
									{
										Agreement_base.add("");
									}
								}
							}else{
								queryString2 = "SELECT FGSA_BASE FROM FMS7_FGSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FGSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									agr_base = rset2.getString(1)==null?"":rset2.getString(1);
									Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									Agreement_base.add("");
								}
							}
							
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
							queryString2 = "SELECT CONT_BASE FROM FMS7_LOA_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
								   	   "TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO="+tmp_sn_no+"  AND LOA_REV_NO='"+tmp_sn_rev_no+"'";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								agr_base = rset2.getString(1)==null?"":rset2.getString(1);
								Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
								if(agr_base.equals("")){
									queryString2 = "SELECT TENDER_BASE FROM FMS7_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
										   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
									rset3 = stmt3.executeQuery(queryString2);
									if(rset3.next())
									{
										agr_base = rset3.getString(1)==null?"":rset3.getString(1);
										Agreement_base.add(rset3.getString(1)==null?"":rset3.getString(1));
									}
									else
									{
										Agreement_base.add("");
									}
								}
							}else{
								queryString2 = "SELECT TENDER_BASE FROM FMS7_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
									   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									agr_base = rset2.getString(1)==null?"":rset2.getString(1);
									Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									Agreement_base.add("");
								}
							}
						}
						
						if(cont_type.equalsIgnoreCase("S"))
						{
							contract_name = "SN-"+contract_no;
							SEGMENT_NAME.add("Sales");
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							contract_name = "LOA-"+contract_no;
							SEGMENT_NAME.add("LOA");
						}
						else if(cont_type.equalsIgnoreCase("R"))
						{
							contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							SEGMENT_NAME.add("Regas");
						}
						SN_NO.add(contract_name);
						temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
						SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
						FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
						temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
						FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
						MONTH.add(rset.getString(19)==null?"":rset.getString(19));
						CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
						//SEGMENT_NAME.add("Sales");
						PLANT_SEQ_NO.add(rset.getString(27));
						SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
						Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
						NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32)); //RS23062017
						SUPPLIER_CD.add("");
						AdvADJ_FLAG.add("");
						//FOR TCS pART
						String queryStrr="Select tcs_amt from fms7_invoice_tcs_dtl where hlpl_inv_seq_no='"+rset.getString(1)+"' and "
								+ "financial_year='"+rset.getString(12)+"' and customer_cd='"+tmp_cust_cd+"' and contract_type='"+cont_type+"' "
								+ "and  invoice_type='SALES' AND FLAG='Y'";
						rset2=stmt2.executeQuery(queryStrr);
						//System.out.println("queryString--"+queryStrr);
						if(rset2.next()){
							Vtcs_amt.add(rset2.getString(1)==null?"":rset2.getString(1));
						}else{
							Vtcs_amt.add("");
						}
						//
						
						//RG20200229 added for GTA part
						String invtransgross_amt=rset.getString(34)==null?"":rset.getString(34);
						if(!invtransgross_amt.equals("")){
							agr_base="D";
						}
						if(agr_base.equals("D")){
							String queryString_tr="";
							String transp_charges="";
							String temp_grossamt="";
							if(rset.getString(34)!=null){
								temp_grossamt=""+(Double.parseDouble(rset.getString(34)==null?"0":rset.getString(34)));
								temp_gross_amt.add(temp_grossamt);
								trans_gross_inr.add(Double.parseDouble(rset.getString(34)==null?"0":rset.getString(34)));
								tot_trans_grossinr+=Double.parseDouble(rset.getString(34)==null?"0":rset.getString(34));
								if(rset.getString(35)!=null){
									trans_charges.add("-");
								}else{
									queryString="SELECT TRANSPORTATION_TARIFF FROM FMS7_CONT_PLANT_TARIFF_DTL A WHERE CONTRACT_NO='"+rset.getString(15)+"' AND " +
											"CONTRACT_REV_NO='"+rset.getString(16)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
											"AGR_NO='"+rset.getString(17)+"' AND AGR_REV_NO = '"+rset.getString(18)+"' and contract_type='"+cont_type+"' "
											+ "and plant_seq_no='"+rset.getString(27)+"' and customer_cd='"+tmp_cust_cd+"' AND EFF_DT ="
											+ "(select max(eff_dt) from FMS7_CONT_PLANT_TARIFF_DTL B where B.CONTRACT_NO='"+rset.getString(15)+"' AND " +
											"B.CONTRACT_REV_NO='"+rset.getString(16)+"' AND B.CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
											"B.AGR_NO='"+rset.getString(17)+"' AND B.AGR_REV_NO = '"+rset.getString(18)+"' and B.contract_type='"+cont_type+"' "
											+ "and B.plant_seq_no='"+rset.getString(27)+"' and B.customer_cd='"+tmp_cust_cd+"') ";
									//System.out.println("queryString---"+queryString);
									rset2=stmt2.executeQuery(queryString);
									if(rset2.next()){
										trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
										
										transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
									}else{
										if(cont_type.equals("S")){
											queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
										}else if(cont_type.equals("L")){
											queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
										}
										rset2=stmt2.executeQuery(queryString_tr);
										if(rset2.next()){
											trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
											
											transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
										}
									}
								}
								
							}else{
								if(cont_type.equals("S")){
									queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
								}else if(cont_type.equals("L")){
									queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
									
								}
								rset2=stmt2.executeQuery(queryString_tr);
								//System.out.println("queryString--"+queryString_tr);
								if(rset2.next()){
									trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
									
									transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
			//						if(!transp_charges.equals("")){
			//							transp_charges=nf.format(Double.parseDouble(rset2.getString(1)==null?"":rset2.getString(1)));
			//						}
									
									//System.out.println("transp_charges---"+transp_charges);
									
								}else {
									trans_charges.add("-");
								}
								//System.out.println("---rset.getString(7)--"+rset.getString(7)+"--transp_charges--"+transp_charges);
								if(!transp_charges.equals("")){
									temp_grossamt=""+(Double.parseDouble(rset.getString(10)==null?"":rset.getString(10))+Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
									temp_gross_amt.add(temp_grossamt);
									trans_gross_inr.add(Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
									tot_trans_grossinr+=Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges);
									//System.out.println("---temp====="+temp_grossamt);
								}else{
									temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
									trans_gross_inr.add("-");
								}
							}
						}else{
							temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							trans_charges.add("-");
							trans_gross_inr.add("-");
						}
					}
					if(!VSTATE_CD.elementAt(i).equals("0")) //HARSH20210629
					{
						VST_WISE_INDEX.add(n);
					}
				}
			//System.out.println(VST_WISE_INDEX);
			//for getting manual invoice
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,sup_state_code " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,sup_state_code " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
	//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{		
				INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
				j++;
				n++; //HARSH20210629
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add(cont_type);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				String sup_st_cd=rset.getString(33)==null?"":rset.getString(33);
//				if(sup_st_cd.equals("0")){
//					sup_st_cd="24";
//				}
				if(!sup_st_cd.equals("0")){
					queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
					//System.out.println("Sales Details Query for state name = "+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{			
						String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
						if(!cost_cd.equals("-")){
							cost_center_code_.add("Y");
						}else{
							cost_center_code_.add("N");
						}
					}else{
						cost_center_code_.add("N");
					}
				}else{
					cost_center_code_.add("Y");
				}
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf2.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
//				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));  //Hiren_20200804
				GROSS_AMT_INR.add(rset.getString(10)==null?"":rset.getString(10)); 
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				//temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
				String tmp_sn_rev_no = rset.getString(16)==null?"0":rset.getString(16);
				String tmp_fgsa_rev_no = rset.getString(18)==null?"0":rset.getString(18);
								
				String contract_no = "",agr_base="";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
					queryString2 = "SELECT CONT_BASE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
						   	   "FGSA_NO="+tmp_fgsa_no+" AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"'";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						agr_base = rset2.getString(1)==null?"":rset2.getString(1);
						Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
						if(agr_base.equals("")){
							queryString2 = "SELECT FGSA_BASE FROM FMS7_FGSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FGSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
							rset3 = stmt3.executeQuery(queryString2);
							if(rset3.next())
							{
								agr_base = rset3.getString(1)==null?"":rset3.getString(1);
								Agreement_base.add(rset3.getString(1)==null?"":rset3.getString(1));
							}
							else
							{
								Agreement_base.add("");
							}
						}
					}else{
					queryString2 = "SELECT FGSA_BASE FROM FMS7_FGSA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
						   	   "FGSA_NO="+tmp_fgsa_no+" AND REV_NO='"+tmp_fgsa_rev_no+"'";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						agr_base = rset2.getString(1)==null?"":rset2.getString(1);
						Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
					}
					else
					{
						Agreement_base.add("");
					}
					}
					
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
					queryString2 = "SELECT CONT_BASE FROM FMS7_LOA_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
						   	   "TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"'";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						agr_base = rset2.getString(1)==null?"":rset2.getString(1);
						Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
						if(agr_base.equals("")){
							queryString2 = "SELECT TENDER_BASE FROM FMS7_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
								   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
							rset3 = stmt3.executeQuery(queryString2);
							if(rset3.next())
							{
								agr_base = rset3.getString(1)==null?"":rset3.getString(1);
								Agreement_base.add(rset3.getString(1)==null?"":rset3.getString(1));
							}
							else
							{
								Agreement_base.add("");
							}
						}
					}else{
						queryString2 = "SELECT TENDER_BASE FROM FMS7_TENDER_MST WHERE CUSTOMER_CD='"+tmp_cust_cd+"' AND " +
							   	   "TENDER_NO='"+tmp_fgsa_no+"' ";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							agr_base = rset2.getString(1)==null?"":rset2.getString(1);
							Agreement_base.add(rset2.getString(1)==null?"":rset2.getString(1));
						}
						else
						{
							Agreement_base.add("");
						}
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
					SEGMENT_NAME.add("Sales");
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
					SEGMENT_NAME.add("LOA");
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					SEGMENT_NAME.add("Regas");
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				//SEGMENT_NAME.add("Sales");
				PLANT_SEQ_NO.add(rset.getString(27));
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
				Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
				NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32)); //RS23062017
				SUPPLIER_CD.add("");
				AdvADJ_FLAG.add("");
				//FOR TCS pART
				String queryStrr="Select tcs_amt from fms7_invoice_tcs_dtl where hlpl_inv_seq_no='"+rset.getString(1)+"' and "
						+ "financial_year='"+rset.getString(12)+"' and customer_cd='"+tmp_cust_cd+"' and contract_type='"+cont_type+"' and  invoice_type='SALES' AND FLAG='Y'";
				rset2=stmt2.executeQuery(queryStrr);
				//System.out.println("queryString--"+queryStrr);
				if(rset2.next()){
					Vtcs_amt.add(rset2.getString(1)==null?"":rset2.getString(1));
				}else{
					Vtcs_amt.add("");
				}
				//
				
				//RG20200229 added for GTA part
				if(agr_base.equals("D")){
					String queryString_tr="";
					String transp_charges="";
					String temp_grossamt="";
					
						if(cont_type.equals("S")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
						}else if(cont_type.equals("L")){
							queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
							
						}
						rset2=stmt2.executeQuery(queryString_tr);
						//System.out.println("queryString--"+queryString_tr);
						if(rset2.next()){
							trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
							
							transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
//							if(!transp_charges.equals("")){
//								transp_charges=nf.format(Double.parseDouble(rset2.getString(1)==null?"":rset2.getString(1)));
//							}
							
							//System.out.println("transp_charges---"+transp_charges);
							
						}else {
							trans_charges.add("-");
						}
						//System.out.println("---rset.getString(7)--"+rset.getString(7)+"--transp_charges--"+transp_charges);
						if(!transp_charges.equals("")){
							temp_grossamt=""+(Double.parseDouble(rset.getString(10)==null?"":rset.getString(10))+Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							temp_gross_amt.add(temp_grossamt);
							trans_gross_inr.add(Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
							tot_trans_grossinr+=Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges);
							//System.out.println("---temp====="+temp_grossamt);
						}else{
							temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							trans_gross_inr.add("-");
						}
					//}
					
				}else{
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					trans_charges.add("-");
					trans_gross_inr.add("-");
				}
			}
			//
			VST_WISE_INDEX.add(n);//HARSH20210629
			//System.out.println(VST_WISE_INDEX);
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
			}
			if((For1.equals("REGAS") || For1.equalsIgnoreCase("0"))  && !invoice_type.equals("R") ){
			//	//System.out.println("REGAS");
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
//			System.out.println("Sales Details Query =2 "+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{	
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add("R");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					
						cost_center_code_.add("N");
					
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					Vtcs_amt.add("");
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					SEGMENT_NAME.add("Regas");
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32));
					SUPPLIER_CD.add("");
					AdvADJ_FLAG.add("");
					INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
				}
			
				//for manual invoice

				//	//System.out.println("REGAS");
				if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
					  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CODE " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
					  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
				else
				{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
					  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
					  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO ,SUP_STATE_CODE " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
					  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				}
			//	//System.out.println("Sales Details Query =2 "+queryString);
				rset = stmt.executeQuery(queryString);
					while(rset.next())
					{	
						j++;
						String cont_type = rset.getString(20)==null?"":rset.getString(20);
						SUMMRY_CONT_TYP.add("R");
						String contract_name = "";
						String sale_price = rset.getString(5)==null?"":rset.getString(5);
						HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
						INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
						PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
						PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
						
							cost_center_code_.add("N");
						
						if(!sale_price.equals("") && !sale_price.equals(" "))
						{
							SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
						}
						else
						{
							SALE_PRICE.add("-");
							SALE_PRICE_NUMERIC.add("0.0000");
						}
						DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
						
						TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
						TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
						
						EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
						
						GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
						regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
						
						GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
						GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
						GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
						regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						Vtcs_amt.add("");
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="5";
						String exchg_rate="";
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(exchg_rate);
						}
						
						
						//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
						
						temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
						
						NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
						NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
						regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
						
						temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
						FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
						CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
						TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
						if(cont_type.equalsIgnoreCase("S"))
						{
							contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
						}
						else if(cont_type.equalsIgnoreCase("R"))
						{
							contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						}
						SN_NO.add(contract_name);
						temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
						SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
						FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
						temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
						FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
						MONTH.add(rset.getString(19)==null?"":rset.getString(19));
						CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
						SEGMENT_NAME.add("Regas");
						PLANT_SEQ_NO.add(rset.getString(27));
						SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
						Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
						NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32));
						SUPPLIER_CD.add("");
						AdvADJ_FLAG.add("");
						INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
					}
				
				start_index_2 = end_index_1+1;
				end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			}
			////System.out.println("start_index_2"+start_index_2+"end_index_1"+end_index_1);
			/////**********ADDED FOR LTCORA AND CN******///////
		//	//System.out.println("LTCORA AND CN"+For1);
			
			if(For1.equals("LTCORA_CN") || For1.equalsIgnoreCase("0")){
//				//System.out.println("LTCORA AND CN");
				
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,GROSS_AMT_INR_NEW,GROSS_AMT_USD_NEW,"
				  + "ADVANCE_ADJ_GROSS_AMT_INR,ADVANCE_ADJ_GROSS_AMT_USD,"
				  + "ADVANCE_ADJ_AMT_NEW,TO_CHAR(INVOICE_DT,'YYYYMMDD') " +//ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD='"+customer_cd+"' AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') AND (FLAG NOT IN ('U','A')) " //FOR SUG INVOICE
				  		+ "ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID ,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,GROSS_AMT_INR_NEW,GROSS_AMT_USD_NEW,"
				  + "ADVANCE_ADJ_GROSS_AMT_INR,ADVANCE_ADJ_GROSS_AMT_USD,"
				  + "ADVANCE_ADJ_AMT_NEW,TO_CHAR(INVOICE_DT,'YYYYMMDD') " +//ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') AND (FLAG NOT IN ('U','A')) " //FOR SUG INVOICE
				  + "ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
//		System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{	
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
					cost_center_code_.add("N");
					boolean vol_dis_flag = false, prev_adj_flag = false;
					String map_id=cont_type+":"+rset.getString(12)+":"+rset.getString(1)+":%";
					String query_vol_dis = "select amount from fms7_inv_compo_dtl where price_cd='14' "
							+ "and inv_seq_no like '"+map_id+"' and (flag_temp not like 'T' or flag_temp is null) " ;
					rset5 = stmt5.executeQuery(query_vol_dis);
					if(rset5.next()) {
						vol_dis_flag = true;
					} 
					
					String adj_amt_new = rset.getString(38)==null?"":rset.getString(38);
					if(!adj_amt_new.equals("")) {
						prev_adj_flag = true;
					}
					
					SUMMRY_CONT_TYP.add(cont_type);
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						queryString = "SELECT NVL(AMOUNT,0) FROM FMS7_INV_COMPO_DTL WHERE PRICE_CD='2' "
								+ "AND INV_SEQ_NO LIKE '"+map_id+"' and (flag_temp not like 'T' or flag_temp is null)";
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next()) {
							double discount_price= rset1.getDouble(1);
							double new_sale_price = Double.parseDouble(sale_price)-discount_price;
							
							SALE_PRICE.add(nf2.format(new_sale_price));
							//System.out.println("new_sale_pricce.........."+new_sale_price);
							SALE_PRICE_NUMERIC.add(nf2.format(new_sale_price));
							sale_price = new_sale_price+"";
						} else {
							SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
						}
//						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
//						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					LTCORA_CN_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					String gross_usd = rset.getString(9)==null?"":""+Double.parseDouble(rset.getString(9));
					if(prev_adj_flag || vol_dis_flag) {
						gross_usd = rset.getString(35)==null?"":rset.getString(35);
					}
					GROSS_AMT_USD.add(gross_usd==null?"":nf3.format(Double.parseDouble(gross_usd)));
					GROSS_AMT_USD_NUMERIC.add(gross_usd==null?"0.00":nf.format(Double.parseDouble(gross_usd)));
					LTCORA_CN_qty_amt_usd_total += Double.parseDouble(gross_usd==null?"0":gross_usd);
					LTCORA_CN_gross_amt_usd_total += Double.parseDouble(gross_usd==null?"0":gross_usd);
					
					String gross_inr = rset.getString(10)==null?"":""+Double.parseDouble(rset.getString(10));
					if(prev_adj_flag) {
						gross_inr = rset.getString(36)==null?"":rset.getString(36);
					}
					GROSS_AMT_INR.add(gross_inr==null?"":nf3.format(Double.parseDouble(gross_inr)));
					GROSS_AMT_INR_2.add(gross_inr==null?"":nf.format(Double.parseDouble(gross_inr)));
					GROSS_AMT_INR_NUMERIC.add(gross_inr==null?"0.00":nf.format(Double.parseDouble(gross_inr)));
					LTCORA_CN_qty_amt_inr_total += Double.parseDouble(gross_inr==null?"0":gross_inr);
					LTCORA_CN_gross_amt_inr_total += Double.parseDouble(gross_inr==null?"0":gross_inr);
					Vtcs_amt.add("");
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(gross_usd==null?"0.00":gross_usd)));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					LTCORA_CN_group_foreign_gross_amt_usd_total += (Double.parseDouble(gross_usd==null?"0":gross_usd));
					//ADJUSTMENT AND VOLUME DISCOUNT
					GROSS_AMT_INR_NEW.add(rset.getString(34)==null?"":rset.getString(34));
					GROSS_AMT_USD_NEW.add(rset.getString(35)==null?"":rset.getString(35));
					ADVANCE_ADJ_GROSS_AMT_INR.add(rset.getString(36)==null?"":rset.getString(36));
					ADVANCE_ADJ_GROSS_AMT_USD.add(rset.getString(37)==null?"":rset.getString(37));
					ADVANCE_ADJ_AMT_NEW.add(rset.getString(38)==null?"":rset.getString(38));
					
					int count=0;
					String query_tax="select count(price_cd) from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' and "
					//SB20160524		+ "price_cd in ('6') and (flag_temp not like 'T' or flag_temp is null)";
					+ "price_cd in ('6','7','10','11','12','13') and (flag_temp not like 'T' or flag_temp is null)";
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						count=Integer.parseInt(rset5.getString(1));
					}
					String AdvAdjFlag = (rset.getString(32)==null?"NA":rset.getString(32)); //SB20160921
					if(count>=1) {
						if(AdvAdjFlag.equals("AA"))
						{
							temp_gross_amt.add(gross_inr==null?"":gross_inr);						
							AdvAdjFlag = "";
							AdvADJ_FLAG.add(""); 
						}
						else
						{
//							temp_gross_amt.add(rset.getString(31)==null?"":rset.getString(31));
							String inv_dt = rset.getString(39);
							double adj_tax_amt = 0;
							if(Integer.parseInt(inv_dt)>20171114) { //Change Date Of Volume Discount
								query_tax = "select amount from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' "
										+ "and price_cd='1' and (flag_temp not like 'T' or flag_temp is null)";
//								System.out.println("fetching Tax Adj data..."+query_tax);
								rset5 = stmt5.executeQuery(query_tax);
								if(rset5.next()) {
									adj_tax_amt = rset5.getDouble(1);
								}
//								System.out.println("Adjusted amt...."+adj_tax_amt+"=="+gross_inr);
//								temp_gross_amt.add(gross_inr==null?"":(Double.parseDouble(gross_inr)-adj_tax_amt));
								temp_gross_amt.add(gross_inr);
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, ""+nf3.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								LTCORA_CN_qty_amt_inr_total -= adj_tax_amt;
								LTCORA_CN_gross_amt_inr_total -= adj_tax_amt;
							} else {
								temp_gross_amt.add(rset.getString(31)==null?"":rset.getString(31));
							}
							AdvADJ_FLAG.add("Y"); 
						}
					}else {
//						System.out.println("INdex...........else........"+i);
						if(AdvAdjFlag.equals("AA"))
						{
							String inv_dt = rset.getString(39);
							if(prev_adj_flag && Integer.parseInt(inv_dt)>20171114) {
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
								LTCORA_CN_qty_amt_inr_total -= Double.parseDouble(gross_inr);
								LTCORA_CN_gross_amt_inr_total -= Double.parseDouble(gross_inr);
								LTCORA_CN_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"":rset.getString(10));
								LTCORA_CN_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"":rset.getString(10));
								temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							} else {
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
							}
							AdvAdjFlag = "";
							AdvADJ_FLAG.add(""); 
//							System.out.println("==="+HLPL_INV_SEQ_NO.elementAt(i));
						}
						else
						{
//							temp_gross_amt.add(gross_inr==null?"":gross_inr);
							AdvADJ_FLAG.add("N"); 
							
							String inv_dt = rset.getString(39);
							double adj_tax_amt = 0;
							if(Integer.parseInt(inv_dt)>20171114) { //Change Date Of Volume Discount
								query_tax = "select amount from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' "
										+ "and price_cd='1' and (flag_temp not like 'T' or flag_temp is null)";
//								System.out.println("fetching Tax Adj data..."+query_tax);
								rset5 = stmt5.executeQuery(query_tax);
								if(rset5.next()) {
									adj_tax_amt = rset5.getDouble(1);
								}
//								System.out.println("Adjusted amt...."+adj_tax_amt+"=="+gross_inr);
//								temp_gross_amt.add(gross_inr==null?"":(Double.parseDouble(gross_inr)-adj_tax_amt));
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, ""+nf3.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								LTCORA_CN_qty_amt_inr_total -= adj_tax_amt;
								LTCORA_CN_gross_amt_inr_total -= adj_tax_amt;
							} else {
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
							}
						}
					}
//					System.out.println("Sie.............."+AdvADJ_FLAG.size()+"=="+NEW_INV_SEQ_NO);
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					LTCORA_CN_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("C"))
					{
						contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
					
					if(cont_type.equalsIgnoreCase("T"))
					{
						SEGMENT_NAME.add("LTCORA");
					}
					else if(cont_type.equalsIgnoreCase("C"))
					{
						SEGMENT_NAME.add("CN");
					}
					
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					NEW_INV_SEQ_NO.add(rset.getString(33)==null?"":rset.getString(33));
					SUPPLIER_CD.add("");
					//FECHING GSTIN NO PLANT WISE
					String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(27)+"' "
							+ "AND CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
							+ "WHERE CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(27)+"' "
							+ " AND (EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//					System.out.println("=="+q_gstin);
					rset1 = stmt1.executeQuery(q_gstin);
					if(rset1.next()) {
						GSTIN_NO.add(rset1.getString(1));
					} else {
						GSTIN_NO.add("");
					}
					
					//FETCHING POS IF PLACE OF SUPPLY IS DIFF FROM PLANT LOCATION
					String plant_loc="", plant_state = "";
					String pos_query = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(13)+"' "
							+ "AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL WHERE "
							+ "CUSTOMER_CD='"+rset.getString(13)+"' AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								plant_loc = rset1.getString(1);
							} 
						} 
					} 
					
					String sup_loc="", sup_state="";
					 pos_query = "SELECT STATE FROM FMS7_SUPPLIER_ADDRESS_MST WHERE SUPPLIER_CD='1' "
							+ "AND ADDRESS_TYPE='B' AND  EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_ADDRESS_MST WHERE "
							+ "SUPPLIER_CD='1' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) "
							+ " AND ADDRESS_TYPE='B' ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 sup_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!sup_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+sup_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								sup_loc = rset1.getString(1);
							} 
						} 
					} 
					
					if(!sup_loc.equals(plant_loc)) {
						POS_STATE.add(sup_state);
					} else {
						POS_STATE.add("");
					}
					//i++;
				}
				//for manual invoice

//				//System.out.println("LTCORA AND CN");
				
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,GROSS_AMT_INR_NEW,GROSS_AMT_USD_NEW,"
				  + "ADVANCE_ADJ_GROSS_AMT_INR,ADVANCE_ADJ_GROSS_AMT_USD,"
				  + "ADVANCE_ADJ_AMT_NEW,TO_CHAR(INVOICE_DT,'YYYYMMDD') " +//ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD='"+customer_cd+"' AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') AND (FLAG NOT IN ('U','A')) " //FOR SUG INVOICE
				  		+ "ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID ,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,GROSS_AMT_INR_NEW,GROSS_AMT_USD_NEW,"
				  + "ADVANCE_ADJ_GROSS_AMT_INR,ADVANCE_ADJ_GROSS_AMT_USD,"
				  + "ADVANCE_ADJ_AMT_NEW,TO_CHAR(INVOICE_DT,'YYYYMMDD') " +//ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') AND (FLAG NOT IN ('U','A')) " //FOR SUG INVOICE
				  + "ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
//		System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{	
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
					cost_center_code_.add("N");
					boolean vol_dis_flag = false, prev_adj_flag = false;
					String map_id=cont_type+":"+rset.getString(12)+":"+rset.getString(1)+":%";
					String query_vol_dis = "select amount from fms7_inv_compo_dtl where price_cd='14' "
							+ "and inv_seq_no like '"+map_id+"' and (flag_temp not like 'T' or flag_temp is null) " ;
					rset5 = stmt5.executeQuery(query_vol_dis);
					if(rset5.next()) {
						vol_dis_flag = true;
					} 
					
					String adj_amt_new = rset.getString(38)==null?"":rset.getString(38);
					if(!adj_amt_new.equals("")) {
						prev_adj_flag = true;
					}
					
					SUMMRY_CONT_TYP.add(cont_type);
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						queryString = "SELECT NVL(AMOUNT,0) FROM FMS7_INV_COMPO_DTL WHERE PRICE_CD='2' "
								+ "AND INV_SEQ_NO LIKE '"+map_id+"' and (flag_temp not like 'T' or flag_temp is null)";
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next()) {
							double discount_price= rset1.getDouble(1);
							double new_sale_price = Double.parseDouble(sale_price)-discount_price;
							
							SALE_PRICE.add(nf2.format(new_sale_price));
							//System.out.println("new_sale_pricce.........."+new_sale_price);
							SALE_PRICE_NUMERIC.add(nf2.format(new_sale_price));
							sale_price = new_sale_price+"";
						} else {
							SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
						}
//						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
//						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					LTCORA_CN_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					String gross_usd = rset.getString(9)==null?"":""+Double.parseDouble(rset.getString(9));
					if(prev_adj_flag || vol_dis_flag) {
						gross_usd = rset.getString(35)==null?"":rset.getString(35);
					}
					GROSS_AMT_USD.add(gross_usd==null?"":nf3.format(Double.parseDouble(gross_usd)));
					GROSS_AMT_USD_NUMERIC.add(gross_usd==null?"0.00":nf.format(Double.parseDouble(gross_usd)));
					LTCORA_CN_qty_amt_usd_total += Double.parseDouble(gross_usd==null?"0":gross_usd);
					LTCORA_CN_gross_amt_usd_total += Double.parseDouble(gross_usd==null?"0":gross_usd);
					
					String gross_inr = rset.getString(10)==null?"":""+Double.parseDouble(rset.getString(10));
					if(prev_adj_flag) {
						gross_inr = rset.getString(36)==null?"":rset.getString(36);
					}
					GROSS_AMT_INR.add(gross_inr==null?"":nf3.format(Double.parseDouble(gross_inr)));
					GROSS_AMT_INR_2.add(gross_inr==null?"":nf.format(Double.parseDouble(gross_inr)));
					GROSS_AMT_INR_NUMERIC.add(gross_inr==null?"0.00":nf.format(Double.parseDouble(gross_inr)));
					LTCORA_CN_qty_amt_inr_total += Double.parseDouble(gross_inr==null?"0":gross_inr);
					LTCORA_CN_gross_amt_inr_total += Double.parseDouble(gross_inr==null?"0":gross_inr);
					Vtcs_amt.add("");
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(gross_usd==null?"0.00":gross_usd)));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(gross_usd==null?"0":gross_usd)));
					LTCORA_CN_group_foreign_gross_amt_usd_total += (Double.parseDouble(gross_usd==null?"0":gross_usd));
					//ADJUSTMENT AND VOLUME DISCOUNT
					GROSS_AMT_INR_NEW.add(rset.getString(34)==null?"":rset.getString(34));
					GROSS_AMT_USD_NEW.add(rset.getString(35)==null?"":rset.getString(35));
					ADVANCE_ADJ_GROSS_AMT_INR.add(rset.getString(36)==null?"":rset.getString(36));
					ADVANCE_ADJ_GROSS_AMT_USD.add(rset.getString(37)==null?"":rset.getString(37));
					ADVANCE_ADJ_AMT_NEW.add(rset.getString(38)==null?"":rset.getString(38));
					
					int count=0;
					String query_tax="select count(price_cd) from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' and "
					//SB20160524		+ "price_cd in ('6') and (flag_temp not like 'T' or flag_temp is null)";
					+ "price_cd in ('6','7','10','11','12','13') and (flag_temp not like 'T' or flag_temp is null)";
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						count=Integer.parseInt(rset5.getString(1));
					}
					String AdvAdjFlag = (rset.getString(32)==null?"NA":rset.getString(32)); //SB20160921
					if(count>=1) {
						if(AdvAdjFlag.equals("AA"))
						{
							temp_gross_amt.add(gross_inr==null?"":gross_inr);						
							AdvAdjFlag = "";
							AdvADJ_FLAG.add(""); 
						}
						else
						{
//							temp_gross_amt.add(rset.getString(31)==null?"":rset.getString(31));
							String inv_dt = rset.getString(39);
							double adj_tax_amt = 0;
							if(Integer.parseInt(inv_dt)>20171114) { //Change Date Of Volume Discount
								query_tax = "select amount from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' "
										+ "and price_cd='1' and (flag_temp not like 'T' or flag_temp is null)";
//								System.out.println("fetching Tax Adj data..."+query_tax);
								rset5 = stmt5.executeQuery(query_tax);
								if(rset5.next()) {
									adj_tax_amt = rset5.getDouble(1);
								}
//								System.out.println("Adjusted amt...."+adj_tax_amt+"=="+gross_inr);
//								temp_gross_amt.add(gross_inr==null?"":(Double.parseDouble(gross_inr)-adj_tax_amt));
								temp_gross_amt.add(gross_inr);
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, ""+nf3.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								LTCORA_CN_qty_amt_inr_total -= adj_tax_amt;
								LTCORA_CN_gross_amt_inr_total -= adj_tax_amt;
							} else {
								temp_gross_amt.add(rset.getString(31)==null?"":rset.getString(31));
							}
							AdvADJ_FLAG.add("Y"); 
						}
					}else {
//						System.out.println("INdex...........else........"+i);
						if(AdvAdjFlag.equals("AA"))
						{
							String inv_dt = rset.getString(39);
							if(prev_adj_flag && Integer.parseInt(inv_dt)>20171114) {
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
								LTCORA_CN_qty_amt_inr_total -= Double.parseDouble(gross_inr);
								LTCORA_CN_gross_amt_inr_total -= Double.parseDouble(gross_inr);
								LTCORA_CN_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"":rset.getString(10));
								LTCORA_CN_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"":rset.getString(10));
								temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							} else {
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
							}
							AdvAdjFlag = "";
							AdvADJ_FLAG.add(""); 
//							System.out.println("==="+HLPL_INV_SEQ_NO.elementAt(i));
						}
						else
						{
//							temp_gross_amt.add(gross_inr==null?"":gross_inr);
							AdvADJ_FLAG.add("N"); 
							
							String inv_dt = rset.getString(39);
							double adj_tax_amt = 0;
							if(Integer.parseInt(inv_dt)>20171114) { //Change Date Of Volume Discount
								query_tax = "select amount from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' "
										+ "and price_cd='1' and (flag_temp not like 'T' or flag_temp is null)";
//								System.out.println("fetching Tax Adj data..."+query_tax);
								rset5 = stmt5.executeQuery(query_tax);
								if(rset5.next()) {
									adj_tax_amt = rset5.getDouble(1);
								}
//								System.out.println("Adjusted amt...."+adj_tax_amt+"=="+gross_inr);
//								temp_gross_amt.add(gross_inr==null?"":(Double.parseDouble(gross_inr)-adj_tax_amt));
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
								GROSS_AMT_INR.removeElementAt(j);
								GROSS_AMT_INR.add(j, ""+nf3.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_2.removeElementAt(j);
								GROSS_AMT_INR_2.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								GROSS_AMT_INR_NUMERIC.removeElementAt(j);
								GROSS_AMT_INR_NUMERIC.add(j, ""+nf.format(Double.parseDouble(gross_inr)-adj_tax_amt));
								LTCORA_CN_qty_amt_inr_total -= adj_tax_amt;
								LTCORA_CN_gross_amt_inr_total -= adj_tax_amt;
							} else {
								temp_gross_amt.add(gross_inr==null?"":gross_inr);
							}
						}
					}
//					System.out.println("Sie.............."+AdvADJ_FLAG.size()+"=="+NEW_INV_SEQ_NO);
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					LTCORA_CN_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("C"))
					{
						contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					
					if(cont_type.equalsIgnoreCase("T"))
					{
						SEGMENT_NAME.add("LTCORA");
					}
					else if(cont_type.equalsIgnoreCase("C"))
					{
						SEGMENT_NAME.add("CN");
					}
					
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					NEW_INV_SEQ_NO.add(rset.getString(33)==null?"":rset.getString(33));
					SUPPLIER_CD.add("");
					//FECHING GSTIN NO PLANT WISE
					String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(27)+"' "
							+ "AND CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
							+ "WHERE CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(27)+"' "
							+ " AND (EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//					System.out.println("=="+q_gstin);
					rset1 = stmt1.executeQuery(q_gstin);
					if(rset1.next()) {
						GSTIN_NO.add(rset1.getString(1));
					} else {
						GSTIN_NO.add("");
					}
					
					//FETCHING POS IF PLACE OF SUPPLY IS DIFF FROM PLANT LOCATION
					String plant_loc="", plant_state = "";
					String pos_query = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(13)+"' "
							+ "AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL WHERE "
							+ "CUSTOMER_CD='"+rset.getString(13)+"' AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								plant_loc = rset1.getString(1);
							} 
						} 
					} 
					
					String sup_loc="", sup_state="";
					 pos_query = "SELECT STATE FROM FMS7_SUPPLIER_ADDRESS_MST WHERE SUPPLIER_CD='1' "
							+ "AND ADDRESS_TYPE='B' AND  EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_ADDRESS_MST WHERE "
							+ "SUPPLIER_CD='1' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) "
							+ " AND ADDRESS_TYPE='B' ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 sup_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!sup_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+sup_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								sup_loc = rset1.getString(1);
							} 
						} 
					} 
					
					if(!sup_loc.equals(plant_loc)) {
						POS_STATE.add(sup_state);
					} else {
						POS_STATE.add("");
					}
					//i++;
				}
				////System.out.println("ADJ_FLAG: "+AdvADJ_FLAG);
				////System.out.println("Account_Mapping_id: "+Account_Mapping_id);
				start_index_3 = end_index_2+1;
				end_index_3 = HLPL_INV_SEQ_NO.size()-1;
			}
			///END OF LTCORA AND CN
			
	/*Hiren_20210504 for Deficiency Invoice*/
	if(For1.equals("Deficiency") || For1.equalsIgnoreCase("0")){
		//	//System.out.println("REGAS");
		if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
		{
			queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
			  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
			  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
			  "nvl(TAX_STRUCT_CD,'0'),SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
			  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
			  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
			  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
			  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUPPLIER_CD " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
			  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='E' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
		}
		else
		{
			queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
			  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
			  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
			  "nvl(TAX_STRUCT_CD,'0'),SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
			  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
			  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
			  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
			  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUPPLIER_CD " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
			  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			  "AND CONTRACT_TYPE='E' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
		}
		//System.out.println("Deficiency Details Query --- "+queryString);
		rset = stmt.executeQuery(queryString);
			while(rset.next())
			{	
				j++;
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add("E");
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				
				cost_center_code_.add("N");
				
				/*if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}*/
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				queryString="SELECT nvl(sum(QUANTITY),0)"
						+ " from fms8_other_invoice_dtl where "
						+ " INV_SEQ_NO='"+rset.getString(1)+"' "
						+ " AND FINANCIAL_YEAR='"+rset.getString(12)+"'"
						+ " AND CONTRACT_TYPE='E'  ";
//				System.out.println("---dfbmdbf--"+queryString);
				rset1=stmt1.executeQuery(queryString);
				if(rset1.next())
				{
					TOTAL_QTY.add(nf.format(Double.parseDouble(""+ rset1.getString(1)==null?"":rset1.getString(1))));
//					System.out.println("rset.getString(10)------"+rset.getString(10)+"---rset1.getString(1)--"+rset1.getString(1));
					SALE_PRICE.add(nf2.format(Double.parseDouble(""+rset.getString(10))/ Double.parseDouble(""+rset1.getString(1))));
					DEF_qty_total += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				}else {
					TOTAL_QTY.add("0");
					SALE_PRICE.add("-");
				}
				
//				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				DEF_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				DEF_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				DEF_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				DEF_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				Vtcs_amt.add("");
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				DEF_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				DEF_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"0":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}else if(cont_type.equalsIgnoreCase("E"))
				{
					String cnSql = "select CN_TERM from  FMS8_LNG_REGAS_MST where "
							+ " CUSTOMER_CD = '"+rset.getString(13)+"'"
							+ " and AGREEMENT_NO = '"+rset.getString(17)+"'"
							+ " and REV_NO = '"+rset.getString(18)+"'"
							+ " and CN_NO = '"+rset.getString(15)+"' "
							+ " and CN_REV_NO = '"+rset.getString(16)+"'";
					//System.out.println("cnSql-----"+cnSql);
					rset2 = stmt2.executeQuery(cnSql); 
					if (rset2.next()) {
						String term_cm = rset2.getString(1)==null?"":rset2.getString(1);
						if(term_cm.equalsIgnoreCase("C"))
						{
							contract_name = "CN-"+(rset.getString(15)==null?"":rset.getString(15));
						}
						else
						{
							contract_name = "PERIOD-"+(rset.getString(15)==null?"":rset.getString(15));
						}
					}
				}
				
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Deficiency");
				PLANT_SEQ_NO.add(rset.getString(27));
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
				Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
				NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32));
				AdvADJ_FLAG.add("");
				INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
				DEF_total_tax_inr_total+=Double.parseDouble(rset.getString(22)==null?"0":rset.getString(22));
				
				//FECHING GSTIN NO PLANT WISE
				String q_gstin = "SELECT STAT_NO FROM FMS7_CUSTOMER_PLANT_TAX_CDS WHERE PLANT_SEQ_NO = '"+rset.getString(27)+"' "
						+ "AND CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND (EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_TAX_CDS "
						+ "WHERE CUSTOMER_CD='"+rset.getString(13)+"' AND STAT_CD='1008' AND PLANT_SEQ_NO='"+rset.getString(27)+"' "
						+ " AND (EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY') OR EFF_DT IS NULL)) OR EFF_DT IS NULL)"; 
//				System.out.println("=="+q_gstin);
				rset1 = stmt1.executeQuery(q_gstin);
				if(rset1.next()) {
					GSTIN_NO.add(rset1.getString(1));
				} else {
					GSTIN_NO.add("");
				}
				
				//AS DISCUSSED WITH MAHESH SIR FOLLOWING CODE IS MISSING FOR GST REGISTER HARSH20210922
				//FETCHING POS IF PLACE OF SUPPLY IS DIFF FROM PLANT LOCATION
				String plant_loc="", plant_state = "";
				String pos_query = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(13)+"' "
						+ "AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL WHERE "
						+ "CUSTOMER_CD='"+rset.getString(13)+"' AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ";
				rset1= stmt1.executeQuery(pos_query);
				if(rset1.next()) {
					 plant_state = rset1.getString(1)==null?"":rset1.getString(1);
					if(!plant_state.equals("")) {
						pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
						rset1 = stmt1.executeQuery(pos_query);
						if(rset1.next()) {
							plant_loc = rset1.getString(1);
						} 
					} 
				} 
				
				String sup_loc="", sup_state="";
				 pos_query = "SELECT STATE FROM FMS7_SUPPLIER_ADDRESS_MST WHERE SUPPLIER_CD='1' "
						+ "AND ADDRESS_TYPE='B' AND  EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_ADDRESS_MST WHERE "
						+ "SUPPLIER_CD='1' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) "
						+ " AND ADDRESS_TYPE='B' ";
				rset1= stmt1.executeQuery(pos_query);
				if(rset1.next()) {
					 sup_state = rset1.getString(1)==null?"":rset1.getString(1);
					if(!sup_state.equals("")) {
						pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+sup_state.toUpperCase()+"' ";
						rset1 = stmt1.executeQuery(pos_query);
						if(rset1.next()) {
							sup_loc = rset1.getString(1);
						} 
					} 
				} 
				
				if(!sup_loc.equals(plant_loc)) {
					POS_STATE.add(sup_state);
				} else {
					POS_STATE.add("");
				}
				/////
			}
		
			//for manual invoice

			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUPPLIER_CD " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='E' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "nvl(TAX_STRUCT_CD,'0'),SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUPPLIER_CD " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
				  "FROM FMS7_manual_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='E' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
		//	//System.out.println("Sales Details Query =2 "+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{	
					j++;
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add("E");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					
						cost_center_code_.add("N");
					
					/*if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}*/
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					queryString="SELECT nvl(sum(QUANTITY),0)"
							+ " from fms8_other_invoice_dtl where "
							+ " INV_SEQ_NO='"+rset.getString(1)+"' "
							+ " AND FINANCIAL_YEAR='"+rset.getString(12)+"'"
							+ " AND CONTRACT_TYPE='E'  ";
//					System.out.println("---dfbmdbf--"+queryString);
					rset1=stmt1.executeQuery(queryString);
					if(rset1.next())
					{
						TOTAL_QTY.add(nf.format(Double.parseDouble(""+ rset1.getString(1)==null?"":rset1.getString(1))));
						SALE_PRICE.add(nf2.format(Double.parseDouble(""+rset.getString(10))/ Double.parseDouble(""+rset1.getString(1))));
						DEF_qty_total += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
					}else {
						
						TOTAL_QTY.add("0");
						SALE_PRICE.add("-");
					}
					
//					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					DEF_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					DEF_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					DEF_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					DEF_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					DEF_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					Vtcs_amt.add("");
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					DEF_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					DEF_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
//					System.out.println("rset.getString(14)--------"+rset.getString(14));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"0":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}else if(cont_type.equalsIgnoreCase("E"))
					{

						contract_name = "L-"+(rset.getString(15)==null?"":rset.getString(15));
						String cnSql = "select CN_TERM from  FMS8_LNG_REGAS_MST where "
								+ " CUSTOMER_CD = '"+rset.getString(13)+"'"
								+ " and AGREEMENT_NO = '"+rset.getString(17)+"'"
								+ " and REV_NO = '"+rset.getString(18)+"'"
								+ " and CN_NO = '"+rset.getString(15)+"' "
								+ " and CN_REV_NO = '"+rset.getString(16)+"'";
						//System.out.println("cnSql-----"+cnSql);
						rset2 = stmt2.executeQuery(cnSql); 
						if (rset2.next()) {
							String term_cm = rset2.getString(1)==null?"":rset2.getString(1);
							if(term_cm.equalsIgnoreCase("C"))
							{
								contract_name = "CN-"+(rset.getString(15)==null?"":rset.getString(15));
							}
							else
							{
								contract_name = "PERIOD-"+(rset.getString(15)==null?"":rset.getString(15));
							}
						}
					
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					SEGMENT_NAME.add("Deficiency");
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32));
					SUPPLIER_CD.add(rset.getString(33)==null?"":rset.getString(33));
					AdvADJ_FLAG.add("");
					INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
					DEF_total_tax_inr_total+=Double.parseDouble(rset.getString(22)==null?"0":rset.getString(22));
					
					//AS DISCUSSED WITH MAHESH SIR FOLLOWING CODE IS MISSING FOR GST REGISTER HARSH20210922
					//FETCHING POS IF PLACE OF SUPPLY IS DIFF FROM PLANT LOCATION
					String plant_loc="", plant_state = "";
					String pos_query = "SELECT PLANT_STATE FROM FMS7_CUSTOMER_PLANT_DTL WHERE CUSTOMER_CD='"+rset.getString(13)+"' "
							+ "AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_CUSTOMER_PLANT_DTL WHERE "
							+ "CUSTOMER_CD='"+rset.getString(13)+"' AND SEQ_NO='"+rset.getString(27)+"' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 plant_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!plant_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+plant_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								plant_loc = rset1.getString(1);
							} 
						} 
					} 
					
					String sup_loc="", sup_state="";
					 pos_query = "SELECT STATE FROM FMS7_SUPPLIER_ADDRESS_MST WHERE SUPPLIER_CD='1' "
							+ "AND ADDRESS_TYPE='B' AND  EFF_DT = (SELECT MAX(EFF_DT) FROM FMS7_SUPPLIER_ADDRESS_MST WHERE "
							+ "SUPPLIER_CD='1' AND EFF_DT <= TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) "
							+ " AND ADDRESS_TYPE='B' ";
					rset1= stmt1.executeQuery(pos_query);
					if(rset1.next()) {
						 sup_state = rset1.getString(1)==null?"":rset1.getString(1);
						if(!sup_state.equals("")) {
							pos_query = "SELECT STATE_CODE FROM STATE_MST WHERE UPPER(STATE_NM) = '"+sup_state.toUpperCase()+"' ";
							rset1 = stmt1.executeQuery(pos_query);
							if(rset1.next()) {
								sup_loc = rset1.getString(1);
							} 
						} 
					} 
					
					if(!sup_loc.equals(plant_loc)) {
						POS_STATE.add(sup_state);
					} else {
						POS_STATE.add("");
					}
					/////
				}
			
			start_index_5 = end_index_3+1;
			end_index_5 = HLPL_INV_SEQ_NO.size()-1;
		
	}//end deficiecny
			//MD
	//System.out.println(INV_TAX_AMT.size()+"-----------"+CUSTOMER_CD.size()+"\n"+HLPL_INV_SEQ_NO);
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
				if(!TOTAL_QTY.elementAt(i).equals("") && TOTAL_QTY.elementAt(i)!=null && !TOTAL_QTY.elementAt(i).equals("0"))
				{
					AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+TOTAL_QTY.elementAt(i))));
				}
				else
				{
					AVG_PRICE_MMBTU.add("-");
				}
				if(!EXCHG_RATE.elementAt(i).equals("") && EXCHG_RATE.elementAt(i)!=null)
				{
					EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
					EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
				
				
				
				/**************added to display tin nos as per mr. venkat requested *************/
				boolean flag_v=false;
					
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("E"))
				{
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='R' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				if(flag_v)
				{
					vSTAT_NO.add("1");
				}
				else
				{
					vSTAT_NO.add("0");
				}
				
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "and B.stat_cd='1001' " +
								  "ORDER BY A.stat_cd";
					
					//System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_GST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_GST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1002' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
//					System.out.println("Customer Plant's Tax Names CST TIN NO = "+queryString);
					if(rset.next())
					{
						contact_Customer_CST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_CST_NO.add("");
					}
//					System.out.println("contact_Customer_CST_NO---"+contact_Customer_CST_NO);
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1003' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_GVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_GVAT_NO.add("");
					}
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1004' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_MVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_MVAT_NO.add("");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("E"))
				{
					contact_Customer_GST_NO.add("");
					contact_Customer_CST_NO.add("");
					contact_Customer_GVAT_NO.add("");
					contact_Customer_MVAT_NO.add("");
				}
			}
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			double sum_LTCORA_CN_tcq = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+INVOICE_DT.elementAt(i)+"','DD/MM/YYYY'))";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =var_sales_rate; //SB20200327
					}
					if(var_sales_rate==0) //SB20200327
					{
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' ";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =ori_sale_price; //SB20200327
					}
				}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					
						queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"  " +
								"AND SN_REV_NO="+SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+FGSA_REV_NO.elementAt(i)+" " +
								"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
						//System.out.println("SN Master query TCQ= "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{			
							START_DT.add(rset.getString(1)==null?"":rset.getString(1));
							END_DT.add(rset.getString(2)==null?"":rset.getString(2));
							sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
							TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
							TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
							//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							if(var_sales_rate==0) //SB20200327
							{
							RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							}
							else
							{
								RATE.add(invoice_Sales_Rate);
								RATE_NUMERIC.add(nf2.format(invoice_Sales_Rate));
							}
						}
						else
						{
							START_DT.add("");
							END_DT.add("");
							TCQ.add("0.00");
							TCQ_NUMERIC.add("0.00");
							RATE.add("");
							RATE_NUMERIC.add("0.0000");
						}
					
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
				double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+INVOICE_DT.elementAt(i)+"','DD/MM/YYYY'))";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =var_sales_rate; //SB20200327
				}
				if(var_sales_rate==0) //SB20200327
				{
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
						  + "AND  CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND FLAG='A' ";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					var_sales_rate = rset.getDouble(1);
					ori_sale_price =  rset.getDouble(2);
					invoice_Sales_Rate =ori_sale_price; //SB20200327
				}
			}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_LOA_MST////////////////////////////////////////////////
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+temp_sn_no.elementAt(i)+" AND TENDER_NO="+temp_fgsa_no.elementAt(i)+"";
//					System.out.println("LOA Master query TCQ = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
					//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
					//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						if(var_sales_rate==0) //SB20200327
						{
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
						}
						else
						{
							RATE.add(invoice_Sales_Rate);
							RATE_NUMERIC.add(nf2.format(invoice_Sales_Rate));
						}
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, RE_GAS_TARIF " +
					"FROM FMS7_RE_GAS_CARGO_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" " +
					"AND RE_GAS_NO="+temp_fgsa_no.elementAt(i)+" AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
				//	//System.out.println("Re-Gas Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_regas_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("T")  ) //ADDED FOR LTCORA AND CN
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, REGAS_TARIF " +
					"FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"' " +
					"AND FLAG='T' AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
					//System.out.println("LTCORA Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_LTCORA_CN_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("E")) //ADDED FOR LTCORA AND CN
				{
					queryString="SELECT TAX_CD,sac_description,sac_code,gate_pass_no,"
							+ " cust_gstin_no,sale_no,total_cess_amount,RATE"
							+ " from fms8_other_invoice_dtl where "
							+ "INV_SEQ_NO='"+HLPL_INV_SEQ_NO.elementAt(i)+"' "
							+ "AND FINANCIAL_YEAR='"+FINANCIAL_YEAR.elementAt(i)+"'"
							+ "  AND CONTRACT_TYPE='E'  ";
					//System.out.println("---dfbmdbf--"+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, REGAS_TARIF " +
								"FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"' " +
								"AND FLAG='C' AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
					//			System.out.println("LTCORA Details query TCQ = "+queryString);
								rset = stmt.executeQuery(queryString);
								if(rset.next())
								{			
									START_DT.add(rset.getString(1)==null?"":rset.getString(1));
									END_DT.add(rset.getString(2)==null?"":rset.getString(2));
//									sum_LTCORA_CN_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
									TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
									TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
									RATE.add(rset.getString(4)==null?"0":rset.getString(4));
									RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
								}
								else
								{
									START_DT.add("");
									END_DT.add("");
									TCQ.add("0.00");
									TCQ_NUMERIC.add("0.00");
									RATE.add("");
									RATE_NUMERIC.add("0.0000");
								}
					}else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
					
				}else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, REGAS_TARIF " +
					"FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"' " +
					"AND FLAG='C' AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
				//	//System.out.println("LTCORA Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_LTCORA_CN_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else
				{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			//System.out.println("ALLOCATION Final_sum_tcq query = "+Final_sum_tcq+"--sum_tcq--"+sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			Final_sum_LTCORA_CN_tcq = nf.format(sum_LTCORA_CN_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			double sum_LTCORA_CN_rem_supply = 0;//ADDDED FOR LTCORA AND CN
			for(int i=0; i<SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
				if(CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("T") || CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"'";
				}
				
//				System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					CUM_SUPPLY.add(nf.format(supp_qty));
					if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
					{
						sum_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("R"))
					{
						sum_regas_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
					{
						sum_LTCORA_CN_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					REM_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
					REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					CUM_SUPPLY.add("-");
					REM_SUPPLY.add("-");
					REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			Sum_LTCORA_CN_rem_supply=nf.format(sum_LTCORA_CN_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_sbc_tax = new Vector();
			Vector tmp_kkc_tax = new Vector(); //SB20160620
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
			Vector tmp_igst_tax = new Vector();
			Vector tmp_sgst_tax = new Vector();
			Vector tmp_cgst_tax = new Vector();
			Vector tmp_zgst_tax = new Vector();
				
			for(int k=0; k<HLPL_INV_SEQ_NO.size(); k++)
			{
				
				String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='C' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					sac_code.add(rset.getString(1)==null?"":rset.getString(1));
				} else {
					sac_code.add("");
				}
				
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="0";
												
				if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				TAX_CODE.clear();
				FACTOR.clear();						
				TAX_AMOUNT.clear();
				TAX_ON_TITLE.clear();
				int count = 0;
//				System.out.println("CONTRACT_TYPE ******"+CONTRACT_TYPE.elementAt(k));
				////System.out.println("===JAVA here TAX_AMOUNT=== "+TAX_AMOUNT);
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{			
					String abr = "";
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt=0;
					if(temp_gross_amt.elementAt(k).toString().length()!=0)
					{
						gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					}
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);	
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
				//		//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}	
					}
					else
					{
						tax_amt = ""+0.00;
					}	
					queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+tax_cd+"";
//					System.out.println("fetchin tax abr"+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
						tax_title = "ON "+tax_abbr;
						abr = tax_abbr;
					}
					else
					{
						tax_title = "";
					}	
					if(AdvADJ_FLAG.elementAt(k).equals("Y")) {
						String map_id = CONTRACT_TYPE.elementAt(k)+":"+FINANCIAL_YEAR.elementAt(k)+":"+HLPL_INV_SEQ_NO.elementAt(k)+":%";
						String query_tax="select a.amount from fms7_inv_compo_dtl a,fms7_compo_mst b where a.inv_seq_no like '"+map_id+"' and "
								+ "a.price_cd = b.compo_cd and lower(b.compo_abr) = '"+abr.toLowerCase()+"'  and (flag_temp not like 'T' or flag_temp is null) ";
//						System.out.println("==Fetching Tax=="+query_tax);
								rset5=stmt5.executeQuery(query_tax);
								if(rset5.next())
								{
									double tax_adjust_amt = rset5.getDouble(1);
									tax_amt = ""+(Double.parseDouble(tax_amt)-tax_adjust_amt);
								}
					}
					TAX_CODE.add(tax_cd);
					FACTOR.add(tax_factor);						
					TAX_AMOUNT.add(tax_amt);
					TAX_ON_TITLE.add(tax_title);
					count++;
				}
				if(count==0)
				{
					TAX_CODE.add("0");
					FACTOR.add("0");						
					TAX_AMOUNT.add("-");
					TAX_ON_TITLE.add("");
				}
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				int count7 = 0;
				int count8 = 0; //SB20160620
				int count9 = 0; //IGST
				int count10 = 0; //SGST
				int count11 = 0; //CGST
				int count12 = 0; //ZERO GST
				
				Map m = new HashMap();
				for(int ii=0;ii<MONTH.size();ii++) {
					m.put(""+MONTH.elementAt(ii), "1");
				}
				
				double tax_sum = 0;
				
			//	//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<TAX_CODE.size(); i++)
				{		
					if(TAX_CODE.elementAt(i).equals(cst_code) || new_cst_code.contains(TAX_CODE.elementAt(i)))
					{	
						if(TAX_AMOUNT.elementAt(i).equals("-")){
							SALES_TAX_AMT.add(TAX_AMOUNT.elementAt(i));
							SALES_TAX_AMT_NUMERIC.add(TAX_AMOUNT.elementAt(i));
						}else{
							SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
							SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						}
						
						if(k<=end_index_1)
						{
							sales_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sales_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						VAT_AMT.add("-");
						VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
						SALE_VAT_TAX_PERC.add("-"); //Hiren_20200806
						SALE_CST_TAX_PERC.add(FACTOR.elementAt(i)+""); //Hiren_20200806
					}
					else if(TAX_CODE.elementAt(i).equals(vat_code) || new_vat_code.contains(TAX_CODE.elementAt(i)))
					{
						SALES_TAX_AMT.add("-");
						SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						VAT_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
						
						SALE_VAT_TAX_PERC.add(FACTOR.elementAt(i)+"");	 //Hiren_20200806
						SALE_CST_TAX_PERC.add("-"); //Hiren_20200806
						
					}
					else if(TAX_CODE.elementAt(i).equals(tcs_cd))
					{
						if(k<=end_index_1)
						{
							tcs_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							tcs_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							tcs_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
					
															
					if(TAX_CODE.elementAt(i).equals(addl_code))
					{							
						ADD_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_addl_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count3++;
					}
										
					if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count4++;
				//		//System.out.println("---IF ST_CODE---JAVA SERVICE_TAX---: "+SERVICE_TAX);
					}
					
					if(TAX_CODE.elementAt(i).equals(sbc_code))
					{							
						SBC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SBC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sbc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sbc_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count7++;
					}
					if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count5++;
					}
										
					if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count6++;
					}	
					//SB20160620: For KKC ///////
					if(TAX_CODE.elementAt(i).equals(kkc_code))
					{//	//System.out.println("KKC :"+TAX_CODE.elementAt(i));						
						KKC_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						KKC_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_kkc_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_kkc_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count8++;
					}
					/////////////////////////////
					if(TAX_CODE.elementAt(i).equals(igst_code))
					{					
						TAX_RATE_IGST.add(FACTOR.elementAt(i));
						IGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						IGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_igst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_igst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						count9++;
					}
					if(TAX_CODE.elementAt(i).equals(sgst_code) || TAX_CODE.elementAt(i).equals(sgst_code_6))
					{	
						TAX_RATE_SGST.add(FACTOR.elementAt(i));
						SGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						SGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_sgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						count10++;
					}
					if(TAX_CODE.elementAt(i).equals(cgst_code) || TAX_CODE.elementAt(i).equals(cgst_code_6))
					{	
						TAX_RATE_CGST.add(FACTOR.elementAt(i));
						CGST_TAX.add(nf3.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						CGST_TAX_NUMERIC.add(nf.format(Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)))));
						if(k<=end_index_1 && end_index_1!=0)
						{
							sales_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_2 && end_index_2!=0)
						{
							regas_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_cgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						tmp_cgst_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
						}
						count11++;
					}
//					if(TAX_CODE.elementAt(i).equals(zgst_code))
//					{							
//						ZGST_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						ZGST_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_1 && end_index_1!=0)
//						{
//							sales_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_2 && end_index_2!=0)
//						{
//							regas_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						tmp_zgst_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						count12++;
//					}
				}
			//	//System.out.println("A0. tax_amt - Adj= "+tax_sum);
			//	//System.out.println("TOTAL TAX-AMT: "+tax_sum);
				String adjust_amt=""+0;
				
				if(CONTRACT_TYPE.elementAt(k).equals("C")) {
					String map_id=""+CONTRACT_TYPE.elementAt(k)+":"+FINANCIAL_YEAR.elementAt(k)+":"+HLPL_INV_SEQ_NO.elementAt(k)+":%";
					String query_tax = "select amount from fms7_inv_compo_dtl where price_cd='6' and "
							+ "inv_seq_no like '"+map_id+"' ";
				//	//System.out.println("fetch datea"+query_tax);
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						adjust_amt = rset5.getString(1);
					}
					
					double temp=0;
					try{
					temp = Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_amt));
					}catch(Exception e){}
					tax_sum = (tax_sum - temp);
					
					///////////SB20160524: added to adjust SBC adv
					adjust_amt=""+0;
					query_tax = "select amount from fms7_inv_compo_dtl where price_cd='7' and "
							+ "inv_seq_no like '"+map_id+"' ";
				//	//System.out.println("fetch datea"+query_tax);
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						adjust_amt = rset5.getString(1);
					}
					
					temp=0;
					try{
					temp = Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_amt));
					}catch(Exception e){}
					tax_sum = (tax_sum - temp);					
					///////////////////////////////////////////////
					
					///////////SB20160620: added to adjust KBC adv
					adjust_amt=""+0;
					query_tax = "select amount from fms7_inv_compo_dtl where price_cd='8' and "
							+ "inv_seq_no like '"+map_id+"' ";
				//	//System.out.println("fetch datea"+query_tax);
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						adjust_amt = rset5.getString(1);
					}
					
					temp=0;
					try{
					temp = Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_amt));
					}catch(Exception e){}
					tax_sum = (tax_sum - temp);					
					///////////////////////////////////////////////
					adjust_amt=""+0;
					query_tax = "select sum(amount) from fms7_inv_compo_dtl where price_cd in ('10','11','12','13') and "
							+ "inv_seq_no like '"+map_id+"' ";
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						adjust_amt = rset5.getString(1);
					}
					
					temp=0;
					try{
						temp = Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_amt));
					}catch(Exception e){}
					//tax_sum = (tax_sum - temp);	
					tax_sum = Math.round(tax_sum);
				}
				
				
		//		//System.out.println("A. tax_amt - Adj= "+tax_sum);
				
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					TAX_AMT_INR.add(nf3.format(tax_sum));
					
					
						if(CONTRACT_TYPE.elementAt(k).equals("S") || CONTRACT_TYPE.elementAt(k).equals("L")) {
							sales_total_tax_inr_total += tax_sum;
						}
						else if(CONTRACT_TYPE.elementAt(k).equals("R")) 
						{
							regas_total_tax_inr_total += tax_sum;
						}
						else if(CONTRACT_TYPE.elementAt(k).equals("C")) //ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_total_tax_inr_total += tax_sum;
						}
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_1)
						{
							sales_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_2)
						{
							regas_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_total_tax_usd_total += tax_sum;
						}
						
						TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					if(CONTRACT_TYPE.elementAt(k).toString().equalsIgnoreCase("E")) {
						TAX_AMT_INR.add(INV_TAX_AMT.elementAt(k));
					}else {
						TAX_AMT_INR.add("-");
					}
					
					
					TAX_AMT_USD.add("-");
				}
				
			//	//System.out.println("LTCORA_CN_total_tax_inr_total---"+LTCORA_CN_total_tax_inr_total);			
				
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
			//	//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_1)
				{
					sales_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_2)
				{
					regas_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
				{
					LTCORA_CN_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					NET_AMT_USD.add(nf3.format(net_amt_usd));
					NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					NET_AMT_USD.add("-");
					NET_AMT_USD_NUMERIC.add("0.00");
				}
				
		//		//System.out.println("---JAVA SERVICE_TAX---: "+SERVICE_TAX);
		//		//System.out.println("---JAVA count4---: "+count4);
				
				if(count2==0)
				{
					SALES_TAX_AMT.add("-");									
					VAT_AMT.add("-");
					SALES_TAX_AMT_USD.add("-");									
					VAT_AMT_USD.add("-");
					SALES_TAX_AMT_NUMERIC.add("0.00");									
					VAT_AMT_NUMERIC.add("0.00");
					SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				if(count3==0)
				{
					ADD_TAX.add("-");
					ADD_TAX_USD.add("-");
					ADD_TAX_NUMERIC.add("0.00");
					ADD_TAX_USD_NUMERIC.add("0.00");
					tmp_addl_tax.add("0");
				}
				if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count7==0)
				{
					SBC_TAX.add("-");
					SBC_TAX_USD.add("-");
					SBC_TAX_NUMERIC.add("0.00");
					SBC_TAX_USD_NUMERIC.add("0.00");
					tmp_sbc_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				if(count8==0)
				{
					KKC_TAX.add("-");
					KKC_TAX_USD.add("-");
					KKC_TAX_NUMERIC.add("0.00");
					KKC_TAX_USD_NUMERIC.add("0.00");
					tmp_kkc_tax.add("0");
				}

				if(count9==0)
				{
					if(CONTRACT_TYPE.elementAt(k).equals("E")) {
						String tax_cd="";
						queryString="SELECT TAX_DETAILS "
								+ " from fms8_other_invoice_dtl where "
								+ " INV_SEQ_NO='"+HLPL_INV_SEQ_NO.elementAt(k)+"' "
								+ " AND FINANCIAL_YEAR='"+FINANCIAL_YEAR.elementAt(k)+"'"
								+ " AND CONTRACT_TYPE='E'  ";
						//System.out.println("---dfbmdbf--"+queryString);
						rset1=stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							tax_cd = rset1.getString(1)==null?"":rset1.getString(1);
						}
						if(tax_cd.contains("IGST")) {
							
							String temp_arr[] = tax_cd.split("-");
//							System.out.println("temp_arr[]========="+temp_arr[1]);
							String tax_per = temp_arr[1].substring(0, temp_arr[1].length()-1);
//							System.out.println("tax_per========="+tax_per);
//							System.out.println("GROSS_AMT_INR--------"+GROSS_AMT_INR_2.elementAt(k));
							String igst_tax_amt = nf.format(Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100));
							IGST_TAX.add(igst_tax_amt);
							DEF_igst_inr_total+=Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100);
						}else {
							IGST_TAX.add("-");
						}
					}else {
						IGST_TAX.add("-");
					}
					IGST_TAX_USD.add("-");
					IGST_TAX_NUMERIC.add("0.00");
					IGST_TAX_USD_NUMERIC.add("0.00");
					tmp_igst_tax.add("0");
					TAX_RATE_IGST.add("-");
					
				}
				if(count10==0)
				{
					if(CONTRACT_TYPE.elementAt(k).equals("E")) {
						String tax_cd="";
						queryString="SELECT TAX_DETAILS "
								+ " from fms8_other_invoice_dtl where "
								+ " INV_SEQ_NO='"+HLPL_INV_SEQ_NO.elementAt(k)+"' "
								+ " AND FINANCIAL_YEAR='"+FINANCIAL_YEAR.elementAt(k)+"'"
								+ " AND CONTRACT_TYPE='E'  ";
//						System.out.println("---dfbmdbf-hiren-"+queryString);
						rset1=stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							tax_cd = rset1.getString(1)==null?"":rset1.getString(1);
						}
//						System.out.println("tax_cd-----------------"+tax_cd);
						if(tax_cd.contains("SGST")) {
							
							String temp_arr[] = tax_cd.split("-");
//							System.out.println("temp_arr1[]========="+temp_arr[2]);
							String tax_per = temp_arr[2].substring(0, temp_arr[2].length()-1);
//							System.out.println("tax_per2========="+tax_per);
							
							String sgst_tax_amt = nf.format(Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100));
							SGST_TAX.add(sgst_tax_amt);
							DEF_sgst_inr_total+=Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100);
//							SGST_TAX.add(tax_per);
						}else {
							SGST_TAX.add("-");
						}
					}else {
						SGST_TAX.add("-");
					}
					
					SGST_TAX_USD.add("-");
					SGST_TAX_NUMERIC.add("0.00");
					SGST_TAX_USD_NUMERIC.add("0.00");
					tmp_sgst_tax.add("0");
					TAX_RATE_SGST.add("-");
				}
				if(count11==0)
				{
					
					if(CONTRACT_TYPE.elementAt(k).equals("E")) {
						String tax_cd="";
						queryString="SELECT TAX_DETAILS "
								+ " from fms8_other_invoice_dtl where "
								+ " INV_SEQ_NO='"+HLPL_INV_SEQ_NO.elementAt(k)+"' "
								+ " AND FINANCIAL_YEAR='"+FINANCIAL_YEAR.elementAt(k)+"'"
								+ " AND CONTRACT_TYPE='E'  ";
//						System.out.println("---dfbmdbf-hiren-"+queryString);
						rset1=stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							tax_cd = rset1.getString(1)==null?"":rset1.getString(1);
						}
//						System.out.println("tax_cd-----------------"+tax_cd);
						if(tax_cd.contains("CGST")) {
							
							String temp_arr[] = tax_cd.split("-");
//							System.out.println("temp_arr1[]========="+temp_arr[2]);
							String tax_per = temp_arr[2].substring(0, temp_arr[2].length()-1);
//							System.out.println("tax_per2========="+tax_per);
//							CGST_TAX.add(tax_per);
							String cgst_tax_amt = nf.format(Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100));
							CGST_TAX.add(cgst_tax_amt);
							DEF_cgst_inr_total+=Math.round((Double.parseDouble(GROSS_AMT_INR_2.elementAt(k)+"")*Double.parseDouble(tax_per.trim()+""))/100);
						}else {
							CGST_TAX.add("-");
						}
					}else {
						CGST_TAX.add("-");
					}
					//CGST_TAX.add("-");
					CGST_TAX_USD.add("-");
					CGST_TAX_NUMERIC.add("0.00");
					CGST_TAX_USD_NUMERIC.add("0.00");
					tmp_cgst_tax.add("0");
					TAX_RATE_CGST.add("-");
				}
				if(count12==0)
				{
					ZGST_TAX.add("-");
					ZGST_TAX_USD.add("-");
					ZGST_TAX_NUMERIC.add("0.00");
					ZGST_TAX_USD_NUMERIC.add("0.00");
					tmp_zgst_tax.add("0");
				}
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							VAT_AMT_USD.add("-");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SALES_TAX_AMT_USD.add("-");
							VAT_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+tmp_addl_tax.elementAt(k))>0)
						{
							ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ADD_TAX_USD.add("-");
							ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+tmp_service_tax.elementAt(k))>0)
						{
							SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SERVICE_TAX_USD.add("-");
							SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count7>0)
					{
						if(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))>0)
						{
							SBC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							SBC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sbc_tax_usd_total += (Double.parseDouble(""+tmp_sbc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SBC_TAX_USD.add("-");
							SBC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count8>0)
					{
						if(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))>0)
						{
							KKC_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							KKC_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_kkc_tax_usd_total += (Double.parseDouble(""+tmp_kkc_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							KKC_TAX_USD.add("-");
							KKC_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count9>0)
					{
						if(Double.parseDouble(""+tmp_igst_tax.elementAt(k))>0)
						{
							IGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							IGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_igst_tax_usd_total += (Double.parseDouble(""+tmp_igst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							IGST_TAX_USD.add("-");
							IGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count10>0)
					{
						if(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))>0)
						{
							SGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							SGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sgst_tax_usd_total += (Double.parseDouble(""+tmp_sgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SGST_TAX_USD.add("-");
							SGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count11>0)
					{
						if(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))>0)
						{
							CGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							CGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_cgst_tax_usd_total += (Double.parseDouble(""+tmp_cgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							CGST_TAX_USD.add("-");
							CGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count12>0)
					{
						if(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))>0)
						{
							ZGST_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							ZGST_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_zgst_tax_usd_total += (Double.parseDouble(""+tmp_zgst_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ZGST_TAX_USD.add("-");
							ZGST_TAX_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						SALES_TAX_AMT_USD.add("-");									
						VAT_AMT_USD.add("-");
						SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						ADD_TAX_USD.add("-");
						ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						SERVICE_TAX_USD.add("-");
						SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					if(count7>0)
					{
						SBC_TAX_USD.add("-");
						SBC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count8>0)
					{
						KKC_TAX_USD.add("-");
						KKC_TAX_USD_NUMERIC.add("0.00");
					}
					if(count9>0)
					{
						IGST_TAX_USD.add("-");
						IGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count10>0)
					{
						SGST_TAX_USD.add("-");
						SGST_TAX_USD_NUMERIC.add("0.00");
					}
					if(count11>0)
					{
						CGST_TAX_USD.add("-");
						CGST_TAX_USD_NUMERIC.add("0.00");
					}if(count12>0)
					{
						ZGST_TAX_USD.add("-");
						ZGST_TAX_USD_NUMERIC.add("0.00");
					}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' ";
				if(CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("T") || CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"'";
				}
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					XML_GEN_FLAG.add("N");
				}
			}
			}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	public void get_IGX_dtls()			
	{
		try
		{//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String sbc_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			String kkc_code = "0"; //SB20160620
			String igst_code = "0";
			String cgst_code = "0";
			String sgst_code = "0";
			String zgst_code = "0";
			String sgst_code_6="0";
			String cgst_code_6="0";
			Vector new_vat_code = new Vector();
			Vector new_cst_code= new Vector();
			
			Vector tmp_group_gross_usd_amt = new Vector();
			//RS23062017
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='IGST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				igst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST 6'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code_6 = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CGST'";
//			System.out.println("queryString---"+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='Zero GST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				zgst_code = rset.getString(1)==null?"0":rset.getString(1);
			}
//			System.out.println("====zgst_code==="+zgst_code);
			////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) = 'VAT'"; 
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'VAT%' AND UPPER(SHT_NM) != 'VAT' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_vat_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm) like 'CST%' AND UPPER(SHT_NM) != 'CST' "; 
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				new_cst_code.add(rset.getString(1)==null?"0":rset.getString(1));
			}
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='SBT' or UPPER(sht_nm)='SBC'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				sbc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
			//SB20160620: For KKC ///////////
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='KKC' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				kkc_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			

			queryString="SELECT TAX_CODE,FACTOR FROM FMS7_TAX_STRUCTURE_DTL A WHERE TAX_STR_CD='22' AND APP_DATE=(SELECT MAX(B.APP_DATE) "
					+ "FROM FMS7_TAX_STRUCTURE_DTL B WHERE A.TAX_STR_CD=B.TAX_STR_CD AND B.TAX_STR_CD='22' )";
					// "B.APP_DATE<=TO_DATE('01/08/2020','DD/MM/YYYY'))";
			rset=stmt.executeQuery(queryString);
			//System.out.println("queryString---"+queryString);
			if(rset.next()){
				
				queryString1 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
						  "tax_code="+rset.getString(1)+"";
				//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					tcs_nm=rset1.getString(2)==null?"":rset1.getString(2);
					tcs_sht_nm=rset1.getString(1)==null?"":rset1.getString(1);
					tcs_nm=tcs_sht_nm;
				}
			}
		
			////////////////////////////////
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			tot_trans_grossinr=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			int j=-1;
			
			int n=0; //HARSH20210629 FOR STATE WISE GROUPING
			
			//MD
			if((For1.equals("IGX") || For1.equalsIgnoreCase("0")) && !invoice_type.equals("R") ){
				
				if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
				{
					queryString="SELECT DISTINCT SUP_STATE_CODE FROM FMS7_INVOICE_MST "
							+ "WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " 
							+"AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L' OR CONTRACT_TYPE='K') ORDER BY SUP_STATE_CODE DESC";
				}
				else
				{
					queryString="SELECT DISTINCT SUP_STATE_CODE FROM FMS7_INVOICE_MST "
							+ "WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " 
							+"AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L' OR CONTRACT_TYPE='K') ORDER BY SUP_STATE_CODE DESC";
				}
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					String state_cd = rset.getString(1)==null?"0":rset.getString(1);
					IGX_VSTATE_CD.add(state_cd);
					if(!state_cd.equals("0") && !state_cd.equals(""))
					{
						queryString1="SELECT STATE_NM FROM STATE_MST WHERE STATE_CODE='"+state_cd+"'";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							IGX_VSTATE_NM.add(rset1.getString(1)==null?"":rset1.getString(1));
						}
					}
					else
					{
						IGX_VSTATE_NM.add("Other");
					}
				}
				
				//System.out.println(VSTATE_CD);
				////////////////////////////////////////////////
				
				for(int i=0; i<IGX_VSTATE_CD.size(); i++) //HARSH20210629
				{
					if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
					{
						queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
						  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CODE,sales_price_flag " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='K') AND SUP_STATE_CODE='"+IGX_VSTATE_CD.elementAt(i)+"' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					}
					else
					{
						queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
						  ", ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUP_STATE_CODE,sales_price_flag " +//SB20160921 ADDED FOR AdvAdjAfterORBefore
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND (CONTRACT_TYPE='K') AND SUP_STATE_CODE='"+IGX_VSTATE_CD.elementAt(i)+"' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					}
					//System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						j++;
						n++; //HARSH20210629
						
						String cont_type = rset.getString(20)==null?"":rset.getString(20);
						IGX_INV_TAX_AMT.add(rset.getString(22)==null?"":rset.getString(22));
						IGX_SUMMRY_CONT_TYP.add(cont_type);
						String contract_name = "";
						String sale_price = rset.getString(5)==null?"":rset.getString(5);
						IGX_HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
						IGX_INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
						IGX_PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
						IGX_PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
						String sup_st_cd=rset.getString(33)==null?"":rset.getString(33);
						String curr=rset.getString(34)==null?"":rset.getString(34);
						if(curr.equals("1")){
							IGX_Currency.add("INR");
						}else{
							IGX_Currency.add("USD");
						}
						
//						if(sup_st_cd.equals("0")){
//							sup_st_cd="24";
//						}
						if(!sup_st_cd.equals("0")){
							queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
							//System.out.println("Sales Details Query for state name = "+queryString);
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{			
								String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
								if(!cost_cd.equals("-")){
									IGX_cost_center_code_.add("Y");
								}else{
									IGX_cost_center_code_.add("N");
								}
							}else{
								IGX_cost_center_code_.add("N");
							}
						}else{
							IGX_cost_center_code_.add("Y");
						}
						if(!sale_price.equals("") && !sale_price.equals(" "))
						{
							IGX_SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
							IGX_SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
						}
						else
						{
							IGX_SALE_PRICE.add("-");
							IGX_SALE_PRICE_NUMERIC.add("0.0000");
						}
						IGX_DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
						
						IGX_TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
						IGX_TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						IGX_sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
						
						IGX_EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
						
						IGX_GROSS_AMT_USD.add(rset.getString(9)==null?"":nf2.format(Double.parseDouble(rset.getString(9))));
						IGX_GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						IGX_sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
						IGX_sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
		//				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));  //Hiren_20200804
						IGX_GROSS_AMT_INR.add(rset.getString(10)==null?"":rset.getString(10)); 
						IGX_GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
						IGX_GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
						IGX_sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						IGX_sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="5";
						String exchg_rate="";
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(exchg_rate);
						}
						
						//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
						IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
						IGX_sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
						
						//temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
						
						IGX_NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
						IGX_NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
						IGX_sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
						
						temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
						IGX_FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
						IGX_CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
						IGX_TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
						
						String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
						String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
						String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_rev_no = rset.getString(16)==null?"0":rset.getString(16);
						String tmp_fgsa_rev_no = rset.getString(18)==null?"0":rset.getString(18);
										
						String contract_no = "",agr_base="";
						
						if(cont_type.equalsIgnoreCase("K"))
						{
							queryString2 = "SELECT SN_REF_NO FROM FMS10_IGX_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
							
						}
						
						
						if(cont_type.equalsIgnoreCase("K"))
						{
							contract_name = "TCN-"+contract_no;
							IGX_SEGMENT_NAME.add("Sales");
						}
						
						IGX_SN_NO.add(contract_name);
						temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
						IGX_SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
						IGX_FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
						temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
						IGX_FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
						IGX_MONTH.add(rset.getString(19)==null?"":rset.getString(19));
						IGX_CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
						//SEGMENT_NAME.add("Sales");
						IGX_PLANT_SEQ_NO.add(rset.getString(27));
						IGX_SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
						IGX_Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
						IGX_NEW_INV_SEQ_NO.add(rset.getString(32)==null?"":rset.getString(32)); //RS23062017
						IGX_SUPPLIER_CD.add("");
						IGX_AdvADJ_FLAG.add("");
						//FOR TCS pART
						String queryStrr="Select tcs_amt from fms7_invoice_tcs_dtl where hlpl_inv_seq_no='"+rset.getString(1)+"' and "
								+ "financial_year='"+rset.getString(12)+"' and customer_cd='"+tmp_cust_cd+"' and contract_type='"+cont_type+"' "
								+ "and  invoice_type='SALES' AND FLAG='Y'";
						rset2=stmt2.executeQuery(queryStrr);
						//System.out.println("queryString--"+queryStrr);
						if(rset2.next()){
							IGX_Vtcs_amt.add(rset2.getString(1)==null?"":rset2.getString(1));
						}else{
							IGX_Vtcs_amt.add("");
						}
						//
						
						//RG20200229 added for GTA part
						/*if(agr_base.equals("D")){
							String queryString_tr="";
							String transp_charges="";
							String temp_grossamt="";
							if(cont_type.equals("S")){
								queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsa_rev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
							}else if(cont_type.equals("L")){
								queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
								
							}
							rset2=stmt2.executeQuery(queryString_tr);
							//System.out.println("queryString--"+queryString_tr);
							if(rset2.next()){
								trans_charges.add(rset2.getString(1)==null?"":rset2.getString(1));
								
								transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
		//						if(!transp_charges.equals("")){
		//							transp_charges=nf.format(Double.parseDouble(rset2.getString(1)==null?"":rset2.getString(1)));
		//						}
								
								//System.out.println("transp_charges---"+transp_charges);
								
							}else {
								trans_charges.add("-");
							}
							//System.out.println("---rset.getString(7)--"+rset.getString(7)+"--transp_charges--"+transp_charges);
							if(!transp_charges.equals("")){
								temp_grossamt=""+(Double.parseDouble(rset.getString(10)==null?"":rset.getString(10))+Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
								temp_gross_amt.add(temp_grossamt);
								trans_gross_inr.add(Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges));
								tot_trans_grossinr+=Double.parseDouble(rset.getString(7)==null?"":rset.getString(7)) * Double.parseDouble(transp_charges);
								//System.out.println("---temp====="+temp_grossamt);
							}else{
								temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
								trans_gross_inr.add("-");
							}
							
						}else{*/
							temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
							IGX_trans_charges.add("-");
							IGX_trans_gross_inr.add("-");
						//}
					}
					if(!IGX_VSTATE_CD.elementAt(i).equals("0")) //HARSH20210629
					{
						IGX_VST_WISE_INDEX.add(n);
					}
				}
			//System.out.println(VST_WISE_INDEX);
			
			//
				IGX_VST_WISE_INDEX.add(n);//HARSH20210629
			//System.out.println(VST_WISE_INDEX);
			start_index_10 = 0;
			end_index_10 = IGX_HLPL_INV_SEQ_NO.size()-1;
			}
	//System.out.println(INV_TAX_AMT.size()+"-----------"+CUSTOMER_CD.size()+"\n"+HLPL_INV_SEQ_NO);
			for(int i=0; i<IGX_CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					IGX_CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					IGX_CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					IGX_CUSTOMER_NAME.add("");
					IGX_CUSTOMER_ABBR.add("");
				}
				if(!IGX_TOTAL_QTY.elementAt(i).equals("") && IGX_TOTAL_QTY.elementAt(i)!=null && !IGX_TOTAL_QTY.elementAt(i).equals("0"))
				{
					IGX_AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+IGX_TOTAL_QTY.elementAt(i))));
				}
				else
				{
					IGX_AVG_PRICE_MMBTU.add("-");
				}
				if(!IGX_EXCHG_RATE.elementAt(i).equals("") && IGX_EXCHG_RATE.elementAt(i)!=null)
				{
					IGX_EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+IGX_EXCHG_RATE.elementAt(i))));
					IGX_EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+IGX_EXCHG_RATE.elementAt(i))));
				}
				else
				{
					IGX_EXCHG_RATE_VALUE.add("-");
					IGX_EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
				
				
				
				/**************added to display tin nos as per mr. venkat requested *************/
				boolean flag_v=false;
					
				if(((""+IGX_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("K"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+IGX_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				
				if(flag_v)
				{
					IGX_vSTAT_NO.add("1");
				}
				else
				{
					IGX_vSTAT_NO.add("0");
				}
				
				if(((""+IGX_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("K"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+IGX_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "and B.stat_cd='1001' " +
								  "ORDER BY A.stat_cd";
					
					//System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						IGX_contact_Customer_GST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						IGX_contact_Customer_GST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+IGX_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1002' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
//					System.out.println("Customer Plant's Tax Names CST TIN NO = "+queryString);
					if(rset.next())
					{
						IGX_contact_Customer_CST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						IGX_contact_Customer_CST_NO.add("");
					}
//					System.out.println("contact_Customer_CST_NO---"+contact_Customer_CST_NO);
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+IGX_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1003' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						IGX_contact_Customer_GVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						IGX_contact_Customer_GVAT_NO.add("");
					}
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+IGX_PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1004' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						IGX_contact_Customer_MVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						IGX_contact_Customer_MVAT_NO.add("");
					}
				}
			}
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			double sum_LTCORA_CN_tcq = 0;
			for(int i=0; i<IGX_SN_NO.size(); i++)
			{
				if(((""+IGX_CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("K"))
				{
///////////////////////////SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					double var_sales_rate = 0; double ori_sale_price = 0;  double invoice_Sales_Rate = 0;//SB20200331
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' and contract_type='K' AND NEW_PRICE_EFF_DT = (SELECT MAX(NEW_PRICE_EFF_DT) FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+IGX_INVOICE_DT.elementAt(i)+"','DD/MM/YYYY') and contract_type='K')";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =var_sales_rate; //SB20200327
					}
					if(var_sales_rate==0) //SB20200327
					{
					queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM FMS8_CARGO_ALLOC_REVISED_DTL WHERE FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" "
							  + "AND  CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+" AND FLAG='A' and contract_type='K' ";
					//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						var_sales_rate = rset.getDouble(1);
						ori_sale_price =  rset.getDouble(2);
						invoice_Sales_Rate =ori_sale_price; //SB20200327
					}
				}
///////////////////////////^^^^SB20200401: Check if Price Change is made or not. If YES pick up from FMS8_CARGO_ALLOC_REVISED_DTL else from FMS7_SN_MST////////////////////////////////////////////////
					
						queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS10_IGX_MST WHERE CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+"  " +
								"AND SN_REV_NO="+IGX_SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+IGX_FGSA_REV_NO.elementAt(i)+" " +
								"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
						//System.out.println("SN Master query TCQ= "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{			
							IGX_START_DT.add(rset.getString(1)==null?"":rset.getString(1));
							IGX_END_DT.add(rset.getString(2)==null?"":rset.getString(2));
							sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
							IGX_TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
							IGX_TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
							//SB20200401	RATE.add(rset.getString(4)==null?"0":rset.getString(4));
							//SB20200401	RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							if(var_sales_rate==0) //SB20200327
							{
								IGX_RATE.add(rset.getString(4)==null?"0":rset.getString(4));
								IGX_RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
							}
							else
							{
								IGX_RATE.add(invoice_Sales_Rate);
								IGX_RATE_NUMERIC.add(nf2.format(invoice_Sales_Rate));
							}
						}
						else
						{
							IGX_START_DT.add("");
							IGX_END_DT.add("");
							IGX_TCQ.add("0.00");
							IGX_TCQ_NUMERIC.add("0.00");
							IGX_RATE.add("");
							IGX_RATE_NUMERIC.add("0.0000");
						}
					
				}
				
				else
				{
					IGX_START_DT.add("");
					IGX_END_DT.add("");
					IGX_TCQ.add("0");
					IGX_TCQ_NUMERIC.add("0.00");
					IGX_RATE.add("");
					IGX_RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			//System.out.println("ALLOCATION Final_sum_tcq query = "+Final_sum_tcq+"--sum_tcq--"+sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			Final_sum_LTCORA_CN_tcq = nf.format(sum_LTCORA_CN_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			double sum_LTCORA_CN_rem_supply = 0;//ADDDED FOR LTCORA AND CN
			for(int i=0; i<IGX_SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+IGX_CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+IGX_CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+IGX_PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
//				System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					IGX_CUM_SUPPLY.add(nf.format(supp_qty));
					if((""+IGX_CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("K"))
					{
						sum_rem_supply += Double.parseDouble(""+IGX_TCQ.elementAt(i))- supp_qty;
					}
					IGX_REM_SUPPLY.add(nf.format(Double.parseDouble(""+IGX_TCQ.elementAt(i))- supp_qty));
					IGX_REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+IGX_TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					IGX_CUM_SUPPLY.add("-");
					IGX_REM_SUPPLY.add("-");
					IGX_REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			Sum_LTCORA_CN_rem_supply=nf.format(sum_LTCORA_CN_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_sbc_tax = new Vector();
			Vector tmp_kkc_tax = new Vector(); //SB20160620
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
			Vector tmp_igst_tax = new Vector();
			Vector tmp_sgst_tax = new Vector();
			Vector tmp_cgst_tax = new Vector();
			Vector tmp_zgst_tax = new Vector();
				
			for(int k=0; k<IGX_HLPL_INV_SEQ_NO.size(); k++)
			{
				
				String sac_query = "SELECT SERVICE_CD FROM FMS7_LNG_SALES_MAPPING WHERE "
						+ "CONTRACT_TYPE='K' AND SERVICE_NM = 'SAC' ";
				rset = stmt.executeQuery(sac_query);
				if(rset.next()) {
					IGX_sac_code.add(rset.getString(1)==null?"":rset.getString(1));
				} else {
					IGX_sac_code.add("");
				}
				
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="0";
												
				if(Integer.parseInt(""+IGX_HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+IGX_HLPL_INV_SEQ_NO.elementAt(k)+"/"+IGX_FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+IGX_HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+IGX_HLPL_INV_SEQ_NO.elementAt(k)+"/"+IGX_FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+IGX_HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+IGX_HLPL_INV_SEQ_NO.elementAt(k)+"/"+IGX_FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=IGX_HLPL_INV_SEQ_NO.elementAt(k)+"/"+IGX_FINANCIAL_YEAR.elementAt(k);
				}
				IGX_HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				IGX_TAX_CODE.clear();
				IGX_FACTOR.clear();						
				IGX_TAX_AMOUNT.clear();
				IGX_TAX_ON_TITLE.clear();
				int count = 0;
//				System.out.println("CONTRACT_TYPE ******"+CONTRACT_TYPE.elementAt(k));
				////System.out.println("===JAVA here TAX_AMOUNT=== "+TAX_AMOUNT);
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+IGX_TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+IGX_TAX_STRUCT_CD.elementAt(k)+"' AND " +
				   			  "B.app_date<=TO_DATE('"+IGX_PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{			
					String abr = "";
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt=0;
					if(temp_gross_amt.elementAt(k).toString().length()!=0)
					{
						gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					}
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);	
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+IGX_TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+IGX_TAX_STRUCT_CD.elementAt(k)+"' AND " +
										"B.app_date<=TO_DATE('"+IGX_PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code='"+rset.getString(4)+"'";
				//		//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}	
					}
					else
					{
						tax_amt = ""+0.00;
					}	
					queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+tax_cd+"";
//					System.out.println("fetchin tax abr"+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
						tax_title = "ON "+tax_abbr;
						abr = tax_abbr;
					}
					else
					{
						tax_title = "";
					}	
					
					IGX_TAX_CODE.add(tax_cd);
					IGX_FACTOR.add(tax_factor);						
					IGX_TAX_AMOUNT.add(tax_amt);
					IGX_TAX_ON_TITLE.add(tax_title);
					count++;
				}
				if(count==0)
				{
					IGX_TAX_CODE.add("0");
					IGX_FACTOR.add("0");						
					IGX_TAX_AMOUNT.add("-");
					IGX_TAX_ON_TITLE.add("");
				}
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				int count7 = 0;
				int count8 = 0; //SB20160620
				int count9 = 0; //IGST
				int count10 = 0; //SGST
				int count11 = 0; //CGST
				int count12 = 0; //ZERO GST
				
				Map m = new HashMap();
				for(int ii=0;ii<IGX_MONTH.size();ii++) {
					m.put(""+IGX_MONTH.elementAt(ii), "1");
				}
				
				double tax_sum = 0;
				
			//	//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<IGX_TAX_CODE.size(); i++)
				{		
					if(IGX_TAX_CODE.elementAt(i).equals(cst_code) || new_cst_code.contains(IGX_TAX_CODE.elementAt(i)))
					{	
						if(IGX_TAX_AMOUNT.elementAt(i).equals("-")){
							IGX_SALES_TAX_AMT.add(IGX_TAX_AMOUNT.elementAt(i));
							IGX_SALES_TAX_AMT_NUMERIC.add(IGX_TAX_AMOUNT.elementAt(i));
						}else{
							IGX_SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i))));
							IGX_SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i))));
						}
						
						if(k<=end_index_10)
						{
							IGX_sales_sales_tax_inr_total += Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i));
						}
						/*else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}*/
						tmp_sales_tax.add(""+IGX_TAX_AMOUNT.elementAt(i));
						if(!(""+IGX_TAX_AMOUNT.elementAt(i)).equals("") && !(""+IGX_TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+IGX_TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i));
						}
						IGX_VAT_AMT.add("-");
						IGX_VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
						IGX_SALE_VAT_TAX_PERC.add("-"); //Hiren_20200806
						IGX_SALE_CST_TAX_PERC.add(IGX_FACTOR.elementAt(i)+""); //Hiren_20200806
					}
					else if(IGX_TAX_CODE.elementAt(i).equals(vat_code) || new_vat_code.contains(IGX_TAX_CODE.elementAt(i)))
					{
						IGX_SALES_TAX_AMT.add("-");
						IGX_SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						IGX_VAT_AMT.add(nf3.format(Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i))));
						IGX_VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_10)
						{
							IGX_sales_vat_inr_total += Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i));
						}
					
						tmp_vat.add(""+IGX_TAX_AMOUNT.elementAt(i));
						if(!(""+IGX_TAX_AMOUNT.elementAt(i)).equals("") && !(""+IGX_TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+IGX_TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i));
						}
						count2++;
						
						IGX_SALE_VAT_TAX_PERC.add(IGX_FACTOR.elementAt(i)+"");	 //Hiren_20200806
						IGX_SALE_CST_TAX_PERC.add("-"); //Hiren_20200806
						
					}
					else if(IGX_TAX_CODE.elementAt(i).equals(tcs_cd))
					{
						if(k<=end_index_10)
						{
							IGX_tcs_inr_total += Double.parseDouble(""+IGX_TAX_AMOUNT.elementAt(i));
						}
						
						count2++;
					}
//					if(TAX_CODE.elementAt(i).equals(zgst_code))
//					{							
//						ZGST_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						ZGST_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
//						if(k<=end_index_10 && end_index_10!=0)
//						{
//							sales_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_2 && end_index_2!=0)
//						{
//							regas_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
//						{
//							LTCORA_CN_zgst_tax_inr_total += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						tmp_zgst_tax.add(""+TAX_AMOUNT.elementAt(i));
//						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
//						{
//							tax_sum += Math.round(Double.parseDouble(""+TAX_AMOUNT.elementAt(i)));
//						}
//						count12++;
//					}
				}
			//	//System.out.println("A0. tax_amt - Adj= "+tax_sum);
			//	//System.out.println("TOTAL TAX-AMT: "+tax_sum);
				String adjust_amt=""+0;
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					IGX_TAX_AMT_INR.add(nf3.format(tax_sum));
					
					
						if(IGX_CONTRACT_TYPE.elementAt(k).equals("K")) {
							IGX_sales_total_tax_inr_total += tax_sum;
						}
						
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+IGX_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_10)
						{
							IGX_sales_total_tax_usd_total += tax_sum;
						}
						
						IGX_TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						IGX_TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					
						IGX_TAX_AMT_INR.add("-");
					
					
						IGX_TAX_AMT_USD.add("-");
				}
				
			//	//System.out.println("LTCORA_CN_total_tax_inr_total---"+LTCORA_CN_total_tax_inr_total);			
				
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+IGX_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
			//	//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_10)
				{
					IGX_sales_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					IGX_NET_AMT_USD.add(nf3.format(net_amt_usd));
					IGX_NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					IGX_NET_AMT_USD.add("-");
					IGX_NET_AMT_USD_NUMERIC.add("0.00");
				}
				
		//		//System.out.println("---JAVA SERVICE_TAX---: "+SERVICE_TAX);
		//		//System.out.println("---JAVA count4---: "+count4);
				
				if(count2==0)
				{
					IGX_SALES_TAX_AMT.add("-");									
					IGX_VAT_AMT.add("-");
					IGX_SALES_TAX_AMT_USD.add("-");									
					IGX_VAT_AMT_USD.add("-");
					IGX_SALES_TAX_AMT_NUMERIC.add("0.00");									
					IGX_VAT_AMT_NUMERIC.add("0.00");
					IGX_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					IGX_VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+IGX_INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					IGX_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							IGX_SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							IGX_SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_10)
							{
								IGX_sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							
							IGX_VAT_AMT_USD.add("-");
							IGX_VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							IGX_SALES_TAX_AMT_USD.add("-");
							IGX_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							IGX_VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							IGX_VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_10)
							{
								IGX_sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							IGX_SALES_TAX_AMT_USD.add("-");
							IGX_VAT_AMT_USD.add("-");
							IGX_SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							IGX_VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					IGX_GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						IGX_SALES_TAX_AMT_USD.add("-");									
						IGX_VAT_AMT_USD.add("-");
						IGX_SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						IGX_VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{}
					if(count4>0)
					{}
					if(count7>0)
					{}
					if(count5>0)
					{}
					if(count6>0)
					{}
					if(count8>0)
					{}
					if(count9>0)
					{}
					if(count10>0)
					{}
					if(count11>0)
					{}if(count12>0)
					{}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<IGX_HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+IGX_HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+IGX_CONTRACT_TYPE.elementAt(i)+"' ";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					IGX_XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					IGX_XML_GEN_FLAG.add("N");
				}
			}
			}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	public double getDEF_gross_amt_inr_total() {
		return DEF_gross_amt_inr_total;
	}

	public double getDEF_qty_amt_inr_total() {
		return DEF_qty_amt_inr_total;
	}

	public double getDEF_gross_amt_usd_total() {
		return DEF_gross_amt_usd_total;
	}

	public double getDEF_qty_total() {
		return DEF_qty_total;
	}

	public void get_Sales_dtlsNEW_old_20151125()
	{
		try
		{	
			//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}	
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
																	
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			//MD
			if(For1.equals("OWN") || For1.equalsIgnoreCase("0")){		
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " + //ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
		//	//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add(cont_type);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
								
				String contract_no = "";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
					SEGMENT_NAME.add("Sales");
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
					SEGMENT_NAME.add("LOA");
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					SEGMENT_NAME.add("Regas");
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				//SEGMENT_NAME.add("Sales");
				PLANT_SEQ_NO.add(rset.getString(27));
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
				Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
			}
	
			start_index_10 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
			}
			if(For1.equals("REGAS") || For1.equalsIgnoreCase("0")){
				//System.out.println("REGAS");
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID " +//ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add("R");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
					/*if(foreign_exchg_rate>0)
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
					}
					else
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
						tmp_group_gross_usd_amt.add("0.00");
					}*/
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					SEGMENT_NAME.add("Regas");
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
				}
			
				start_index_2 = end_index_1+1;
				end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			
			}
			////System.out.println("start_index_2"+start_index_2+"end_index_1"+end_index_1);
			/////**********ADDED FOR LTCORA AND CN******///////
		//	//System.out.println("LTCORA AND CN"+For1);
			if(For1.equals("LTCORA_CN") || For1.equalsIgnoreCase("0")){
				//System.out.println("LTCORA AND CN");
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  ",MAPPING_ID ,INV_AMT_INR " +//ADDED FOR LTCORA AND CN
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='T' OR CONTRACT_TYPE='C') ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			//System.out.println("queryString"+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add(cont_type);
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					LTCORA_CN_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					LTCORA_CN_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					LTCORA_CN_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					LTCORA_CN_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					LTCORA_CN_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
					/*if(foreign_exchg_rate>0)
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
					}
					else
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
						tmp_group_gross_usd_amt.add("0.00");
					}*/
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					LTCORA_CN_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					int count=0;
					String map_id=cont_type+":"+rset.getString(12)+":"+rset.getString(1)+":%";
					String query_tax="select count(price_cd) from fms7_inv_compo_dtl where inv_seq_no like '"+map_id+"' and "
							+ "price_cd in ('6') and (flag_temp not like 'T' or flag_temp is null)";
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						count=Integer.parseInt(rset5.getString(1));
					}
					
					if(count>=1) {
						temp_gross_amt.add(rset.getString(31)==null?"":rset.getString(31));
					}else {
						temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					}
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					LTCORA_CN_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					else if(cont_type.equalsIgnoreCase("T"))
					{
						contract_name = "LTCORA-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					else if(cont_type.equalsIgnoreCase("C"))
					{
						contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					
					if(cont_type.equalsIgnoreCase("T"))
					{
						SEGMENT_NAME.add("LTCORA");
					}
					else if(cont_type.equalsIgnoreCase("C"))
					{
						SEGMENT_NAME.add("CN");
					}
					
					PLANT_SEQ_NO.add(rset.getString(27));
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
					Account_Mapping_id.add(rset.getString(30)==null?"":rset.getString(30));//ADDED FOR LTCORA AND CN
					////System.out.println("rset.getString(20)"+rset.getString(22));
				}
				
				start_index_3 = end_index_2+1;
				end_index_3 = HLPL_INV_SEQ_NO.size()-1;
			
			}
			///END OF LTCORA AND CN
			
			//MD
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
				if(!TOTAL_QTY.elementAt(i).equals("") && TOTAL_QTY.elementAt(i)!=null && !TOTAL_QTY.elementAt(i).equals("0"))
				{
					AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+TOTAL_QTY.elementAt(i))));
				}
				else
				{
					AVG_PRICE_MMBTU.add("-");
				}
				if(!EXCHG_RATE.elementAt(i).equals("") && EXCHG_RATE.elementAt(i)!=null)
				{
					EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
					EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
				
				
				
				/**************added to display tin nos as per mr. venkat requested *************/
				boolean flag_v=false;
					
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
				{
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='R' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String stat_nm = rset.getString(3)==null?"":rset.getString(3);
						String stat_no = rset.getString(1)==null?"":rset.getString(1);
						String stat_eff_dt = rset.getString(2)==null?"":rset.getString(2);
						
						if(!stat_nm.trim().equals("") && !stat_no.trim().equals("") && !stat_eff_dt.trim().equals(""))
						{
							flag_v=true;
						}
					}
				}
				if(flag_v)
				{
					vSTAT_NO.add("1");
				}
				else
				{
					vSTAT_NO.add("0");
				}
				
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
				{
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
								  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
								  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
								  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
								  "and B.stat_cd='1001' " +
								  "ORDER BY A.stat_cd";
					
					////System.out.println("Customer Plant's Tax Names Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_GST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_GST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1002' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_CST_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_CST_NO.add("");
					}
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1003' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_GVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_GVAT_NO.add("");
					}
					
					queryString = "SELECT A.stat_no, TO_CHAR(A.eff_dt,'DD-MM-YYYY'), B.stat_nm, B.stat_cd " +
					  "FROM FMS7_CUSTOMER_PLANT_TAX_CDS A, FMS7_GOVT_STAT_NO B " +
					  "WHERE A.stat_cd=B.stat_cd AND A.customer_cd="+CUSTOMER_CD.elementAt(i)+" AND " +
					  "A.plant_seq_no="+PLANT_SEQ_NO.elementAt(i)+" AND B.stat_type='S' " +
					  "and B.stat_cd='1004' " +
					  "ORDER BY A.stat_cd";
		
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						contact_Customer_MVAT_NO.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						contact_Customer_MVAT_NO.add("");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
				{
					contact_Customer_GST_NO.add("");
					contact_Customer_CST_NO.add("");
					contact_Customer_GVAT_NO.add("");
					contact_Customer_MVAT_NO.add("");
				}
				
			}
				
				
		
			
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			double sum_LTCORA_CN_tcq = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"  " +
							"AND SN_REV_NO="+SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+FGSA_REV_NO.elementAt(i)+" " +
							"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
				//	//System.out.println("SN Master query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}				
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+temp_sn_no.elementAt(i)+" AND TENDER_NO="+temp_fgsa_no.elementAt(i)+"";
				//	//System.out.println("LOA Master query TCQ = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, RE_GAS_TARIF " +
					"FROM FMS7_RE_GAS_CARGO_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" " +
					"AND RE_GAS_NO="+temp_fgsa_no.elementAt(i)+" AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
				//	//System.out.println("Re-Gas Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_regas_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("T")) //ADDED FOR LTCORA AND CN
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, REGAS_TARIF " +
					"FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"' " +
					"AND FLAG='T' AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
				//	//System.out.println("LTCORA Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_LTCORA_CN_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, REGAS_TARIF " +
					"FROM FMS8_LNG_REGAS_CARGO_DTL WHERE MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"' " +
					"AND FLAG='C' AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
				//	//System.out.println("LTCORA Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_LTCORA_CN_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else
				{
					START_DT.add("");
					END_DT.add("");
					TCQ.add("-");
					TCQ_NUMERIC.add("0.00");
					RATE.add("");
					RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			Final_sum_LTCORA_CN_tcq = nf.format(sum_LTCORA_CN_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			double sum_LTCORA_CN_rem_supply = 0;//ADDDED FOR LTCORA AND CN
			for(int i=0; i<SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
				if(CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("T") || CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"'";
				}
				
			//	//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					CUM_SUPPLY.add(nf.format(supp_qty));
					if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("S") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("L"))
					{
						sum_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("R"))
					{
						sum_regas_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else if((""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("T") || (""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("C"))
					{
						sum_LTCORA_CN_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					REM_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
					REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					CUM_SUPPLY.add("-");
					REM_SUPPLY.add("-");
					REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			Sum_LTCORA_CN_rem_supply=nf.format(sum_LTCORA_CN_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
					
			for(int k=0; k<HLPL_INV_SEQ_NO.size(); k++)
			{
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="0";
												
				if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				TAX_CODE.clear();
				FACTOR.clear();						
				TAX_AMOUNT.clear();
				TAX_ON_TITLE.clear();
				int count = 0;
				//System.out.println("seq no"+hlpl_inv_no_disp);
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code ";
			//	//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{			
					
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt=0;
					if(temp_gross_amt.elementAt(k).toString().length()!=0)
					{
						gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					}
					//System.out.println("seq no"+tax_factor);
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);						
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//		//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}		 		
						queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
					//	//System.out.println("For Fetching DEPENDENT Tax Abbr = "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
							tax_title = "ON "+tax_abbr;
						}
						else
						{
							tax_title = "";
						}							
					}
					else
					{
						tax_amt = ""+0.00;
					}			
					TAX_CODE.add(tax_cd);
					FACTOR.add(tax_factor);						
					TAX_AMOUNT.add(tax_amt);
					TAX_ON_TITLE.add(tax_title);
					count++;
				}
				
				if(count==0)
				{
					TAX_CODE.add("0");
					FACTOR.add("0");						
					TAX_AMOUNT.add("-");
					TAX_ON_TITLE.add("");
				}
				
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				
				Map m = new HashMap();
				for(int ii=0;ii<MONTH.size();ii++) {
					m.put(""+MONTH.elementAt(ii), "1");
				}
				
				double tax_sum = 0;
				
			//	//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<TAX_CODE.size(); i++)
				{									
					if(TAX_CODE.elementAt(i).equals(cst_code))
					{											
						SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sales_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						VAT_AMT.add("-");
						VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
					}
					else if(TAX_CODE.elementAt(i).equals(vat_code))
					{
						SALES_TAX_AMT.add("-");
						SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						VAT_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
															
					if(TAX_CODE.elementAt(i).equals(addl_code))
					{							
						ADD_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_addl_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count3++;
					}
										
					if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count4++;
					}
										
					if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count5++;
					}
										
					if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count6++;
					}					
				}
				
				//System.out.println("tax_amt"+tax_sum);
				String adjust_amt=""+0;
				
				if(CONTRACT_TYPE.elementAt(k).equals("C")) {
					String map_id=""+CONTRACT_TYPE.elementAt(k)+":"+FINANCIAL_YEAR.elementAt(k)+":"+HLPL_INV_SEQ_NO.elementAt(k)+":%";
					String query_tax = "select amount from fms7_inv_compo_dtl where price_cd='6' and "
							+ "inv_seq_no like '"+map_id+"' ";
					//System.out.println("fetch datea"+query_tax);
					rset5=stmt5.executeQuery(query_tax);
					if(rset5.next())
					{
						adjust_amt = rset5.getString(1);
					}
					
					double temp=0;
					try{
					temp = Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_amt));
					}catch(Exception e){}
					tax_sum = (tax_sum - temp);
				}
				
				
				//System.out.println("B. tax_amt - Adj = "+tax_sum);
				
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					TAX_AMT_INR.add(nf3.format(tax_sum));
					
					
						if(CONTRACT_TYPE.elementAt(k).equals("S") || CONTRACT_TYPE.elementAt(k).equals("L")) {
							sales_total_tax_inr_total += tax_sum;
						}
						else if(CONTRACT_TYPE.elementAt(k).equals("R")) 
						{
							regas_total_tax_inr_total += tax_sum;
						}
						else if(CONTRACT_TYPE.elementAt(k).equals("C")) //ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_total_tax_inr_total += tax_sum;
						}
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_1)
						{
							sales_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_2)
						{
							regas_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
						{
							LTCORA_CN_total_tax_usd_total += tax_sum;
						}
						
						TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					TAX_AMT_INR.add("-");
					TAX_AMT_USD.add("-");
				}
				
				//System.out.println("LTCORA_CN_total_tax_inr_total"+LTCORA_CN_total_tax_inr_total);			
				
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
			//	//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_1)
				{
					sales_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_2)
				{
					regas_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
				{
					LTCORA_CN_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					NET_AMT_USD.add(nf3.format(net_amt_usd));
					NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					NET_AMT_USD.add("-");
					NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				if(count2==0)
				{
					SALES_TAX_AMT.add("-");									
					VAT_AMT.add("-");
					SALES_TAX_AMT_USD.add("-");									
					VAT_AMT_USD.add("-");
					SALES_TAX_AMT_NUMERIC.add("0.00");									
					VAT_AMT_NUMERIC.add("0.00");
					SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				if(count3==0)
				{
					ADD_TAX.add("-");
					ADD_TAX_USD.add("-");
					ADD_TAX_NUMERIC.add("0.00");
					ADD_TAX_USD_NUMERIC.add("0.00");
					tmp_addl_tax.add("0");
				}
				if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
			//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							VAT_AMT_USD.add("-");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SALES_TAX_AMT_USD.add("-");
							VAT_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+tmp_addl_tax.elementAt(k))>0)
						{
							ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ADD_TAX_USD.add("-");
							ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+tmp_service_tax.elementAt(k))>0)
						{
							SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SERVICE_TAX_USD.add("-");
							SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_3)//ADDED FOR LTCORA AND CN
							{
								LTCORA_CN_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						SALES_TAX_AMT_USD.add("-");									
						VAT_AMT_USD.add("-");
						SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						ADD_TAX_USD.add("-");
						ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						SERVICE_TAX_USD.add("-");
						SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' ";
				if(CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("T") || CONTRACT_TYPE.elementAt(i).toString().equalsIgnoreCase("C"))
				{
					queryString+=" AND MAPPING_ID='"+Account_Mapping_id.elementAt(i)+"'";
				}
			//	//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					XML_GEN_FLAG.add("N");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	
}

	public void get_Sales_dtlsNEW_OLD()
	{

	

		try
		{	
			//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
																	
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			//MD
			if(For1.equals("OWN") || For1.equalsIgnoreCase("0")){		
			
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add(cont_type);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
								
				String contract_no = "";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
					SEGMENT_NAME.add("Sales");
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
					SEGMENT_NAME.add("LOA");
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					SEGMENT_NAME.add("Regas");
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				//SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
			}
		/*JHP20130805	
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add("S");
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
			}
			
			*/
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
			////System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   OWN");
			}
			//MD
			////System.out.println("start_index_1 = "+start_index_1+",  And  end_index_1 = "+end_index_1);			
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			
			//MD
			if(For1.equals("REGAS") || For1.equalsIgnoreCase("0")){
				//System.out.println("REGAS");
			if(customer_cd!=null && !customer_cd.trim().equalsIgnoreCase("") && !customer_cd.trim().equalsIgnoreCase("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add("R");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
					/*if(foreign_exchg_rate>0)
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
					}
					else
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
						tmp_group_gross_usd_amt.add("0.00");
					}*/
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					SEGMENT_NAME.add("Regas");
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
				}
			
				start_index_2 = end_index_1+1;
				end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			
			}
			//MD
			////System.out.println("start_index_2 = "+start_index_2+",  And  end_index_2 = "+end_index_2);
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
				if(!TOTAL_QTY.elementAt(i).equals("") && TOTAL_QTY.elementAt(i)!=null && !TOTAL_QTY.elementAt(i).equals("0"))
				{
					AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+TOTAL_QTY.elementAt(i))));
				}
				else
				{
					AVG_PRICE_MMBTU.add("-");
				}
				if(!EXCHG_RATE.elementAt(i).equals("") && EXCHG_RATE.elementAt(i)!=null)
				{
					EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
					EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
			}
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"  " +
							"AND SN_REV_NO="+SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+FGSA_REV_NO.elementAt(i)+" " +
							"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
					//System.out.println("SN Master query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}				
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+temp_sn_no.elementAt(i)+" AND TENDER_NO="+temp_fgsa_no.elementAt(i)+"";
					//System.out.println("LOA Master query TCQ = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, RE_GAS_TARIF " +
					"FROM FMS7_RE_GAS_CARGO_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" " +
					"AND RE_GAS_NO="+temp_fgsa_no.elementAt(i)+" AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
					//System.out.println("Re-Gas Details query TCQ= "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_regas_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else
				{
					START_DT.add("");
					END_DT.add("");
					TCQ.add("-");
					TCQ_NUMERIC.add("0.00");
					RATE.add("");
					RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					CUM_SUPPLY.add(nf.format(supp_qty));
					if(!(""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("R"))
					{
						sum_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else
					{
						sum_regas_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					REM_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
					REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					CUM_SUPPLY.add("-");
					REM_SUPPLY.add("-");
					REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
					
			for(int k=0; k<HLPL_INV_SEQ_NO.size(); k++)
			{
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="";
												
				if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				TAX_CODE.clear();
				FACTOR.clear();						
				TAX_AMOUNT.clear();
				TAX_ON_TITLE.clear();
				int count = 0;				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{				
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);						
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
						//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}		 		
						queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
						//System.out.println("For Fetching DEPENDENT Tax Abbr = "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
							tax_title = "ON "+tax_abbr;
						}
						else
						{
							tax_title = "";
						}							
					}
					else
					{
						tax_amt = ""+0.00;
					}			
					TAX_CODE.add(tax_cd);
					FACTOR.add(tax_factor);						
					TAX_AMOUNT.add(tax_amt);
					TAX_ON_TITLE.add(tax_title);
					count++;
				}
				
				if(count==0)
				{
					TAX_CODE.add("0");
					FACTOR.add("0");						
					TAX_AMOUNT.add("-");
					TAX_ON_TITLE.add("");
				}
				
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				
				double tax_sum = 0;
				
				//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<TAX_CODE.size(); i++)
				{									
					if(TAX_CODE.elementAt(i).equals(cst_code))
					{											
						SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sales_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						VAT_AMT.add("-");
						VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
					}
					else if(TAX_CODE.elementAt(i).equals(vat_code))
					{
						SALES_TAX_AMT.add("-");
						SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						VAT_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
															
					if(TAX_CODE.elementAt(i).equals(addl_code))
					{							
						ADD_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_addl_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count3++;
					}
										
					if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count4++;
					}
										
					if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count5++;
					}
										
					if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count6++;
					}					
				}
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					TAX_AMT_INR.add(nf3.format(tax_sum));
					if(k<=end_index_1)
					{
						sales_total_tax_inr_total += tax_sum;
					}
					else if(k<=end_index_2)
					{
						regas_total_tax_inr_total += tax_sum;
					}
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_1)
						{
							sales_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_2)
						{
							regas_total_tax_usd_total += tax_sum;
						}
						
						TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					TAX_AMT_INR.add("-");
					TAX_AMT_USD.add("-");
				}
				
							
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
				//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_1)
				{
					sales_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_2)
				{
					regas_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					NET_AMT_USD.add(nf3.format(net_amt_usd));
					NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					NET_AMT_USD.add("-");
					NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				if(count2==0)
				{
					SALES_TAX_AMT.add("-");									
					VAT_AMT.add("-");
					SALES_TAX_AMT_USD.add("-");									
					VAT_AMT_USD.add("-");
					SALES_TAX_AMT_NUMERIC.add("0.00");									
					VAT_AMT_NUMERIC.add("0.00");
					SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				if(count3==0)
				{
					ADD_TAX.add("-");
					ADD_TAX_USD.add("-");
					ADD_TAX_NUMERIC.add("0.00");
					ADD_TAX_USD_NUMERIC.add("0.00");
					tmp_addl_tax.add("0");
				}
				if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							VAT_AMT_USD.add("-");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SALES_TAX_AMT_USD.add("-");
							VAT_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+tmp_addl_tax.elementAt(k))>0)
						{
							ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ADD_TAX_USD.add("-");
							ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+tmp_service_tax.elementAt(k))>0)
						{
							SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SERVICE_TAX_USD.add("-");
							SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						SALES_TAX_AMT_USD.add("-");									
						VAT_AMT_USD.add("-");
						SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						ADD_TAX_USD.add("-");
						ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						SERVICE_TAX_USD.add("-");
						SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"'";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					XML_GEN_FLAG.add("N");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	
}


	
	
	public void get_Sales_dtlsNEWOLD20120123()
	{

		try
		{	
			//mmm
			////System.out.println("Inside --> get_Sales_dtlsNEW() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
																	
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
			//MD
//JHP20120117	if(For1.equals("OWN") || For1.equals("0")){		
			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='S' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='S' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add("S");
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
								
				String contract_no = "";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
			}
			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				SUMMRY_CONT_TYP.add("S");
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
			}
			
			
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   OWN");
//			JHP20120117 }
			//MD
			////System.out.println("start_index_1 = "+start_index_1+",  And  end_index_1 = "+end_index_1);			
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			
			//MD
//			JHP20120117			if(For1.equals("REGAS") || For1.equals("0")){
				//System.out.println("REGAS");
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY TO_CHAR(INVOICE_DT,'Month'), FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='R' ORDER BY INVOICE_DT , FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					String cont_type = rset.getString(20)==null?"":rset.getString(20);
					SUMMRY_CONT_TYP.add("R");
					String contract_name = "";
					String sale_price = rset.getString(5)==null?"":rset.getString(5);
					HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
					PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
					PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
					if(!sale_price.equals("") && !sale_price.equals(" "))
					{
						SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
						SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
					}
					else
					{
						SALE_PRICE.add("-");
						SALE_PRICE_NUMERIC.add("0.0000");
					}
					DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					
					TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
					TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					
					EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
					
					GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
					GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
					
					GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
					GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
					regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
					
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}
					
					//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
					/*if(foreign_exchg_rate>0)
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
						regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
					}
					else
					{
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
						GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
						tmp_group_gross_usd_amt.add("0.00");
					}*/
					
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
					regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
					
					temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
					
					NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
					NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
					regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
					
					temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
					TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
					}
					SN_NO.add(contract_name);
					temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
					SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
					FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
					temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
					FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
					MONTH.add(rset.getString(19)==null?"":rset.getString(19));
					CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
					SEGMENT_NAME.add("Regas");
					SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
				}
			
				start_index_2 = end_index_1+1;
				end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			
//JHP20120117			}
			//MD
			////System.out.println("start_index_2 = "+start_index_2+",  And  end_index_2 = "+end_index_2);
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
				if(!TOTAL_QTY.elementAt(i).equals("") && TOTAL_QTY.elementAt(i)!=null && !TOTAL_QTY.elementAt(i).equals("0"))
				{
					AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+TOTAL_QTY.elementAt(i))));
				}
				else
				{
					AVG_PRICE_MMBTU.add("-");
				}
				if(!EXCHG_RATE.elementAt(i).equals("") && EXCHG_RATE.elementAt(i)!=null)
				{
					EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
					EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
			}
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"  " +
							"AND SN_REV_NO="+SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+FGSA_REV_NO.elementAt(i)+" " +
							"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
					////System.out.println("SN Master query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}				
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+temp_sn_no.elementAt(i)+" AND TENDER_NO="+temp_fgsa_no.elementAt(i)+"";
					//System.out.println("LOA Master query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, RE_GAS_TARIF " +
					"FROM FMS7_RE_GAS_CARGO_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" " +
					"AND RE_GAS_NO="+temp_fgsa_no.elementAt(i)+" AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
					//System.out.println("Re-Gas Details query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_regas_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else
				{
					START_DT.add("");
					END_DT.add("");
					TCQ.add("-");
					TCQ_NUMERIC.add("0.00");
					RATE.add("");
					RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					CUM_SUPPLY.add(nf.format(supp_qty));
					if(!(""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("R"))
					{
						sum_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else
					{
						sum_regas_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					REM_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
					REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					CUM_SUPPLY.add("-");
					REM_SUPPLY.add("-");
					REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
					
			for(int k=0; k<HLPL_INV_SEQ_NO.size(); k++)
			{
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="";
												
				if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				TAX_CODE.clear();
				FACTOR.clear();						
				TAX_AMOUNT.clear();
				TAX_ON_TITLE.clear();
				int count = 0;				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{				
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);						
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
						//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}		 		
						queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
						//System.out.println("For Fetching DEPENDENT Tax Abbr = "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
							tax_title = "ON "+tax_abbr;
						}
						else
						{
							tax_title = "";
						}							
					}
					else
					{
						tax_amt = ""+0.00;
					}			
					TAX_CODE.add(tax_cd);
					FACTOR.add(tax_factor);						
					TAX_AMOUNT.add(tax_amt);
					TAX_ON_TITLE.add(tax_title);
					count++;
				}
				
				if(count==0)
				{
					TAX_CODE.add("0");
					FACTOR.add("0");						
					TAX_AMOUNT.add("-");
					TAX_ON_TITLE.add("");
				}
				
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				
				double tax_sum = 0;
				
				//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<TAX_CODE.size(); i++)
				{									
					if(TAX_CODE.elementAt(i).equals(cst_code))
					{											
						SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sales_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						VAT_AMT.add("-");
						VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
					}
					else if(TAX_CODE.elementAt(i).equals(vat_code))
					{
						SALES_TAX_AMT.add("-");
						SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						VAT_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
															
					if(TAX_CODE.elementAt(i).equals(addl_code))
					{							
						ADD_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_addl_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count3++;
					}
										
					if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count4++;
					}
										
					if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count5++;
					}
										
					if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count6++;
					}					
				}
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					TAX_AMT_INR.add(nf3.format(tax_sum));
					if(k<=end_index_1)
					{
						sales_total_tax_inr_total += tax_sum;
					}
					else if(k<=end_index_2)
					{
						regas_total_tax_inr_total += tax_sum;
					}
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_1)
						{
							sales_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_2)
						{
							regas_total_tax_usd_total += tax_sum;
						}
						
						TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					TAX_AMT_INR.add("-");
					TAX_AMT_USD.add("-");
				}
				
							
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
				//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_1)
				{
					sales_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_2)
				{
					regas_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					NET_AMT_USD.add(nf3.format(net_amt_usd));
					NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					NET_AMT_USD.add("-");
					NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				if(count2==0)
				{
					SALES_TAX_AMT.add("-");									
					VAT_AMT.add("-");
					SALES_TAX_AMT_USD.add("-");									
					VAT_AMT_USD.add("-");
					SALES_TAX_AMT_NUMERIC.add("0.00");									
					VAT_AMT_NUMERIC.add("0.00");
					SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				if(count3==0)
				{
					ADD_TAX.add("-");
					ADD_TAX_USD.add("-");
					ADD_TAX_NUMERIC.add("0.00");
					ADD_TAX_USD_NUMERIC.add("0.00");
					tmp_addl_tax.add("0");
				}
				if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							VAT_AMT_USD.add("-");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SALES_TAX_AMT_USD.add("-");
							VAT_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+tmp_addl_tax.elementAt(k))>0)
						{
							ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ADD_TAX_USD.add("-");
							ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+tmp_service_tax.elementAt(k))>0)
						{
							SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SERVICE_TAX_USD.add("-");
							SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						SALES_TAX_AMT_USD.add("-");									
						VAT_AMT_USD.add("-");
						SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						ADD_TAX_USD.add("-");
						ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						SERVICE_TAX_USD.add("-");
						SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"'";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					XML_GEN_FLAG.add("N");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_detailsNEW() --> "+e.getMessage());
			e.printStackTrace();
		}
	
	}
	//TEST MD20111226
	//New Sales Register Details Done By Samik Shah 0n 22nd October, 2010 ...	
	//Sales Register Details Again Modified By Samik Shah 0n 26th October, 2010 ...
	//Sales Register Details Again Modified By Samik Shah 0n 2nd August, 2011 ...
	//Sales Register Details Again Modified By Samik Shah 0n 10th August, 2011 ...
	//Sales Register Details Again Modified By Samik Shah 0n 22nd August, 2011 ...
	public void get_Sales_dtls()
	{
		try
		{	
			////System.out.println("Inside --> get_Sales_dtls() Method !!!"); 			
			String vat_code = "0";
			String cst_code = "0";
			String addl_code = "0";
			String st_code = "0";
			String ecs_code = "0";
			String hecs_code = "0";
			Vector tmp_group_gross_usd_amt = new Vector();
			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				vat_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				cst_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				addl_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				st_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				ecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}			
			queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				hecs_code = rset.getString(1)==null?"0":rset.getString(1);
			}
																	
			//////System.out.println("From month "+month+" To month= "+to_month);
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			//////System.out.println("From date "+from_dt+" To Date= "+to_dt);
			queryString = "Select To_char(to_date('"+from_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("From Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			queryString = "Select To_char(to_date('"+to_dt+"','dd/mm/yyyy'),'Month') from dual";
			////System.out.println("To The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_mon = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			double tot_tcq=0.0;
			String total_tcq="";
			Vector temp_gross_amt = new Vector();
			Vector temp_net_amt = new Vector();
			Vector temp_fgsa_no = new Vector();
			Vector temp_sn_no = new Vector();
						
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='S' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
				  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='S' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
			
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				
				String tmp_cust_cd = rset.getString(13)==null?"0":rset.getString(13);
				String tmp_fgsa_no = rset.getString(17)==null?"0":rset.getString(17);
				String tmp_sn_no = rset.getString(15)==null?"0":rset.getString(15);
								
				String contract_no = "";
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
							   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						contract_no = rset2.getString(1);
						if(contract_no.trim().equals(""))
						{
							contract_no = tmp_sn_no;
						}
					}
					else
					{
						contract_no = tmp_sn_no;
					}
				}
				
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+contract_no;
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+contract_no;
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));				
			}
			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='L' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='L' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				sales_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				sales_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				sales_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				sales_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				sales_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				sales_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				sales_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Sales");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
			}
			
			
			start_index_1 = 0;
			end_index_1 = HLPL_INV_SEQ_NO.size()-1;
			
			////System.out.println("start_index_1 = "+start_index_1+",  And  end_index_1 = "+end_index_1);			
			
			if(customer_cd!=null && !customer_cd.trim().equals("") && !customer_cd.trim().equals("0"))
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
				  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CUSTOMER_CD="+customer_cd+" AND CONTRACT_TYPE='R' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			else
			{
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
				  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG," +
				  "EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
				  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND CONTRACT_TYPE='R' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
			}
			////System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String cont_type = rset.getString(20)==null?"":rset.getString(20);
				String contract_name = "";
				String sale_price = rset.getString(5)==null?"":rset.getString(5);
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				if(!sale_price.equals("") && !sale_price.equals(" "))
				{
					SALE_PRICE.add(nf2.format(Double.parseDouble(sale_price)));
					SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(sale_price)));
				}
				else
				{
					SALE_PRICE.add("-");
					SALE_PRICE_NUMERIC.add("0.0000");
				}
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				
				TOTAL_QTY.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7))));
				TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
				regas_qty_total += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
				
				EXCHG_RATE.add(rset.getString(8)==null?"":rset.getString(8));
				
				GROSS_AMT_USD.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
				GROSS_AMT_USD_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
				regas_qty_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				regas_gross_amt_usd_total += Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9));
				
				GROSS_AMT_INR.add(rset.getString(10)==null?"":nf3.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_2.add(rset.getString(10)==null?"":nf.format(Double.parseDouble(rset.getString(10))));
				GROSS_AMT_INR_NUMERIC.add(rset.getString(10)==null?"0.00":nf.format(Double.parseDouble(rset.getString(10))));
				regas_qty_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				regas_gross_amt_inr_total += Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10));
				
				double foreign_exchg_rate = 0;
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				//Following Section of coding has been commented by Samik Shah on 2nd August, 2011 ...
				/*if(foreign_exchg_rate>0)
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate));
					regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(10)==null?"0":rset.getString(10))/foreign_exchg_rate);
				}
				else
				{
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("-");
					GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("-");
					tmp_group_gross_usd_amt.add("0.00");
				}*/
				
				//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add(nf3.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0.00":rset.getString(9))));
				tmp_group_gross_usd_amt.add(nf.format(Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9))));
				regas_group_foreign_gross_amt_usd_total += (Double.parseDouble(rset.getString(9)==null?"0":rset.getString(9)));
				
				temp_gross_amt.add(rset.getString(10)==null?"":rset.getString(10));
				
				NET_AMT_INR.add(rset.getString(11)==null?"":nf3.format(Double.parseDouble(rset.getString(11))));
				NET_AMT_INR_NUMERIC.add(rset.getString(11)==null?"0.00":nf.format(Double.parseDouble(rset.getString(11))));
				regas_net_amt_inr_total += Double.parseDouble(rset.getString(11)==null?"0":rset.getString(11));
				
				temp_net_amt.add(rset.getString(11)==null?"":rset.getString(11));
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
				if(cont_type.equalsIgnoreCase("S"))
				{
					contract_name = "SN-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("L"))
				{
					contract_name = "LOA-"+(rset.getString(15)==null?"":rset.getString(15));
				}
				else if(cont_type.equalsIgnoreCase("R"))
				{
					contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
				}
				SN_NO.add(contract_name);
				temp_sn_no.add(rset.getString(15)==null?"":rset.getString(15));
				SN_REV_NO.add(rset.getString(16)==null?"":rset.getString(16));
				FGSA_NO.add(rset.getString(17)==null?"":rset.getString(17));
				temp_fgsa_no.add(rset.getString(17)==null?"":rset.getString(17));
				FGSA_REV_NO.add(rset.getString(18)==null?"-":rset.getString(18));
				MONTH.add(rset.getString(19)==null?"":rset.getString(19));
				CONTRACT_TYPE.add(rset.getString(20)==null?"":rset.getString(20));
				SEGMENT_NAME.add("Regas");
				SUN_APPROVAL.add(rset.getString(29)==null?"":rset.getString(29));
			}
			
			start_index_2 = end_index_1+1;
			end_index_2 = HLPL_INV_SEQ_NO.size()-1;
			
			////System.out.println("start_index_2 = "+start_index_2+",  And  end_index_2 = "+end_index_2);
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
				if(!TOTAL_QTY.elementAt(i).equals("") && TOTAL_QTY.elementAt(i)!=null && !TOTAL_QTY.elementAt(i).equals("0"))
				{
					AVG_PRICE_MMBTU.add(nf.format(Double.parseDouble(""+temp_net_amt.elementAt(i))/ Double.parseDouble(""+TOTAL_QTY.elementAt(i))));
				}
				else
				{
					AVG_PRICE_MMBTU.add("-");
				}
				if(!EXCHG_RATE.elementAt(i).equals("") && EXCHG_RATE.elementAt(i)!=null)
				{
					EXCHG_RATE_VALUE.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
					EXCHG_RATE_VALUE_NUMERIC.add(nf2.format(Double.parseDouble(""+EXCHG_RATE.elementAt(i))));
				}
				else
				{
					EXCHG_RATE_VALUE.add("-");
					EXCHG_RATE_VALUE_NUMERIC.add("0.0000");
				}
			}
			double sum_tcq = 0;
			double sum_regas_tcq = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("S"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ , RATE FROM FMS7_SN_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"  " +
							"AND SN_REV_NO="+SN_REV_NO.elementAt(i)+" AND SN_NO="+temp_sn_no.elementAt(i)+" AND FGSA_REV_NO="+FGSA_REV_NO.elementAt(i)+" " +
							"AND FGSA_NO="+temp_fgsa_no.elementAt(i)+"";
					////System.out.println("SN Master query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}				
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("L"))
				{
					queryString = "SELECT TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), TCQ, RATE " +
					"FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND LOA_REV_NO="+SN_REV_NO.elementAt(i)+" " +
					"AND LOA_NO="+temp_sn_no.elementAt(i)+" AND TENDER_NO="+temp_fgsa_no.elementAt(i)+"";
					//System.out.println("LOA Master query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}		
				}
				else if(((""+CONTRACT_TYPE.elementAt(i)).trim()).equalsIgnoreCase("R"))
				{
					queryString = "SELECT TO_CHAR(CONTRACT_START_DT,'DD/MM/YYYY'), TO_CHAR(CONTRACT_END_DT,'DD/MM/YYYY'), QTY_TO_BE_SUPPLY, RE_GAS_TARIF " +
					"FROM FMS7_RE_GAS_CARGO_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" " +
					"AND RE_GAS_NO="+temp_fgsa_no.elementAt(i)+" AND CARGO_SEQ_NO="+temp_sn_no.elementAt(i)+"";
					//System.out.println("Re-Gas Details query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						START_DT.add(rset.getString(1)==null?"":rset.getString(1));
						END_DT.add(rset.getString(2)==null?"":rset.getString(2));
						sum_regas_tcq += Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3));
						TCQ.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						TCQ_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(3)==null?"0.00":rset.getString(3))));
						RATE.add(rset.getString(4)==null?"0":rset.getString(4));
						RATE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(4)==null?"0.0000":rset.getString(4))));
					}
					else
					{
						START_DT.add("");
						END_DT.add("");
						TCQ.add("0.00");
						TCQ_NUMERIC.add("0.00");
						RATE.add("");
						RATE_NUMERIC.add("0.0000");
					}
				}
				else
				{
					START_DT.add("");
					END_DT.add("");
					TCQ.add("-");
					TCQ_NUMERIC.add("0.00");
					RATE.add("");
					RATE_NUMERIC.add("0.0000");
				} 
			}
			
			Final_sum_tcq = nf.format(sum_tcq);
			Final_sum_regas_tcq = nf.format(sum_regas_tcq);
			
			double sum_rem_supply = 0;
			double sum_regas_rem_supply = 0;
			for(int i=0; i<SN_NO.size(); i++)
			{
				double supp_qty = 0;
				
				queryString = "SELECT NVL(SUM(QTY_MMBTU),'0') " +
							  "FROM FMS7_DAILY_ALLOCATION_DTL WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+" AND " +
							  "FGSA_NO="+temp_fgsa_no.elementAt(i)+" AND " +
							  "SN_NO="+temp_sn_no.elementAt(i)+" AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"' AND " +
							  "GAS_DT<=TO_DATE('"+PERIOD_END_DT.elementAt(i)+"','DD/MM/YYYY')";
				//System.out.println("ALLOCATION Details query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					supp_qty = Double.parseDouble(rset.getString(1));
					CUM_SUPPLY.add(nf.format(supp_qty));
					if(!(""+CONTRACT_TYPE.elementAt(i)).trim().equalsIgnoreCase("R"))
					{
						sum_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					else
					{
						sum_regas_rem_supply += Double.parseDouble(""+TCQ.elementAt(i))- supp_qty;
					}
					REM_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
					REM_SUPPLY_NUMERIC.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- supp_qty));
				}
				else
				{
					CUM_SUPPLY.add("-");
					REM_SUPPLY.add("-");
					REM_SUPPLY_NUMERIC.add("0.00");
				}				
			}
			Sum_rem_supply = nf.format(sum_rem_supply);
			Sum_regas_rem_supply = nf.format(sum_regas_rem_supply);
			
			//For Transporter Charges 
			/*for(int i=0;i<TRANSPORTER_CD.size();i++)
			{
				queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
				//System.out.println("PLANT_NAME Query = "+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
					transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
				}
				TOT_SALE_VAL.add(nf.format(Double.parseDouble(""+GROSS_AMT_INR.elementAt(i))- Double.parseDouble(""+TRANS_CHARGES.elementAt(i))));
			}*/	
			
			
			//==========Following Code for Tax based on VAT/CST 
			String hlpl_inv_no_disp="";
			Vector tmp_vat = new Vector();
			Vector tmp_sales_tax = new Vector();
			Vector tmp_addl_tax = new Vector();
			Vector tmp_service_tax = new Vector();
			Vector tmp_edu_tax = new Vector();
			Vector tmp_high_edu_tax = new Vector();
					
			for(int k=0; k<HLPL_INV_SEQ_NO.size(); k++)
			{
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="";
												
				if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<10)
				{
					hlpl_inv_no_disp="000"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<100) 
				{
					hlpl_inv_no_disp="00"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else if(Integer.parseInt(""+HLPL_INV_SEQ_NO.elementAt(k))<1000) 
				{
					hlpl_inv_no_disp="0"+HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				else
				{
					hlpl_inv_no_disp=HLPL_INV_SEQ_NO.elementAt(k)+"/"+FINANCIAL_YEAR.elementAt(k);
				}
				HLPL_INV_SEQ.add(hlpl_inv_no_disp);
				////System.out.println("1. hlpl_inv_seq_no = "+HLPL_INV_SEQ+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				TAX_CODE.clear();
				FACTOR.clear();						
				TAX_AMOUNT.clear();
				TAX_ON_TITLE.clear();
				int count = 0;				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT					
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
				   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
				   			  "B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
				//System.out.println("Finding Out Correct Tax Structure Details  = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{				
					String tax_cd     = rset.getString(1);
					String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));						
					String tax_title  = "";
					double gross_amt = Double.parseDouble(""+temp_gross_amt.elementAt(k));
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt   = nf.format((gross_amt*Double.parseDouble(rset.getString(2)))/100);						
						tax_title = "ON INVOICE AMOUNT";
					}
					else if(rset.getString(3).equals("2"))
					{
					    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+TAX_STRUCT_CD.elementAt(k)+" AND " +
										"B.app_date<=TO_DATE('"+PERIOD_END_DT.elementAt(k)+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
						//System.out.println("Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							if(rset1.getString(3).equals("1"))
							{
								tax_amt = nf.format((gross_amt*Double.parseDouble(rset1.getString(2)))/100);
							}			
							tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);								
						}
						else
						{
							tax_amt = ""+0.00;								
						}		 		
						queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
						//System.out.println("For Fetching DEPENDENT Tax Abbr = "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
							tax_title = "ON "+tax_abbr;
						}
						else
						{
							tax_title = "";
						}							
					}
					else
					{
						tax_amt = ""+0.00;
					}			
					TAX_CODE.add(tax_cd);
					FACTOR.add(tax_factor);						
					TAX_AMOUNT.add(tax_amt);
					TAX_ON_TITLE.add(tax_title);
					count++;
				}
				
				if(count==0)
				{
					TAX_CODE.add("0");
					FACTOR.add("0");						
					TAX_AMOUNT.add("-");
					TAX_ON_TITLE.add("");
				}
				
				int count2 = 0;
				int count3 = 0;
				int count4 = 0;
				int count5 = 0;
				int count6 = 0;
				
				double tax_sum = 0;
				
				//System.out.println("TAX_CODE --> "+TAX_CODE+"FACTOR -->"+FACTOR+"TAX_AMOUNT --> "+TAX_AMOUNT+"TAX_ON_TITLE --> "+TAX_ON_TITLE);
				for(int i=0; i<TAX_CODE.size(); i++)
				{									
					if(TAX_CODE.elementAt(i).equals(cst_code))
					{											
						SALES_TAX_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SALES_TAX_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_sales_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_sales_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						VAT_AMT.add("-");
						VAT_AMT_NUMERIC.add("0.00");
						tmp_vat.add("0");
						count2++;
					}
					else if(TAX_CODE.elementAt(i).equals(vat_code))
					{
						SALES_TAX_AMT.add("-");
						SALES_TAX_AMT_NUMERIC.add("0.00");
						tmp_sales_tax.add("0");
						VAT_AMT.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						VAT_AMT_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_vat_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_vat.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count2++;
					}
															
					if(TAX_CODE.elementAt(i).equals(addl_code))
					{							
						ADD_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						ADD_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_addl_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_addl_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count3++;
					}
										
					if(TAX_CODE.elementAt(i).equals(st_code))
					{							
						SERVICE_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						SERVICE_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_service_tax_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_service_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count4++;
					}
										
					if(TAX_CODE.elementAt(i).equals(ecs_code))
					{							
						EDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						EDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count5++;
					}
										
					if(TAX_CODE.elementAt(i).equals(hecs_code))
					{							
						HEDU_CESS_TAX.add(nf3.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						HEDU_CESS_TAX_NUMERIC.add(nf.format(Double.parseDouble(""+TAX_AMOUNT.elementAt(i))));
						if(k<=end_index_1)
						{
							sales_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						else if(k<=end_index_2)
						{
							regas_high_edu_cess_inr_total += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						tmp_high_edu_tax.add(""+TAX_AMOUNT.elementAt(i));
						if(!(""+TAX_AMOUNT.elementAt(i)).equals("") && !(""+TAX_AMOUNT.elementAt(i)).equals(" ") && !(""+TAX_AMOUNT.elementAt(i)).equals("-"))
						{
							tax_sum += Double.parseDouble(""+TAX_AMOUNT.elementAt(i));
						}
						count6++;
					}					
				}
				
				double foreign_exchg_rate = 0;
				if(tax_sum>0)
				{
					TAX_AMT_INR.add(nf3.format(tax_sum));
					if(k<=end_index_1)
					{
						sales_total_tax_inr_total += tax_sum;
					}
					else if(k<=end_index_2)
					{
						regas_total_tax_inr_total += tax_sum;
					}
					
					String exchg_rate_cd="5";
					String exchg_rate="";
					queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
					//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
					rset=stmt.executeQuery(queryString);
					if(rset.next())
					{
						exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
						foreign_exchg_rate=Double.parseDouble(exchg_rate);
					}											
					if(foreign_exchg_rate>0)
					{
						tax_sum = tax_sum/foreign_exchg_rate;
						if(k<=end_index_1)
						{
							sales_total_tax_usd_total += tax_sum;
						}
						else if(k<=end_index_2)
						{
							regas_total_tax_usd_total += tax_sum;
						}
						
						TAX_AMT_USD.add(nf3.format(tax_sum));						
					}
					else
					{
						tax_sum = 0;
						TAX_AMT_USD.add("-");
					}					
				}
				else
				{
					TAX_AMT_INR.add("-");
					TAX_AMT_USD.add("-");
				}
				
							
				String exchg_rate_cd="5";
				String exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				/*if(foreign_exchg_rate>0)
				{
					net_amt_usd = Double.parseDouble(""+temp_net_amt.elementAt(k))/foreign_exchg_rate;
				}*/
				
				double net_amt_usd = tax_sum + Double.parseDouble(""+tmp_group_gross_usd_amt.elementAt(k));
				
				//System.out.println("tax_sum["+(k+1)+"] = "+tax_sum+",  tmp_group_gross_usd_amt["+(k+1)+"] = "+tmp_group_gross_usd_amt.elementAt(k));
				
				if(k<=end_index_1)
				{
					sales_net_amt_usd_total += net_amt_usd;
				}
				else if(k<=end_index_2)
				{
					regas_net_amt_usd_total += net_amt_usd;
				}
				
				if(net_amt_usd>0)
				{
					NET_AMT_USD.add(nf3.format(net_amt_usd));
					NET_AMT_USD_NUMERIC.add(nf.format(net_amt_usd));
				}
				else
				{
					NET_AMT_USD.add("-");
					NET_AMT_USD_NUMERIC.add("0.00");
				}
				
				if(count2==0)
				{
					SALES_TAX_AMT.add("-");									
					VAT_AMT.add("-");
					SALES_TAX_AMT_USD.add("-");									
					VAT_AMT_USD.add("-");
					SALES_TAX_AMT_NUMERIC.add("0.00");									
					VAT_AMT_NUMERIC.add("0.00");
					SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
					VAT_AMT_USD_NUMERIC.add("0.00");
					tmp_sales_tax.add("0");
					tmp_vat.add("0");
				}
				if(count3==0)
				{
					ADD_TAX.add("-");
					ADD_TAX_USD.add("-");
					ADD_TAX_NUMERIC.add("0.00");
					ADD_TAX_USD_NUMERIC.add("0.00");
					tmp_addl_tax.add("0");
				}
				if(count4==0)
				{
					SERVICE_TAX.add("-");
					SERVICE_TAX_USD.add("-");
					SERVICE_TAX_NUMERIC.add("0.00");
					SERVICE_TAX_USD_NUMERIC.add("0.00");
					tmp_service_tax.add("0");
				}
				if(count5==0)
				{
					EDU_CESS_TAX.add("-");
					EDU_CESS_TAX_USD.add("-");
					EDU_CESS_TAX_NUMERIC.add("0.00");
					EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_edu_tax.add("0");
				}
				if(count6==0)
				{
					HEDU_CESS_TAX.add("-");
					HEDU_CESS_TAX_USD.add("-");
					HEDU_CESS_TAX_NUMERIC.add("0.00");
					HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					tmp_high_edu_tax.add("0");
				}
				
				exchg_rate_cd="5";
				exchg_rate="";
				queryString = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE EXCHG_RATE_CD='"+exchg_rate_cd+"' AND EFF_DT=TO_DATE('"+INVOICE_DT.elementAt(k)+"','DD/MM/YYYY')";
				//System.out.println("Finding Out EXCHG_RATE =========== "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					exchg_rate=rset.getString(1)==null?"0":rset.getString(1);
					foreign_exchg_rate=Double.parseDouble(exchg_rate);
				}
				
				if(foreign_exchg_rate>0)
				{
					GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
					if(count2>0)
					{
						if(Double.parseDouble(""+tmp_sales_tax.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							SALES_TAX_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_sales_tax_usd_total += (Double.parseDouble(""+tmp_sales_tax.elementAt(k))/foreign_exchg_rate);
							}
							VAT_AMT_USD.add("-");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
						else if(Double.parseDouble(""+tmp_vat.elementAt(k))>0)
						{
							SALES_TAX_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD.add(nf3.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							VAT_AMT_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_vat_usd_total += (Double.parseDouble(""+tmp_vat.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SALES_TAX_AMT_USD.add("-");
							VAT_AMT_USD.add("-");
							SALES_TAX_AMT_USD_NUMERIC.add("0.00");
							VAT_AMT_USD_NUMERIC.add("0.00");
						}
					}
					if(count3>0)
					{
						if(Double.parseDouble(""+tmp_addl_tax.elementAt(k))>0)
						{
							ADD_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							ADD_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_addl_tax_usd_total += (Double.parseDouble(""+tmp_addl_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							ADD_TAX_USD.add("-");
							ADD_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count4>0)
					{
						if(Double.parseDouble(""+tmp_service_tax.elementAt(k))>0)
						{
							SERVICE_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							SERVICE_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_service_tax_usd_total += (Double.parseDouble(""+tmp_service_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							SERVICE_TAX_USD.add("-");
							SERVICE_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count5>0)
					{
						if(Double.parseDouble(""+tmp_edu_tax.elementAt(k))>0)
						{
							EDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							EDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_edu_cess_usd_total += (Double.parseDouble(""+tmp_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							EDU_CESS_TAX_USD.add("-");
							EDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
					if(count6>0)
					{
						if(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))>0)
						{
							HEDU_CESS_TAX_USD.add(nf3.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							HEDU_CESS_TAX_USD_NUMERIC.add(nf.format(Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate));
							if(k<=end_index_1)
							{
								sales_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
							else if(k<=end_index_2)
							{
								regas_high_edu_cess_usd_total += (Double.parseDouble(""+tmp_high_edu_tax.elementAt(k))/foreign_exchg_rate);
							}
						}
						else
						{
							HEDU_CESS_TAX_USD.add("-");
							HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
						}
					}
				}
				else
				{
					GROUP_FOREIGN_EXCHG_RATE.add("-");
					if(count2>0)
					{
						SALES_TAX_AMT_USD.add("-");									
						VAT_AMT_USD.add("-");
						SALES_TAX_AMT_USD_NUMERIC.add("0.00");									
						VAT_AMT_USD_NUMERIC.add("0.00");
					}
					if(count3>0)
					{
						ADD_TAX_USD.add("-");
						ADD_TAX_USD_NUMERIC.add("0.00");
					}
					if(count4>0)
					{
						SERVICE_TAX_USD.add("-");
						SERVICE_TAX_USD_NUMERIC.add("0.00");
					}
					if(count5>0)
					{
						EDU_CESS_TAX_USD.add("-");
						EDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
					if(count6>0)
					{
						HEDU_CESS_TAX_USD.add("-");
						HEDU_CESS_TAX_USD_NUMERIC.add("0.00");
					}
				}								
				////System.out.println("TAX_NAME --> "+TAX_NAME+"SALES_TAX_AMT -->"+SALES_TAX_AMT+"VAT_AMT --> "+VAT_AMT+"ADD_TAX --> "+ADD_TAX);
			}
			
			for(int i=0;i<HLPL_INV_SEQ.size();i++)
			{
				queryString = "SELECT XML_GEN_FLAG FROM FMS7_ACCOUNT_APPROVED_DTL " +
				  "WHERE INV_CARGO_NO='"+HLPL_INV_SEQ.elementAt(i)+"' AND JOURNAL_TYPE='FMSSL' " +
				  "AND CONTRACT_TYPE='"+CONTRACT_TYPE.elementAt(i)+"'";
				//System.out.println("Confirmed FMS7_PROV_SELLER_PAY Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					XML_GEN_FLAG.add(rset.getString(1)==null?"N":rset.getString(1));
				}
				else
				{
					XML_GEN_FLAG.add("N");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
		
	public void fetch_Seller_details()
	{
		String hlpl_inv_no_disp="";
		try
		{		
			//System.out.println("Inside fetch_Seller_details() "); 
			if(hlpl_inv_seq_no!=null && !hlpl_inv_seq_no.equals("") && !hlpl_inv_seq_no.equals(" ") && !financial_year.equals("") && !financial_year.equals(" ") && financial_year!=null && !customer_cd.equals("") && !customer_cd.equals(" ") && customer_cd!=null)
			{
				//Following Code for fetching data from INVOICE MASTER===========================================================================
				String tax_amt="";
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
							  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
							  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
							  "TAX_STRUCT_CD,CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
							  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CONTRACT_TYPE,CUST_INV_SEQ_NO,SN_NO,SN_REV_NO,FGSA_NO,"+
							  "FGSA_REV_NO FROM FMS7_INVOICE_MST WHERE FINANCIAL_YEAR='"+financial_year+"' "+
							  "AND CUSTOMER_CD="+customer_cd+" AND HLPL_INV_SEQ_NO="+hlpl_inv_seq_no+" ";
				//System.out.println("Sales Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{										
					gross_amt_inr    		=rset.getString(10)==null?"":rset.getString(10);
					tax_str_cd	    		=rset.getString(14)==null?"":rset.getString(14);
					contact_person_cd  		=rset.getString(15)==null?"":rset.getString(15);
					tax_amt_inr	    		=rset.getString(16)==null?"":rset.getString(16);
					tax_flag    			=rset.getString(17)==null?"":rset.getString(17);
					exchg_rate_cd	    	=rset.getString(18)==null?"":rset.getString(18);
					exchg_rate_dt    		=rset.getString(19)==null?"":rset.getString(19);
					exchg_rate_type	    	=rset.getString(20)==null?"":rset.getString(20);
					plant_seq_no    		=rset.getString(21)==null?"":rset.getString(21);
					contract_type   		=rset.getString(22)==null?"":rset.getString(22);
					cust_inv_seq_no    		=rset.getString(23)==null?"":rset.getString(23);
					sn_no    	    		=rset.getString(24)==null?"":rset.getString(24);
					sn_rev_no       		=rset.getString(25)==null?"":rset.getString(25);
					fgsa_no	        		=rset.getString(26)==null?"":rset.getString(26);
					fgsa_rev_no     		=rset.getString(27)==null?"":rset.getString(27);					
				}		
								
				if(Integer.parseInt(hlpl_inv_seq_no)<10)
				{
					hlpl_inv_no_disp="000"+hlpl_inv_seq_no+"/"+financial_year;
				}
				else if(Integer.parseInt(hlpl_inv_seq_no)<100) 
				{
					hlpl_inv_no_disp="00"+hlpl_inv_seq_no+"/"+financial_year;
				}
				else if(Integer.parseInt(hlpl_inv_seq_no)<1000) 
				{
					hlpl_inv_no_disp="0"+hlpl_inv_seq_no+"/"+financial_year;
				}
				else
				{
					hlpl_inv_no_disp=hlpl_inv_seq_no+"/"+financial_year;
				}
				hlpl_inv_seq_no=hlpl_inv_no_disp;
				////System.out.println("hlpl_inv_seq_no = "+hlpl_inv_seq_no+"hlpl_inv_no_disp = "+hlpl_inv_no_disp);
				
				queryString1="SELECT DISTINCT(TRANSPORTER_CD) FROM FMS7_SN_TRANSPORTER_MST WHERE " +
							 "SN_NO="+sn_no+" AND SN_REV_NO="+sn_rev_no+" AND FGSA_NO="+fgsa_no+" AND " +
							 "FGSA_REV_NO="+fgsa_rev_no+" AND CUSTOMER_CD="+customer_cd+"";
				{
					//System.out.println("TRANSPORTER_CD Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						TRANSPORTER_CD.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
				}
				
				for(int i=0;i<TRANSPORTER_CD.size();i++)
				{
					queryString1="SELECT TRANSPORTER_NAME,TRANSPORTER_ABBR FROM FMS7_TRANSPORTER_MST WHERE TRANSPORTER_CD="+TRANSPORTER_CD.elementAt(i)+" ";
					//System.out.println("PLANT_NAME Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						transporter_name += rset1.getString(1)==null?"":rset1.getString(1)+", ";
						transporter_abbr += rset1.getString(2)==null?"":rset1.getString(2)+", ";
					}
				}				
				
				queryString="SELECT PLANT_NAME,PLANT_TYPE FROM FMS7_CUSTOMER_PLANT_DTL WHERE " +
							 "CUSTOMER_CD="+customer_cd+" AND SEQ_NO="+plant_seq_no+"";
				//System.out.println("PLANT_NAME Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					plant_name = rset.getString(1)==null?"":rset.getString(1);
				}
								
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT	
				if(!tax_str_cd.equals("") && tax_str_cd!=null && !tax_str_cd.equals(" "))
				{
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
					   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
					   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
					   			  "B.app_date<=TO_DATE('"+period_start_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					//System.out.println("Provisional Custom Duty For Finding Out Correct Tax Structure Details  = "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{				
						String tax_cd     = rset.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));
						String tax_title  = "";								
						if(rset.getString(3).equals("1"))
						{
							tax_amt   = nf.format((Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset.getString(2)))/100);
							tax_title = "ON INVOICE AMOUNT";
						}
						else if(rset.getString(3).equals("2"))
						{
						    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
											"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
											"B.app_date<=TO_DATE('"+period_start_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
							//System.out.println("Provisional Custom Duty For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								if(rset1.getString(3).equals("1"))
								{
									tax_amt = nf.format((Double.parseDouble(gross_amt_inr)*Double.parseDouble(rset1.getString(2)))/100);
								}			
								tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);
							}
							else
							{
								tax_amt = ""+0.00;
							}		 		
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
							//System.out.println("Provisional Custom Duty For Fetching DEPENDENT Tax Abbr = "+queryString2);
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
								tax_title 	    = "ON "+tax_abbr;
							}
							else
							{
								tax_title = "";
							}							
						}
						else
						{
							tax_amt = ""+0.00;
						}			
						TAX_CODE.add(tax_cd);
						FACTOR.add(tax_factor);
						TAX_AMOUNT.add(tax_amt);
						TAX_ON_TITLE.add(tax_title);					
					}
					for(int i=0; i<TAX_CODE.size(); i++)
					{
						queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE tax_code="+TAX_CODE.elementAt(i)+"";
						//System.out.println("Query For Fetching Tax Name = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
							TAX_NAME.add(tax_nm);
						}
						else
						{
							TAX_NAME.add("");
						}							
						if(TAX_CODE.elementAt(i).equals("105"))
						{
							sales_tax_amt=(String)TAX_AMOUNT.elementAt(i);
							vat_amt="";							
						}
						else if(TAX_CODE.elementAt(i).equals("101"))
						{
							vat_amt=(String)TAX_AMOUNT.elementAt(i);
							sales_tax_amt="";
						}
						if(TAX_CODE.elementAt(i).equals("112"))
						{
							add_tax=(String)TAX_AMOUNT.elementAt(i);
						}
					}
					//	//System.out.println("TAX_CODE = "+TAX_CODE+"FACTOR = "+FACTOR+"TAX_AMOUNT = "+TAX_AMOUNT+"TAX_ON_TITLE ="+TAX_ON_TITLE+"TAX_NAME="+TAX_NAME);
				}						
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> fetch_Seller_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	
	public void get_Sales_details()
	{
		try
		{		
			//System.out.println("Inside get_Sales_details() "); 			
				
			////System.out.println("financial_year = "+financial_year);				
			queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT," +
						  "EXCHG_RATE_TYPE,PLANT_SEQ_NO,CONTRACT_TYPE,CUST_INV_SEQ_NO FROM FMS7_INVOICE_MST WHERE " +
						  "FINANCIAL_YEAR='"+financial_year+"' AND CUSTOMER_CD = "+customer_cd+" ";			
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				HLPL_INV_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_DT.add(rset.getString(2)==null?"":rset.getString(2));
				PERIOD_START_DT.add(rset.getString(3)==null?"":rset.getString(3));						
				PERIOD_END_DT.add(rset.getString(4)==null?"":rset.getString(4));
				SALE_PRICE.add(rset.getString(5)==null?"":rset.getString(5));
				DUE_DT.add(rset.getString(6)==null?"":rset.getString(6));	
				TOTAL_QTY.add(rset.getString(7)==null?"":rset.getString(7));
				EXCHG_RATE_VALUE.add(rset.getString(8)==null?"":rset.getString(8));
				GROSS_AMT_USD.add(rset.getString(9)==null?"":rset.getString(9));	
				GROSS_AMT_INR.add(rset.getString(10)==null?"":rset.getString(10));
				NET_AMT_INR.add(rset.getString(11)==null?"":rset.getString(11));	
				FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
				CUSTOMER_CD.add(rset.getString(13)==null?"":rset.getString(13));
				TAX_STRUCT_CD.add(rset.getString(14)==null?"":rset.getString(14));
			}			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE FLAG='T' AND CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				//System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Sales_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void get_Bank_Remmitance_Details()
	{
		try
		{		
			//System.out.println("Inside get_Bank_details() and trader_cd = "+trader_cd); 																
			String from_dt =""; 
			String to_dt = "";			
			
			if(!month.equals("00")&& !month.equals("") && !month.equals(" ") && month!=null)
			{
				from_dt = "01/"+month+"/"+year;
				queryString = "Select To_char(Last_Day(to_date('"+month+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
				//System.out.println("Last Date Of The Selected Month = "+queryString);
				rset = stmt.executeQuery(queryString);			
				if(rset.next())
				{
					to_dt = rset.getString(1)==null?"0":rset.getString(1);
				}
				
				if(activity.equalsIgnoreCase("insert"))
				{
					queryString = "SELECT A.BANK_CD, A.CREDIT_RATING, A.BANK_CONTR_NO, A.HEDGE_VALUE, " +
								  "TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), TO_CHAR(A.HEDGE_VAL_DT,'DD/MM/YYYY'), " +
								  "A.HEDGE_TOTAL, A.HEDGE_SEQ_NO, A.FIN_YEAR, A.HEDGE_ROLLOVER_NO " +
								  "FROM FMS7_HEDGE_MST A WHERE A.HEDGE_SEQ_NO NOT IN (SELECT C.HEDGE_SEQ_NO " +
								  "FROM FMS7_BANK_REMITTANCE_DTL C) AND A.HEDGE_ROLLOVER_NO=(SELECT " +
								  "MAX(B.HEDGE_ROLLOVER_NO) FROM FMS7_HEDGE_MST B WHERE A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								  "A.FIN_YEAR=B.FIN_YEAR) AND (A.HEDGE_CON_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
								  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) ORDER BY A.HEDGE_SEQ_NO";
				}
				else if(activity.equalsIgnoreCase("update"))
				{
					queryString = "SELECT HEDGE_SEQ_NO, FIN_YEAR, TO_CHAR(REMITTANCE_DT,'DD/MM/YYYY'), " +
								  "BANK_CHARGES, HEDGE_PAYMENT, TOTAL_PAYMENT, PAYMENT_REF_NO, " +
								  "HEDGE_ROLLOVER_NO, TO_CHAR(CANCELLATION_DT,'DD/MM/YYYY') "+
		  			  			  "FROM FMS7_BANK_REMITTANCE_DTL WHERE " +
		  			  			  "(REMITTANCE_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
		  			  			  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR (CANCELLATION_DT BETWEEN " +
		  			  			  "TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
		  			  			  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
		  			  			  "ORDER BY HEDGE_SEQ_NO";
					
					//System.out.println("Month = 00 and hedge_no = "+hedge_no);
				}
			}
			else
			{
				from_dt = "01/01/"+year;
				queryString = "Select To_char(Last_Day(to_date('12/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
				//System.out.println("Last Date Of The Selected Month = "+queryString);
				rset = stmt.executeQuery(queryString);			
				if(rset.next())
				{
					to_dt = rset.getString(1)==null?"0":rset.getString(1);
				}
				
				if(activity.equalsIgnoreCase("insert"))
				{
					queryString = "SELECT A.BANK_CD, A.CREDIT_RATING, A.BANK_CONTR_NO, A.HEDGE_VALUE, " +
								  "TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), TO_CHAR(A.HEDGE_VAL_DT,'DD/MM/YYYY'), " +
								  "A.HEDGE_TOTAL, A.HEDGE_SEQ_NO, A.FIN_YEAR, A.HEDGE_ROLLOVER_NO " +
								  "FROM FMS7_HEDGE_MST A WHERE A.HEDGE_SEQ_NO NOT IN (SELECT C.HEDGE_SEQ_NO " +
								  "FROM FMS7_BANK_REMITTANCE_DTL C) AND A.HEDGE_ROLLOVER_NO=(SELECT " +
								  "MAX(B.HEDGE_ROLLOVER_NO) FROM FMS7_HEDGE_MST B WHERE A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								  "A.FIN_YEAR=B.FIN_YEAR) AND (A.HEDGE_CON_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
								  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) ORDER BY A.HEDGE_SEQ_NO";
				}
				else if(activity.equalsIgnoreCase("update"))
				{
					queryString = "SELECT HEDGE_SEQ_NO, FIN_YEAR, TO_CHAR(REMITTANCE_DT,'DD/MM/YYYY'), " +
								  "BANK_CHARGES, HEDGE_PAYMENT, TOTAL_PAYMENT, PAYMENT_REF_NO, " +
								  "HEDGE_ROLLOVER_NO, TO_CHAR(CANCELLATION_DT,'DD/MM/YYYY') "+
					  			  "FROM FMS7_BANK_REMITTANCE_DTL WHERE " +
					  			  "(REMITTANCE_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
					  			  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR (CANCELLATION_DT BETWEEN " +
					  			  "TO_DATE('"+from_dt+"','dd/mm/yyyy') AND " +
					  			  "TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
					  			  "ORDER BY HEDGE_SEQ_NO";
					
					//System.out.println("Month = "+month+" and hedge_no = "+hedge_no);
				}
			}				
			//System.out.println("Hedge Payment or Bank Remittance Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(activity.equalsIgnoreCase("insert"))
			{
				while(rset.next())
				{					
					BANK_CD.add(rset.getString(1)==null?"0":rset.getString(1));
					CREDIT_RATING.add(rset.getString(2)==null?"":rset.getString(2));
					BANK_CONTR_NO.add(rset.getString(3)==null?"":rset.getString(3));						
					HEDGE_VALUE.add(rset.getString(4)==null?"":rset.getString(4));
					HEDGE_CON_DT.add(rset.getString(5)==null?"":rset.getString(5));
					HEDGE_VAL_DT.add(rset.getString(6)==null?"":rset.getString(6));	
					DIFF_EXCHG.add(rset.getString(7)==null?"":rset.getString(7));
					String hedge_val = rset.getString(4)==null?"":rset.getString(4);
					String diff_exchg = rset.getString(7)==null?"":rset.getString(7);
					if(hedge_val!=null && !hedge_val.trim().equals("") && diff_exchg!=null && !diff_exchg.trim().equals(""))
					{
						HEDGE_PAYMENT.add(nf2.format(Double.parseDouble(hedge_val) * Double.parseDouble(diff_exchg)));
					}
					else
					{
						HEDGE_PAYMENT.add("0");
					}
					HEDGE_SEQ_NO.add(rset.getString(8)==null?"":rset.getString(8));
					HEDGE_FINANCIAL_YEAR.add(rset.getString(9)==null?"":rset.getString(9));
					HEDGE_ROLLOVER_NO.add(rset.getString(10)==null?"":rset.getString(10));
				}
				
				for(int i=0; i<BANK_CD.size(); i++)
				{
					queryString = "SELECT BANK_NAME FROM FMS7_BANK_MST WHERE BANK_CD="+BANK_CD.elementAt(i)+"";
					//System.out.println("BANK_MST query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{			
						BANK_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						BANK_NAME.add("");
					}
				}
			}
			else if(activity.equalsIgnoreCase("update"))
			{
				while(rset.next())
				{
					HEDGE_SEQ_NO.add(rset.getString(1)==null?"":rset.getString(1));
					FINANCIAL_YEAR.add(rset.getString(2)==null?"":rset.getString(2));						
					REMITTANCE_DT.add(rset.getString(3)==null?"":rset.getString(3));
					BANK_CHARGES.add(rset.getString(4)==null?"":rset.getString(4));
					HEDGE_PAYMENT.add(rset.getString(5)==null?"":rset.getString(5));	
					TOTAL_PAYMENT.add(rset.getString(6)==null?"":rset.getString(6));
					PAYMENT_REF_NO.add(rset.getString(7)==null?"":rset.getString(7));
					HEDGE_ROLLOVER_NO.add(rset.getString(8)==null?"":rset.getString(8));
					CANCELLATION_DT.add(rset.getString(9)==null?"":rset.getString(9));
				}
			}				
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Bank_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void get_Hedge_details()
	{
		try
		{		
			//System.out.println("Inside get_Hedge_details() and trader_cd = "+trader_cd); 										
			to_year = year.trim();
			if(to_year.length()>=4)
			{
				to_year = to_year.substring(2);
				if(Integer.parseInt(to_year)<10)
				{
					to_year = to_year.substring(1);
				}
				//System.out.println("to_year = "+to_year);
			}						
			String from_dt ="";
			String to_dt = "";
			if(!month.equals("00") && !month.equals("") && !month.equals(" ") && month!=null)
			{
				from_dt = "01/"+month+"/"+year;
				queryString = "Select To_char(Last_Day(to_date('"+month+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
				//System.out.println("Last Date Of The Selected Month = "+queryString);
				rset = stmt.executeQuery(queryString);			
				if(rset.next())
				{
					to_dt = rset.getString(1)==null?"0":rset.getString(1);
				}
				
				if(activity.equalsIgnoreCase("insert") || activity.equalsIgnoreCase("rollover"))
				{
					queryString = "SELECT A.CARGO_REF_NO,A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
								  "A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),C.TRD_CD "+
								  "FROM FMS7_PROV_SELLER_PAY A, FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
								  "WHERE " +
								  "A.CARGO_REF_NO LIKE '"+to_year+"%' and A.CARGO_REF_NO=B.CARGO_REF_CD " +
								  "AND B.MAN_CD=C.MAN_CD AND C.TRD_CD LIKE '"+trader_cd+"%' " +
								  //"AND A.CARGO_REF_NO NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  //"AND B.CARGO_REF_CD NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND (A.INVOICE_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.INVOICE_DT";
					
					queryString2 = "SELECT A.HEDGE_SEQ_NO, A.FIN_YEAR, TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), " +
								   "A.HEDGE_VALUE, A.HEDGE_TOTAL, A.BANK_CONTR_NO, " +
								   "A.HEDGE_ROLLOVER_NO, TO_CHAR(A.HEDGE_VAL_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_HEDGE_MST A " +
								   "WHERE A.FIN_YEAR='"+financial_year+"' AND " +
								   "(A.HEDGE_CON_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								   "AND to_date('"+to_dt+"','dd/mm/yyyy')) AND " +
								   "A.HEDGE_ROLLOVER_NO=(SELECT MAX(B.HEDGE_ROLLOVER_NO) " +
								   "FROM FMS7_HEDGE_MST B WHERE A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								   "A.FIN_YEAR=B.FIN_YEAR)  AND SPLIT_SEQ='0' ORDER BY A.HEDGE_CON_DT, A.FIN_YEAR, A.HEDGE_SEQ_NO";
				}
				else if(activity.equalsIgnoreCase("update"))
				{
					queryString = "SELECT B.CARGO_REF_NO, B.PROV_INVOICE_NO, TO_CHAR(B.INVOICE_DT,'DD/MM/YYYY'), " +
								  "B.INVOICE_AMT, TO_CHAR(B.DUE_DT,'DD/MM/YYYY'), " +
								  "B.TRADER_CD, A.HEDGE_SEQ_NO, A.FIN_YEAR, TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), " +
								  "A.HEDGE_VALUE, A.HEDGE_TOTAL, A.BANK_CONTR_NO, A.HEDGE_ROLLOVER_NO " +
								  "FROM FMS7_HEDGE_MST A, FMS7_HEDGE_DTL B " +
								  "WHERE A.FIN_YEAR=B.FIN_YEAR AND A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								  "A.HEDGE_ROLLOVER_NO=B.HEDGE_ROLLOVER_NO " +
								  "AND A.FIN_YEAR='"+financial_year+"' AND B.TRADER_CD LIKE '"+trader_cd+"%' " +
								  "AND (A.HEDGE_CON_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy')) " +
								  "ORDER BY A.HEDGE_CON_DT, A.FIN_YEAR, A.HEDGE_SEQ_NO, A.HEDGE_ROLLOVER_NO";
				}
			}
			else
			{
				String financial_year_2 = financial_year.substring(5)+"-"+(Integer.parseInt(financial_year.substring(5))+1);
				//System.out.println("financial_year_2 = "+financial_year_2);
				
				from_dt = "01/01/"+year;
				queryString = "Select To_char(Last_Day(to_date('12/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
				//System.out.println("Last Date Of The Selected Month = "+queryString);
				rset = stmt.executeQuery(queryString);			
				if(rset.next())
				{
					to_dt = rset.getString(1)==null?"0":rset.getString(1);
				}
					
				if(activity.equalsIgnoreCase("insert") || activity.equalsIgnoreCase("rollover"))
				{
					queryString = "SELECT A.CARGO_REF_NO,A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
								  "A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),C.TRD_CD "+
								  "FROM FMS7_PROV_SELLER_PAY A, FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
								  "WHERE " +
								  "A.CARGO_REF_NO LIKE '"+to_year+"%' and A.CARGO_REF_NO=B.CARGO_REF_CD " +
								  "AND B.MAN_CD=C.MAN_CD AND C.TRD_CD LIKE '"+trader_cd+"%' " +
								  //"AND A.CARGO_REF_NO NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  //"AND B.CARGO_REF_CD NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND (A.INVOICE_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.INVOICE_DT";
					
					queryString2 = "SELECT A.HEDGE_SEQ_NO, A.FIN_YEAR, TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), " +
								   "A.HEDGE_VALUE, A.HEDGE_TOTAL, A.BANK_CONTR_NO, " +
								   "A.HEDGE_ROLLOVER_NO, TO_CHAR(A.HEDGE_VAL_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_HEDGE_MST A " +
								   "WHERE (A.FIN_YEAR='"+financial_year+"' OR A.FIN_YEAR='"+financial_year_2+"') AND " +
								   "(A.HEDGE_CON_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								   "AND to_date('"+to_dt+"','dd/mm/yyyy')) AND " +
								   "A.HEDGE_ROLLOVER_NO=(SELECT MAX(B.HEDGE_ROLLOVER_NO) " +
								   "FROM FMS7_HEDGE_MST B WHERE A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								   "A.FIN_YEAR=B.FIN_YEAR)  ORDER BY A.HEDGE_CON_DT, A.FIN_YEAR, A.HEDGE_SEQ_NO";
				}
				else if(activity.equalsIgnoreCase("update"))
				{
					queryString = "SELECT B.CARGO_REF_NO, B.PROV_INVOICE_NO, TO_CHAR(B.INVOICE_DT,'DD/MM/YYYY'), " +
								  "B.INVOICE_AMT, TO_CHAR(B.DUE_DT,'DD/MM/YYYY'), " +
								  "B.TRADER_CD, A.HEDGE_SEQ_NO, A.FIN_YEAR, TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), " +
								  "A.HEDGE_VALUE, A.HEDGE_TOTAL, A.BANK_CONTR_NO, A.HEDGE_ROLLOVER_NO " +
								  "FROM FMS7_HEDGE_MST A, FMS7_HEDGE_DTL B " +
								  "WHERE A.FIN_YEAR=B.FIN_YEAR AND A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO AND " +
								  "A.HEDGE_ROLLOVER_NO=B.HEDGE_ROLLOVER_NO " +
								  "AND (A.FIN_YEAR='"+financial_year+"' OR A.FIN_YEAR='"+financial_year_2+"') " +
								  "AND B.TRADER_CD LIKE '"+trader_cd+"%' " +
								  "AND (A.HEDGE_CON_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy')) " +
								  "ORDER BY A.HEDGE_CON_DT, A.FIN_YEAR, A.HEDGE_SEQ_NO, A.HEDGE_ROLLOVER_NO";
				}
			}
			//System.out.println("Provisional Payment Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				String crg_ref = rset.getString(1)==null?"0":rset.getString(1);
				String invno = rset.getString(2)==null?"":rset.getString(2);
				CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
				INVOICE_NO.add(rset.getString(2)==null?"":rset.getString(2));
				INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
				String inv_amt = rset.getString(4)==null?"":rset.getString(4);
				if(!inv_amt.equals(""))
				{
					inv_amt = nf.format(Double.parseDouble(inv_amt));
				}
				INVOICE_AMT.add(inv_amt);	
				DUE_DT.add(rset.getString(5)==null?"":rset.getString(5));
				TRD_CD.add(rset.getString(6)==null?"":rset.getString(6));
				
				queryString3 = "SELECT A.INVOICE_AMT FROM FMS7_FINAL_SELLER_PAY A " +
				  			   "WHERE A.CARGO_REF_NO="+crg_ref+" and split_seq='0'";
				rset3 = stmt3.executeQuery(queryString3);
				if(rset3.next())
				{
					inv_amt = rset3.getString(1)==null?" ":rset3.getString(1);
					if(!inv_amt.trim().equals(""))
					{
						inv_amt = nf.format(Double.parseDouble(inv_amt.trim()));
					}
				}
				else
				{
					inv_amt = " ";
				}
				FINAL_INVOICE_AMT.add(inv_amt);
				
				if(activity.equalsIgnoreCase("insert") || activity.equalsIgnoreCase("rollover"))
				{
					int count = 0;
					String hdg_no = "";
					String fin_yr = "";
					String hdg_rollover_no = "";
					String hdg_full_cont_no = "";
					String hdg_cont_dt = "";
					String hdg_val = "";
					String hdg_rt = "";
					String bnk_con_no = "";
					
					queryString1 = "SELECT A.HEDGE_SEQ_NO, A.FIN_YEAR, TO_CHAR(A.HEDGE_CON_DT,'DD/MM/YYYY'), " +
								   "A.HEDGE_VALUE, A.HEDGE_TOTAL, A.BANK_CONTR_NO, A.HEDGE_ROLLOVER_NO " +
								   "FROM FMS7_HEDGE_MST A, FMS7_HEDGE_DTL B " +
								   "WHERE A.FIN_YEAR=B.FIN_YEAR AND A.HEDGE_SEQ_NO=B.HEDGE_SEQ_NO " +
								   "AND A.HEDGE_ROLLOVER_NO=B.HEDGE_ROLLOVER_NO " +
								   "AND B.CARGO_REF_NO="+crg_ref+" AND B.PROV_INVOICE_NO='"+invno+"'";
					
					//System.out.println("Hedge Details Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						if(count==0)
						{
							hdg_no = (rset1.getString(1)==null?"":rset1.getString(1));
							fin_yr = (rset1.getString(2)==null?"":rset1.getString(2));
							hdg_cont_dt = (rset1.getString(3)==null?"":rset1.getString(3));
							String hedge_val = rset1.getString(4)==null?"":rset1.getString(4);
							if(!hedge_val.equals(""))
							{
								hedge_val = nf.format(Double.parseDouble(hedge_val));
							}
							hdg_val = hedge_val;
							String hedge_rt = rset1.getString(5)==null?"":rset1.getString(5);
							if(!hedge_rt.equals(""))
							{
								hedge_rt = nf2.format(Double.parseDouble(hedge_rt));
							}
							hdg_rt = hedge_rt;
							bnk_con_no = (rset1.getString(6)==null?"":rset1.getString(6));
							hdg_rollover_no = (rset1.getString(7)==null?"0":rset1.getString(7));
							hdg_full_cont_no = (rset1.getString(6)==null?"":rset1.getString(6))+" (R-"+(rset1.getString(7)==null?"0":rset1.getString(7))+")";
						}
						else
						{
							hdg_no += "<BR>"+(rset1.getString(1)==null?"":rset1.getString(1));
							fin_yr += "<BR>"+(rset1.getString(2)==null?"":rset1.getString(2));
							hdg_cont_dt += "<BR>"+(rset1.getString(3)==null?"":rset1.getString(3));
							String hedge_val = rset1.getString(4)==null?"":rset1.getString(4);
							if(!hedge_val.equals(""))
							{
								hedge_val = nf.format(Double.parseDouble(hedge_val));
							}
							hdg_val += "<BR>"+hedge_val;
							String hedge_rt = rset1.getString(5)==null?"":rset1.getString(5);
							if(!hedge_rt.equals(""))
							{
								hedge_rt = nf2.format(Double.parseDouble(hedge_rt));
							}
							hdg_rt += "<BR>"+hedge_rt;
							bnk_con_no += "<BR>"+(rset1.getString(6)==null?"":rset1.getString(6));
							hdg_rollover_no += "<BR>"+(rset1.getString(7)==null?"0":rset1.getString(7));
							hdg_full_cont_no += "<BR>"+(rset1.getString(6)==null?"":rset1.getString(6))+" (R-"+(rset1.getString(7)==null?"0":rset1.getString(7))+")";
						}						
						++count;
					}
					
					if(count>0)
					{
						HEDGE_SEQ_NO.add(hdg_no);
						FINANCIAL_YEAR.add(fin_yr);
						HEDGE_ROLLOVER_NO.add(hdg_rollover_no);
						HEDGE_CON_DT.add(hdg_cont_dt);
						HEDGE_VALUE.add(hdg_val);
						HEDGE_RATE_TOTAL.add(hdg_rt);
						BANK_CONTR_NO.add(bnk_con_no);
						HEDGE_CONTRACT_NO.add(hdg_full_cont_no);
					}
					else
					{
						HEDGE_SEQ_NO.add("");
						FINANCIAL_YEAR.add("");
						HEDGE_ROLLOVER_NO.add("");
						HEDGE_CON_DT.add("");
						HEDGE_VALUE.add("");
						HEDGE_RATE_TOTAL.add("");
						BANK_CONTR_NO.add("");
						HEDGE_CONTRACT_NO.add("");
					}					
				}
				
				if(activity.equalsIgnoreCase("update"))
				{
					HEDGE_SEQ_NO.add(rset.getString(7)==null?"":rset.getString(7));
					FINANCIAL_YEAR.add(rset.getString(8)==null?"":rset.getString(8));
					HEDGE_CON_DT.add(rset.getString(9)==null?"":rset.getString(9));
					String hedge_val = rset.getString(10)==null?"":rset.getString(10);
					if(!hedge_val.equals(""))
					{
						hedge_val = nf.format(Double.parseDouble(hedge_val));
					}
					HEDGE_VALUE.add(hedge_val);
					String hedge_rt = rset.getString(11)==null?"":rset.getString(11);
					if(!hedge_rt.equals(""))
					{
						hedge_rt = nf2.format(Double.parseDouble(hedge_rt));
					}
					HEDGE_RATE_TOTAL.add(hedge_rt);
					BANK_CONTR_NO.add(rset.getString(12)==null?"":rset.getString(12));
					HEDGE_ROLLOVER_NO.add(rset.getString(13)==null?"0":rset.getString(13));
				}
			}
			
			for(int i=0; i<TRD_CD.size(); i++)
			{
				queryString = "SELECT trader_abbr FROM FMS7_TRADER_MST WHERE trader_cd="+TRD_CD.elementAt(i)+"";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					TRADER_ABBR.add(rset.getString(1)==null?"":rset.getString(1));
				}
				else
				{
					TRADER_ABBR.add("");
				}
			}
			
			if(activity.equalsIgnoreCase("update"))
			{
				if(!month.equals("00") && !month.equals("") && !month.equals(" ") && month!=null)
				{
					from_dt = "01/"+month+"/"+year;
					queryString = "Select To_char(Last_Day(to_date('"+month+"/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
					//System.out.println("Last Date Of The Selected Month = "+queryString);
					rset = stmt.executeQuery(queryString);			
					if(rset.next())
					{
						to_dt = rset.getString(1)==null?"0":rset.getString(1);
					}
					
					queryString = "SELECT A.CARGO_REF_NO,A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
								  "A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),C.TRD_CD "+
								  "FROM FMS7_PROV_SELLER_PAY A, FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
								  "WHERE " +
								  "A.CARGO_REF_NO LIKE '"+to_year+"%' and A.CARGO_REF_NO=B.CARGO_REF_CD " +
								  "AND B.MAN_CD=C.MAN_CD AND C.TRD_CD LIKE '"+trader_cd+"%' " +
								  "AND A.CARGO_REF_NO NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND B.CARGO_REF_CD NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND (A.INVOICE_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.INVOICE_DT";
				}
				else
				{
					String financial_year_2 = financial_year.substring(5)+"-"+(Integer.parseInt(financial_year.substring(5))+1);
					//System.out.println("financial_year_2 = "+financial_year_2);
					
					from_dt = "01/01/"+year;
					queryString = "Select To_char(Last_Day(to_date('12/"+year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
					//System.out.println("Last Date Of The Selected Month = "+queryString);
					rset = stmt.executeQuery(queryString);			
					if(rset.next())
					{
						to_dt = rset.getString(1)==null?"0":rset.getString(1);
					}
						
					queryString = "SELECT A.CARGO_REF_NO,A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY')," +
								  "A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),C.TRD_CD "+
								  "FROM FMS7_PROV_SELLER_PAY A, FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C " +
								  "WHERE " +
								  "A.CARGO_REF_NO LIKE '"+to_year+"%' and A.CARGO_REF_NO=B.CARGO_REF_CD " +
								  "AND B.MAN_CD=C.MAN_CD AND C.TRD_CD LIKE '"+trader_cd+"%' " +
								  "AND A.CARGO_REF_NO NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND B.CARGO_REF_CD NOT IN (SELECT CARGO_REF_NO FROM FMS7_HEDGE_DTL) " +
								  "AND (A.INVOICE_DT between to_date('"+from_dt+"','dd/mm/yyyy') " +
								  "AND to_date('"+to_dt+"','dd/mm/yyyy')) AND SPLIT_SEQ='0' ORDER BY A.INVOICE_DT";
				}
				
				//System.out.println("Provisional Payment Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{					
					String crg_ref = rset.getString(1)==null?"0":rset.getString(1);
					CARGO_REF_NO_ARR.add(rset.getString(1)==null?"":rset.getString(1));
					INV_NO.add(rset.getString(2)==null?"":rset.getString(2));
					INV_DT.add(rset.getString(3)==null?"":rset.getString(3));
					String inv_amt = rset.getString(4)==null?"":rset.getString(4);
					if(!inv_amt.equals(""))
					{
						inv_amt = nf.format(Double.parseDouble(inv_amt));
					}
					INV_AMT.add(inv_amt);	
					INV_DUE_DT.add(rset.getString(5)==null?"":rset.getString(5));
					TRADER_CODE.add(rset.getString(6)==null?"":rset.getString(6));
					
					queryString3 = "SELECT A.INVOICE_AMT FROM FMS7_FINAL_SELLER_PAY A " +
					  			   "WHERE A.CARGO_REF_NO="+crg_ref+" and split_seq='0'";
					rset3 = stmt3.executeQuery(queryString3);
					if(rset3.next())
					{
						inv_amt = rset3.getString(1)==null?" ":rset3.getString(1);
						if(!inv_amt.trim().equals(""))
						{
							inv_amt = nf.format(Double.parseDouble(inv_amt.trim()));
						}
					}
					else
					{
						inv_amt = " ";
					}
					FINAL_INV_AMT.add(inv_amt);
				}
				
				for(int i=0; i<TRADER_CODE.size(); i++)
				{
					queryString = "SELECT trader_abbr FROM FMS7_TRADER_MST WHERE trader_cd="+TRADER_CODE.elementAt(i)+"";
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						TRADER_ABR.add(rset.getString(1)==null?"":rset.getString(1));
					}
					else
					{
						TRADER_ABR.add("");
					}
				}
			}
			
			//List Will Be Populated For RollOver Hedge Details ...		
			if(activity.equalsIgnoreCase("rollover"))
			{
				//System.out.println("Maximum RolledOver Hedge Details = "+queryString2);
				rset2 = stmt2.executeQuery(queryString2);
				while(rset2.next())
				{
					HEDGE_SEQ_NUMBER.add(rset2.getString(1)==null?"0":rset2.getString(1));
					HEDGE_FINANCIAL_YEAR.add(rset2.getString(2)==null?"":rset2.getString(2));
					HEDGE_CONTRACT_DATE.add(rset2.getString(3)==null?"":rset2.getString(3));
					HEDGE_VALUE_AMOUNT.add(rset2.getString(4)==null?"":rset2.getString(4));
					HEDGE_CONTRACT_NUMBER.add(rset2.getString(6)==null?"":rset2.getString(6));
					HEDGE_ROLLOVER_NUMBER.add(rset2.getString(7)==null?"":rset2.getString(7));
					HEDGE_VALUE_DATE.add(rset2.getString(8)==null?"":rset2.getString(8));
				}
			}
			//JHP Start
			for(int i=0;i<CARGO_REF_CD.size();i++)
			{
			String query="SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE CARGO_REF_CD='"+CARGO_REF_CD.elementAt(i)+"'";
			rset2 = stmt2.executeQuery(query);
			if(rset2.next())
			{
				String query1="SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+rset2.getString(1)+"'";
				rset = stmt2.executeQuery(query1);
				if(rset.next())
				{
				SHIP_NM.add(rset.getString(1));
				}
				else
				{
				SHIP_NM.add("-");	
				}
			}
			else
			{
				SHIP_NM.add("-");
			}
			String query3="SELECT INVOICE_NO FROM FMS7_FINAL_SELLER_PAY WHERE CARGO_REF_NO='"+CARGO_REF_CD.elementAt(i)+"' and split_seq='0'";
			rset4 = stmt2.executeQuery(query3);
			if(rset4.next())
			{
			    Final_inv_no1.add(rset4.getString(1));
				//System.out.println("Final invoice no::"+rset4.getString(1));	
			}
			else
			{
				Final_inv_no1.add("-");
				//System.out.println("Final invoice no::-");	
			}
			
			
			}
			
			for(int i=0;i<CARGO_REF_NO_ARR.size();i++)
			{
			String query="SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE CARGO_REF_CD='"+CARGO_REF_NO_ARR.elementAt(i)+"'";
			rset2 = stmt2.executeQuery(query);
			if(rset2.next())
			{
				String query1="SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+rset2.getString(1)+"'";
				rset = stmt2.executeQuery(query1);
				if(rset.next())
				{
				SHIP_NM1.add(rset.getString(1));
				}
				else
				{
				SHIP_NM1.add("-");	
				}
			}
			else
			{
				SHIP_NM1.add("-");
			}
			String query3="SELECT INVOICE_NO FROM FMS7_FINAL_SELLER_PAY WHERE CARGO_REF_NO='"+CARGO_REF_NO_ARR.elementAt(i)+"' and split_seq='0'";
			rset4 = stmt2.executeQuery(query3);
			if(rset4.next())
			{
			    Final_inv_no11.add(rset4.getString(1));
				//System.out.println("Final invoice no::"+rset4.getString(1));	
			}
			else
			{
				Final_inv_no11.add("-");
				//System.out.println("Final invoice no::-");	
			}
			
			
			}
			
			//JHP End
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Hedge_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void fetch_Hedge_details()
	{
		try
		{	
			//System.out.println("Inside fetch_Hedge_details() "); 
			int hedge_seq_no = 0;
			//System.out.println("cargo_ref_cd = "+cargo_ref_cd);
			if(cargo_ref_cd!=null && !cargo_ref_cd.equals("") && !cargo_ref_cd.equals(" ") && !cargo_ref_cd.equals("0"))			
			{
				//Following Code for fetching  Provisional_Seller Duty===========================================================================				
				queryString = "SELECT CARGO_REF_NO,INVOICE_NO,INVOICE_AMT,  TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(DUE_DT,'DD/MM/YYYY') "+
							  "FROM FMS7_PROV_SELLER_PAY WHERE CARGO_REF_NO='"+cargo_ref_cd+"'  AND SPLIT_SEQ='0'";
				//System.out.println("Custom Duty Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					cargo_ref_cd = rset.getString(1)==null?"":rset.getString(1);
					inv_no       = rset.getString(2)==null?"":rset.getString(2);
					inv_amt      = rset.getString(3)==null?"":rset.getString(3);
					inv_dt		 = rset.getString(4)==null?"":rset.getString(4);
					due_dt		 = rset.getString(1)==null?"":rset.getString(1);
				}
				
				if(activity.equalsIgnoreCase("insert"))
				{
					if(inv_dt.trim().length()>=10)
					{
						String year_part = inv_dt.trim().substring(6);
						String month_part = inv_dt.trim().substring(3,5);
						
						if(Integer.parseInt(month_part)<=3)
						{
							financial_year = ""+(Integer.parseInt(year_part)-1)+"-"+year_part;						
						}
						else if(Integer.parseInt(month_part)>3)
						{
							financial_year = ""+year_part+"-"+(Integer.parseInt(year_part)+1);
						}
						
						queryString = "SELECT max(HEDGE_SEQ_NO) FROM FMS7_HEDGE_MST WHERE " +
									  "FIN_YEAR='"+financial_year+"'";
					
						//System.out.println("HEDGE_SEQ_NO Query = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							hedge_seq_no = Integer.parseInt(rset.getString(1)==null?"0":rset.getString(1));
						}
					}
					hedge_seq_no += 1;
				}
				else
				{
					hedge_seq_no = Integer.parseInt(hedge_no);
					
					queryString = "SELECT HEDGE_SEQ_NO, FIN_YEAR, BANK_CD, CREDIT_RATING, BANK_CONTR_NO, " +
								  "HEDGE_VALUE, TO_CHAR(HEDGE_CON_DT,'dd/mm/yyyy'), TO_CHAR(HEDGE_VAL_DT,'dd/mm/yyyy'), " +
								  "HEDGE_EXG_RT_VAL_DT, HEDGE_SPOT_RT, HEDGE_PREMIUM, HEDGE_MARGIN, HEDGE_TOTAL, " +
								  "HEDGE_UNDER, HEDGE_POS, DIFF_EXCHG, MARKET2, EXG_RT_ON_PROV_INV_DT, " +
								  "M2M_DIE, GAIN_LOSS, FINAL_INV_AMT, FINAL_INV_AMT_GAIN_LOSS " +
								  "FROM FMS7_HEDGE_MST WHERE HEDGE_SEQ_NO="+hedge_no+" " +
								  "AND FIN_YEAR='"+financial_year+"' AND HEDGE_ROLLOVER_NO='"+hedge_rollover_no+"'";
					
					//System.out.println("Fetch = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						hedge_no  		= rset.getString(1)==null?"":rset.getString(1);
						financial_year  = rset.getString(2)==null?"":rset.getString(2);
						bank_cd			= rset.getString(3)==null?"":rset.getString(3);
						credit_rate		= rset.getString(4)==null?"":rset.getString(4);
						bank_cont_no	= rset.getString(5)==null?"":rset.getString(5);
						hedge_value		= rset.getString(6)==null?"":rset.getString(6);
						hedge_con_dt	= rset.getString(7)==null?"":rset.getString(7);
						hedge_val_dt	= rset.getString(8)==null?"":rset.getString(8);
						hedge_excg_dt	= rset.getString(9)==null?"":rset.getString(9);
						if(!hedge_excg_dt.equals(""))
						{
							hedge_excg_dt = nf2.format(Double.parseDouble(hedge_excg_dt));
						}
						spot_rate		= rset.getString(10)==null?"":rset.getString(10);
						if(!spot_rate.equals(""))
						{
							spot_rate = nf2.format(Double.parseDouble(spot_rate));
						}
						premium			= rset.getString(11)==null?"":rset.getString(11);
						if(!premium.equals(""))
						{
							premium = nf2.format(Double.parseDouble(premium));
						}
						margin			= rset.getString(12)==null?"":rset.getString(12);
						if(!margin.equals(""))
						{
							margin = nf2.format(Double.parseDouble(margin));
						}
						total			= rset.getString(13)==null?"":rset.getString(13);
						if(!total.equals(""))
						{
							total = nf2.format(Double.parseDouble(total));
						}
						
						hedge_under		= rset.getString(14)==null?"":rset.getString(14);
						hedge_pos		= rset.getString(15)==null?"Y":rset.getString(15);
						diff_exchg		= rset.getString(16)==null?"":rset.getString(16);
						if(!diff_exchg.equals(""))
						{
							diff_exchg = nf2.format(Double.parseDouble(diff_exchg));
						}
						
						market2	= rset.getString(17)==null?"":rset.getString(17);
						if(!market2.equals(""))
						{
							market2 = nf.format(Double.parseDouble(market2));
						}
						
						exg_rt_on_prov_inv_dt = rset.getString(18)==null?"":rset.getString(18);
						if(!exg_rt_on_prov_inv_dt.equals(""))
						{
							exg_rt_on_prov_inv_dt = nf2.format(Double.parseDouble(exg_rt_on_prov_inv_dt));
						}
						
						hedge_m2m_die = rset.getString(19)==null?"":rset.getString(19);
						if(!hedge_m2m_die.equals(""))
						{
							hedge_m2m_die = nf2.format(Double.parseDouble(hedge_m2m_die));
						}
						
						hedge_gain_loss = rset.getString(20)==null?"":rset.getString(20);
						if(!hedge_gain_loss.equals(""))
						{
							hedge_gain_loss = nf.format(Double.parseDouble(hedge_gain_loss));
						}
						
						final_inv_amt = rset.getString(21)==null?"":rset.getString(21);
						final_inv_amt_gain_loss = rset.getString(22)==null?"":rset.getString(22);
					}
					
					/*queryString = "SELECT TRADER_CD,PROV_INVOICE_NO,CARGO_REF_NO," +
								"TO_CHAR(INVOICE_DT,'dd/mm/yyyy'),INVOICE_AMT," +
								"TO_CHAR(DUE_DT,'dd/mm/yyyy') FROM FMS7_HEDGE_DTL " +
								"WHERE HEDGE_SEQ_NO="+hedge_no+" " +
								"AND FIN_YEAR='"+financial_year+"'";
					
					//System.out.println("Fetch = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						trader_cd 		= rset.getString(1)==null?"":rset.getString(1);
						inv_no			= rset.getString(2)==null?"":rset.getString(2);
						cargo_ref_cd	= rset.getString(3)==null?"":rset.getString(3);
						inv_dt			= rset.getString(4)==null?"":rset.getString(4);
						inv_amt			= rset.getString(5)==null?"":rset.getString(5);
						due_dt			= rset.getString(6)==null?"":rset.getString(6);						
					}*/
				}
								
				////System.out.println("hedge_seq_no = "+hedge_seq_no+" financial_year = "+financial_year);
				
				if(hedge_seq_no<10)
				{
					hedge_seq="000"+hedge_seq_no+"/"+financial_year;
				}
				else if(hedge_seq_no<100) 
				{
					hedge_seq="00"+hedge_seq_no+"/"+financial_year;
				}
				else if(hedge_seq_no<1000) 
				{
					hedge_seq="0"+hedge_seq_no+"/"+financial_year;
				}
				else
				{
					hedge_seq=hedge_seq_no+"/"+financial_year;
				}
				
				hedge_no = ""+hedge_seq_no;
				
				queryString = "SELECT A.BANK_CD,A.BANK_NAME,A.CREDIT_RATING FROM FMS7_BANK_MST A WHERE " +
						"A.EFF_DT=(Select MAX(B.EFF_DT) FROM FMS7_BANK_MST B where A.BANK_CD=B.BANK_CD AND" +
						" B.EFF_DT<=TO_DATE('"+inv_dt+"','dd/mm/yyyy'))";
				//System.out.println("Bank Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					BANK_CD.add(rset.getString(1)==null?"":rset.getString(1));
					BANK_NAME.add(rset.getString(2)==null?"":rset.getString(2));
					CREDIT_RATING.add(rset.getString(3)==null?"":rset.getString(3));
				}				
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> fetch_Hedge_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void fetch_Purchase_details()
	{
		try
		{		
			//System.out.println("Inside fetch_Purchase_details() "); 
			if(cargo_ref_cd!=null && !cargo_ref_cd.equals("") && !cargo_ref_cd.equals(" ") && !cargo_ref_cd.equals("0"))
			{
				//Following Code for fetching  Provisional_custom Duty===========================================================================
				String tax_amt="";
				queryString = "SELECT CARGO_REF_NO,SELLER_INV_NO,TO_CHAR(SELLER_INV_DT,'DD/MM/YYYY'),EXP_DELV_QTY,CONFIRM_PRICE,SELLER_INV_AMT,"+		  
							  "TO_CHAR(SELLER_DUE_DT,'DD/MM/YYYY'),TO_CHAR(CUSTOM_DUTY_DT,'DD/MM/YYYY'),EXCHG_RATE,INVOICE_AMT,SURVEY_FEE,CIF_VALUE,"+
							  "LADING_CHARGES,ASSESSABLE_VALUE,TAX_STR_CD,TOTAL_CD_AMT,PD_BOND_AMT,CHALLAN_NO,TO_CHAR(CUSTOM_CLEAR_DT,'DD/MM/YYYY') "+
							  "FROM FMS7_CUSTOM_DUTY WHERE cargo_ref_no='"+cargo_ref_cd+"'";
				////System.out.println("Custom Duty Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					prov_cust_conf_qty    	=rset.getString(4)==null?"":rset.getString(4);				
					seller_inv_amt			=rset.getString(6)==null?"":rset.getString(6);
					cust_due_dt			    =rset.getString(8)==null?"":rset.getString(8);
					exchg_rate			    =rset.getString(9)==null?"":rset.getString(9);
					inv_amt 			    =rset.getString(10)==null?"":rset.getString(10);
					survey_fee			    =rset.getString(11)==null?"":rset.getString(11);
					cif_val 				=rset.getString(12)==null?"":rset.getString(12); 
					lading_val      		=rset.getString(13)==null?"":rset.getString(13);
					access_value    		=rset.getString(14)==null?"":rset.getString(14);
					tax_str_cd	    		=rset.getString(15)==null?"":rset.getString(15);
					total_cd_amt    		=rset.getString(16)==null?"":rset.getString(16);
					pd_bond_value    		=rset.getString(17)==null?"":rset.getString(17);
				}
				
				//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT	
				if(!tax_str_cd.equals("") && tax_str_cd!=null && !tax_str_cd.equals(" "))
				{
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
					   			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
					   			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
					   			  "B.app_date<=TO_DATE('"+cust_due_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
					//System.out.println("Provisional Custom Duty For Finding Out Correct Tax Structure Details  = "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{				
						String tax_cd     = rset.getString(1);
						String tax_factor = nf.format(Double.parseDouble(rset.getString(2)));
						String tax_title  = "";								
						if(rset.getString(3).equals("1"))
						{
							tax_amt   = nf.format((Double.parseDouble(access_value)*Double.parseDouble(rset.getString(2)))/100);
							tax_title = "ON ASSESSABLE VALUE";
						}
						else if(rset.getString(3).equals("2"))
						{
						    queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											"TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_str_cd+" AND " +
											"A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_str_cd+" AND " +
											"B.app_date<=TO_DATE('"+cust_due_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
							//System.out.println("Provisional Custom Duty For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								if(rset1.getString(3).equals("1"))
								{
									tax_amt = nf.format((Double.parseDouble(access_value)*Double.parseDouble(rset1.getString(2)))/100);
								}			
								tax_amt = nf.format((Double.parseDouble(tax_amt)*Double.parseDouble(rset.getString(2)))/100);
							}
							else
							{
								tax_amt = ""+0.00;
							}		 		
							queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " + "tax_code="+rset.getString(4)+"";
							//System.out.println("Provisional Custom Duty For Fetching DEPENDENT Tax Abbr = "+queryString2);
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
								tax_title 	    = "ON "+tax_abbr;
							}
							else
							{
								tax_title = "";
							}							
						}
						else
						{
							tax_amt = ""+0.00;
						}			
						TAX_CODE.add(tax_cd);
						FACTOR.add(tax_factor);
						TAX_AMOUNT.add(tax_amt);
						TAX_ON_TITLE.add(tax_title);					
					}
					for(int i=0; i<TAX_CODE.size(); i++)
					{
						queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE tax_code="+TAX_CODE.elementAt(i)+"";
						//System.out.println("Query For Fetching Tax Name = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
							TAX_NAME.add(tax_nm);
						}
						else
						{
							TAX_NAME.add("");
						}					
					}
					//	//System.out.println("TAX_CODE = "+TAX_CODE+"FACTOR = "+FACTOR+"TAX_AMOUNT = "+TAX_AMOUNT+"TAX_ON_TITLE ="+TAX_ON_TITLE+"TAX_NAME="+TAX_NAME);
				}		
				////System.out.println("After IF tax_str_cd =" +tax_str_cd);									
				//====================Following Code for fetching  Final_Seller_Payment		
				queryString = "SELECT CARGO_REF_NO,INVOICE_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),ACTUAL_UNLOADED_QTY," +  	  		
							  "CONFIRM_PRICE,INVOICE_AMT,TO_CHAR(DUE_DT,'DD/MM/YYYY'),REMARK,CR_DR_NOTE_NO,CR_DR_AMT,TO_CHAR(CR_DR_DT,'DD/MM/YYYY'),PROV_INV_NO " +
							  "FROM FMS7_FINAL_SELLER_PAY WHERE CARGO_REF_NO ='"+cargo_ref_cd+"' and split_seq='0'";
				////System.out.println("Final Seller Payment Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{				
					inv_no				=rset.getString(2)==null?"":rset.getString(2);									
					inv_dt				=rset.getString(3)==null?"":rset.getString(3);								
					actual_unloaded_qty =rset.getString(4)==null?"":rset.getString(4);
					prov_cust_conf_price=rset.getString(5)==null?"":rset.getString(5);
					invoice_value_inr   =rset.getString(6)==null?"":rset.getString(6);	
					if(!actual_unloaded_qty.equals("") && !prov_cust_conf_price.equals("") && !prov_cust_conf_qty.equals(""))
					{
						inc_dec_qty = nf.format(Double.parseDouble(actual_unloaded_qty)- Double.parseDouble(prov_cust_conf_qty));
						inc_dec_amt = nf.format(Double.parseDouble(inc_dec_qty)*Double.parseDouble(prov_cust_conf_price));				
					}					
				}
				if(inv_no.equals("") || inv_no.equals(" ") || inv_no==null)
				{
					prov_cust_conf_qty="";				
				}		
				////System.out.println("actual_unloaded_qty = "+actual_unloaded_qty+" conf_price = "+conf_price+" conf_qty = "+conf_qty+" inc_dec_amt = "+inc_dec_amt+" inc_dec_qty = "+inc_dec_qty);
		
				//======================Following Code for fetching  Final_custom Duty=================						
				String int_rate_cd = "5";			
				days = "0";		
				queryString ="SELECT CARGO_REF_NO,SELLER_INV_NO_FINAL,TO_CHAR(SELLER_INV_DT_FINAL,'DD/MM/YYYY'),ACTUAL_UNLOADED_QTY,EXP_DELV_QTY,CONFIRM_PRICE,INVOICE_AMT,"+
							 "TO_CHAR(SELLER_DUE_DT_FINAL,'DD/MM/YYYY'),PROV_CHALLAN_NO,TO_CHAR(PROV_CUSTOM_CLEAR_DT,'DD/MM/YYYY'),PROV_TOTAL_CD_AMT,TO_CHAR(CUSTOM_DUTY_DT,'DD/MM/YYYY'),EXCHG_RATE,CIF_VALUE,"+
							 "LADING_CHARGES,ASSESSABLE_VALUE,TAX_STR_CD,TOTAL_CD_AMT,INTERST_X_DAYS,TOTAL_PAID_REFUND,CHALLAN_NO,TO_CHAR(CUSTOM_CLEAR_DT,'DD/MM/YYYY')"+
							 "FROM FMS7_FINAL_CUSTOM_DUTY WHERE cargo_ref_no='"+cargo_ref_cd+"'";
				////System.out.println("Final Custom Duty Details Query =" +queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{																			
					due_dt=rset.getString(10)==null?"":rset.getString(10);
					cust_due_dt=rset.getString(12)==null?"":rset.getString(12);
					final_exchg_rate=rset.getString(13)==null?"":rset.getString(13);
					final_cif_val =rset.getString(14)==null?"":rset.getString(14); 
					final_lading_val =rset.getString(15)==null?"":rset.getString(15);
					final_access_value =rset.getString(16)==null?"":rset.getString(16);
					final_tax_str_cd=rset.getString(17)==null?"":rset.getString(17);
					final_total_cd_amt =rset.getString(18)==null?"":rset.getString(18);
					int_amt =rset.getString(19)==null?"":rset.getString(19);
					tot_paid_refund=rset.getString(20)==null?"":rset.getString(20);				
				}
				////System.out.println("Before IF final_tax_str_cd =" +final_tax_str_cd); 
				if(!final_tax_str_cd.equals("") && final_tax_str_cd!=null && !final_tax_str_cd.equals(" "))
				{
					queryString = "Select A.INT_VAL FROM FMS7_INT_PAY_RATE_ENTRY A where A.INT_RATE_CD="+int_rate_cd+" AND A.EFF_DT = (Select Max(B.EFF_DT) " +"FROM FMS7_INT_PAY_RATE_ENTRY B WHERE A.INT_RATE_CD=B.INT_RATE_CD AND B.EFF_DT <= TO_DATE('"+cust_due_dt+"','DD/MM/YYYY'))";
					////System.out.println("Interest rate Query = "+queryString);
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{					
						int_val= nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					}	
					if(!due_dt.equals("") && due_dt!=null && !due_dt.equals(" "))
					{
						queryString ="SELECT (TO_DATE('"+cust_due_dt+"','DD/MM/YYYY') - TO_DATE('01/' || TO_CHAR(TO_DATE('"+due_dt+"','DD/MM/YYYY'),'MM/YYYY'),'DD/MM/YYYY')) + 1 FROM DUAL";
						//System.out.println("Days Query = "+queryString);
						rset3  = stmt3.executeQuery(queryString);
						if(rset3.next())
						{									
							days=rset3.getString(1)==null?"":rset3.getString(1);
						}
					}								
					//=========Following is code for calculating TAX_STRUCTURE and it's TAX_AMT For Final Custom Duty
					String final_tax_amt = "";	
					if(!final_access_value.equals("") && final_access_value!=null && !final_access_value.equals(" "))
					{
						final_inc_dec_amt= inc_dec_amt;
						queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  			  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+final_tax_str_cd+" AND " +
						  			  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+final_tax_str_cd+" AND " +	
						  			  "B.app_date<=TO_DATE('"+cust_due_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code DESC";
						//System.out.println("Final Custom Duty For Finding Out Correct Tax Structure Details = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
								String final_tax_cd = rset.getString(1);
								String final_tax_factor = nf.format(Double.parseDouble(rset.getString(2)));
								String final_tax_title = "";					
								if(rset.getString(3).equals("1"))
								{
									final_tax_amt = nf.format((Double.parseDouble(final_access_value)*Double.parseDouble(rset.getString(2)))/100);
									final_tax_title = "ON ASSESSABLE VALUE";
								}
								else if(rset.getString(3).equals("2"))
								{
								   queryString1 = "SELECT NVL(A.tax_code,'0'),NVL(A.factor,'0'),NVL(A.tax_on,'1'),NVL(A.tax_on_cd,'0'), " +
											   	   "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+final_tax_str_cd+" AND " +
											       "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+final_tax_str_cd+" AND " +	
											       "B.app_date<=TO_DATE('"+cust_due_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
								////System.out.println("Final Custom Duty For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{								 						
									if(rset1.getString(3).equals("1"))
									{
									   final_tax_amt=nf.format((Double.parseDouble(final_access_value)*Double.parseDouble(rset1.getString(2)))/100);
									}							
									final_tax_amt = nf.format((Double.parseDouble(final_tax_amt)*Double.parseDouble(rset.getString(2)))/100);
								}
								else
								{
									final_tax_amt = ""+0.00;
								}					 	
								queryString2 = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE tax_code="+rset.getString(4)+" ";
								////System.out.println("Query For Fetching DEPENDENT Tax Abbr = "+queryString2);
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									String tax_abbr = rset2.getString(1)==null?"":rset2.getString(1);
									final_tax_title = "ON "+tax_abbr;
								}
								else
								{
									final_tax_title = "";
								}				 		
							}
							else
							{
								final_tax_amt = ""+0.00;
							}				
							FINAL_TAX_CODE.add(final_tax_cd);
							FINAL_FACTOR.add(final_tax_factor);
							FINAL_TAX_AMOUNT.add(final_tax_amt);
							FINAL_TAX_ON_TITLE.add(final_tax_title);				
						}
						for(int i=0; i<FINAL_TAX_CODE.size(); i++)
						{
							queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE tax_code="+FINAL_TAX_CODE.elementAt(i)+" ";
							////System.out.println("Query For Fetching Tax Name = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{
								String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
								FINAL_TAX_NAME.add(tax_nm);
							}
							else
							{
								FINAL_TAX_NAME.add("");
							}					
						}
					}			
					////System.out.println("FINAL_TAX_CODE = "+FINAL_TAX_CODE+"FINAL_FACTOR = "+FINAL_FACTOR+"FINAL_TAX_AMOUNT = "+FINAL_TAX_AMOUNT+"FINAL_TAX_ON_TITLE ="+FINAL_TAX_ON_TITLE+"FINAL_TAX_NAME="+FINAL_TAX_NAME);
				}			
				////System.out.println("After IF final_tax_str_cd =" +final_tax_str_cd);
			}
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> fetch_Purchase_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void get_Purchase_details()
	{
		try
		{		
			//System.out.println("Inside get_Purchase_details() "); 			
			year = year.trim();
			if(year.length()>=4)
			{
				year = year.substring(2);
				if(Integer.parseInt(year)<10)
				{
					year = year.substring(1);
				}
			}			
			//System.out.println("trader_cd = "+trader_cd);	
			queryString = "SELECT A.CARGO_REF_NO,A.INVOICE_NO,TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'),A.EXP_DELV_QTY,A.CONFIRM_PRICE,A.INVOICE_AMT,TO_CHAR(A.DUE_DT,'DD/MM/YYYY'),A.REMARK "+
						  "FROM FMS7_PROV_SELLER_PAY A, FMS7_MAN_CONFIRM_CARGO_DTL B, FMS7_MAN_REQ_MST C WHERE " +
						  "A.CARGO_REF_NO LIKE '"+year+"%' AND A.CARGO_REF_NO=B.CARGO_REF_CD AND B.MAN_CD=C.MAN_CD AND C.TRD_CD LIKE '"+trader_cd+"%'  AND SPLIT_SEQ='0' ORDER BY A.CARGO_REF_NO";			
			//System.out.println("Final Provisional Payment Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
						CARGO_REF_CD.add(rset.getString(1)==null?"":rset.getString(1));
						INVOICE_NO.add(rset.getString(2)==null?"":rset.getString(2));
						INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));						
						CONFIRM_VOLUME.add(rset.getString(4)==null?"":rset.getString(4));
						CONF_PRICE.add(rset.getString(5)==null?"":rset.getString(5));
						INVOICE_AMT.add(rset.getString(6)==null?"":rset.getString(6));	
						DUE_DT.add(rset.getString(7)==null?"":rset.getString(7));
			}	
			for(int i=0; i<CARGO_REF_CD.size(); i++)
			{																	
					queryString1 = "SELECT VESSEL_NM,BE_NO FROM FMS7_CARGO_ARRIVAL_DTL WHERE CARGO_REF_NO ='"+CARGO_REF_CD.elementAt(i)+"'"
							+ "ORDER BY SPLIT_SEQ ";
					//System.out.println("CARGO DOC. Details Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())	
					{
						VESSEL_NM.add(rset1.getString(1)==null?"":rset1.getString(1));
						BE_NO.add(rset1.getString(2)==null?"":rset1.getString(2));						
					}
					else
					{
						VESSEL_NM.add("");
						BE_NO.add("");
					}					
					queryString3 = "SELECT SHIP_FLAG,LOAD_PORT FROM FMS7_CARGO_NOMINATION WHERE CARGO_REF_CD ='"+CARGO_REF_CD.elementAt(i)+"' ";
					//System.out.println("CARGO Nomination. Details Query = "+queryString3);
					rset3 = stmt3.executeQuery(queryString3);
					if(rset3.next())	
					{
						SHIP_FLAG.add(rset3.getString(1)==null?"":rset3.getString(1));
						LOAD_PORT.add(rset3.getString(2)==null?"":rset3.getString(2));						
					}
					else
					{
						SHIP_FLAG.add("");
						LOAD_PORT.add("");
					}					
			 }			
		}
		catch(Exception e)
		{
			//System.out.println("EXCEPTION:Databean_Accounting --> get_Purchase_details() --> "+e.getMessage());
			e.printStackTrace();
		}
	}		
	
	//Seller for Purchase Accounting 
	public void get_Seller_Name()
	{
		try
		{	
			//System.out.println("Inside get_Seller_Name() "); 	
			queryString1 = "SELECT DISTINCT(B.TRADER_CD) FROM FMS7_TRADER_MST B WHERE B.FLAG='T' ORDER BY B.TRADER_CD";
			//System.out.println("CUSTOMER Distinct query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				TRADER_CD.add(rset1.getString(1)==null?"":rset1.getString(1));				
			}
			
			for(int i=0; i<TRADER_CD.size(); i++)
			{
				queryString = "SELECT TRADER_NAME,TRADER_ABBR FROM FMS7_TRADER_MST WHERE FLAG='T' AND TRADER_CD="+TRADER_CD.elementAt(i)+"";
				//System.out.println("TRADER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					TRADER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					TRADER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					TRADER_NAME.add("");
					TRADER_ABBR.add("");
				}
			}					
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_Seller_Name()-->"+e.getMessage());
			e.printStackTrace();
		}		
	}
	
	//Customer for Sales Accounting 
	public void get_Customer_Name()
	{
		try
		{	
			//System.out.println("Inside get_Customer_Name()");
			
			queryString1 = "SELECT DISTINCT(B.CUSTOMER_CD) FROM FMS7_CUSTOMER_MST B WHERE B.FLAG='T' ORDER BY B.CUSTOMER_CD";
			//System.out.println("CUSTOMER Distinct query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				CUSTOMER_CD.add(rset1.getString(1)==null?"":rset1.getString(1));				
			}
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE FLAG='T' AND CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				////System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_Customer_Name()-->"+e.getMessage());
			e.printStackTrace();
		}		
	}

	public void get_Customer_Details()
	{
		try
		{
			//System.out.println("Inside get_Customer_Details()");
			
			queryString1 = "SELECT DISTINCT(B.CUSTOMER_CD) FROM FMS7_CUSTOMER_MST B ORDER BY B.CUSTOMER_CD";
			//System.out.println("CUSTOMER Distinct query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				CUSTOMER_CD.add(rset1.getString(1)==null?"":rset1.getString(1));				
			}
			
			for(int i=0; i<CUSTOMER_CD.size(); i++)
			{
				queryString = "SELECT CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD="+CUSTOMER_CD.elementAt(i)+"";
				//System.out.println("CUSTOMER Master query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{			
					CUSTOMER_NAME.add(rset.getString(1)==null?"":rset.getString(1));
					CUSTOMER_ABBR.add(rset.getString(2)==null?"":rset.getString(2));
				}
				else
				{
					CUSTOMER_NAME.add("");
					CUSTOMER_ABBR.add("");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_Customer_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void show_Invoice_Tracking_Details()
	{
		try
		{
			if(customer_cd.trim().equalsIgnoreCase("0"))
			{
				customer_cd="%";
			}			
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.FGSA_NO,A.FGSA_REV_NO,A.PLANT_SEQ_NO,A.CONTRACT_TYPE, " +
						"A.EXCHG_RATE_CD,to_char(A.PERIOD_END_DT,'DD/MM/YYYY'),to_char(A.PERIOD_START_DT,'DD/MM/YYYY'), " +
						"A.HLPL_INV_SEQ_NO,A.CUST_INV_SEQ_NO,A.FINANCIAL_YEAR,to_char(A.INVOICE_DT,'DD/MM/YYYY'), " +
						"to_char(A.DUE_DT,'DD/MM/YYYY'),A.TOTAL_QTY,A.NET_AMT_INR,B.CUSTOMER_NAME,B.CUSTOMER_CD,B.CUSTOMER_ABBR, " +
						"A.CONTACT_PERSON_CD,A.EXCHG_RATE_TYPE FROM FMS7_INVOICE_MST A, FMS7_CUSTOMER_MST B " +
						"WHERE (A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD LIKE '"+customer_cd+"' AND  " +
						"A.PERIOD_START_DT>=to_date('"+invoice_from_date+"','dd/mm/yyyy') AND " +
						"A.PERIOD_END_DT<=to_date('"+invoice_to_date+"','dd/mm/yyyy') AND A.APPROVED_FLAG='Y' ";	
				//System.out.println("Select Invoice Detail Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					SN_NO.add(rset.getString(1)==null?"":rset.getString(1));
					SN_REV_NO.add(rset.getString(2)==null?"":rset.getString(2));
					FGSA_NO.add(rset.getString(3)==null?"":rset.getString(3));
					FGSA_REV_NO.add(rset.getString(4)==null?"":rset.getString(4));
					PLANT_SEQ_NO.add(rset.getString(5)==null?"":rset.getString(5));
					CONTRACT_TYPE.add(rset.getString(6)==null?"":rset.getString(6));
					EXCHG_RATE_CD.add(rset.getString(7)==null?"":rset.getString(7));
					PERIOD_END_DT.add(rset.getString(8)==null?"":rset.getString(8));
					PERIOD_START_DT.add(rset.getString(9)==null?"":rset.getString(9));
					HLPL_INV_SEQ_NO.add(rset.getString(10)==null?"":rset.getString(10));
					CUST_INV_SEQ_NO.add(rset.getString(11)==null?"":rset.getString(11));
					FINANCIAL_YEAR.add(rset.getString(12)==null?"":rset.getString(12));
					INVOICE_DT.add(rset.getString(13)==null?"":rset.getString(13));
					DUE_DT.add(rset.getString(14)==null?"":rset.getString(14));
					TOTAL_QTY.add(rset.getString(15)==null?"":rset.getString(15));
					NET_AMT_INR.add(rset.getString(16)==null?"":rset.getString(16));
					CUSTOMER_NAME2.add(rset.getString(17)==null?"":rset.getString(17));
					CUSTOMER_CD2.add(rset.getString(18)==null?"":rset.getString(18));
					CUSTOMER_ABBR2.add(rset.getString(19)==null?"":rset.getString(19));
					CONTACT_PERSON_CD.add(rset.getString(20)==null?"":rset.getString(20));
					EXCHG_RATE_TYPE.add(rset.getString(21)==null?"":rset.getString(21));
					//HLPL_INV_SEQ_NO_FINANCIAL_YEAR= ""+HLPL_INV_SEQ_NO+"/"+""+FINANCIAL_YEAR;
									
					String inv_seq_number = "";
					
					if(rset.getString(10)!=null && rset.getString(12)!=null)
					{
						int seq_no = Integer.parseInt(rset.getString(10));
						
						if(seq_no<10)
						{
							inv_seq_number = "000"+seq_no+"/"+rset.getString(12);
						}
						else if(seq_no<100)
						{
							inv_seq_number = "00"+seq_no+"/"+rset.getString(12);
						}
						else if(seq_no<1000)
						{
							inv_seq_number = "0"+seq_no+"/"+rset.getString(12);
						}
						else
						{
							inv_seq_number = ""+seq_no+"/"+rset.getString(12);
						}
					}
					else
					{
						inv_seq_number = "";
					}
					
					HLPL_INV_SEQ_NO_FINANCIAL_YEAR.add(inv_seq_number);
				}
			
				//System.out.println("Size of plant seq no========>"+PLANT_SEQ_NO.size()+"AND"+CUSTOMER_CD.size());
				
				for(int i=0; i<SN_NO.size(); i++)
				{
					queryString1 = "SELECT NVL(A.plant_name,' ') FROM FMS7_CUSTOMER_PLANT_DTL A " +
					   "WHERE A.customer_cd="+CUSTOMER_CD2.elementAt(i)+" AND A.seq_no="+PLANT_SEQ_NO.elementAt(i)+" " +
					   "AND A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_CUSTOMER_PLANT_DTL B " +
					   "WHERE A.customer_cd=B.customer_cd AND A.seq_no=B.seq_no " +
					   "AND B.eff_dt<=TO_DATE('"+PERIOD_START_DT.elementAt(i)+"','DD/MM/YYYY'))";
					//System.out.println("Customer Plant Name Fetch Query For RE-GAS = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						PLANT_NAME.add(rset1.getString(1));
					}
					else
					{
						PLANT_NAME.add(" ");
					}
				}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->show_Invoice_Tracking_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}

	
	public void get_Opening_Stock_Details()
	{
		try
		{
			String from_dt = "";
			String to_dt = "";
			String mon = "";
			String mnth = "";
			if(!month.trim().equals("0") && !month.trim().equals("") && month!=null)
			{											
				queryString = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING, REMARK FROM FMS7_OPENING_STOCK_DTLS " +
				  			  "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
			
				//System.out.println("Saved Select Opening Stock Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					op_bal_trading_saved = nf.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
					op_bal_regas_saved = nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2)));
					actual_tank_reading = nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3)));
				}
				
				int i = Integer.parseInt(month.trim()); 
				if(i<=10)
				{ 
					if(i==1)
					{
						mon="12";
						year=""+(Integer.parseInt(year.trim())-1);
					}
					else
					{
						mon = "0"+(i-1);
					}					
				}
				else
				{
					mon=""+(i-1);
				}
				
				queryString = "SELECT MONTH, OP_BAL_TRADING, OP_BAL_REGAS,ACTUAL_TANK_READING, REMARK FROM FMS7_OPENING_STOCK_DTLS " +
							  "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
						
				//System.out.println("Select Opening Stock Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					mnth = rset.getString(1)==null?"00":rset.getString(1);
					op_bal_trading = rset.getString(2)==null?"":rset.getString(2);
					op_bal_regas = rset.getString(3)==null?"":rset.getString(3);
					remark1 = rset.getString(5)==null?"":rset.getString(5);
					
					//System.out.println("mnth = "+mnth+",  year = "+year);
					//System.out.println("op_bal_trading = "+op_bal_trading);
					//System.out.println("op_bal_regas = "+op_bal_regas);
				}
				
				if(!mnth.trim().equals(""))
				{
					from_dt = "01/"+mnth+"/"+year;
					//System.out.println("Select from_dt Query = "+from_dt);			
					queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
					//System.out.println("Select from dual Query = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						to_dt=rset1.getString(1);
					}
					else
					{
						to_dt="28/"+mnth+"/"+year;
					}
								
					double trading_qty = 0;	
								
					queryString1 = "SELECT CARGO_REF_NO FROM FMS7_CARGO_ARRIVAL_DTL " +
								   "WHERE ACT_ARRV_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								   "to_date('"+to_dt+"','dd/mm/yyyy') AND SPLIT_SEQ='0'";
					//System.out.println("Select from FMS7_CARGO_ARRIVAL_DTL Query = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						queryString2 = "SELECT QTY_MMBTU FROM FMS7_CARGO_QQ_DTL WHERE CARGO_REF_NO='"+rset1.getString(1)+"'  AND SPLIT_SEQ='0'";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
								trading_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
						}
					}	
					
					//System.out.println("trading_qty = "+trading_qty);
					
					double sales_qty = 0;
								
					queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						           "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND " +
						           "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					               "to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}				
					
					double sales_regas_qty = 0;
					double regas_qty = 0;
					double re_gas_sug_qty = 0;
					sug_percent = "0";
					
					int temp_cust_cd = 0;
					int temp_re_gas_no = 0;
					int temp_cargo_seq_no = 0;
					
					queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
								   "FROM FMS7_DAILY_ALLOCATION_DTL " +
								   "WHERE CONTRACT_TYPE='R' AND " +
								   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
								   "to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						double temp_sales_regas_qty = 0;
						
						sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						temp_cust_cd = rset1.getInt(2);
						temp_re_gas_no = rset1.getInt(3);
						temp_cargo_seq_no = rset1.getInt(4);
						
						sug_percent = "0";
						
						queryString2 = "SELECT SYS_USE_GAS " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
									   "RE_GAS_NO="+temp_re_gas_no+" AND " +
									   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
						}
						
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
					}
					
					queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
								   "FROM FMS7_RE_GAS_CARGO_DTL " +
								   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								   "to_date('"+to_dt+"','dd/mm/yyyy')";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						/*double temp_sales_regas_qty = 0;
						
						queryString2 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
									   "to_date('"+to_dt+"','dd/mm/yyyy')) and " +
									   "CUSTOMER_CD="+temp_cust_cd+" and FGSA_NO="+temp_re_gas_no+" and " +
									   "SN_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
						}
						
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));*/
					}
					
					re_gas_sug_qty = Double.parseDouble(nf.format(re_gas_sug_qty));
					
					double sum = 0;
					int mnth_int = Integer.parseInt(mon);
					
					queryString1 = "SELECT MONTH,FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION, " +
							       "SUG,OTHER_CONSUMPTION,MASS_BALANCING,TOTAL_CONSUMPTION FROM " +
							       "FMS7_INTERNAL_CONSUMPTION WHERE YEAR='"+year+"' AND MONTH='"+mnth_int+"'";
					
					//System.out.println("Select Opening Stock Details Query from FMS7_INTERNAL_CONSUMPTION = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						//String mnth = rset.getString(1)==null?"00":rset.getString(1);					
						month = rset1.getString(1)==null?"0":rset1.getString(1);
						flaring = rset1.getString(2)==null?"0":rset1.getString(2);
						auxilary_consumption = rset1.getString(3)==null?"0":rset1.getString(3);
						scv_fuel_consumption = rset1.getString(4)==null?"0":rset1.getString(4);	
						sug = rset1.getString(5)==null?"0":rset1.getString(5);
						other_consumption = rset1.getString(6)==null?"0":rset1.getString(6);
						mass_balancing = rset1.getString(7)==null?"0":rset1.getString(7);
						
						sum = (Double.parseDouble(nf.format(Double.parseDouble(flaring)))
							  +Double.parseDouble(nf.format(Double.parseDouble(auxilary_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(scv_fuel_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(sug)))
							  +Double.parseDouble(nf.format(Double.parseDouble(other_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(mass_balancing))));
					}
										
					/*queryString1 = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK " +
								   "FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT=(SELECT MAX(B.EFF_DT) " +
								   "FROM FMS7_REGAS_SUG_PERCENT B WHERE " +
								   "B.EFF_DT<=TO_DATE('"+to_dt+"','DD/MM/YYYY'))";	
					//System.out.println("Query for SUG Details for Re-Gas Contracts = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
					}*/
					
					double tank_reading = 0;
										
					//System.out.println("re_gas_sug_qty = "+re_gas_sug_qty);
					
					if(!(op_bal_trading.trim().equals("0")) && !(op_bal_trading.trim().equals("")) && op_bal_trading.trim()!=null)
					{
						op_bal_trading = nf.format((Double.parseDouble(nf.format(Double.parseDouble(op_bal_trading))) + Double.parseDouble(nf.format(trading_qty))) - (Double.parseDouble(nf.format(sales_qty))+sum));
						tank_reading += Double.parseDouble(op_bal_trading);
					}
					else
					{
						op_bal_trading = "";
					}
					
					if(!(op_bal_regas.trim().equals("0")) && !(op_bal_regas.trim().equals("")) && op_bal_regas.trim()!=null)
					{
						op_bal_regas = nf.format((Double.parseDouble(nf.format(Double.parseDouble(op_bal_regas))) + Double.parseDouble(nf.format(regas_qty))) - (Double.parseDouble(nf.format(sales_regas_qty))+re_gas_sug_qty));
						tank_reading += Double.parseDouble(op_bal_regas);
					}
					else
					{
						op_bal_regas = "";
					}
					
					//actual_tank_reading = nf1.format(tank_reading);
				}
				
				if(op_bal_trading.trim().equals("") && op_bal_regas.trim().equals(""))
				{
					op_bal_trading = op_bal_trading_saved;
					op_bal_regas = op_bal_regas_saved;
				}
				
				if(!op_bal_trading_saved.trim().equals("") && !op_bal_trading_saved.trim().equals("0") && !op_bal_trading_saved.trim().equals("0.00"))
				{
					op_bal_trading = op_bal_trading_saved;
				}
				
				if(!op_bal_regas_saved.trim().equals("") && !op_bal_regas_saved.trim().equals("0") && !op_bal_regas_saved.trim().equals("0.00"))
				{
					op_bal_regas = op_bal_regas_saved;
				}
								
				//System.out.println("op_bal_trading = "+op_bal_trading);
				//System.out.println("op_bal_regas = "+op_bal_regas);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_Opening_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void get_Opening_Stock_Details_OLD()
	{
		try
		{
			String from_dt = "";
			String to_dt = "";
			String mon = "";
			String mnth = "";
			if(!month.trim().equals("0") && !month.trim().equals("") && month!=null)
			{											
				queryString = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING, REMARK FROM FMS7_OPENING_STOCK_DTLS " +
				  			  "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
			
				//System.out.println("Saved Select Opening Stock Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					op_bal_trading_saved = nf.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
					op_bal_regas_saved = nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2)));
					actual_tank_reading = nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3)));
				}
				
				int i = Integer.parseInt(month.trim()); 
				if(i<=10)
				{ 
					if(i==1)
					{
						mon="12";
						year=""+(Integer.parseInt(year.trim())-1);
					}
					else
					{
						mon = "0"+(i-1);
					}					
				}
				else
				{
					mon=""+(i-1);
				}
				
				queryString = "SELECT MONTH, OP_BAL_TRADING, OP_BAL_REGAS,ACTUAL_TANK_READING, REMARK FROM FMS7_OPENING_STOCK_DTLS " +
							  "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
						
				//System.out.println("Select Opening Stock Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					mnth = rset.getString(1)==null?"00":rset.getString(1);
					op_bal_trading = rset.getString(2)==null?"":rset.getString(2);
					op_bal_regas = rset.getString(3)==null?"":rset.getString(3);
					remark1 = rset.getString(5)==null?"":rset.getString(5);
					
					//System.out.println("mnth = "+mnth+",  year = "+year);
					//System.out.println("op_bal_trading = "+op_bal_trading);
					//System.out.println("op_bal_regas = "+op_bal_regas);
				}
				
				if(!mnth.trim().equals(""))
				{
					from_dt = "01/"+mnth+"/"+year;
					//System.out.println("Select from_dt Query = "+from_dt);			
					queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
					//System.out.println("Select from dual Query = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						to_dt=rset1.getString(1);
					}
					else
					{
						to_dt="28/"+mnth+"/"+year;
					}
								
					double trading_qty = 0;	
								
					queryString1 = "SELECT CARGO_REF_NO FROM FMS7_CARGO_ARRIVAL_DTL " +
								   "WHERE ACT_ARRV_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								   "to_date('"+to_dt+"','dd/mm/yyyy') AND SPLIT_SEQ='0'";
					//System.out.println("Select from FMS7_CARGO_ARRIVAL_DTL Query = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						queryString2 = "SELECT QTY_MMBTU FROM FMS7_CARGO_QQ_DTL WHERE CARGO_REF_NO='"+rset1.getString(1)+"'  AND SPLIT_SEQ='0'";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
								trading_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
						}
					}	
					
					//System.out.println("trading_qty = "+trading_qty);
					
					double sales_qty = 0;
								
					queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						           "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND " +
						           "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					               "to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}				
					
					double sales_regas_qty = 0;
					double regas_qty = 0;
					double re_gas_sug_qty = 0;
					sug_percent = "0";
					
					int temp_cust_cd = 0;
					int temp_re_gas_no = 0;
					int temp_cargo_seq_no = 0;
					
					queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
								   "FROM FMS7_DAILY_ALLOCATION_DTL " +
								   "WHERE CONTRACT_TYPE='R' AND " +
								   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
								   "to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						double temp_sales_regas_qty = 0;
						
						sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						temp_cust_cd = rset1.getInt(2);
						temp_re_gas_no = rset1.getInt(3);
						temp_cargo_seq_no = rset1.getInt(4);
						
						sug_percent = "0";
						
						queryString2 = "SELECT SYS_USE_GAS " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
									   "RE_GAS_NO="+temp_re_gas_no+" AND " +
									   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
						}
						
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
					}
					
					queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
								   "FROM FMS7_RE_GAS_CARGO_DTL " +
								   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								   "to_date('"+to_dt+"','dd/mm/yyyy')";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						/*double temp_sales_regas_qty = 0;
						
						queryString2 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
									   "to_date('"+to_dt+"','dd/mm/yyyy')) and " +
									   "CUSTOMER_CD="+temp_cust_cd+" and FGSA_NO="+temp_re_gas_no+" and " +
									   "SN_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
						}
						
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));*/
					}
					
					re_gas_sug_qty = Double.parseDouble(nf.format(re_gas_sug_qty));
					
					double sum = 0;
					int mnth_int = Integer.parseInt(mon);
					
					queryString1 = "SELECT MONTH,FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION, " +
							       "SUG,OTHER_CONSUMPTION,MASS_BALANCING,TOTAL_CONSUMPTION FROM " +
							       "FMS7_INTERNAL_CONSUMPTION WHERE YEAR='"+year+"' AND MONTH='"+mnth_int+"'";
					
					//System.out.println("Select Opening Stock Details Query from FMS7_INTERNAL_CONSUMPTION = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						//String mnth = rset.getString(1)==null?"00":rset.getString(1);					
						month = rset1.getString(1)==null?"0":rset1.getString(1);
						flaring = rset1.getString(2)==null?"0":rset1.getString(2);
						auxilary_consumption = rset1.getString(3)==null?"0":rset1.getString(3);
						scv_fuel_consumption = rset1.getString(4)==null?"0":rset1.getString(4);	
						sug = rset1.getString(5)==null?"0":rset1.getString(5);
						other_consumption = rset1.getString(6)==null?"0":rset1.getString(6);
						mass_balancing = rset1.getString(7)==null?"0":rset1.getString(7);
						
						sum = (Double.parseDouble(nf.format(Double.parseDouble(flaring)))
							  +Double.parseDouble(nf.format(Double.parseDouble(auxilary_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(scv_fuel_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(sug)))
							  +Double.parseDouble(nf.format(Double.parseDouble(other_consumption)))
							  +Double.parseDouble(nf.format(Double.parseDouble(mass_balancing))));
					}
										
					/*queryString1 = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK " +
								   "FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT=(SELECT MAX(B.EFF_DT) " +
								   "FROM FMS7_REGAS_SUG_PERCENT B WHERE " +
								   "B.EFF_DT<=TO_DATE('"+to_dt+"','DD/MM/YYYY'))";	
					//System.out.println("Query for SUG Details for Re-Gas Contracts = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
					}*/
					
					double tank_reading = 0;
										
					//System.out.println("re_gas_sug_qty = "+re_gas_sug_qty);
					
					if(!(op_bal_trading.trim().equals("0")) && !(op_bal_trading.trim().equals("")) && op_bal_trading.trim()!=null)
					{
						op_bal_trading = nf.format((Double.parseDouble(nf.format(Double.parseDouble(op_bal_trading))) + Double.parseDouble(nf.format(trading_qty))) - (Double.parseDouble(nf.format(sales_qty))+sum));
						tank_reading += Double.parseDouble(op_bal_trading);
					}
					else
					{
						op_bal_trading = "";
					}
					
					if(!(op_bal_regas.trim().equals("0")) && !(op_bal_regas.trim().equals("")) && op_bal_regas.trim()!=null)
					{
						op_bal_regas = nf.format((Double.parseDouble(nf.format(Double.parseDouble(op_bal_regas))) + Double.parseDouble(nf.format(regas_qty))) - (Double.parseDouble(nf.format(sales_regas_qty))+re_gas_sug_qty));
						tank_reading += Double.parseDouble(op_bal_regas);
					}
					else
					{
						op_bal_regas = "";
					}
					
					//actual_tank_reading = nf1.format(tank_reading);
				}
				
				if(op_bal_trading.trim().equals("") && op_bal_regas.trim().equals(""))
				{
					op_bal_trading = op_bal_trading_saved;
					op_bal_regas = op_bal_regas_saved;
				}
				
				if(!op_bal_trading_saved.trim().equals("") && !op_bal_trading_saved.trim().equals("0") && !op_bal_trading_saved.trim().equals("0.00"))
				{
					op_bal_trading = op_bal_trading_saved;
				}
				
				if(!op_bal_regas_saved.trim().equals("") && !op_bal_regas_saved.trim().equals("0") && !op_bal_regas_saved.trim().equals("0.00"))
				{
					op_bal_regas = op_bal_regas_saved;
				}
								
				//System.out.println("op_bal_trading = "+op_bal_trading);
				//System.out.println("op_bal_regas = "+op_bal_regas);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_Opening_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void get_SUG_Percentage()
	{
		try
		{
				queryString = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT>=(SELECT MAX(B.EFF_DT) FROM FMS7_REGAS_SUG_PERCENT B ) ";	
				//System.out.println("Select Opening Stock Details Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					eff_date = rset.getString(1)==null?"":rset.getString(1);
					sug_percent = rset.getString(2)==null?"":rset.getString(2);
					remark2 = rset.getString(3)==null?"":rset.getString(3);
				}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->get_SUG_Percentage()-->"+e.getMessage());
			e.printStackTrace();
		}
	}	
	
	
	public void fetch_Stock_Details()
	{
		
		try
		{	
			double sum_opening_trading = 0;
			double sum_opening_regas = 0;
			double sum_opening_total = 0;
			
			double sum_receipt_trading = 0;
			double sum_receipt_regas = 0;
			double sum_sales_qty = 0;
			double sum_sales_regas = 0;
			
			double sum_re_gas_sug_qty = 0;
			
			double sum_flaring = 0;
			double sum_auxiliary= 0;
			double sum_scv = 0;
			double sum_sug = 0;					
			double sum_other = 0;
			double sum_mass= 0;
			double sum_consumption = 0;
			double sum_check = 0;
			double closing_total = 0;
			double sum_regas_sug_per = 0;
			
			//System.out.println("month = "+month);
			//System.out.println("to_month = "+to_month);
			String from_dt = "";
			String to_dt = "";
			String mon = "";
			String mon1="";
			String frm_dt="";
//			JHPstart
			String frm_dt1="";
			String t_dt="";
			
			frm_dt = "01/"+month+"/"+year;
			frm_dt1 = "01/"+to_month+"/"+to_year;
			queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+frm_dt1+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				t_dt=rset1.getString(1);
			}
			//System.out.println(frm_dt+"----------------------"+t_dt);
			
			//queryString1 = "SELECT distinct(CUSTOMER_CD) " +
			//   "FROM FMS7_RE_GAS_CARGO_DTL " +
			//   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+frm_dt+"','dd/mm/yyyy') and to_date('"+t_dt+"','dd/mm/yyyy')";
			
			queryString1 = "SELECT distinct(CUSTOMER_CD) " +
			   "FROM FMS7_RE_GAS_CARGO_DTL " +
			   "WHERE ACTUAL_RECPT_DT <= to_date('"+t_dt+"','dd/mm/yyyy')";
			
			//queryString1 = "SELECT distinct(CUSTOMER_CD) " +
			//   "FROM FMS7_RE_GAS_CARGO_DTL ";
			
			//System.out.println("query001:::"+queryString1);
				rset1 = stmt1.executeQuery(queryString1);
			  while(rset1.next())
			  {
				  custm_cd.add(rset1.getString(1));
							  
			  }
			  for(int l=0;l<custm_cd.size();l++)
			  {
			  queryString1 = "select customer_abbr from fms7_customer_mst where customer_cd='"+custm_cd.elementAt(l)+"'  ";
			  rset1 = stmt1.executeQuery(queryString1);
			  if(rset1.next())
				  {
					cust_nm.add(rset1.getString(1));  
					  
				  }
			  }
			  
			  String t1=month+"/"+year;
			  String t2=to_month+"/"+to_year;
			  String count="";
			  queryString="SELECT MONTHS_BETWEEN(to_date('"+t2+"','mm/yyyy'),to_date('"+t1+"','mm/yyyy')) FROM Dual";
			  //System.out.println("query002:::"+queryString);
			  rset= stmt1.executeQuery(queryString);
			  if(rset.next())
			  {
				  count=(Integer.parseInt(rset.getString(1))+1)+"";  
			  }
			  //System.out.println(count);
			  REGAS_QTY1=new Vector[Integer.parseInt(count)];
			  SALES_REGAS_QTY1=new Vector[Integer.parseInt(count)];
			  REGAS_SUG_QTY1=new Vector[Integer.parseInt(count)];
			  REGAS_OPENING=new Vector[Integer.parseInt(count)];
			  REGAS_CLOSING=new Vector[Integer.parseInt(count)];
			//JHPEnd
			
			  
			  
			boolean flag=false;
			if(!year.trim().equalsIgnoreCase(to_year))
			{
				flag=true;
			}
			
			if(!(month.trim().equals("0")) && month.trim()!=null && !(to_month.trim().equals("0")) && to_month.trim()!=null )
			{
			  for(int j=Integer.parseInt(year.trim()),y=0; j<=Integer.parseInt(to_year.trim()); j++)
			  {
				  if(flag)
				  {
					if(j==Integer.parseInt(to_year.trim()))
					{
						month="01";
						mon1=to_month;
					}
					else
					{
						mon1="12";
					}
				  }
				  else
				  {
					  mon1=to_month;
				  }
				       
				for(int i=Integer.parseInt(month.trim()); i<=Integer.parseInt(mon1.trim()); i++,y++)
				{
					if(i<10)
					{
						mon = "0"+i;
					}
					else
					{
						mon = ""+i;
					}
					REGAS_QTY1[y]=new Vector();//JHP
					SALES_REGAS_QTY1[y]=new Vector();//JHP
					REGAS_SUG_QTY1[y]=new Vector();//JHP
					REGAS_OPENING[y]=new Vector();//JHP
					REGAS_CLOSING[y]=new Vector();//JHP
					
					
					
					
					
					queryString = "SELECT MONTH,OP_BAL_TRADING,OP_BAL_REGAS,YEAR FROM FMS7_OPENING_STOCK_DTLS " +
						          "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
					
				//	//System.out.println("Select Opening Stock Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						double temp_opening=0;//JHP
						//System.out.println("Select Opening Stock Details INNER Query = "+queryString);
						double sum = 0;
						Vector TOTAL1 = new Vector();
						String mnth = rset.getString(1)==null?"00":rset.getString(1);
						String bl_trd= rset.getString(2)==null?"0":rset.getString(2);
						String bl_re= rset.getString(3)==null?"0":rset.getString(3);
						
						MONTH.add(rset.getString(1)==null?"":rset.getString(1));
						YEAR.add(rset.getString(4)==null?"":rset.getString(4)); //JHP20120416
						OP_BAL_TRADING.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
						sum_opening_trading += Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
						OP_BAL_REGAS.add(nf3.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						temp_opening=(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3)));
						sum_opening_regas += Double.parseDouble(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						if(!bl_trd.trim().equals("") && !bl_re.trim().equals(""))
						{
							sum = (Double.parseDouble(nf.format(Double.parseDouble(bl_trd))) + Double.parseDouble(nf.format(Double.parseDouble(bl_re))));
							TOTAL.add(nf3.format(sum));
							TOTAL1.add(nf.format(sum));
						}
						else
						{
							TOTAL.add("-");
							TOTAL1.add("0");
						}
						
						sum_opening_total += Double.parseDouble(nf.format(sum));
						//Sum_opening_trading = nf5.format(sum_opening_trading);
						//Sum_opening_regas = nf5.format(sum_opening_regas);
						//Sum_opening_total = nf5.format(sum_opening_total);
						Sum_opening_trading = ""+OP_BAL_TRADING.elementAt(0);
						Sum_opening_regas = ""+OP_BAL_REGAS.elementAt(0);
						Sum_opening_total = ""+TOTAL.elementAt(0);
						sum_opening_total = Double.parseDouble(nf.format(Double.parseDouble(""+TOTAL1.elementAt(0))));
						
						from_dt = "01/"+mnth+"/"+year;
						
						queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							to_dt=rset1.getString(1);
						}
						else
						{
							to_dt="28/"+mnth+"/"+year;
						}
						
						/*queryString1 = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK " +
									   "FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT=(SELECT MAX(B.EFF_DT) " +
									   "FROM FMS7_REGAS_SUG_PERCENT B WHERE " +
									   "B.EFF_DT<=TO_DATE('"+to_dt+"','DD/MM/YYYY'))";	
						//System.out.println("Query for SUG Details for Re-Gas Contracts = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
						}*/
						
									
						double trading_qty = 0;	
						
						queryString1 = "SELECT CARGO_REF_NO FROM FMS7_CARGO_ARRIVAL_DTL " +
								       "WHERE ACT_ARRV_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0'";
						rset1=stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							queryString2 = "SELECT QTY_MMBTU FROM FMS7_CARGO_QQ_DTL WHERE CARGO_REF_NO='"+rset1.getString(1)+"'  AND SPLIT_SEQ='0'";
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								trading_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							}
						}	
						
						if(trading_qty>0)
						{
							TRADING_QTY.add(nf3.format(trading_qty));
						}
						else
						{
							TRADING_QTY.add("-");
						}
						//System.out.println("trading_qty = "+trading_qty);
						
						/*double regas_qty = 0;
						
						queryString1 = "SELECT SUM(ADQ_QTY) FROM FMS7_RE_GAS_CARGO_DTL " +
								       "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}*/				
						
						////System.out.println("regas_qty = "+regas_qty);
						
						sum_receipt_trading += Double.parseDouble(nf.format(trading_qty));
						Sum_receipt_trading = nf3.format(sum_receipt_trading);
												
						double sales_qty = 0;
						
						queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
								       "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND " +
								       "GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}				
						if(sales_qty>0)
						{
							SALES_QTY.add(nf3.format(sales_qty));
						}
						else
						{
							SALES_QTY.add("-");
						}						
						
						/*double sales_regas_qty = 0;
						
						queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
								       "WHERE CONTRACT_TYPE='R' AND " +
								       "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy'))";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}*/
//JHP007
						double sales_regas_qty = 0;
						double regas_qty = 0;
						double re_gas_sug_qty = 0;
						sug_percent = "0";
						
						int temp_cust_cd = 0;
						int temp_re_gas_no = 0;
						int temp_cargo_seq_no = 0;
						
						
						double tot_regas_temp=0;
				for(int k=0;k<custm_cd.size();k++)
				{
						double temp_sales_regas_qty1=0;//JHP
						double temp_re_gas_sug_qty=0;//JHP
						queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
									   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
									   "FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
									   "to_date('"+to_dt+"','dd/mm/yyyy')) and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
						rset1 = stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							double temp_sales_regas_qty = 0;
							
							sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							temp_sales_regas_qty1+= Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));//JHP
							
							temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							
							temp_cust_cd = rset1.getInt(2);
							temp_re_gas_no = rset1.getInt(3);
							temp_cargo_seq_no = rset1.getInt(4);
							
							sug_percent = "0";
							
							queryString2 = "SELECT SYS_USE_GAS " +
										   "FROM FMS7_RE_GAS_CARGO_DTL " +
										   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
										   "RE_GAS_NO="+temp_re_gas_no+" AND " +
										   "CARGO_SEQ_NO="+temp_cargo_seq_no+" and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
							}
							
							re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
							temp_re_gas_sug_qty+=Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						}
						
						
						//System.out.println("y:"+y);
						
						
					
						double temp_regas=0;
						queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
									   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
									   "to_date('"+to_dt+"','dd/mm/yyyy') and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
						////System.out.println("query007:::"+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							temp_regas += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							/*double temp_sales_regas_qty = 0;
							
							queryString2 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
										   "WHERE CONTRACT_TYPE='R' AND " +
										   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
										   "to_date('"+to_dt+"','dd/mm/yyyy')) and " +
										   "CUSTOMER_CD="+temp_cust_cd+" and FGSA_NO="+temp_re_gas_no+" and " +
										   "SN_NO="+temp_cargo_seq_no+"";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							}
							
							sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
							re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));*/
						}
						tot_regas_temp+=temp_regas;
						REGAS_QTY1[y].add(nf.format(temp_regas));
						SALES_REGAS_QTY1[y].add(nf.format(temp_sales_regas_qty1));
						REGAS_SUG_QTY1[y].add(nf.format(temp_re_gas_sug_qty));
						
						queryString = "SELECT OP_BAL_REGAS,CL_BAL_REGAS FROM FMS7_OPENING_STOCK_REGAS_CUST " +
				          "WHERE YEAR='"+year+"' AND MONTH='"+mon+"' AND CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{
						REGAS_OPENING[y].add(rset1.getString(1));
						REGAS_CLOSING[y].add(rset1.getString(2));
						}
						else
						{
						REGAS_OPENING[y].add("0");
						REGAS_CLOSING[y].add("0");	
						}
						
		//JHP S				
   /* String month_int1;
	double temp_opening1=0;	
	String year1="";
						if(Integer.parseInt(mon)==12)
						{
							month_int1 = "01";
							year1 = ""+(Integer.parseInt(year)+1);
						}
						else
						{
							month_int1 = ""+(Integer.parseInt(mon)+1);
							year1 = ""+(Integer.parseInt(year));
							if(Integer.parseInt(month_int1)<=9)
							{
								month_int1 = "0"+month_int1;
							}
						}
				//JHPStart		
						queryString1 = "SELECT OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
				          			   "WHERE YEAR='"+year1+"' AND MONTH='"+month_int1+"'";
			
						//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_opening1 = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}
						else
						{
							temp_opening1=0;
						}
							////System.out.println("query007:::"+REGAS_QTY1[y-1].elementAt(k).toString());
							//if(!REGAS_QTY1[y-1].elementAt(k).toString().trim().equalsIgnoreCase("0.00"))
							if(temp_regas>0)
							{
							
							double temp=0;
							//double temp=temp_opening+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
							for(int q=1;q<custm_cd.size();q++)
							{
							if(k-q>=0)
								{
									if(!REGAS_CLOSING[y].elementAt(k-q).toString().equalsIgnoreCase("-"))
									{
										
										if(!REGAS_CLOSING[y].elementAt(k-q).toString().equalsIgnoreCase("0.00"))
										{
									//	//System.out.println(temp_opening1+"----"+REGAS_CLOSING[y].elementAt(k-q));	
							       temp=temp_opening1-Double.parseDouble(REGAS_CLOSING[y].elementAt(k-q).toString());
							           }
										
									}
									
								}
								else if(k-q<0)
								{
			
									if(y-1>=0)
									{
										//System.out.println(REGAS_CLOSING[y-1].elementAt(k)+"----"+temp_regas);	
										if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("-"))
										{
											if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("0.00")  )
											{
										temp=Double.parseDouble(REGAS_CLOSING[y-1].elementAt(k).toString().toString())+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
										//System.out.println("temp::"+temp);
											}
											else
											{
												temp=Double.parseDouble(REGAS_CLOSING[y-1].elementAt(k).toString().toString())+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;		
											}
										}
										else
										{
											temp=temp_opening+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;	
										}
									}else
									{
										temp=temp_opening+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
									} 
									
									
							      //  temp=temp_opening+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
									
								}
							}
							REGAS_CLOSING[y].add(nf.format(temp)+"");	
							
							}
							else
							{
								double temp1=0;
								if(y-1>=0)
								{
									if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("-"))
									{
										if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("0.00")  )
										{
									temp1=Double.parseDouble(REGAS_CLOSING[y-1].elementAt(k).toString().toString())+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
										}
									}
									else
									{
										temp1=0+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;	
									}
								}else
								{
									temp1=0+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
								}
							REGAS_CLOSING[y].add(nf.format(temp1));	
							}
							
							if(y-1>=0)
							{
								if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("0.00")  )
								{
									if(!REGAS_CLOSING[y-1].elementAt(k).toString().trim().equalsIgnoreCase("-"))
									{
										REGAS_OPENING[y].add(nf.format(Double.parseDouble(REGAS_CLOSING[y-1].elementAt(k).toString()))+"");
									}
									
									else
									{
										REGAS_OPENING[y].add("0");	
									}
								}
								else
								{
										REGAS_OPENING[y].add("0");
										
								}
							}
							else
							{
								if(k-1<0)
								{
										REGAS_OPENING[y].add(temp_opening);	
								}
								else
								{
										REGAS_OPENING[y].add("0");
								}

							}*/
					//JHP E				
					//JHPEnd
							
						    
						
					}
						re_gas_sug_qty = Double.parseDouble(nf.format(re_gas_sug_qty));
						sum_re_gas_sug_qty += re_gas_sug_qty;
						
						if(regas_qty>0)
						{
							REGAS_QTY.add(nf3.format(regas_qty));
						}
						else
						{
							REGAS_QTY.add("-");
						}
						
						sum_receipt_regas += Double.parseDouble(nf.format(regas_qty));
						Sum_receipt_regas = nf3.format(sum_receipt_regas);
						
						if(sales_regas_qty>0)
						{
							SALES_REGAS_QTY.add(nf3.format(sales_regas_qty));
						}
						else
						{
							SALES_REGAS_QTY.add("-");
						}
						
						sum_sales_qty += Double.parseDouble(nf.format(sales_qty));
						sum_sales_regas += Double.parseDouble(nf.format(sales_regas_qty));
						Sum_sales_qty = nf3.format(sum_sales_qty);
						Sum_sales_regas = nf3.format(sum_sales_regas);						
						//Sum_sales_qty		Sum_sales_regas		
						//System.out.println("sales_regas_qty = "+sales_regas_qty+",  sug_percent = "+sug_percent);
						
						
						if(re_gas_sug_qty>0)
						{
							REGAS_SUG_QTY.add(nf3.format(re_gas_sug_qty));
						}
						else
						{
							REGAS_SUG_QTY.add("-");
						}
						
						double flaring = 0;
						double auxiliary_consumption = 0;
						double scv_fuel_consumption = 0;
						double sug = 0;					
						double other_consumption = 0;
						double mass_balancing = 0;
												
						int mnth_int = Integer.parseInt(mnth);
						queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
								       "WHERE YEAR='"+year+"' AND MONTH ='"+mnth_int+"'";
						//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
							scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
							sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
							other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
							mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
						}				
						if(flaring>0)
						{
							FLARING.add(nf3.format(flaring));
						}
						else
						{
							FLARING.add("-");
						}
						if(auxiliary_consumption>0)
						{
							AUXILIARY_CONSUMPTION.add(nf3.format(auxiliary_consumption));
						}
						else
						{
							AUXILIARY_CONSUMPTION.add("-");
						}
						if(scv_fuel_consumption>0)
						{
							SCV_FUEL_CONSUMPTION.add(nf3.format(scv_fuel_consumption));
						}
						else
						{
							SCV_FUEL_CONSUMPTION.add("-");
						}
						if(sug>0)
						{
							SUG.add(nf3.format(sug));
						}
						else
						{
							SUG.add("-");
						}
						if(other_consumption>0)
						{
							OTHER_CONSUMPTION.add(nf3.format(other_consumption));
						}
						else
						{
							OTHER_CONSUMPTION.add("-");
						}
						if(mass_balancing!=0)
						{
							MASS_BALANCING.add(nf3.format(mass_balancing));
						}
						else
						{
							MASS_BALANCING.add("-");
						}
						//iNTRODUCE BY MILAN MD20110920
						double consumption_regas_sug_percnt = 0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_regas_sug_percnt = (Double.parseDouble(nf.format(re_gas_sug_qty))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_REGAS_SUG.add(nf.format(consumption_regas_sug_percnt)+"%");
						}
						else
						{
							CONSUMPTION_REGAS_SUG.add("0.00"+"%");
						}
						
						double consumption_percent = 0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_percent = (Double.parseDouble(nf.format(mass_balancing))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_UNACCOUNTED_LOSS.add(nf.format(consumption_percent)+"%");
						}
						else
						{
							CONSUMPTION_UNACCOUNTED_LOSS.add("0.00"+"%");
						}
						
						double consumption_flare =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_flare = (Double.parseDouble(nf.format(flaring))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_FLARE.add(nf.format(consumption_flare)+"%");
						}
						else
						{
							CONSUMPTION_FLARE.add("0.00"+"%");
						}
						
						double consumption_scv_fuel =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_scv_fuel = (Double.parseDouble(nf.format(scv_fuel_consumption))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_SCV_FUEL.add(nf.format(consumption_scv_fuel)+"%");
						}
						else
						{
							CONSUMPTION_SCV_FUEL.add("0.00"+"%");
						}
						
						double consumption_power_fuel =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_power_fuel = (Double.parseDouble(nf.format(auxiliary_consumption))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_POWER_FUEL.add(nf.format(consumption_power_fuel)+"%");
						}
						else
						{
							CONSUMPTION_POWER_FUEL.add("0.00"+"%");
						}
						
						sum_flaring += Double.parseDouble(nf.format(flaring));
						sum_auxiliary += Double.parseDouble(nf.format(auxiliary_consumption));						
						sum_scv += Double.parseDouble(nf.format(scv_fuel_consumption));
						sum_sug += Double.parseDouble(nf.format(sug));
						sum_other += Double.parseDouble(nf.format(other_consumption));
						sum_mass += Double.parseDouble(nf.format(mass_balancing));
						
						//sum_regas_sug_per+=consumption_regas_sug_percnt;
						//Sum_Regas_sug_per = nf3.format(sum_regas_sug_per);
						
						Sum_flaring = nf3.format(sum_flaring);
						Sum_auxiliary = nf3.format(sum_auxiliary);
						Sum_scv = nf3.format(sum_scv);
						Sum_sug = nf3.format(sum_sug);
						Sum_other = nf3.format(sum_other);
						Sum_mass = nf3.format(sum_mass);
						Sum_consumption = nf3.format(sum_consumption);
						Sum_re_gas_sug_qty = nf3.format(sum_re_gas_sug_qty);
												
						double closing_bal_trading = 0 ;
						double closing_bal_regas = 0;
						double total=0;
						String month_int;
						
						if(Integer.parseInt(mon)==12)
						{
							month_int = "01";
							year = ""+(Integer.parseInt(year)+1);
						}
						else
						{
							month_int = ""+(Integer.parseInt(mon)+1);
							if(Integer.parseInt(month_int)<=9)
							{
								month_int = "0"+month_int;
							}
						}
						
						queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
				          			   "WHERE YEAR='"+year+"' AND MONTH='"+month_int+"'";
			
						//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							closing_bal_trading = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							closing_bal_regas = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
						}
						if(closing_bal_trading>0)
						{
							CLOSING_BAL_TRADING.add(nf3.format(closing_bal_trading)); 
						}
						else
						{
							CLOSING_BAL_TRADING.add("-");
						}
						if(closing_bal_regas>0)
						{
							CLOSING_BAL_REGAS.add(nf3.format(closing_bal_regas)); 
						}
						else
						{
							CLOSING_BAL_REGAS.add("-");
						}
						Vector CLOSING_TOTAL1 = new Vector();
						if(closing_bal_regas!=0 && closing_bal_trading!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_trading))+Double.parseDouble(nf.format(closing_bal_regas));
							CLOSING_TOTAL.add(nf3.format(total)); 
							CLOSING_TOTAL1.add(nf.format(total));
						}
						else if(closing_bal_regas!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_regas));
							CLOSING_TOTAL.add(nf3.format(total)); 
							CLOSING_TOTAL1.add(nf.format(total));
						}
						else if(closing_bal_trading!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_trading));
							CLOSING_TOTAL.add(nf3.format(total)); 
							CLOSING_TOTAL1.add(nf.format(total));
						}
						else
						{
							CLOSING_TOTAL.add("-");
							CLOSING_TOTAL1.add("0");
						}
						
						Closing_trading = ""+CLOSING_BAL_TRADING.elementAt((CLOSING_BAL_TRADING.size())-1);
						Closing_regas = ""+CLOSING_BAL_REGAS.elementAt((CLOSING_BAL_REGAS.size())-1);
						Closing_total = ""+CLOSING_TOTAL.elementAt((CLOSING_TOTAL.size())-1);
						closing_total = Double.parseDouble(nf.format(Double.parseDouble(""+CLOSING_TOTAL1.elementAt((CLOSING_TOTAL1.size())-1))));
						
						double check =0 ;
						
						check = (Double.parseDouble(nf.format(sum))
								+Double.parseDouble(nf.format(trading_qty))
								+Double.parseDouble(nf.format(regas_qty))) 
								- 
								(Double.parseDouble(nf.format(sales_qty))
								+Double.parseDouble(nf.format(sales_regas_qty))
								+Double.parseDouble(nf.format(flaring))
								+Double.parseDouble(nf.format(auxiliary_consumption))
								+Double.parseDouble(nf.format(scv_fuel_consumption))
								+Double.parseDouble(nf.format(sug))
								+Double.parseDouble(nf.format(other_consumption))
								+Double.parseDouble(nf.format(mass_balancing))
								//+Double.parseDouble(nf.format(re_gas_sug_qty))
								+Double.parseDouble(nf.format(closing_bal_trading))
								+Double.parseDouble(nf.format(closing_bal_regas)));
						
						//System.out.println("check = "+check);
						
						if(check>=0)
						{
							CHECK.add(nf3.format(check));
							CHECK_PURCHASES.add("-");	
							CHECK_SALES.add("-");
							sum_check += Double.parseDouble(nf.format(check));
						}
						else
						{
							check = check * -1;
							CHECK.add(nf3.format(check));
							CHECK_SALES.add("-");
							CHECK_PURCHASES.add("-");
							sum_check += Double.parseDouble(nf.format(check));
						}
					}
					else
					{
					//	SALES_QTY; 
					//	SALES_REGAS_QTY; 
					//	REGAS_SUG_QTY;
						
						REGAS_SUG_QTY.add("-");
						TRADING_QTY.add("-");
						REGAS_QTY.add("-");
						MONTH.add(""+mon);
						YEAR.add(""+j); //JHP20120416
						for(int m=0;m<custm_cd.size();m++)
						{
						REGAS_QTY1[y].add("-");
						SALES_REGAS_QTY1[y].add("-");
						REGAS_SUG_QTY1[y].add("-");
						REGAS_OPENING[y].add("-");
						REGAS_CLOSING[y].add("-");
						}
						OP_BAL_TRADING.add("-");
						OP_BAL_REGAS.add("-");
						TOTAL.add("-");
						SALES_QTY.add("-");
						SALES_REGAS_QTY.add("-");
						FLARING.add("");
						AUXILIARY_CONSUMPTION.add("-");
						SCV_FUEL_CONSUMPTION.add("-");
						SUG.add("-");
						OTHER_CONSUMPTION.add("-");
						MASS_BALANCING.add("-");						
						CLOSING_BAL_TRADING.add("-");
						CLOSING_BAL_REGAS.add("-");
						CLOSING_TOTAL.add("0");
						CONSUMPTION_FLARE.add("0.00"+"%");
						CONSUMPTION_SCV_FUEL.add("0.00"+"%");
						CONSUMPTION_POWER_FUEL.add("0.00"+"%");
						CONSUMPTION_UNACCOUNTED_LOSS.add("0.00"+"%");
						CONSUMPTION_REGAS_SUG.add("0.00"+"%");
						CHECK.add("-");
						CHECK_PURCHASES.add("-");
						CHECK_SALES.add("-");
					}
				}
				
			  }
			}
			else if(!(year.trim().equalsIgnoreCase("0")) && !(year.trim().equalsIgnoreCase("")) && year!=null)
			{
				for(int i=1; i<=12; i++)
				{
					if(i<10)
					{
						mon = "0"+i;
					}
					else
					{
						mon=""+i;
					}
					queryString = "SELECT MONTH, OP_BAL_TRADING, OP_BAL_REGAS,YEAR FROM FMS7_OPENING_STOCK_DTLS " +
						          "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
					
					//System.out.println("Select Opening Stock Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						//System.out.println("Select Opening Stock Details INNER Query = "+queryString);
						double sum = 0;
						String mnth = rset.getString(1)==null?"00":rset.getString(1);
						String bl_trd= rset.getString(2)==null?"0":rset.getString(2);
						String bl_re= rset.getString(3)==null?"0":rset.getString(3);
						
						MONTH.add(rset.getString(1)==null?"":rset.getString(1));
						YEAR.add(rset.getString(4)==null?"":rset.getString(4)); //JHP20120416
						OP_BAL_TRADING.add(nf3.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
						sum_opening_trading += Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
						OP_BAL_REGAS.add(nf3.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						sum_opening_regas += Double.parseDouble(nf.format(Double.parseDouble(rset.getString(3)==null?"0":rset.getString(3))));
						if(!bl_trd.trim().equals("") && !bl_re.trim().equals(""))
						{
							sum = (Double.parseDouble(nf.format(Double.parseDouble(bl_trd))) + Double.parseDouble(nf.format(Double.parseDouble(bl_re))));
							TOTAL.add(nf3.format(sum));
						}
						else
						{
							TOTAL.add("-");
						}
						
						Sum_opening_trading = ""+OP_BAL_TRADING.elementAt(0);
						Sum_opening_regas = ""+OP_BAL_REGAS.elementAt(0);
						Sum_opening_total = ""+TOTAL.elementAt(0);
												
						from_dt = "01/"+mnth+"/"+year;
						
						queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
						
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							to_dt=rset1.getString(1);
						}
						else
						{
							to_dt="28/"+mnth+"/"+year;
						}
						
						sug_percent = "0";
						queryString1 = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK " +
									   "FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT=(SELECT MAX(B.EFF_DT) " +
									   "FROM FMS7_REGAS_SUG_PERCENT B WHERE " +
									   "B.EFF_DT<=TO_DATE('"+to_dt+"','DD/MM/YYYY'))";	
						//System.out.println("Query for SUG Details for Re-Gas Contracts = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
						}
						
						
						double trading_qty = 0;	
						
						queryString1 = "SELECT CARGO_REF_NO FROM FMS7_CARGO_ARRIVAL_DTL " +
								       "WHERE ACT_ARRV_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0'";
						rset1=stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							queryString2 = "SELECT QTY_MMBTU FROM FMS7_CARGO_QQ_DTL WHERE CARGO_REF_NO='"+rset1.getString(1)+"'  AND SPLIT_SEQ='0' ";
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								trading_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							}
						}
						if(trading_qty>0)
						{
							TRADING_QTY.add(nf3.format(trading_qty));
						}
						else
						{
							TRADING_QTY.add("-");
						}
						//System.out.println("trading_qty = "+trading_qty);
						
						double sales_regas_qty = 0;
						double regas_qty = 0;
						double re_gas_sug_qty = 0;
						sug_percent = "0";
						
						int temp_cust_cd = 0;
						int temp_re_gas_no = 0;
						int temp_cargo_seq_no = 0;
						
						queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
									   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
									   "to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1 = stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							
							temp_cust_cd = rset1.getInt(3);
							temp_re_gas_no = rset1.getInt(4);
							temp_cargo_seq_no = rset1.getInt(5);
							
							double temp_sales_regas_qty = 0;
							
							queryString2 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
										   "WHERE CONTRACT_TYPE='R' AND " +
										   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
										   "to_date('"+to_dt+"','dd/mm/yyyy')) and " +
										   "CUSTOMER_CD="+temp_cust_cd+" and FGSA_NO="+temp_re_gas_no+" and " +
										   "SN_NO="+temp_cargo_seq_no+"";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							}
							
							sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
							re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						}
						
						re_gas_sug_qty = Double.parseDouble(nf.format(re_gas_sug_qty));
						sum_re_gas_sug_qty += re_gas_sug_qty;
						
						/*queryString1 = "SELECT SUM(ADQ_QTY) FROM FMS7_RE_GAS_CARGO_DTL " +
					                   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					                   "to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}*/
						
						if(regas_qty>0)
						{
							REGAS_QTY.add(nf3.format(regas_qty));
						}
						else
						{
							REGAS_QTY.add("-");
						}
						//System.out.println("regas_qty = "+regas_qty);	
						sum_receipt_trading += Double.parseDouble(nf.format(trading_qty));
						sum_receipt_regas += Double.parseDouble(nf.format(regas_qty));
						Sum_receipt_trading = nf3.format(sum_receipt_trading);
						Sum_receipt_regas = nf3.format(sum_receipt_regas);
						
						double sales_qty = 0;
						
						queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL WHERE (CONTRACT_TYPE='S' " +
								       "OR CONTRACT_TYPE='L') AND GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') " +
								       "and to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}				
						if(sales_qty>0)
						{
							SALES_QTY.add(nf3.format(sales_qty));
						}
						else
						{
							SALES_QTY.add("-");
						}						

						
						
						/*queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
								       "WHERE CONTRACT_TYPE='R' AND GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								       "to_date('"+to_dt+"','dd/mm/yyyy')";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						}*/
						
						if(sales_regas_qty>0)
						{
							SALES_REGAS_QTY.add(nf3.format(sales_regas_qty));
						}
						else
						{
							SALES_REGAS_QTY.add("-");
						}
						
						sum_sales_qty += Double.parseDouble(nf.format(sales_qty));
						sum_sales_regas += Double.parseDouble(nf.format(sales_regas_qty));
						
						Sum_sales_qty = nf3.format(sum_sales_qty);
						Sum_sales_regas = nf3.format(sum_sales_regas);
						
						/*double re_gas_sug_qty = Double.parseDouble(nf.format((Double.parseDouble(nf.format(sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						sum_re_gas_sug_qty += re_gas_sug_qty;*/
						
						if(re_gas_sug_qty>0)
						{
							REGAS_SUG_QTY.add(nf3.format(re_gas_sug_qty));
						}
						else
						{
							REGAS_SUG_QTY.add("-");
						}
						
						double flaring = 0;
						double auxiliary_consumption = 0;
						double scv_fuel_consumption = 0;
						double sug = 0;					
						double other_consumption = 0;
						double mass_balancing = 0;
												
						int mnth_int = Integer.parseInt(mnth);
						
						queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
								       "WHERE YEAR='"+year+"' AND MONTH ='"+mnth_int+"'";
						//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
							scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
							sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
							other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
							mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
						}				
						if(flaring>0)
						{
							FLARING.add(nf3.format(flaring));
						}
						else
						{
							FLARING.add("-");
						}
						if(auxiliary_consumption>0)
						{
							AUXILIARY_CONSUMPTION.add(nf3.format(auxiliary_consumption));
						}
						else
						{
							AUXILIARY_CONSUMPTION.add("-");
						}
						if(scv_fuel_consumption>0)
						{
							SCV_FUEL_CONSUMPTION.add(nf3.format(scv_fuel_consumption));
						}
						else
						{
							SCV_FUEL_CONSUMPTION.add("-");
						}
						if(sug>0)
						{
							SUG.add(nf3.format(sug));
						}
						else
						{
							SUG.add("-");
						}
						if(other_consumption>0)
						{
							OTHER_CONSUMPTION.add(nf3.format(other_consumption));
						}
						else
						{
							OTHER_CONSUMPTION.add("-");
						}		
						if(mass_balancing>0)
						{
							MASS_BALANCING.add(nf3.format(mass_balancing));
						}
						else
						{
							MASS_BALANCING.add("-");
						}
						
						double consumption_percent = 0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_percent = (Double.parseDouble(nf.format(mass_balancing))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_UNACCOUNTED_LOSS.add(nf.format(consumption_percent)+"%");
						}
						else
						{
							CONSUMPTION_UNACCOUNTED_LOSS.add("0.00"+"%");
						}
						
						double consumption_flare =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_flare = (Double.parseDouble(nf.format(flaring))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_FLARE.add(nf.format(consumption_flare)+"%");
						}
						else
						{
							CONSUMPTION_FLARE.add("0.00"+"%");
						}
						
						double consumption_scv_fuel =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_scv_fuel = (Double.parseDouble(nf.format(scv_fuel_consumption))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_SCV_FUEL.add(nf.format(consumption_scv_fuel)+"%");
						}
						else
						{
							CONSUMPTION_SCV_FUEL.add("0.00"+"%");
						}
						
						double consumption_power_fuel =0;
						if((sales_regas_qty+sales_qty)!=0)
						{
							consumption_power_fuel = (Double.parseDouble(nf.format(auxiliary_consumption))/(Double.parseDouble(nf.format(sales_qty))+Double.parseDouble(nf.format(sales_regas_qty))))*100;
							CONSUMPTION_POWER_FUEL.add(nf.format(consumption_power_fuel)+"%");
						}
						else
						{
							CONSUMPTION_POWER_FUEL.add("0.00"+"%");
						}
						
						sum_flaring += Double.parseDouble(nf.format(flaring));
						sum_auxiliary += Double.parseDouble(nf.format(auxiliary_consumption));						
						sum_scv += Double.parseDouble(nf.format(scv_fuel_consumption));
						sum_sug += Double.parseDouble(nf.format(sug));
						sum_other += Double.parseDouble(nf.format(other_consumption));
						sum_mass += Double.parseDouble(nf.format(mass_balancing));
						
						Sum_flaring = nf3.format(sum_flaring);
						Sum_auxiliary = nf3.format(sum_auxiliary);
						Sum_scv = nf3.format(sum_scv);
						Sum_sug = nf3.format(sum_sug);
						Sum_other = nf3.format(sum_other);
						Sum_mass = nf3.format(sum_mass);
						Sum_consumption = nf3.format(sum_consumption);
						Sum_re_gas_sug_qty = nf3.format(sum_re_gas_sug_qty);
						
						double closing_bal_trading = 0 ;
						double closing_bal_regas = 0;
						double total= 0;
						String month_int;
						if(Integer.parseInt(mon)==12)
						{
							month_int = "01";
							year = ""+(Integer.parseInt(year)+1);
						}
						else
						{
							month_int = ""+(Integer.parseInt(mon)+1);
							
							if(Integer.parseInt(month_int)<=9)
							{
								month_int = "0"+month_int;
							}
						}
						
						queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
				          			   "WHERE YEAR='"+year+"' AND MONTH='"+month_int+"'";
			
						//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							closing_bal_trading = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							closing_bal_regas = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
						}
						if(closing_bal_trading>0)
						{
							CLOSING_BAL_TRADING.add(nf3.format(closing_bal_trading)); 
						}
						else
						{
							CLOSING_BAL_TRADING.add("-");
						}
						if(closing_bal_regas>0)
						{
							CLOSING_BAL_REGAS.add(nf3.format(closing_bal_regas)); 
						}
						else
						{
							CLOSING_BAL_REGAS.add("-");
						}
						
						if(closing_bal_regas!=0 && closing_bal_trading!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_trading))+Double.parseDouble(nf.format(closing_bal_regas));
							CLOSING_TOTAL.add(nf3.format(total));
						}
						else if(closing_bal_regas!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_regas));
							CLOSING_TOTAL.add(nf3.format(total));
						}
						else if(closing_bal_trading!=0)
						{
							total = Double.parseDouble(nf.format(closing_bal_trading));
							CLOSING_TOTAL.add(nf3.format(total));
						}
						else
						{
							CLOSING_TOTAL.add("-");
						}
						
						Closing_trading = ""+CLOSING_BAL_TRADING.elementAt((CLOSING_BAL_TRADING.size())-1);
						Closing_regas = ""+CLOSING_BAL_REGAS.elementAt((CLOSING_BAL_REGAS.size())-1);
						Closing_total = ""+CLOSING_TOTAL.elementAt((CLOSING_TOTAL.size())-1);
						closing_total = total;
												
						double check =0 ;
						
						check = (Double.parseDouble(nf.format(sum))
								+Double.parseDouble(nf.format(trading_qty))
								+Double.parseDouble(nf.format(regas_qty))) 
								- 
								(Double.parseDouble(nf.format(sales_qty))
								+Double.parseDouble(nf.format(sales_regas_qty))
								+Double.parseDouble(nf.format(flaring))
								+Double.parseDouble(nf.format(auxiliary_consumption))
								+Double.parseDouble(nf.format(scv_fuel_consumption))
								+Double.parseDouble(nf.format(sug))
								+Double.parseDouble(nf.format(other_consumption))
								+Double.parseDouble(nf.format(mass_balancing))
								+Double.parseDouble(nf.format(re_gas_sug_qty))
								+Double.parseDouble(nf.format(closing_bal_trading))
								+Double.parseDouble(nf.format(closing_bal_regas)));
						
						//System.out.println("check = "+check);
						
						if(check>=0)
						{
							CHECK.add(nf3.format(check));
							CHECK_PURCHASES.add("-");	
							CHECK_SALES.add("-");
							sum_check += Double.parseDouble(nf.format(check));
						}
						else
						{
							check = check * -1;
							CHECK.add(nf3.format(check));
							CHECK_SALES.add("-");
							CHECK_PURCHASES.add("-");
							sum_check += Double.parseDouble(nf.format(check));
						}
					}
					else
					{
						REGAS_SUG_QTY.add("-");
						TRADING_QTY.add("-");
						REGAS_QTY.add("-");
						MONTH.add(""+mon);
						YEAR.add(""+i); //JHP20120416
						OP_BAL_TRADING.add("-");
						OP_BAL_REGAS.add("-");
						TOTAL.add("-");
						SALES_QTY.add("-");
						SALES_REGAS_QTY.add("-");
						FLARING.add("-");
						AUXILIARY_CONSUMPTION.add("-");
						SCV_FUEL_CONSUMPTION.add("-");
						SUG.add("-");
						OTHER_CONSUMPTION.add("-");
						MASS_BALANCING.add("-");						
						CLOSING_BAL_TRADING.add("-");
						CLOSING_BAL_REGAS.add("-");
						CLOSING_TOTAL.add("0");
						CONSUMPTION_FLARE.add("0.00"+"%");
						CONSUMPTION_SCV_FUEL.add("0.00"+"%");
						CONSUMPTION_POWER_FUEL.add("0.00"+"%");
						CONSUMPTION_UNACCOUNTED_LOSS.add("0.00"+"%");
						CHECK.add("-");
						CHECK_PURCHASES.add("-");
						CHECK_SALES.add("-");
					}
				}
			}
			
			Sum_check = nf3.format(sum_check);
			
			double sum_flare_percent = 0;
			if((sum_sales_qty+sum_sales_regas)!=0)
			{
				sum_flare_percent = (sum_flaring/(sum_sales_qty+sum_sales_regas))*100;
			}
			else
			{
				sum_flare_percent = 0.00;
			}
			Sum_flare_percent = nf.format(sum_flare_percent)+"%";
			
			double sum_scv_percent = 0;
			if((sum_sales_qty+sum_sales_regas)!=0)
			{
				sum_scv_percent = (sum_scv/(sum_sales_qty+sum_sales_regas))*100;
			}
			else
			{
				sum_scv_percent = 0.00;
			}
			Sum_scv_percent = nf.format(sum_scv_percent)+"%";
			
			double sum_power_percent = 0;
			if((sum_sales_qty+sum_sales_regas)!=0)
			{
				sum_power_percent = (sum_auxiliary/(sum_sales_qty+sum_sales_regas))*100;
			}
			else
			{
				sum_power_percent = 0.00;
			}
			Sum_power_percent = nf.format(sum_power_percent)+"%";
			
			double sum_loss_percent = 0;
			if((sum_sales_qty+sum_sales_regas)!=0)
			{
				sum_loss_percent = (sum_mass/(sum_sales_qty+sum_sales_regas))*100;
			}
			else
			{
				sum_loss_percent = 0.00;
			}
			Sum_loss_percent = nf.format(sum_loss_percent)+"%";
			
			//Introduce By Milan MD20110920
			double sum_regas_sug__percent = 0;
			if((sum_sales_qty+sum_sales_regas)!=0)
			{
				sum_regas_sug__percent = (sum_re_gas_sug_qty/(sum_sales_qty+sum_sales_regas))*100;
			}
			else
			{
				sum_regas_sug__percent = 0.00;
			}
			Sum_Regas_sug_per = nf.format(sum_regas_sug__percent)+"%";
			//System.out.println("TEst of per regas sug : "+Sum_Regas_sug_per);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	
	}
	Vector DLNG_SN_REF_NO=new Vector();
	Vector DLNG_TCQ_ZERO_REV_tmp=new Vector();
	Vector DLNG_TCQ_APP_DT_MAX_REV=new Vector();
	Vector DLNG_CURR_YR_SUPPLY=new Vector();
	Vector DLNG_SN_SUMRY_CUSTOMER_NAME=new Vector();
	Vector DLNG_PREV_YR_SUPPLY=new Vector();
	Vector DLNG_TCQ_ZERO_REV=new Vector();
	Vector DLNG_QTY=new Vector();
	Vector DLNG_SALE_USD=new Vector(); 
	
	public void fetch_SN_Details_DLNG()
	{
		try
		{
			/*Vector TCQ_ZERO_REV = new Vector();
			Vector TCQ_APP_DT_MAX_REV = new Vector();*/
			
			Vector TCQ_tmp = new Vector();
			Vector TCQ_ZERO_REV_tmp = new Vector();  
			Vector SN_REF_NO = new Vector();
			
			double tcq_max_rev = 0;
			double tcq_zero_rev = 0;
			String tcq_app_dt_max_rev ="";
			
			from_dt = "01/"+month+"/"+year;
			
			String to_dt_mnth = "01/"+to_month+"/"+year;
			
			String from_dt_curr = "01/"+"01/"+year;
			String to_dt_curr = "31/"+"12/"+year;
			String sys_dt="";
			prev_yr= ""+(Integer.parseInt(year)-1);
			//String prev_from_dt = "01/"+"01"+"/"+prev_yr;
			//String prev_to_dt = "31/"+"12"+"/"+prev_yr;
			//System.out.println(">>>>>>>>>> MD "+to_dt_mnth );
			queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+to_dt_mnth+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				to_dt=rset1.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			queryString1 = "SELECT to_char(sysdate,'DD/MM/YYYY') from dual";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				sys_dt=rset1.getString(1);
			}
			
			if(customer_cd.equals("") || customer_cd.equals("0"))
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FLSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
						"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FLSA_REV_NO," +
						"A.SN_REMARK " +
						" , to_char(A.tcq_approval_dt , 'dd/mm/yyyy')," +  //MD20111228
						"  TO_DATE(A.START_DT,'dd/mm/yyyy'), TO_DATE(A.END_DT,'dd/mm/yyyy'), sn_ref_no "+ //MD20111228	
						"FROM DLNG_SN_MST A " +
						"WHERE ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
						"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM DLNG_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FLSA_NO=A.FLSA_NO " +
						"AND B.CUSTOMER_CD=A.CUSTOMER_CD " +
						//" AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT " +
						" AND A.FLSA_REV_NO=B.FLSA_REV_NO)" +
						" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";	
				
			}
			else
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FLSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
				"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FLSA_REV_NO," +
				"A.SN_REMARK " +
				" , to_char(A.tcq_approval_dt , 'dd/mm/yyyy')," +//MD20111228
				"  TO_DATE(A.START_DT,'dd/mm/yyyy'), TO_DATE(A.END_DT,'dd/mm/yyyy'), sn_ref_no  "+ //MD20111228	
				" FROM DLNG_SN_MST A " +
				"WHERE A.CUSTOMER_CD = '"+customer_cd+"'and ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
				"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM DLNG_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FLSA_NO=A.FLSA_NO " +
				"AND B.CUSTOMER_CD=A.CUSTOMER_CD " +
				//" AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT " +
				" AND A.FLSA_REV_NO=B.FLSA_REV_NO)" +
				" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";
				
			}
			System.out.println("Select Query for FMS7_SN_MST MAX REV = "+queryString);
			rset=stmt.executeQuery(queryString);
			int m =0;
			while(rset.next())
			{
				//System.out.println("Miiiiiiiilan "+(++m));
				DLNG_SN_NO.add(rset.getString(1)==null?"":rset.getString(1));
				DLNG_SN_REV_NO.add(rset.getString(2)==null?"":rset.getString(2));
				DLNG_SN_SUMRY_CUSTOMER_CD.add(rset.getString(3)==null?"":rset.getString(3));
				DLNG_FGSA_NO.add(rset.getString(4)==null?"":rset.getString(4));
				//START_DT.add(rset.getString(5)==null?"":rset.getString(5));
				//END_DT.add(rset.getString(6)==null?"":rset.getString(6));
				DLNG_SN_SIGNING_DT.add(rset.getString(7)==null?"":rset.getString(7));
				//TCQ.add(rset.getString(8)==null?"":rset.getString(8));
				//DLNG_RATE.add(rset.getString(9)==null?"":nf4.format(Double.parseDouble(rset.getString(9))));
				DLNG_FGSA_REV_NO.add(rset.getString(10)==null?"":rset.getString(10));
				String t=rset.getString(11)==null?"":rset.getString(11);
				if(t.trim().equals("1"))
				{DLNG_REMARK.add("Reasonable Endeavor");}
				else if(t.trim().equals("2"))
				{DLNG_REMARK.add("Amendment in Contract");}
				else if(t.trim().equals("3"))
				{DLNG_REMARK.add("Force Majeure");}
				else if(t.trim().equals("4"))
				{DLNG_REMARK.add("Others");}
				else if(t.trim().equals("0") || t.trim().equals(""))
				{DLNG_REMARK.add("");}
				
				DLNG_SN_REF_NO.add(rset.getString(15)==null?"":rset.getString(15));
				//MD20111228

				//FOR DATE AMMENDMENT AND AMMENDMENT OF TCQ START
				
				queryString1 = "SELECT TO_DATE(A.START_DT,'dd/mm/yyyy'), " +
				"TO_DATE(A.END_DT,'dd/mm/yyyy'),A.TCQ," +
				" TO_CHAR(A.START_DT,'dd/mm/yyyy'), TO_CHAR(A.END_DT,'dd/mm/yyyy'), A.CUSTOMER_CD, A.SN_NO" +
				" FROM DLNG_SN_MST A " +
				"WHERE  A.CUSTOMER_CD = '"+(rset.getString(3)==null?"0":rset.getString(3))+"' " +
				//" and A.START_DT = TO_DATE('"+(rset.getString(5)==null?"":rset.getString(5))+"','dd/mm/yyyy') " +
				//" AND A.END_DT = TO_DATE('"+(rset.getString(6)==null?"":rset.getString(6))+"','dd/mm/yyyy') " +
				" AND A.SN_NO = '"+(rset.getString(1)==null?"":rset.getString(1))+"' " +
				" AND A.FLSA_NO = '"+(rset.getString(4)==null?"":rset.getString(4))+"' " +
				" AND A.FLSA_REV_NO = '"+(rset.getString(10)==null?"":rset.getString(10))+"' " +
				"AND A.SN_REV_NO = '0' " +
				" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";	
				
				//System.out.println("Select Query for FMS7_SN_MST ZERO REV = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				
				if(rset1.next())
				{
					//FOR ZERO REVISION AND AMMENDMENT OF TCQ
					tcq_max_rev = rset.getDouble(8) == 0 ? 0:rset.getDouble(8);
					tcq_app_dt_max_rev = rset.getString(12) == null ? "-" :rset.getString(12);
					
					tcq_zero_rev = rset1.getDouble(3)== 0 ? 0:rset1.getDouble(3);
					
					if(tcq_max_rev != tcq_zero_rev)
					{
						DLNG_TCQ.add(rset.getString(8)==null?"-":rset.getString(8));
						TCQ_tmp.add(rset.getString(8)==null?"0":rset.getString(8));
						if(!tcq_app_dt_max_rev.trim().equals("-"))
						{
							DLNG_TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
						}
						else
						{
							boolean flg = false;
							queryString2 = "SELECT TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
							"TO_CHAR(A.END_DT,'dd/mm/yyyy'),A.TCQ, to_char(A.tcq_approval_dt , 'dd/mm/yyyy')" +
							" FROM DLNG_SN_MST A " +
							"WHERE  A.CUSTOMER_CD = '"+(rset.getString(3)==null?"0":rset.getString(3))+"' and " +
							"A.SN_NO = '"+(rset.getString(1)==null?"0":rset.getString(1))+"' and " +
							"A.flsa_no = '"+(rset.getString(4)==null?"0":rset.getString(4))+"' and A.flsa_rev_no = '"+(rset.getString(10)==null?"0":rset.getString(10))+"' " +
							" order by SN_REV_NO DESC";
							
							//System.out.println("TCQ AMMENDMENT ALL REV "+queryString2);
							rset2 = stmt2.executeQuery(queryString2);
							 
							while(rset2.next())
							{
								tcq_app_dt_max_rev = rset2.getString(4)==null?"-":rset2.getString(4);
								if(!tcq_app_dt_max_rev.trim().equals("-"))
								{
									
									DLNG_TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
									flg = true;
									break;
								}
	 						}
							
							if(!flg)
							{DLNG_TCQ_APP_DT_MAX_REV.add("-");
							}
						}
					}
					else
					{
						DLNG_TCQ.add("-");
						TCQ_tmp.add("0");
						
						DLNG_TCQ_APP_DT_MAX_REV.add("-");
					}
					
					DLNG_TCQ_ZERO_REV.add(rset1.getString(3)==null?"-":rset1.getString(3));
					DLNG_TCQ_ZERO_REV_tmp.add(rset1.getString(3)==null?"0":rset1.getString(3));
					
//					FOR ZERO REVISION AND AMMENDMENT OF TCQ END
										
					/*Date st_dt = rset.getDate(13);
					Date end_dt = rset.getDate(14);
					Date st_dt_z_rv = rset1.getDate(1);
					Date end_dt_z_rv = rset1.getDate(2);*/

					//FOR DATE AMMENDMENT START
					Date dt_tmp1 = new Date("01/01/1801");
					Date dt_tmp2 = new Date("01/11/1801");
					
					//System.out.println(dt_tmp1+" ==== "+dt_tmp2);
					Date st_dt = rset.getDate(13) == null? dt_tmp2 : rset.getDate(13);
					Date end_dt = rset.getDate(14) == null? dt_tmp2 : rset.getDate(14);
					Date st_dt_z_rv = rset1.getDate(1) == null?  dt_tmp1 : rset1.getDate(1);
					Date end_dt_z_rv = rset1.getDate(2) == null?  dt_tmp1 : rset1.getDate(2);
					
					//System.out.println(st_dt);
					//System.out.println(st_dt_z_rv);
					//System.out.println(end_dt);
					//System.out.println(end_dt_z_rv);
					
					//0 = equal, < 0 st_dt_z_rv < st_dt, > 0 st_dt_z_rv > st_dt,  
					if(st_dt_z_rv.compareTo(st_dt)!=0)
					{
						//System.out.println("S IF");
						DLNG_START_DT.add(rset.getString(5)==null?"-":rset.getString(5));
						DLNG_START_DT_ZR_RV.add(rset1.getString(4)==null?"-":rset1.getString(4));
					}
					else
					{
						//System.out.println("S ESLE");
						DLNG_START_DT_ZR_RV.add(rset1.getString(4)==null?"-":rset1.getString(4));
						DLNG_START_DT.add("-");
						
					}
					
					if(end_dt_z_rv.compareTo(end_dt)!=0)
					{
						//System.out.println("E IF");
						DLNG_END_DT.add(rset.getString(6)==null?"-":rset.getString(6));
						DLNG_END_DT_ZR_RV.add(rset1.getString(5)==null?"-":rset1.getString(5));
					}
					else
					{
						//System.out.println("E ELSE");
						DLNG_END_DT.add("-");
						DLNG_END_DT_ZR_RV.add(rset1.getString(5)==null?"-":rset1.getString(5));
						
					}
					
					//FOR DATE AMMENDMENT END
				}
				else
				{
					DLNG_END_DT.add(rset.getString(6)==null?"-":rset.getString(6));
					DLNG_START_DT.add(rset.getString(5)==null?"-":rset.getString(5));
					DLNG_END_DT_ZR_RV.add("-");
					DLNG_START_DT_ZR_RV.add("-");
					
					DLNG_TCQ_ZERO_REV.add("-");
					DLNG_TCQ_ZERO_REV_tmp.add("0");
					
					DLNG_TCQ.add(rset.getString(8)==null?"-":rset.getString(8));
					TCQ_tmp.add(rset.getString(8)==null?"0":rset.getString(8));
					
					DLNG_TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
					
					
				}
	
//				FOR DATE AMMENDMENT AND AMMENDMENT OF TCQ END
				String invoice_Sales_Rate="";
				double var_sales_rate = 0; double ori_sale_price = 0;  
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM DLNG_CARGO_ALLOC_REVISED_DTL WHERE FLSA_NO='"+(rset.getString(4)==null?"0":rset.getString(4))+"' AND SN_NO='"+(rset.getString(1)==null?"0":rset.getString(1))+"' "
						  + " AND  CUSTOMER_CD='"+(rset.getString(3)==null?"0":rset.getString(3))+"' AND FLAG='A' AND MODIFICATION_SEQ_NO = (SELECT MAX(MODIFICATION_SEQ_NO) FROM DLNG_CARGO_ALLOC_REVISED_DTL WHERE FLSA_NO='"+(rset.getString(4)==null?"0":rset.getString(4))+"' AND SN_NO='"+(rset.getString(1)==null?"0":rset.getString(1))+"' "
						  + " AND  CUSTOMER_CD='"+(rset.getString(3)==null?"0":rset.getString(3))+"' AND FLAG='A' AND NEW_PRICE_EFF_DT <=TO_DATE('"+sys_dt+"','DD/MM/YYYY'))"
						  + " AND NEW_PRICE_EFF_DT <=TO_DATE('"+sys_dt+"','DD/MM/YYYY')";
				//System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset1 = stmt1.executeQuery(queryString);
				if(rset1.next())
				{
					var_sales_rate = rset1.getDouble(1);
					ori_sale_price =  rset1.getDouble(2);
					invoice_Sales_Rate =""+var_sales_rate; 
				}
				if(var_sales_rate==0) //SB20200327
				{
				queryString = "SELECT DISTINCT NEW_SALE_PRICE, ORI_SALE_PRICE FROM DLNG_CARGO_ALLOC_REVISED_DTL WHERE FLSA_NO='"+(rset.getString(4)==null?"0":rset.getString(4))+"' AND SN_NO='"+(rset.getString(1)==null?"0":rset.getString(1))+"' "
						  + "AND  CUSTOMER_CD='"+(rset.getString(3)==null?"0":rset.getString(3))+"' AND FLAG='A' ";
//				System.out.println("QRY-01: Variable Sales Rate: "+queryString);
				rset1 = stmt1.executeQuery(queryString);
				if(rset1.next())
				{
					var_sales_rate = rset1.getDouble(1);
					ori_sale_price =  rset1.getDouble(2);
					invoice_Sales_Rate =""+var_sales_rate; //SB20200327
				}
				}
				if(var_sales_rate==0) 
				{
				
					queryString = "SELECT NVL(rate,'0') FROM DLNG_SN_MST " +
								  "WHERE customer_cd='"+(rset.getString(3)==null?"0":rset.getString(3))+"' AND flsa_no='"+(rset.getString(4)==null?"0":rset.getString(4))+"' AND " +
								  "flsa_rev_no='"+(rset.getString(10)==null?"0":rset.getString(10))+"' AND sn_no='"+(rset.getString(1)==null?"0":rset.getString(1))+"' AND " +
								  "sn_rev_no='"+(rset.getString(2)==null?"0":rset.getString(2))+"'";
					
			//		////System.out.println("Query For Fetching Sales Price Rate For Invoicing From FMS7_SN_MST Table = "+queryString);
					
					rset1 = stmt1.executeQuery(queryString);
					if(rset1.next())
					{
						invoice_Sales_Rate = nf2.format(Double.parseDouble(rset1.getString(1)));					
					}
				}
				DLNG_RATE.add(invoice_Sales_Rate);
			}
			System.out.println("SN_REF_NO---"+DLNG_SN_REF_NO.size()+"----"+DLNG_SN_NO.size());
			//double tcq = Double.parseDouble(""+TCQ); 
			Vector TEMP_PREV_YR = new Vector();
			Vector TEMP_CURR_YR = new Vector();
			for(int i=0; i<DLNG_SN_NO.size(); i++)
			{
				queryString1="SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+DLNG_SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' ";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					DLNG_SN_SUMRY_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
				}
				else
				{
					DLNG_SN_SUMRY_CUSTOMER_NAME.add("");
				}					
				////System.out.println("prev_from_dt = "+prev_from_dt);
				////System.out.println("prev_to_dt = "+prev_to_dt);				
				
				double prev_yr_supply = 0;
				double curr_yr_supply = 0;
				////System.out.println("for  "+SN_SUMRY_CUSTOMER_NAME.elementAt(i));
//				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT<TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
//						      "AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
//						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' " +
//						      " and (contract_type = 'S' or contract_type = 's') ";	//MD20111230	
				String mappid=DLNG_SN_SUMRY_CUSTOMER_CD.elementAt(i)+"-"+DLNG_FGSA_NO.elementAt(i)+"-"+DLNG_FGSA_REV_NO.elementAt(i)+"-"+DLNG_SN_NO.elementAt(i)+"-"+DLNG_SN_REV_NO.elementAt(i);
				queryString = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
							  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='S' AND " +
							  "ALLOC_DT<TO_DATE('"+from_dt_curr+"','DD/MM/YYYY') AND MAPPING_ID='"+mappid+"'";
				//System.out.println("Select Query for Prevoius Year FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					prev_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					DLNG_PREV_YR_SUPPLY.add(rset.getString(1)==null?"-":(nf.format(Double.parseDouble(rset.getString(1)))));
					TEMP_PREV_YR.add(nf.format(prev_yr_supply));
				}
				else
				{
					DLNG_PREV_YR_SUPPLY.add("-");
					TEMP_PREV_YR.add("");
				}	
				
//				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT>=TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
//						      "AND A.GAS_DT<=TO_DATE('"+to_dt+"','dd/mm/yyyy') AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
//						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' " +
//						      " and (contract_type = 'S' or contract_type = 's') ";	//MD20111230			
				queryString = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
						  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='S' AND " +
						  "ALLOC_DT>=TO_DATE('"+from_dt_curr+"','DD/MM/YYYY') AND ALLOC_DT<=TO_DATE('"+to_dt+"','dd/mm/yyyy') AND MAPPING_ID='"+mappid+"'";
				//System.out.println("Select Query for Year Till Date (YTD SUPPLY)  FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					curr_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					DLNG_CURR_YR_SUPPLY.add(rset.getString(1)==null?"-":nf.format(Double.parseDouble(rset.getString(1))));
					TEMP_CURR_YR.add(nf.format(curr_yr_supply));
				}
				else
				{
					DLNG_CURR_YR_SUPPLY.add("-");
					TEMP_CURR_YR.add("");
				}
				
//				MD20111228
				System.out.println("SN_REF_NO.elementAt(i)---"+DLNG_SN_REF_NO.elementAt(i));
				if(!DLNG_SN_REF_NO.elementAt(i).toString().trim().equals(""))
				{
					DLNG_SN_NO.setElementAt(DLNG_SN_REF_NO.elementAt(i).toString().trim(), i);
				}
//				MD20111228
			}
			
			System.out.println("SN_REF_NO.elementAt(i)---"+DLNG_TCQ_ZERO_REV_tmp.size()+"--DLNG_TCQ--"+DLNG_TCQ.size());
			System.out.println("TEMP_PREV_YR.elementAt(i)---"+TEMP_PREV_YR.size()+"--TEMP_CURR_YR--"+TEMP_CURR_YR.size());
//			MD20111228
			//FOR ZERO REVISION AND REMAINING SUPPLY
			String Stcq_amm = "";
			
			for(int i=0; i<DLNG_TCQ_ZERO_REV_tmp.size(); i++)
			{
				System.out.println("SN_REF_NO.elementAt(i)-in this for--"+TCQ_tmp.size());
				Stcq_amm = ""+DLNG_TCQ.elementAt(i);
				if(!Stcq_amm.trim().equals("-"))
				{
					if(Double.parseDouble(""+TCQ_tmp.elementAt(i)) >= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						DLNG_REMAINING_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ_tmp.elementAt(i))- (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))));
						DLNG_EXCESS_SUPPLY.add("-");
					}
					else if(Double.parseDouble(""+TCQ_tmp.elementAt(i)) <= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						DLNG_EXCESS_SUPPLY.add(nf.format((Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))-Double.parseDouble(""+TCQ_tmp.elementAt(i))));
						DLNG_REMAINING_SUPPLY.add("-");
					}
					else
					{
						DLNG_EXCESS_SUPPLY.add("");
						DLNG_REMAINING_SUPPLY.add("");
					}
				}
				else
				{
					if(Double.parseDouble(""+DLNG_TCQ_ZERO_REV_tmp.elementAt(i)) >= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						DLNG_REMAINING_SUPPLY.add(nf.format(Double.parseDouble(""+DLNG_TCQ_ZERO_REV_tmp.elementAt(i))- (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))));
						DLNG_EXCESS_SUPPLY.add("-");
					}
					else if(Double.parseDouble(""+DLNG_TCQ_ZERO_REV_tmp.elementAt(i)) <= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						DLNG_EXCESS_SUPPLY.add(nf.format((Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))-Double.parseDouble(""+DLNG_TCQ_ZERO_REV_tmp.elementAt(i))));
						DLNG_REMAINING_SUPPLY.add("-");
					}
					else
					{
						DLNG_EXCESS_SUPPLY.add("");
						DLNG_REMAINING_SUPPLY.add("");
					}
				}
			}
//			MD20111228
			//FOR ZERO REVISION AND REMAINING SUPPLY
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_Details()"+e);
			e.printStackTrace();
		}		
	}
	public void fetch_SN_Details()
	{

		try
		{
			/*Vector TCQ_ZERO_REV = new Vector();
			Vector TCQ_APP_DT_MAX_REV = new Vector();*/
			
			Vector TCQ_tmp = new Vector();
			Vector TCQ_ZERO_REV_tmp = new Vector();  
			Vector SN_REF_NO = new Vector();
			
			double tcq_max_rev = 0;
			double tcq_zero_rev = 0;
			String tcq_app_dt_max_rev ="";
			
			from_dt = "01/"+month+"/"+year;
			
			String to_dt_mnth = "01/"+to_month+"/"+year;
			
			String from_dt_curr = "01/"+"01/"+year;
			String to_dt_curr = "31/"+"12/"+year;
			prev_yr= ""+(Integer.parseInt(year)-1);
			//String prev_from_dt = "01/"+"01"+"/"+prev_yr;
			//String prev_to_dt = "31/"+"12"+"/"+prev_yr;
			//System.out.println(">>>>>>>>>> MD "+to_dt_mnth );
			queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+to_dt_mnth+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				to_dt=rset1.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			if(customer_cd.equals("") || customer_cd.equals("0"))
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FGSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
						"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FGSA_REV_NO," +
						"A.SN_REMARK " +
						" , to_char(A.tcq_approval_dt , 'dd/mm/yyyy')," +  //MD20111228
						"  TO_DATE(A.START_DT,'dd/mm/yyyy'), TO_DATE(A.END_DT,'dd/mm/yyyy'), sn_ref_no "+ //MD20111228	
						"FROM FMS7_SN_MST A " +
						"WHERE ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
						"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FGSA_NO=A.FGSA_NO " +
						"AND B.CUSTOMER_CD=A.CUSTOMER_CD " +
						//" AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT " +
						" AND A.FGSA_REV_NO=B.FGSA_REV_NO)" +
						" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";	
				
			}
			else
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FGSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
				"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FGSA_REV_NO," +
				"A.SN_REMARK " +
				" , to_char(A.tcq_approval_dt , 'dd/mm/yyyy')," +//MD20111228
				"  TO_DATE(A.START_DT,'dd/mm/yyyy'), TO_DATE(A.END_DT,'dd/mm/yyyy'), sn_ref_no  "+ //MD20111228	
				" FROM FMS7_SN_MST A " +
				"WHERE A.CUSTOMER_CD = '"+customer_cd+"'and ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
				"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FGSA_NO=A.FGSA_NO " +
				"AND B.CUSTOMER_CD=A.CUSTOMER_CD " +
				//" AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT " +
				" AND A.FGSA_REV_NO=B.FGSA_REV_NO)" +
				" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";
				
			}
			//System.out.println("Select Query for FMS7_SN_MST MAX REV = "+queryString);
			rset=stmt.executeQuery(queryString);
			int m =0;
			while(rset.next())
			{
				//System.out.println("Miiiiiiiilan "+(++m));
				SN_NO.add(rset.getString(1)==null?"":rset.getString(1));
				SN_REV_NO.add(rset.getString(2)==null?"":rset.getString(2));
				SN_SUMRY_CUSTOMER_CD.add(rset.getString(3)==null?"":rset.getString(3));
				FGSA_NO.add(rset.getString(4)==null?"":rset.getString(4));
				//START_DT.add(rset.getString(5)==null?"":rset.getString(5));
				//END_DT.add(rset.getString(6)==null?"":rset.getString(6));
				SN_SIGNING_DT.add(rset.getString(7)==null?"":rset.getString(7));
				//TCQ.add(rset.getString(8)==null?"":rset.getString(8));
				RATE.add(rset.getString(9)==null?"":nf4.format(Double.parseDouble(rset.getString(9))));
				FGSA_REV_NO.add(rset.getString(10)==null?"":rset.getString(10));
				String t=rset.getString(11)==null?"":rset.getString(11);
				if(t.trim().equals("1"))
				{REMARK.add("Reasonable Endeavor");}
				else if(t.trim().equals("2"))
				{REMARK.add("Amendment in Contract");}
				else if(t.trim().equals("3"))
				{REMARK.add("Force Majeure");}
				else if(t.trim().equals("4"))
				{REMARK.add("Others");}
				else if(t.trim().equals("0") || t.trim().equals(""))
				{REMARK.add("");}
				
				SN_REF_NO.add(rset.getString(15)==null?"":rset.getString(15));
				//MD20111228

				//FOR DATE AMMENDMENT AND AMMENDMENT OF TCQ START
				
				queryString1 = "SELECT TO_DATE(A.START_DT,'dd/mm/yyyy'), " +
				"TO_DATE(A.END_DT,'dd/mm/yyyy'),A.TCQ," +
				" TO_CHAR(A.START_DT,'dd/mm/yyyy'), TO_CHAR(A.END_DT,'dd/mm/yyyy'), A.CUSTOMER_CD, A.SN_NO" +
				" FROM FMS7_SN_MST A " +
				"WHERE  A.CUSTOMER_CD = '"+(rset.getString(3)==null?"0":rset.getString(3))+"' " +
				//" and A.START_DT = TO_DATE('"+(rset.getString(5)==null?"":rset.getString(5))+"','dd/mm/yyyy') " +
				//" AND A.END_DT = TO_DATE('"+(rset.getString(6)==null?"":rset.getString(6))+"','dd/mm/yyyy') " +
				" AND A.SN_NO = '"+(rset.getString(1)==null?"":rset.getString(1))+"' " +
				" AND A.FGSA_NO = '"+(rset.getString(4)==null?"":rset.getString(4))+"' " +
				" AND A.FGSA_REV_NO = '"+(rset.getString(10)==null?"":rset.getString(10))+"' " +
				"AND A.SN_REV_NO = '0' " +
				" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";	
				
				//System.out.println("Select Query for FMS7_SN_MST ZERO REV = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				
				if(rset1.next())
				{
					//FOR ZERO REVISION AND AMMENDMENT OF TCQ
					tcq_max_rev = rset.getDouble(8) == 0 ? 0:rset.getDouble(8);
					tcq_app_dt_max_rev = rset.getString(12) == null ? "-" :rset.getString(12);
					
					tcq_zero_rev = rset1.getDouble(3)== 0 ? 0:rset1.getDouble(3);
					
					if(tcq_max_rev != tcq_zero_rev)
					{
						TCQ.add(rset.getString(8)==null?"-":rset.getString(8));
						TCQ_tmp.add(rset.getString(8)==null?"0":rset.getString(8));
						if(!tcq_app_dt_max_rev.trim().equals("-"))
						{
							TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
						}
						else
						{
							boolean flg = false;
							queryString2 = "SELECT TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
							"TO_CHAR(A.END_DT,'dd/mm/yyyy'),A.TCQ, to_char(A.tcq_approval_dt , 'dd/mm/yyyy')" +
							" FROM FMS7_SN_MST A " +
							"WHERE  A.CUSTOMER_CD = '"+(rset.getString(3)==null?"0":rset.getString(3))+"' and " +
							"A.SN_NO = '"+(rset.getString(1)==null?"0":rset.getString(1))+"' and " +
							"A.fgsa_no = '"+(rset.getString(4)==null?"0":rset.getString(4))+"' and A.fgsa_rev_no = '"+(rset.getString(10)==null?"0":rset.getString(10))+"' " +
							" order by SN_REV_NO DESC";
							
							//System.out.println("TCQ AMMENDMENT ALL REV "+queryString2);
							rset2 = stmt2.executeQuery(queryString2);
							 
							while(rset2.next())
							{
								tcq_app_dt_max_rev = rset2.getString(4)==null?"-":rset2.getString(4);
								if(!tcq_app_dt_max_rev.trim().equals("-"))
								{
									
									TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
									flg = true;
									break;
								}
	 						}
							
							if(!flg)
							{
								TCQ_APP_DT_MAX_REV.add("-");
							}
						}
					}
					else
					{
						TCQ.add("-");
						TCQ_tmp.add("0");
						
						TCQ_APP_DT_MAX_REV.add("-");
					}
					
					TCQ_ZERO_REV.add(rset1.getString(3)==null?"-":rset1.getString(3));
					TCQ_ZERO_REV_tmp.add(rset1.getString(3)==null?"0":rset1.getString(3));
					
//					FOR ZERO REVISION AND AMMENDMENT OF TCQ END
										
					/*Date st_dt = rset.getDate(13);
					Date end_dt = rset.getDate(14);
					Date st_dt_z_rv = rset1.getDate(1);
					Date end_dt_z_rv = rset1.getDate(2);*/

					//FOR DATE AMMENDMENT START
					Date dt_tmp1 = new Date("01/01/1801");
					Date dt_tmp2 = new Date("01/11/1801");
					
					//System.out.println(dt_tmp1+" ==== "+dt_tmp2);
					Date st_dt = rset.getDate(13) == null? dt_tmp2 : rset.getDate(13);
					Date end_dt = rset.getDate(14) == null? dt_tmp2 : rset.getDate(14);
					Date st_dt_z_rv = rset1.getDate(1) == null?  dt_tmp1 : rset1.getDate(1);
					Date end_dt_z_rv = rset1.getDate(2) == null?  dt_tmp1 : rset1.getDate(2);
					
					//System.out.println(st_dt);
					//System.out.println(st_dt_z_rv);
					//System.out.println(end_dt);
					//System.out.println(end_dt_z_rv);
					
					//0 = equal, < 0 st_dt_z_rv < st_dt, > 0 st_dt_z_rv > st_dt,  
					if(st_dt_z_rv.compareTo(st_dt)!=0)
					{
						//System.out.println("S IF");
						START_DT.add(rset.getString(5)==null?"-":rset.getString(5));
						START_DT_ZR_RV.add(rset1.getString(4)==null?"-":rset1.getString(4));
					}
					else
					{
						//System.out.println("S ESLE");
						START_DT_ZR_RV.add(rset1.getString(4)==null?"-":rset1.getString(4));
						START_DT.add("-");
						
					}
					
					if(end_dt_z_rv.compareTo(end_dt)!=0)
					{
						//System.out.println("E IF");
						END_DT.add(rset.getString(6)==null?"-":rset.getString(6));
						END_DT_ZR_RV.add(rset1.getString(5)==null?"-":rset1.getString(5));
					}
					else
					{
						//System.out.println("E ELSE");
						END_DT.add("-");
						END_DT_ZR_RV.add(rset1.getString(5)==null?"-":rset1.getString(5));
						
					}
					
					//FOR DATE AMMENDMENT END
				}
				else
				{
					END_DT.add(rset.getString(6)==null?"-":rset.getString(6));
					START_DT.add(rset.getString(5)==null?"-":rset.getString(5));
					END_DT_ZR_RV.add("-");
					START_DT_ZR_RV.add("-");
					
					TCQ_ZERO_REV.add("-");
					TCQ_ZERO_REV_tmp.add("0");
					
					TCQ.add(rset.getString(8)==null?"-":rset.getString(8));
					TCQ_tmp.add(rset.getString(8)==null?"0":rset.getString(8));
					
					TCQ_APP_DT_MAX_REV.add(tcq_app_dt_max_rev);
					
					
				}
	
//				FOR DATE AMMENDMENT AND AMMENDMENT OF TCQ END
				
				//MD20111228
				
			}
			
			//double tcq = Double.parseDouble(""+TCQ); 
			Vector TEMP_PREV_YR = new Vector();
			Vector TEMP_CURR_YR = new Vector();
			for(int i=0; i<SN_NO.size(); i++)
			{
				queryString1="SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' ";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					SN_SUMRY_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
				}
				else
				{
					SN_SUMRY_CUSTOMER_NAME.add("");
				}					
				////System.out.println("prev_from_dt = "+prev_from_dt);
				////System.out.println("prev_to_dt = "+prev_to_dt);				
				
				double prev_yr_supply = 0;
				double curr_yr_supply = 0;
				////System.out.println("for  "+SN_SUMRY_CUSTOMER_NAME.elementAt(i));
				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT<TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
						      "AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' " +
						      " and (contract_type = 'S' or contract_type = 's') ";	//MD20111230			
				//System.out.println("Select Query for Prevoius Year FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					prev_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					PREV_YR_SUPPLY.add(rset.getString(1)==null?"-":(nf.format(Double.parseDouble(rset.getString(1)))));
					TEMP_PREV_YR.add(nf.format(prev_yr_supply));
				}
				else
				{
					PREV_YR_SUPPLY.add("-");
					TEMP_PREV_YR.add("");
				}	
				
				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT>=TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
						      "AND A.GAS_DT<=TO_DATE('"+to_dt+"','dd/mm/yyyy') AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' " +
						      " and (contract_type = 'S' or contract_type = 's') ";	//MD20111230			
				//System.out.println("Select Query for Year Till Date (YTD SUPPLY)  FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					curr_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					CURR_YR_SUPPLY.add(rset.getString(1)==null?"-":nf.format(Double.parseDouble(rset.getString(1))));
					TEMP_CURR_YR.add(nf.format(curr_yr_supply));
				}
				else
				{
					CURR_YR_SUPPLY.add("-");
					TEMP_CURR_YR.add("");
				}
				
//				MD20111228
				if(!SN_REF_NO.elementAt(i).toString().trim().equals(""))
				{
					SN_NO.setElementAt(SN_REF_NO.elementAt(i).toString().trim(), i);
				}
//				MD20111228
			}
			
			
//			MD20111228
			//FOR ZERO REVISION AND REMAINING SUPPLY
			String Stcq_amm = "";
			
			for(int i=0; i<TCQ_ZERO_REV_tmp.size(); i++)
			{
				Stcq_amm = ""+TCQ.elementAt(i);
				if(!Stcq_amm.trim().equals("-"))
				{
					if(Double.parseDouble(""+TCQ_tmp.elementAt(i)) >= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						REMAINING_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ_tmp.elementAt(i))- (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))));
						EXCESS_SUPPLY.add("-");
					}
					else if(Double.parseDouble(""+TCQ_tmp.elementAt(i)) <= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						EXCESS_SUPPLY.add(nf.format((Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))-Double.parseDouble(""+TCQ_tmp.elementAt(i))));
						REMAINING_SUPPLY.add("-");
					}
					else
					{
						EXCESS_SUPPLY.add("");
						REMAINING_SUPPLY.add("");
					}
				}
				else
				{
					if(Double.parseDouble(""+TCQ_ZERO_REV_tmp.elementAt(i)) >= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						REMAINING_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ_ZERO_REV_tmp.elementAt(i))- (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))));
						EXCESS_SUPPLY.add("-");
					}
					else if(Double.parseDouble(""+TCQ_ZERO_REV_tmp.elementAt(i)) <= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
					{
						EXCESS_SUPPLY.add(nf.format((Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))-Double.parseDouble(""+TCQ_ZERO_REV_tmp.elementAt(i))));
						REMAINING_SUPPLY.add("-");
					}
					else
					{
						EXCESS_SUPPLY.add("");
						REMAINING_SUPPLY.add("");
					}
				}
			}
//			MD20111228
			//FOR ZERO REVISION AND REMAINING SUPPLY
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_Details()"+e);
			e.printStackTrace();
		}		
	
	}
	public void fetch_SN_DetailsOLD()
	{
		try
		{
			from_dt = "01/"+month+"/"+year;
			
			String to_dt_mnth = "01/"+to_month+"/"+year;
			
			String from_dt_curr = "01/"+"01/"+year;
			String to_dt_curr = "31/"+"12/"+year;
			prev_yr= ""+(Integer.parseInt(year)-1);
			//String prev_from_dt = "01/"+"01"+"/"+prev_yr;
			//String prev_to_dt = "31/"+"12"+"/"+prev_yr;
			//System.out.println(">>>>>>>>>> MD "+to_dt_mnth );
			queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+to_dt_mnth+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				to_dt=rset1.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			if(customer_cd.equals("") || customer_cd.equals("0"))
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FGSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
						"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FGSA_REV_NO,A.SN_REMARK FROM FMS7_SN_MST A " +
						"WHERE ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
						"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
						"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FGSA_NO=A.FGSA_NO " +
						"AND B.CUSTOMER_CD=A.CUSTOMER_CD AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT AND A.FGSA_REV_NO=B.FGSA_REV_NO)" +
						" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";			
			}
			else
			{
				queryString = "SELECT A.SN_NO,A.SN_REV_NO,A.CUSTOMER_CD,A.FGSA_NO,TO_CHAR(A.START_DT,'dd/mm/yyyy'), " +
				"TO_CHAR(A.END_DT,'dd/mm/yyyy'),TO_CHAR(A.SIGNING_DT,'dd/mm/yyyy'),A.TCQ,A.RATE,A.FGSA_REV_NO,A.SN_REMARK FROM FMS7_SN_MST A " +
				"WHERE A.CUSTOMER_CD = '"+customer_cd+"'and ((A.START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) OR " +
				"(A.START_DT<=TO_DATE('"+from_dt+"','dd/mm/yyyy') AND A.END_DT>=TO_DATE('"+to_dt+"','dd/mm/yyyy')))	AND " +
				"A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE B.SN_NO=A.SN_NO AND B.FGSA_NO=A.FGSA_NO " +
				"AND B.CUSTOMER_CD=A.CUSTOMER_CD AND A.START_DT=B.START_DT AND A.END_DT=B.END_DT AND A.FGSA_REV_NO=B.FGSA_REV_NO)" +
				" order by A.CUSTOMER_CD, A.SN_NO,A.SN_REV_NO";
			}
			//System.out.println("Select Query for FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				SN_NO.add(rset.getString(1)==null?"":rset.getString(1));
				SN_REV_NO.add(rset.getString(2)==null?"":rset.getString(2));
				SN_SUMRY_CUSTOMER_CD.add(rset.getString(3)==null?"":rset.getString(3));
				FGSA_NO.add(rset.getString(4)==null?"":rset.getString(4));
				START_DT.add(rset.getString(5)==null?"":rset.getString(5));
				END_DT.add(rset.getString(6)==null?"":rset.getString(6));
				SN_SIGNING_DT.add(rset.getString(7)==null?"":rset.getString(7));
				TCQ.add(rset.getString(8)==null?"":rset.getString(8));
				RATE.add(rset.getString(9)==null?"":nf4.format(Double.parseDouble(rset.getString(9))));
				FGSA_REV_NO.add(rset.getString(10)==null?"":rset.getString(10));
				String t=rset.getString(11)==null?"":rset.getString(11);
				//System.out.println("Jaimn:"+t);
				if(t.trim().equals("1"))
				{REMARK.add("Reasonable Endeavor");}
				else if(t.trim().equals("2"))
				{REMARK.add("Amendment in Contract");}
				else if(t.trim().equals("3"))
				{REMARK.add("Force Majeure");}
				else if(t.trim().equals("4"))
				{REMARK.add("Others");}
				else if(t.trim().equals("0") || t.trim().equals(""))
				{REMARK.add("");}
				
			}
			//double tcq = Double.parseDouble(""+TCQ); 
			Vector TEMP_PREV_YR = new Vector();
			Vector TEMP_CURR_YR = new Vector();
			for(int i=0; i<SN_NO.size(); i++)
			{
				queryString1="SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' ";
				//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					SN_SUMRY_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
				}
				else
				{
					SN_SUMRY_CUSTOMER_NAME.add("");
				}					
				////System.out.println("prev_from_dt = "+prev_from_dt);
				////System.out.println("prev_to_dt = "+prev_to_dt);				
				
				double prev_yr_supply = 0;
				double curr_yr_supply = 0;
				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT<TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
						      "AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' ";			
				//System.out.println("Select Query for Prevoius Year FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					prev_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					PREV_YR_SUPPLY.add(rset.getString(1)==null?"-":(nf.format(Double.parseDouble(rset.getString(1)))));
					TEMP_PREV_YR.add(nf.format(prev_yr_supply));
				}
				else
				{
					PREV_YR_SUPPLY.add("-");
					TEMP_PREV_YR.add("");
				}	
				
				queryString = "SELECT SUM(A.QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL A WHERE A.GAS_DT>=TO_DATE('"+from_dt_curr+"','dd/mm/yyyy') " +
						      "AND A.GAS_DT<=TO_DATE('"+to_dt+"','dd/mm/yyyy') AND A.SN_NO='"+SN_NO.elementAt(i)+"' " +
						      "AND A.FGSA_NO='"+FGSA_NO.elementAt(i)+"' AND A.CUSTOMER_CD='"+SN_SUMRY_CUSTOMER_CD.elementAt(i)+"' ";			
				//System.out.println("Select Query for Year Till Date (YTD SUPPLY)  FMS7_SN_MST = "+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					curr_yr_supply = Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1));
					CURR_YR_SUPPLY.add(rset.getString(1)==null?"-":nf.format(Double.parseDouble(rset.getString(1))));
					TEMP_CURR_YR.add(nf.format(curr_yr_supply));
				}
				else
				{
					CURR_YR_SUPPLY.add("-");
					TEMP_CURR_YR.add("");
				}								
			}
			
			for(int i=0; i<TCQ.size(); i++)
			{
				if(Double.parseDouble(""+TCQ.elementAt(i)) >= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
				{
					REMAINING_SUPPLY.add(nf.format(Double.parseDouble(""+TCQ.elementAt(i))- (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))));
					EXCESS_SUPPLY.add("-");
				}
				else if(Double.parseDouble(""+TCQ.elementAt(i)) <= (Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i))))
				{
					EXCESS_SUPPLY.add(nf.format((Double.parseDouble(""+TEMP_PREV_YR.elementAt(i))+Double.parseDouble(""+TEMP_CURR_YR.elementAt(i)))-Double.parseDouble(""+TCQ.elementAt(i))));
					REMAINING_SUPPLY.add("-");
				}
				else
				{
					EXCESS_SUPPLY.add("");
					REMAINING_SUPPLY.add("");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_DetailsOLD()"+e);
			e.printStackTrace();
		}		
	}
	
	public void fetch_Monthly_Energy_rev()
	{
		try
		{
			String from_dt = "";
			String to_dt = "";
			Vector act_arr_dt = new Vector();
			
			String frm_dt1="";
			String t_dt="";
			
			if(!month.trim().equals("0") && !month.trim().equals("") && month!=null)
			{	
				
				
				
				frm_dt1 = "01/"+month+"/"+year;
				queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+frm_dt1+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					t_dt=rset1.getString(1);
				}
				//System.out.println(frm_dt1+"----------------------"+t_dt);
				
//				queryString1 = "SELECT distinct(CUSTOMER_CD) " +
//				   "FROM FMS7_RE_GAS_CARGO_DTL " +
//				   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+frm_dt1+"','dd/mm/yyyy') and to_date('"+t_dt+"','dd/mm/yyyy')";
//				
				queryString1 = "SELECT distinct(CUSTOMER_CD) " +
				   "FROM FMS7_RE_GAS_CARGO_DTL " +
				   "WHERE ACTUAL_RECPT_DT <= to_date('"+t_dt+"','dd/mm/yyyy')";
			
				//queryString1 = "SELECT distinct(CUSTOMER_CD) " +
				//   "FROM FMS7_RE_GAS_CARGO_DTL ";
				
				//System.out.println("query001:::"+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
				  while(rset1.next())
				  {
					  custm_cd.add(rset1.getString(1));
								  
				  }
				  REGAS_QTY1=new Vector[1];
				  SALES_REGAS_QTY1=new Vector[1];
				  REGAS_SUG_QTY1=new Vector[1];
				  REGAS_OPENING=new Vector[1];
				  REGAS_CLOSING=new Vector[1];
				
				  REGAS_QTY1[0]=new Vector();//JHP
				  SALES_REGAS_QTY1[0]=new Vector();//JHP
				  REGAS_SUG_QTY1[0]=new Vector();//JHP
				  REGAS_OPENING[0]=new Vector();//JHP
				  REGAS_CLOSING[0]=new Vector();//JHP
					
				 //JHP007
				  double count=0;
				  double regas_opening=0;
			  //System.out.println("custm_cd::"+custm_cd);
			  queryString = "SELECT count(*) FROM FMS7_OPENING_STOCK_REGAS_CUST ";
			  //System.out.println("query002:::"+queryString);
			  rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
				count=rset.getDouble(1);
				}
				if(count==0)
				{
					queryString1 = "SELECT  OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
						"WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
					//System.out.println("query003:::"+queryString1);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						regas_opening=rset.getDouble(1);
					}
					
				}
				String month_int = "";
				String year_int = "";
				Vector[] temp_opening;
				Vector[] temp_closing;
				temp_opening=new Vector[1];
				temp_closing=new Vector[1];
				temp_opening[0]=new Vector();
				temp_closing[0]=new Vector();
				
				if(!month.trim().equals("") && !year.trim().equals(""))
				{
					if(Integer.parseInt(month.trim())==1)
					{
						month_int = "12";
						year_int = ""+(Integer.parseInt(year)-1);
					}
					else
					{
						month_int = ""+(Integer.parseInt(month.trim())-1);
						year_int = year;
						if(Integer.parseInt(month_int)<=9)
						{
							month_int = "0"+month_int;
						}
					}
				}
				
				for(int k=0;k<custm_cd.size();k++)
				{
					queryString = "SELECT OP_BAL_REGAS,CL_BAL_REGAS FROM FMS7_OPENING_STOCK_REGAS_CUST " +
			          "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"' AND CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
		
					//System.out.println("jamin: = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						temp_opening[0].add(rset.getString(1));
						temp_closing[0].add(rset.getString(2));
					}
					else
					{
						temp_opening[0].add("0");
						temp_closing[0].add("0");
					}
				}
				
				
				
				
			//	queryString = "SELECT MONTH, OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
			//		          "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
		  for(int k=0;k<custm_cd.size();k++)
			{	
				queryString = "SELECT OP_BAL_REGAS,CL_BAL_REGAS FROM FMS7_OPENING_STOCK_REGAS_CUST " +
		          "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"' AND CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
	
				//System.out.println("check001:: = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					String opening=temp_closing[0].elementAt(k).toString();
					//System.out.println("opening::"+opening);
					//String closing=temp_closing[0].elementAt(k).toString();
					double sales_regas_qty = 0;
					double regas_qty = 0;
					double re_gas_sug_qty = 0;
					sug_percent = "0";
					
					int temp_cust_cd = 0;
					int temp_re_gas_no = 0;
					int temp_cargo_seq_no = 0;
					
					
					double tot_regas_temp=0;
					double temp_sales_regas_qty1=0;//JHP
					double temp_re_gas_sug_qty=0;//JHP
					queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
								   "FROM FMS7_DAILY_ALLOCATION_DTL " +
								   "WHERE CONTRACT_TYPE='R' AND " +
								   "(GAS_DT BETWEEN to_date('"+frm_dt1+"','dd/mm/yyyy') AND " +
								   "to_date('"+t_dt+"','dd/mm/yyyy')) and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						double temp_sales_regas_qty = 0;
						
						sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_sales_regas_qty1+= Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));//JHP
						
						temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						temp_cust_cd = rset1.getInt(2);
						temp_re_gas_no = rset1.getInt(3);
						temp_cargo_seq_no = rset1.getInt(4);
						
						sug_percent = "0";
						
						queryString2 = "SELECT SYS_USE_GAS " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
									   "RE_GAS_NO="+temp_re_gas_no+" AND " +
									   "CARGO_SEQ_NO="+temp_cargo_seq_no+" and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
						}
						
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						temp_re_gas_sug_qty+=Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
					}
					
					
					
				
					double temp_regas=0;
					queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
								   "FROM FMS7_RE_GAS_CARGO_DTL " +
								   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+frm_dt1+"','dd/mm/yyyy') and " +
								   "to_date('"+t_dt+"','dd/mm/yyyy') and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
					////System.out.println("query007:::"+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_regas += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}
					REGAS_OPENING[0].add(nf.format(Double.parseDouble(opening)));
					REGAS_QTY1[0].add(nf.format(temp_regas));
					SALES_REGAS_QTY1[0].add(nf.format(temp_sales_regas_qty1));
					REGAS_SUG_QTY1[0].add(nf.format(temp_re_gas_sug_qty));
					double closing=Double.parseDouble(opening)+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty;
					REGAS_CLOSING[0].add(nf.format(closing));
				//JHP S				
			
				//JHP E				
				//JHPEnd
				}
				else
				{
					REGAS_OPENING[0].add(regas_opening+"");
					double sales_regas_qty = 0;
					double regas_qty = 0;
					double re_gas_sug_qty = 0;
					sug_percent = "0";
					
					int temp_cust_cd = 0;
					int temp_re_gas_no = 0;
					int temp_cargo_seq_no = 0;
					
					
					double tot_regas_temp=0;
					double temp_sales_regas_qty1=0;//JHP
					double temp_re_gas_sug_qty=0;//JHP
					queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
								   "FROM FMS7_DAILY_ALLOCATION_DTL " +
								   "WHERE CONTRACT_TYPE='R' AND " +
								   "(GAS_DT BETWEEN to_date('"+frm_dt1+"','dd/mm/yyyy') AND " +
								   "to_date('"+t_dt+"','dd/mm/yyyy')) and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						double temp_sales_regas_qty = 0;
						
						sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_sales_regas_qty1+= Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));//JHP
						
						temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						temp_cust_cd = rset1.getInt(2);
						temp_re_gas_no = rset1.getInt(3);
						temp_cargo_seq_no = rset1.getInt(4);
						
						sug_percent = "0";
						
						queryString2 = "SELECT SYS_USE_GAS " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
									   "RE_GAS_NO="+temp_re_gas_no+" AND " +
									   "CARGO_SEQ_NO="+temp_cargo_seq_no+" and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
						}
						
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						temp_re_gas_sug_qty+=Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
					}
					
									
				
					double temp_regas=0;
					queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
								   "FROM FMS7_RE_GAS_CARGO_DTL " +
								   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+frm_dt1+"','dd/mm/yyyy') and " +
								   "to_date('"+t_dt+"','dd/mm/yyyy') and CUSTOMER_CD='"+custm_cd.elementAt(k)+"'";
					////System.out.println("query007:::"+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_regas += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}
					
					REGAS_QTY1[0].add(nf.format(temp_regas));
					SALES_REGAS_QTY1[0].add(nf.format(temp_sales_regas_qty1));
					REGAS_SUG_QTY1[0].add(nf.format(temp_re_gas_sug_qty));
					//System.out.println(regas_opening+"+"+temp_regas+"-"+temp_sales_regas_qty1+"-"+temp_re_gas_sug_qty);
					double closing=(regas_opening+temp_regas-temp_sales_regas_qty1-temp_re_gas_sug_qty);
					REGAS_CLOSING[0].add(nf.format(closing));
				//JHP S				
				}
			}	
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_Monthly_Energy()"+e);
			e.printStackTrace();
		}
	}
	public void fetch_Monthly_Energy()
	{
		try
		{
			String from_dt = "";
			String to_dt = "";
			Vector act_arr_dt = new Vector();
			
			
			
			if(!month.trim().equals("0") && !month.trim().equals("") && month!=null)
			{											
				queryString = "SELECT MONTH, OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
					          "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
				
				//System.out.println("Select Opening Stock Details Query for Monthly Energy = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					double sum = 0;
					//String mnth = rset.getString(1)==null?"00":rset.getString(1);
					String bl_trd= rset.getString(2)==null?"0":rset.getString(2);
					String bl_re= rset.getString(3)==null?"0":rset.getString(3);
					String actual_tank_reading = nf.format(Double.parseDouble(rset.getString(4)==null?"0":rset.getString(4)));
					
					if(!bl_trd.trim().equals("") && !bl_re.trim().equals(""))
					{
						sum = ((Double.parseDouble(nf.format(Double.parseDouble(bl_trd))))+(Double.parseDouble(nf.format(Double.parseDouble(bl_re)))));
						Opening_Stock = nf.format(sum);
						//sum = Double.parseDouble(nf1.format(Double.parseDouble(actual_tank_reading)));
						//Opening_Stock = nf.format(sum);
					}
					else
					{
						Opening_Stock = "0";
					}
					
					op_bal_trading = nf.format(Double.parseDouble(bl_trd));
					op_bal_regas = nf.format(Double.parseDouble(bl_re));
					
					from_dt = "01/"+month+"/"+year;
					
					queryString1 = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
					
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						to_dt=rset1.getString(1);
					}
					else
					{
						to_dt="28/"+month+"/"+year;
					}
					
					double trading_qty = 0;	
					
					queryString1 = "SELECT CARGO_REF_NO, VESSEL_NM, ACT_ARRV_DT FROM FMS7_CARGO_ARRIVAL_DTL " +
							       "WHERE ACT_ARRV_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
							       "to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY ACT_ARRV_DT";
					rset1=stmt1.executeQuery(queryString1);
					String dt="";
					while(rset1.next())
					{
						VESSEL_NM.add(rset1.getString(2)==null?"":rset1.getString(2)+" (Own-gas)");
						vess_nm.add(rset1.getString(2)==null?"":rset1.getString(2));
						dt = rset1.getString(3)==null?"":rset1.getString(3);
						act_arr_dt.add(dt.substring(8,10));
						queryString2 = "SELECT QTY_MMBTU FROM FMS7_CARGO_QQ_DTL WHERE CARGO_REF_NO='"+rset1.getString(1)+"'  AND SPLIT_SEQ='0'";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							trading_qty += Double.parseDouble(nf.format(Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1))));
							QTY_MMBTU.add(nf.format(Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1))));
						}
						else
						{
							QTY_MMBTU.add("0.00");
						}
						//System.out.println("Recept vesell nam : "+VESSEL_NM+" date : "+dt+" qty_mmbtu : "+QTY_MMBTU);
					}
					
					queryString1 = "SELECT SHIP_NAME,ACTUAL_RECPT_DT,ADQ_QTY FROM FMS7_RE_GAS_CARGO_DTL " +
				                   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
				                   "to_date('"+to_dt+"','dd/mm/yyyy') ORDER BY ACTUAL_RECPT_DT";
					rset1=stmt1.executeQuery(queryString1);
				
					while(rset1.next())
					{
						VESSEL_NM.add(rset1.getString(1)==null?"":rset1.getString(1)+" (Re-gas)");
						vess_nm.add(rset1.getString(1)==null?"":rset1.getString(1));
						act_arr_dt.add(rset1.getString(2)==null?"":rset1.getString(2).substring(8,10));
						QTY_MMBTU.add(nf.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
					}
					
					for (int i=0; i< VESSEL_NM.size(); i++)
					{
						if(i==(VESSEL_NM.size()-1))
						{
							Vessel_Nm += VESSEL_NM.elementAt(i);
						}
						else
						{
							Vessel_Nm += VESSEL_NM.elementAt(i) + ", ";
						}
					}
					//Sorting of Vessel name and Qty with respect to the acending order of arrival date
					//By MIlan MD20110926
					//System.out.println("UnSorted 1: "+act_arr_dt+" "+VESSEL_NM+""+QTY_MMBTU);
					int right_val;
					int storindex_val;
					
					String right_val_vessel;
					String storindex_val_vessel;
					
					String right_val_qty;
					String storindex_val_qty;
					
					for (int i=0; i<act_arr_dt.size(); i++)
					{
						for (int j=i; j<act_arr_dt.size(); j++)
						{
							if (Integer.parseInt(act_arr_dt.elementAt(i).toString())>Integer.parseInt(act_arr_dt.elementAt(j).toString()))
							{
								right_val = Integer.parseInt(act_arr_dt.elementAt(i).toString());
								storindex_val = Integer.parseInt(act_arr_dt.elementAt(j).toString());
								act_arr_dt.setElementAt(""+right_val,j);
								act_arr_dt.setElementAt(""+storindex_val,i);
								
								right_val_vessel = VESSEL_NM.elementAt(i).toString().trim();
								storindex_val_vessel = VESSEL_NM.elementAt(j).toString().trim();
								VESSEL_NM.setElementAt(right_val_vessel,j);
								VESSEL_NM.setElementAt(storindex_val_vessel,i);
								
								right_val_qty = QTY_MMBTU.elementAt(i).toString().trim();
								storindex_val_qty = QTY_MMBTU.elementAt(j).toString().trim();
								QTY_MMBTU.setElementAt(right_val_qty,j);
								QTY_MMBTU.setElementAt(storindex_val_qty,i);
							}
						}
					}
									
					//System.out.println("Sorted final : "+act_arr_dt+" "+VESSEL_NM+" "+QTY_MMBTU+" ");
					Vector test = new Vector();	test.add(""+12);test.add(""+3);	test.add(""+120);test.add(""+5);
					test.add(""+555);test.add(""+12);	test.add(""+2);test.add(""+100);test.add(""+22);test.add(""+12);
					test.add(""+150);test.add(""+25);test.add(""+18);test.add(""+14);test.add(""+12);test.add(""+12);
					//test.add(""+12);test.add(""+180);test.add(""+12);test.add(""+16);test.add(""+12);test.add(""+17);
					//test.add(""+62);test.add(""+19);test.add(""+52);test.add(""+0);	test.add(""+12);test.add(""+21);
					//System.out.println("UNSorted  : "+test);
					int i2=0;
					int j2 = test.size()-1;
					
					//QuickSortNumber(test, i2, j2);
					
					double close_bal_trading = 0;
					double close_bal_regas = 0;
					double close_actual_tank_reading = 0;
					
					double sales_qty = 0;
					
					queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL WHERE (CONTRACT_TYPE='S' " +
							       "OR CONTRACT_TYPE='L') AND " +
							       "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') " +
							       "and to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}				
					
					double sales_regas_qty = 0;
					double regas_qty = 0;
					double re_gas_sug_qty = 0;
					sug_percent = "0";
					
					int temp_cust_cd = 0;
					int temp_re_gas_no = 0;
					int temp_cargo_seq_no = 0;
					
					queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
								   "FROM FMS7_DAILY_ALLOCATION_DTL " +
								   "WHERE CONTRACT_TYPE='R' AND " +
								   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
								   "to_date('"+to_dt+"','dd/mm/yyyy'))";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						double temp_sales_regas_qty = 0;
						
						sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						temp_cust_cd = rset1.getInt(2);
						temp_re_gas_no = rset1.getInt(3);
						temp_cargo_seq_no = rset1.getInt(4);
						
						sug_percent = "0";
						
						queryString2 = "SELECT SYS_USE_GAS " +
									   "FROM FMS7_RE_GAS_CARGO_DTL " +
									   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
									   "RE_GAS_NO="+temp_re_gas_no+" AND " +
									   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
						}
						
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
					}
					
					queryString1 = "SELECT ADQ_QTY, SYS_USE_GAS, NVL(CUSTOMER_CD,'0'), " +
								   "NVL(RE_GAS_NO,'0'), NVL(CARGO_SEQ_NO,'0') " +
								   "FROM FMS7_RE_GAS_CARGO_DTL " +
								   "WHERE ACTUAL_RECPT_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
								   "to_date('"+to_dt+"','dd/mm/yyyy')";
					rset1 = stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
						
						/*double temp_sales_regas_qty = 0;
						
						queryString2 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
									   "to_date('"+to_dt+"','dd/mm/yyyy')) and " +
									   "CUSTOMER_CD="+temp_cust_cd+" and FGSA_NO="+temp_re_gas_no+" and " +
									   "SN_NO="+temp_cargo_seq_no+"";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
						}
						
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
						re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));*/
					}
					
					re_gas_sug_qty = Double.parseDouble(nf.format(re_gas_sug_qty));
					
					if(regas_qty!=0 || trading_qty!=0) 
					{
						reciept = nf.format(Double.parseDouble(nf.format(regas_qty))+Double.parseDouble(nf.format(trading_qty)));
					}
					else
					{
						reciept = "0.00";
					}
					
					
					/*queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
							       "WHERE CONTRACT_TYPE='R' AND GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
							       "to_date('"+to_dt+"','dd/mm/yyyy')";
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
					}*/				
					
					double export_gas = 0;
					
					if(sales_qty!=0 || sales_regas_qty!=0)
					{
						export_gas = (Double.parseDouble(nf.format(sales_qty)) + Double.parseDouble(nf.format(sales_regas_qty))); 
						Export_gas = nf.format(export_gas);
						Export_gas_own=nf.format(sales_qty);
						Export_gas_re=nf.format(sales_regas_qty);
					}
					else
					{
						Export_gas = "0.00";
						Export_gas_own="0.00";
						Export_gas_re="0.00";
					}
					////System.out.println("export_gas = "+export_gas);
					
					/*queryString1 = "SELECT To_char(A.EFF_DT,'dd/mm/yyyy'),A.SUG_PERCENT,A.REMARK " +
								   "FROM FMS7_REGAS_SUG_PERCENT A WHERE A.EFF_DT=(SELECT MAX(B.EFF_DT) " +
								   "FROM FMS7_REGAS_SUG_PERCENT B WHERE " +
								   "B.EFF_DT<=TO_DATE('"+to_dt+"','DD/MM/YYYY'))";	
					//System.out.println("Query for SUG Details for Re-Gas Contracts = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sug_percent = rset1.getString(2)==null?"0":rset1.getString(2);
					}*/
										
					double flaring = 0;
					double auxiliary_consumption = 0;
					double scv_fuel_consumption = 0;
					double sug = 0;					
					double other_consumption = 0;
					double mass_balancing = 0;
					double total_fuel_gas = 0;
					double total_consumption = 0;
					double unaccounted_Consumption = 0;
					double percent = 0;
					
					int mnth_int = Integer.parseInt(month);
					
					queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
							       "WHERE YEAR='"+year+"' AND MONTH ='"+mnth_int+"' ";
					//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						flaring = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						auxiliary_consumption = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2))));
						scv_fuel_consumption = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						sug = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4))));					
						other_consumption = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5))));
						unaccounted_Consumption = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6))));
					}					
					
					//total_fuel_gas = (auxiliary_consumption + scv_fuel_consumption + sug + other_consumption + re_gas_sug_qty);
					total_fuel_gas = (auxiliary_consumption + scv_fuel_consumption + sug + other_consumption);
					Sug=""+sug;
					Auxiliary_Consumption = ""+auxiliary_consumption;
					Other_Consumption = ""+other_consumption;
					if(total_fuel_gas!=0)
					{
						Total_Fuel_Gas = nf.format(total_fuel_gas);
					}
					else
					{
						Total_Fuel_Gas = "0.00";
					}
					
					Flaring  = nf.format(flaring);
					
					//System.out.println("Purchase trading_qty = "+trading_qty+",  Purchase regas_qty = "+regas_qty+",  Sales trading_qty = "+sales_qty+",  Sales regas_qty = "+sales_regas_qty);
					//Following (2) lines has been commented By Samik Shah On 16th August, 2011 ...
					//close_bal_trading = (Double.parseDouble(op_bal_trading) + trading_qty) - (Double.parseDouble(nf1.format(sales_qty)) + auxiliary_consumption + scv_fuel_consumption + sug + other_consumption + flaring);
					//closing_bal_trading = nf.format(close_bal_trading);
					close_bal_regas = (Double.parseDouble(op_bal_regas) + regas_qty) - (Double.parseDouble(nf1.format(sales_regas_qty)) + re_gas_sug_qty);
					closing_bal_regas = nf.format(close_bal_regas);
					
					//Following (2) lines has been commented By Samik Shah On 16th August, 2011 ...
					//close_actual_tank_reading = close_bal_trading + close_bal_regas;
					//closing_actual_tank_reading = nf.format(close_actual_tank_reading);
					
					//closing_actual_tank_reading = actual_tank_reading; //Commented By Samik Shah On 24th August, 2011 ...
					
					
					total_consumption =  export_gas + total_fuel_gas + flaring;//JHP20120112
						total_consumption =  export_gas + total_fuel_gas + flaring + unaccounted_Consumption;
					if(total_consumption>0)
					{
						Total_Consumption = nf.format(total_consumption);
					}
					else
					{
						Total_Consumption = "0.00";
					}
						
					//Following (1) line has been commented By Samik Shah On 16th August, 2011 ...
					//Closing_stock = nf.format(close_bal_trading + close_bal_regas);
					//Closing_stock = nf.format(Double.parseDouble(actual_tank_reading)); //Commented By Samik Shah On 24th August, 2011 ...
										
					double depletion = 0;
					
					depletion = total_consumption ;
					Depletion = nf.format(depletion);
					
					//Following Whole Loop Of If .. Else Has Been Commented By Samik Shah On 24th August, 2011 ...
					/*if(!Opening_Stock.trim().equals("") || !reciept.trim().equals("") || !Closing_stock.trim().equals(""))
					{
						depletion = (Double.parseDouble(Opening_Stock) + Double.parseDouble(reciept)) - Double.parseDouble(Closing_stock);
						Depletion = nf.format(depletion);				
					}
					else
					{
						Depletion = "0.00";
					}*/				
					
					Closing_stock = nf.format((Double.parseDouble(Opening_Stock) + Double.parseDouble(reciept)) - Double.parseDouble(Depletion)); //Introduced By Samik Shah On 24th August, 2011 ...
					
					
					closing_actual_tank_reading = Closing_stock;
					
					close_bal_trading = Double.parseDouble(Closing_stock) - close_bal_regas;
					closing_bal_trading = nf.format(close_bal_trading);
					
					//unaccounted_Consumption = depletion-total_consumption; //Commented By Samik Shah On 24th August, 2011 ...				
					if(unaccounted_Consumption!=0)
					{
						Unaccounted_Consumption = nf.format(unaccounted_Consumption);
					}
					else
					{
						Unaccounted_Consumption = "0.00";
					}
					
					//Diff=nf.format(Double.parseDouble(Opening_Stock)+Double.parseDouble(reciept)-Double.parseDouble(Total_Consumption)-Double.parseDouble(Closing_stock)-Double.parseDouble(Unaccounted_Consumption))+"";
					Diff=nf.format(Double.parseDouble(Opening_Stock)+Double.parseDouble(reciept)-Double.parseDouble(Total_Consumption)-Double.parseDouble(Closing_stock))+"";
					
					//Following (1) line has been commented By Samik Shah On 16th August, 2011 ...
					//closing_bal_trading = nf.format(Double.parseDouble(closing_bal_trading)-unaccounted_Consumption);
					//System.out.println("closing_bal_trading = "+closing_bal_trading);
					
					if(unaccounted_Consumption!=0 && export_gas!=0)
					{
						percent = (unaccounted_Consumption/export_gas)*100;
						Percent_unaccounted_gas = nf.format(percent);
					}
					else
					{
						Percent_unaccounted_gas = "0.00"; 
					}
					
					if(scv_fuel_consumption!=0)
					{
						Scv_fuel_consumption = nf.format(scv_fuel_consumption);
					}
					else
					{
						Scv_fuel_consumption = "0.00"; 
					}					
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_Monthly_Energy()"+e);
			e.printStackTrace();
		}
	}
	private void QuickSortNumber(Vector array, int left, int right) {
		
			double storindex_val = 0;
			double left_val =0 ;
			int lo = left;
			int hi = right;
			int mid = (lo + hi) / 2;
			double piviot_val = Double.parseDouble(array.elementAt(mid).toString().trim());
			if (lo >= hi) {
				return;
			}
			
			
			while (lo < hi) {
				while (lo<hi && Double.parseDouble(array.elementAt(lo).toString().trim()) < piviot_val) {
					lo++;
				}
				while (lo<hi && Double.parseDouble(array.elementAt(hi).toString().trim()) > piviot_val) {
					hi--;
				}
				if (lo < hi) {
					left_val = Double.parseDouble(array.elementAt(lo).toString().trim());
					storindex_val = Double.parseDouble(array.elementAt(hi).toString().trim());
					array.setElementAt(""+left_val,hi);
					array.setElementAt(""+storindex_val,lo);
					
				}
			}
			if (hi < lo) {
				int T = hi;
				hi = lo;
				lo = T;
			}
			//System.out.println("Sorted : "+lo+" "+array);
			QuickSortNumber(array, left, lo);
			QuickSortNumber(array, lo == left ? lo+1 : lo, right);
			//System.out.println("Sorted : "+array);
	}
	Vector DLNG_SN_DTL_CUSTOMER_CD=new Vector();
	Vector DLNG_SN_DTL_CUSTOMER_NAME=new Vector();
	Vector DLNG_CONT_TYPE1=new Vector();
	Vector DLNG_CONT_TYPE_NAME1=new Vector();
	Vector DLNG_TCQ1=new Vector();
	Vector DLNG_RATE1=new Vector();
	Vector DLNG_SN_NO1=new Vector();
	Vector DLNG_SIGNING_DT1=new Vector();
	Vector DLNG_START_DT1=new Vector();
	Vector DLNG_QTY1=new Vector();
	Vector DLNG_SN_REF_NO1=new Vector();
	Vector DLNG_SALE_USD1=new Vector();
	Vector DLNG_QTY2=new Vector();
	Vector DLNG_SALE_USD2=new Vector();
	Vector DLNG_FGSA_NO1=new Vector();
	Vector DLNG_SN_REV_NO1=new Vector();
	Vector DLNG_FGSA_REV_NO1=new Vector();
	Vector DLNG_END_DT1=new Vector();
	
	public void fetch_SN_Wise_Dtl_DLNG()
	{
		try
		{
			Vector temp_QTY = new Vector();	
			Vector temp_SALE_USD = new Vector();
			Vector temp_TOT_QTY = new Vector();
			Vector temp_SN_RATE = new Vector();
			Vector temp_TOT_SALE_USD = new Vector();
			
			
			if(!month.trim().equals("") && month!=null && !month.trim().equals("0") && !year.trim().equals("") && year!=null && !year.trim().equals("0"))
			{
				String pre_month = "";
				String pre_year = ""+year;
				
				if(month.trim().equals("01"))
				{
					pre_month = "12";
					pre_year = ""+(Integer.parseInt(year)-1);
				}
				else if(Integer.parseInt(month.trim())<11)
				{
					pre_month = "0"+(Integer.parseInt(month.trim())-1);
				}
				else
				{
					pre_month = ""+(Integer.parseInt(month.trim())-1);
				}
				
				//from_dt = "16/"+pre_month+"/"+pre_year;
				
				from_dt = "01/"+month+"/"+year;
				
				to_dt = "01/"+month+"/"+(Integer.parseInt(year)+1);
				
				String cust_query_string = "";
				int counter = 0;
				if(customer_cd.equals("") || customer_cd.equals("0"))		//MD20111223	
				{
					customer_cd = "0";
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM DLNG_SN_MST WHERE " +
				      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
				      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
				}
				else
				{
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM DLNG_SN_MST WHERE " +
				      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
				      "AND TCQ IS NOT NULL " +
				      " and customer_cd = '"+customer_cd+"' " +
				      "ORDER BY CUSTOMER_CD";
				}
				//System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					//SN_DTL_CUSTOMER_NAME
					DLNG_SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
					if(counter>0)
					{
						cust_query_string += ","+(rset.getString(1)==null?"0":rset.getString(1));
					}
					else
					{
						cust_query_string += ""+(rset.getString(1)==null?"0":rset.getString(1));
					}
					++counter;
				}
				
				if(cust_query_string.trim().equals(""))
				{
					if(customer_cd.equals("") || customer_cd.equals("0"))		//MD20111223
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM DLNG_LOA_MST WHERE " +
								      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
								      "OR " +
								      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
								      "OR " +
								      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
								      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
					}
					else
					{
						
					}
				}
				else
				{
					
					if(customer_cd.equals("") || customer_cd.equals("0")) 	//MD20111223
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM DLNG_LOA_MST WHERE " +
					      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
					      "OR " +
					      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
					      "OR " +
					      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
					      "AND TCQ IS NOT NULL AND CUSTOMER_CD NOT IN ("+cust_query_string.trim()+") ORDER BY CUSTOMER_CD";
					}
					else
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM DLNG_LOA_MST WHERE CUSTOMER_CD = '0'";
					}
					
				}
//				System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					DLNG_SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
				}
				
								
				for(int i=0; i<DLNG_SN_DTL_CUSTOMER_CD.size(); i++)
				{	
					Vector temp_FGSA_NO = new Vector();
					Vector temp_SN_NO = new Vector();
					Vector temp_Contract_Type = new Vector();
					Vector temp_Contract_Type_Name = new Vector();
					
					queryString = "SELECT DISTINCT FLSA_NO,SN_NO FROM DLNG_SN_MST WHERE " +
							      "CUSTOMER_CD="+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY FLSA_NO,SN_NO";
//					System.out.println("SELECT DISTINCT FGSA_NO,SN_NO FROM FMS7_SN_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("S");
						temp_Contract_Type_Name.add("SN");
					}
					
					queryString = "SELECT DISTINCT TENDER_NO,LOA_NO FROM DLNG_LOA_MST WHERE " +
							      "CUSTOMER_CD="+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY TENDER_NO,LOA_NO";
					//System.out.println("SELECT DISTINCT TENDER_NO,LOA_NO FROM FMS7_LOA_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("L");
						temp_Contract_Type_Name.add("LOA");
					}
					
					Vector TCQ1 = new Vector();	
					Vector RATE1 = new Vector();	
					
					Vector SN_NO1 = new Vector();
					Vector SN_REF_NO1 = new Vector();
					Vector SIGNING_DT1 = new Vector();	
					Vector START_DT1 = new Vector();	
					Vector END_DT1 = new Vector();	
					
					Vector FGSA_NO1 = new Vector();	
					Vector SN_REV_NO1 = new Vector();	
					Vector FGSA_REV_NO1 = new Vector();	
					Vector QTY1 = new Vector();	
					Vector SALE_USD1 = new Vector();
					Vector QTY2 = new Vector();	
					Vector SALE_USD2 = new Vector();
					Vector CONT_TYPE1 = new Vector();	
					Vector CONT_TYPE_NAME1 = new Vector();
					Vector FCC_FLAG = new Vector();	
					
					queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
							       "CUSTOMER_CD='"+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"'";
					//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						DLNG_SN_DTL_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
					else
					{
						DLNG_SN_DTL_CUSTOMER_NAME.add("");
					}	
					
					int count = 0;
					
					for(int j=0; j<temp_FGSA_NO.size(); j++)
					{
						//MD20111223
						if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
						{
							queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.FLSA_NO,A.SN_REV_NO,A.FLSA_REV_NO,A.SN_REF_NO FROM DLNG_SN_MST A WHERE " +
									      "A.CUSTOMER_CD='"+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.FLSA_NO="+temp_FGSA_NO.elementAt(j)+" AND A.SN_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM DLNG_SN_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.FLSA_NO=B.FLSA_NO AND A.SN_NO=B.SN_NO)";
						}
						else
						{
							queryString = "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.LOA_REF_NO FROM DLNG_LOA_MST A WHERE " +
									      "A.CUSTOMER_CD='"+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.TENDER_NO="+temp_FGSA_NO.elementAt(j)+" AND A.LOA_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO)";
						}
						//System.out.println("TCQ FROM FMS7_SN_MST/FMS7_LOA_MST >>>>>>>> = "+queryString);
						rset=stmt.executeQuery(queryString);
						Date cont_dt;
						Date dt = new Date(from_dt);
						SimpleDateFormat df = new SimpleDateFormat("DD/MM/yyyy");
						String fcc_flg = "";
						while(rset.next())
						{
							
							cont_dt = new Date(rset.getString(5)==null?"":rset.getString(5));
							if(cont_dt.compareTo(dt)>0)
							{
								//System.out.println("in this if");
								/*//System.out.println("if contract date > dt");
								//System.out.println("if"+df.format(cont_dt)+" > "+df.format(dt)+" dt");
								//System.out.println(rset.getString(5)==null?"":rset.getString(5));
								//System.out.println(df.format(cont_dt));
								//System.out.println(df.format(dt));*/
								
								if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
								{
									queryString1 = "SELECT fcc_flag" +
									  " FROM DLNG_SN_MST A WHERE " +
								      "A.CUSTOMER_CD='"+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
							          "A.FLSA_NO="+temp_FGSA_NO.elementAt(j)+" AND A.SN_NO="+temp_SN_NO.elementAt(j)+" AND " +
							          "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM DLNG_SN_MST B WHERE " +
							          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
							          "A.FLSA_NO=B.FLSA_NO AND A.SN_NO=B.SN_NO)";
								}
								else
								{
									queryString1 = "SELECT fcc_flag" +
									  " FROM FMS7_LOA_MST A WHERE " +
								      "A.CUSTOMER_CD='"+DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
							          "A.TENDER_NO="+temp_FGSA_NO.elementAt(j)+" AND A.LOA_NO="+temp_SN_NO.elementAt(j)+" AND " +
							          "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
							          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
							          "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO)";
								}
										
								//System.out.println("fcc >>>>>>>> = "+queryString1);
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									fcc_flg = rset1.getString(1)==null?"N":rset1.getString(1);
								}
								else
								{
									fcc_flg = "N";
								}
								
							}
							else
							{
								fcc_flg = "Y";
								/*//System.out.println("else contract date <= dt");
								//System.out.println("else"+df.format(cont_dt)+" <= "+df.format(dt)+" dt");
								//System.out.println(rset.getString(5)==null?"":rset.getString(5));
								//System.out.println(df.format(cont_dt));
								//System.out.println(df.format(dt));*/
								//System.out.println("in this else");
								
							}
							//MD20111223
							if(fcc_flg.equals("Y"))
							{
								CONT_TYPE1.add((""+temp_Contract_Type.elementAt(j)).trim());
								CONT_TYPE_NAME1.add((""+temp_Contract_Type_Name.elementAt(j)).trim());
								TCQ1.add(rset.getString(1)==null?"":rset.getString(1));
								RATE1.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
								
								SN_NO1.add(rset.getString(3)==null?"":rset.getString(3));
								SIGNING_DT1.add(rset.getString(4)==null?"":rset.getString(4));
								START_DT1.add(rset.getString(5)==null?"":rset.getString(5));
								END_DT1.add(rset.getString(6)==null?"":rset.getString(6));
								
								FGSA_NO1.add(rset.getString(7)==null?"":rset.getString(7));
								SN_REV_NO1.add(rset.getString(8)==null?"":rset.getString(8));
								FGSA_REV_NO1.add(rset.getString(9)==null?"":rset.getString(9));
								
								String sn_ref = rset.getString(10)==null?"":rset.getString(10);
								
								if(sn_ref.trim().equals(""))
								{
									sn_ref = (rset.getString(3)==null?"":rset.getString(3));
								}
								
								SN_REF_NO1.add(sn_ref.trim());
								
								if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
								{
//									queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
//											       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
//											       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
//											       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='S'"; 
									String mappid=DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"-"+rset.getString(7)+"-"+rset.getString(9)+"-"+rset.getString(3)+"-"+rset.getString(8);
									queryString1 = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
												  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='S' AND " +
												  "ALLOC_DT<TO_DATE('"+from_dt+"','DD/MM/YYYY') AND MAPPING_ID='"+mappid+"'";
									               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
								}
								else
								{
//									queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
//											       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
//											       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
//											       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='L'"; 
									String mappid=DLNG_SN_DTL_CUSTOMER_CD.elementAt(i)+"-"+rset.getString(7)+"-0-"+rset.getString(3)+"-"+rset.getString(8);
									queryString1 = "SELECT NVL(SUM(ENTRY_TOT_ENE),'0') " +
											  "FROM DLNG_ALLOC_mst WHERE CONTRACT_TYPE='L' AND " +
											  "ALLOC_DT<TO_DATE('"+from_dt+"','DD/MM/YYYY') AND MAPPING_ID='"+mappid+"'"; 
									               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
								}
								//System.out.println("SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									//System.out.println("TCQ = "+rset.getString(1));
									//System.out.println("QTY_MMBTU = "+rset1.getString(1));
									String tcq = rset.getString(1)==null?"":rset.getString(1);
									String qty = rset1.getString(1)==null?"":rset1.getString(1);
									if(!tcq.trim().equals("") && !qty.trim().equals(""))
									{
										QTY1.add(nf.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										QTY2.add(nf5.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
									}
									else if(!tcq.trim().equals(""))
									{	
										QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
										SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
										QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
										SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
									}	
								}
								else
								{
									QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
									SALE_USD1.add("");
									QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
									SALE_USD2.add("");
								}
							}
							++count;
						}
					}
					
					if(count==0)
					{
						CONT_TYPE1.add("");
						CONT_TYPE_NAME1.add("");
						TCQ1.add("");
						RATE1.add("");
						
						SN_NO1.add("");
						SIGNING_DT1.add("");
						START_DT1.add("");
						END_DT1.add("");
						
						FGSA_NO1.add("");
						SN_REV_NO1.add("");
						FGSA_REV_NO1.add("");
						
						SN_REF_NO1.add("");
						
						QTY1.add("");
						SALE_USD1.add("");
						QTY2.add("");
						SALE_USD2.add("");
					}
					
					temp_QTY.add(QTY1);
					temp_SALE_USD.add(SALE_USD1);
					
					DLNG_CONTRACT_TYPE.add(CONT_TYPE_NAME1);
					DLNG_TCQ.add(TCQ1);
					DLNG_RATE.add(RATE1);
					
					DLNG_SN_NO.add(SN_NO1);
					DLNG_SIGNING_DT.add(SIGNING_DT1);
					DLNG_START_DT.add(START_DT1);
					DLNG_END_DT.add(END_DT1);
					
					DLNG_FGSA_NO.add(FGSA_NO1);
					DLNG_SN_REV_NO.add(SN_REV_NO1);
					DLNG_FGSA_REV_NO.add(FGSA_REV_NO1);
					
					DLNG_SN_REF_NO.add(SN_REF_NO1);
					
					DLNG_QTY.add(QTY2);
					DLNG_SALE_USD.add(SALE_USD2);
				}
								
				for(int i=0; i<DLNG_SN_DTL_CUSTOMER_CD.size(); i++)
				{
					double sum=0;
					double sales_sum=0;
					double sn_rate=0;
					
					for(int j=0; j<((Vector)DLNG_QTY.elementAt(i)).size(); j++)
					{
						if(!(((Vector)temp_QTY.elementAt(i)).elementAt(j).equals("")) && !(((Vector)temp_SALE_USD.elementAt(i)).elementAt(j).equals("")))
						{
							sum += Double.parseDouble(""+((Vector)temp_QTY.elementAt(i)).elementAt(j));
							sales_sum += Double.parseDouble(""+((Vector)temp_SALE_USD.elementAt(i)).elementAt(j));
							sn_rate = sales_sum / sum;						
						}									 
					}
					temp_TOT_QTY.add(nf.format(sum));
					temp_SN_RATE.add(nf.format(sn_rate));
					temp_TOT_SALE_USD.add(nf.format(sales_sum));
					
					DLNG_TOT_QTY.add(nf5.format(sum));
					DLNG_SN_RATE.add(nf.format(sn_rate));
					DLNG_TOT_SALE_USD.add(nf5.format(sales_sum));
				}			
				
				double final_sum=0;
				double final_sales_sum=0;
				double final_sn_rate=0;
				
				for(int i=0; i<DLNG_TOT_QTY.size(); i++)
				{								
					if(!((""+temp_TOT_QTY.elementAt(i)).trim().equals("")) && !((""+temp_TOT_SALE_USD.elementAt(i)).trim().equals("")))
					{
						    final_sum += Double.parseDouble(""+(temp_TOT_QTY.elementAt(i)));
						    final_sales_sum += Double.parseDouble(""+(temp_TOT_SALE_USD.elementAt(i)));
						    final_sn_rate = final_sales_sum / final_sum;						
					}									 
				}	
				DLNG_Final_qty = nf5.format(final_sum);
				DLNG_Final_SN_rate = nf.format(final_sn_rate);
				DLNG_Final_sale_USD = nf5.format(final_sales_sum);
				
				DLNG_Final_qty2 = nf1.format(final_sum);
				DLNG_Final_sale_USD2 = nf1.format(final_sales_sum);
				
				
				//System.out.println("DLNG_TOT_QTY---"+DLNG_SIGNING_DT);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_Wise_Dtl()"+e);
			e.printStackTrace();
		}
	
	}
	//MD20111222
	public void fetch_SN_Wise_Dtl()
	{
		try
		{
			Vector temp_QTY = new Vector();	
			Vector temp_SALE_USD = new Vector();
			Vector temp_TOT_QTY = new Vector();
			Vector temp_SN_RATE = new Vector();
			Vector temp_TOT_SALE_USD = new Vector();
			
			
			if(!month.trim().equals("") && month!=null && !month.trim().equals("0") && !year.trim().equals("") && year!=null && !year.trim().equals("0"))
			{
				String pre_month = "";
				String pre_year = ""+year;
				
				if(month.trim().equals("01"))
				{
					pre_month = "12";
					pre_year = ""+(Integer.parseInt(year)-1);
				}
				else if(Integer.parseInt(month.trim())<11)
				{
					pre_month = "0"+(Integer.parseInt(month.trim())-1);
				}
				else
				{
					pre_month = ""+(Integer.parseInt(month.trim())-1);
				}
				
				//from_dt = "16/"+pre_month+"/"+pre_year;
				
				from_dt = "01/"+month+"/"+year;
				
				to_dt = "01/"+month+"/"+(Integer.parseInt(year)+1);
				
				String cust_query_string = "";
				int counter = 0;
				if(customer_cd.equals("") || customer_cd.equals("0"))		//MD20111223	
				{
					customer_cd = "0";
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST WHERE " +
				      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
				      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
				}
				else
				{
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST WHERE " +
				      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
				      "OR " +
				      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
				      "AND TCQ IS NOT NULL " +
				      " and customer_cd = '"+customer_cd+"' " +
				      "ORDER BY CUSTOMER_CD";
				}
				//System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					//SN_DTL_CUSTOMER_NAME
					SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
					if(counter>0)
					{
						cust_query_string += ","+(rset.getString(1)==null?"0":rset.getString(1));
					}
					else
					{
						cust_query_string += ""+(rset.getString(1)==null?"0":rset.getString(1));
					}
					++counter;
				}
				
				if(cust_query_string.trim().equals(""))
				{
					if(customer_cd.equals("") || customer_cd.equals("0"))		//MD20111223
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST WHERE " +
								      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
								      "OR " +
								      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
								      "OR " +
								      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
								      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
					}
					else
					{
						
					}
				}
				else
				{
					
					if(customer_cd.equals("") || customer_cd.equals("0")) 	//MD20111223
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST WHERE " +
					      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
					      "OR " +
					      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
					      "OR " +
					      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
					      "AND TCQ IS NOT NULL AND CUSTOMER_CD NOT IN ("+cust_query_string.trim()+") ORDER BY CUSTOMER_CD";
					}
					else
					{
						queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST WHERE CUSTOMER_CD = '0'";
					}
					
				}
				//System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
				}
				
								
				for(int i=0; i<SN_DTL_CUSTOMER_CD.size(); i++)
				{	
					Vector temp_FGSA_NO = new Vector();
					Vector temp_SN_NO = new Vector();
					Vector temp_Contract_Type = new Vector();
					Vector temp_Contract_Type_Name = new Vector();
					
					queryString = "SELECT DISTINCT FGSA_NO,SN_NO FROM FMS7_SN_MST WHERE " +
							      "CUSTOMER_CD="+SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY FGSA_NO,SN_NO";
					//System.out.println("SELECT DISTINCT FGSA_NO,SN_NO FROM FMS7_SN_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("S");
						temp_Contract_Type_Name.add("SN");
					}
					
					queryString = "SELECT DISTINCT TENDER_NO,LOA_NO FROM FMS7_LOA_MST WHERE " +
							      "CUSTOMER_CD="+SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY TENDER_NO,LOA_NO";
					//System.out.println("SELECT DISTINCT TENDER_NO,LOA_NO FROM FMS7_LOA_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("L");
						temp_Contract_Type_Name.add("LOA");
					}
					
					Vector TCQ1 = new Vector();	
					Vector RATE1 = new Vector();	
					
					Vector SN_NO1 = new Vector();
					Vector SN_REF_NO1 = new Vector();
					Vector SIGNING_DT1 = new Vector();	
					Vector START_DT1 = new Vector();	
					Vector END_DT1 = new Vector();	
					
					Vector FGSA_NO1 = new Vector();	
					Vector SN_REV_NO1 = new Vector();	
					Vector FGSA_REV_NO1 = new Vector();	
					Vector QTY1 = new Vector();	
					Vector SALE_USD1 = new Vector();
					Vector QTY2 = new Vector();	
					Vector SALE_USD2 = new Vector();
					Vector CONT_TYPE1 = new Vector();	
					Vector CONT_TYPE_NAME1 = new Vector();
					Vector FCC_FLAG = new Vector();	
					
					queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
							       "CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"'";
					//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						SN_DTL_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
					else
					{
						SN_DTL_CUSTOMER_NAME.add("");
					}	
					
					int count = 0;
					
					for(int j=0; j<temp_FGSA_NO.size(); j++)
					{
						//MD20111223
						if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
						{
							queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.SN_REF_NO FROM FMS7_SN_MST A WHERE " +
									      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.FGSA_NO="+temp_FGSA_NO.elementAt(j)+" AND A.SN_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO)";
						}
						else
						{
							queryString = "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.LOA_REF_NO FROM FMS7_LOA_MST A WHERE " +
									      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.TENDER_NO="+temp_FGSA_NO.elementAt(j)+" AND A.LOA_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO)";
						}
						//System.out.println("TCQ FROM FMS7_SN_MST/FMS7_LOA_MST >>>>>>>> = "+queryString);
						rset=stmt.executeQuery(queryString);
						Date cont_dt;
						Date dt = new Date(from_dt);
						SimpleDateFormat df = new SimpleDateFormat("DD/MM/yyyy");
						String fcc_flg = "";
						while(rset.next())
						{
							
							cont_dt = new Date(rset.getString(5)==null?"":rset.getString(5));
							if(cont_dt.compareTo(dt)>0)
							{
								/*//System.out.println("if contract date > dt");
								//System.out.println("if"+df.format(cont_dt)+" > "+df.format(dt)+" dt");
								//System.out.println(rset.getString(5)==null?"":rset.getString(5));
								//System.out.println(df.format(cont_dt));
								//System.out.println(df.format(dt));*/
								
								if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
								{
									queryString1 = "SELECT fcc_flag" +
									  " FROM FMS7_SN_MST A WHERE " +
								      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
							          "A.FGSA_NO="+temp_FGSA_NO.elementAt(j)+" AND A.SN_NO="+temp_SN_NO.elementAt(j)+" AND " +
							          "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
							          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
							          "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO)";
								}
								else
								{
									queryString1 = "SELECT fcc_flag" +
									  " FROM FMS7_LOA_MST A WHERE " +
								      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
							          "A.TENDER_NO="+temp_FGSA_NO.elementAt(j)+" AND A.LOA_NO="+temp_SN_NO.elementAt(j)+" AND " +
							          "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
							          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
							          "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO)";
								}
										
								//System.out.println("fcc >>>>>>>> = "+queryString1);
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									fcc_flg = rset1.getString(1)==null?"N":rset1.getString(1);
								}
								else
								{
									fcc_flg = "N";
								}
								
							}
							else
							{
								fcc_flg = "Y";
								/*//System.out.println("else contract date <= dt");
								//System.out.println("else"+df.format(cont_dt)+" <= "+df.format(dt)+" dt");
								//System.out.println(rset.getString(5)==null?"":rset.getString(5));
								//System.out.println(df.format(cont_dt));
								//System.out.println(df.format(dt));*/
								
							}
							//MD20111223
							if(fcc_flg.equals("Y"))
							{
								CONT_TYPE1.add((""+temp_Contract_Type.elementAt(j)).trim());
								CONT_TYPE_NAME1.add((""+temp_Contract_Type_Name.elementAt(j)).trim());
								TCQ1.add(rset.getString(1)==null?"":rset.getString(1));
								RATE1.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
								
								SN_NO1.add(rset.getString(3)==null?"":rset.getString(3));
								SIGNING_DT1.add(rset.getString(4)==null?"":rset.getString(4));
								START_DT1.add(rset.getString(5)==null?"":rset.getString(5));
								END_DT1.add(rset.getString(6)==null?"":rset.getString(6));
								
								FGSA_NO1.add(rset.getString(7)==null?"":rset.getString(7));
								SN_REV_NO1.add(rset.getString(8)==null?"":rset.getString(8));
								FGSA_REV_NO1.add(rset.getString(9)==null?"":rset.getString(9));
								
								String sn_ref = rset.getString(10)==null?"":rset.getString(10);
								
								if(sn_ref.trim().equals(""))
								{
									sn_ref = (rset.getString(3)==null?"":rset.getString(3));
								}
								
								SN_REF_NO1.add(sn_ref.trim());
								
								if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
								{
									queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
											       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
											       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
											       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='S'"; 
									               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
								}
								else
								{
									queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
											       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
											       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
											       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='L'"; 
									               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
								}
								//System.out.println("SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
								rset1=stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									//System.out.println("TCQ = "+rset.getString(1));
									//System.out.println("QTY_MMBTU = "+rset1.getString(1));
									String tcq = rset.getString(1)==null?"":rset.getString(1);
									String qty = rset1.getString(1)==null?"":rset1.getString(1);
									if(!tcq.trim().equals("") && !qty.trim().equals(""))
									{
										QTY1.add(nf.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										QTY2.add(nf5.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
										SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
									}
									else if(!tcq.trim().equals(""))
									{	
										QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
										SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
										QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
										SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
									}	
								}
								else
								{
									QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
									SALE_USD1.add("");
									QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
									SALE_USD2.add("");
								}
							}
							++count;
						}
					}
					
					if(count==0)
					{
						CONT_TYPE1.add("");
						CONT_TYPE_NAME1.add("");
						TCQ1.add("");
						RATE1.add("");
						
						SN_NO1.add("");
						SIGNING_DT1.add("");
						START_DT1.add("");
						END_DT1.add("");
						
						FGSA_NO1.add("");
						SN_REV_NO1.add("");
						FGSA_REV_NO1.add("");
						
						SN_REF_NO1.add("");
						
						QTY1.add("");
						SALE_USD1.add("");
						QTY2.add("");
						SALE_USD2.add("");
					}
					
					temp_QTY.add(QTY1);
					temp_SALE_USD.add(SALE_USD1);
					
					CONTRACT_TYPE.add(CONT_TYPE_NAME1);
					TCQ.add(TCQ1);
					RATE.add(RATE1);
					
					SN_NO.add(SN_NO1);
					SIGNING_DT.add(SIGNING_DT1);
					START_DT.add(START_DT1);
					END_DT.add(END_DT1);
					
					FGSA_NO.add(FGSA_NO1);
					SN_REV_NO.add(SN_REV_NO1);
					FGSA_REV_NO.add(FGSA_REV_NO1);
					
					SN_REF_NO.add(SN_REF_NO1);
					
					QTY.add(QTY2);
					SALE_USD.add(SALE_USD2);
				}
								
				for(int i=0; i<SN_DTL_CUSTOMER_CD.size(); i++)
				{
					double sum=0;
					double sales_sum=0;
					double sn_rate=0;
					
					for(int j=0; j<((Vector)QTY.elementAt(i)).size(); j++)
					{
						if(!(((Vector)temp_QTY.elementAt(i)).elementAt(j).equals("")) && !(((Vector)temp_SALE_USD.elementAt(i)).elementAt(j).equals("")))
						{
							sum += Double.parseDouble(""+((Vector)temp_QTY.elementAt(i)).elementAt(j));
							sales_sum += Double.parseDouble(""+((Vector)temp_SALE_USD.elementAt(i)).elementAt(j));
							sn_rate = sales_sum / sum;						
						}									 
					}
					temp_TOT_QTY.add(nf.format(sum));
					temp_SN_RATE.add(nf.format(sn_rate));
					temp_TOT_SALE_USD.add(nf.format(sales_sum));
					
					TOT_QTY.add(nf5.format(sum));
					SN_RATE.add(nf.format(sn_rate));
					TOT_SALE_USD.add(nf5.format(sales_sum));
				}			
				
				double final_sum=0;
				double final_sales_sum=0;
				double final_sn_rate=0;
				
				for(int i=0; i<TOT_QTY.size(); i++)
				{								
					if(!((""+temp_TOT_QTY.elementAt(i)).trim().equals("")) && !((""+temp_TOT_SALE_USD.elementAt(i)).trim().equals("")))
					{
						    final_sum += Double.parseDouble(""+(temp_TOT_QTY.elementAt(i)));
						    final_sales_sum += Double.parseDouble(""+(temp_TOT_SALE_USD.elementAt(i)));
						    final_sn_rate = final_sales_sum / final_sum;						
					}									 
				}	
				Final_qty = nf5.format(final_sum);
				Final_SN_rate = nf.format(final_sn_rate);
				Final_sale_USD = nf5.format(final_sales_sum);
				
				Final_qty2 = nf1.format(final_sum);
				Final_sale_USD2 = nf1.format(final_sales_sum);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_Wise_Dtl()"+e);
			e.printStackTrace();
		}
	}

	//MD20111222
	public void fetch_SN_Wise_DtlOLD()
	{
		try
		{
			Vector temp_QTY = new Vector();	
			Vector temp_SALE_USD = new Vector();
			Vector temp_TOT_QTY = new Vector();
			Vector temp_SN_RATE = new Vector();
			Vector temp_TOT_SALE_USD = new Vector();
			
			
			if(!month.trim().equals("") && month!=null && !month.trim().equals("0") && !year.trim().equals("") && year!=null && !year.trim().equals("0"))
			{
				String pre_month = "";
				String pre_year = ""+year;
				
				if(month.trim().equals("01"))
				{
					pre_month = "12";
					pre_year = ""+(Integer.parseInt(year)-1);
				}
				else if(Integer.parseInt(month.trim())<11)
				{
					pre_month = "0"+(Integer.parseInt(month.trim())-1);
				}
				else
				{
					pre_month = ""+(Integer.parseInt(month.trim())-1);
				}
				
				//from_dt = "16/"+pre_month+"/"+pre_year;
				
				from_dt = "01/"+month+"/"+year;
				
				to_dt = "01/"+month+"/"+(Integer.parseInt(year)+1);
				
				String cust_query_string = "";
				int counter = 0;
				
				queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST WHERE " +
						      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
						      "OR " +
						      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
						      "OR " +
						      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
						      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
				//System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_SN_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					//SN_DTL_CUSTOMER_NAME
					SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
					if(counter>0)
					{
						cust_query_string += ","+(rset.getString(1)==null?"0":rset.getString(1));
					}
					else
					{
						cust_query_string += ""+(rset.getString(1)==null?"0":rset.getString(1));
					}
					++counter;
				}
				
				if(cust_query_string.trim().equals(""))
				{
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST WHERE " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY CUSTOMER_CD";
				}
				else
				{
					queryString = "SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST WHERE " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL AND CUSTOMER_CD NOT IN ("+cust_query_string.trim()+") ORDER BY CUSTOMER_CD";
				}
				//System.out.println("SELECT DISTINCT(CUSTOMER_CD) FROM FMS7_LOA_MST --> "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					SN_DTL_CUSTOMER_CD.add(rset.getString(1)==null?"0":rset.getString(1));
				}
				
								
				for(int i=0; i<SN_DTL_CUSTOMER_CD.size(); i++)
				{	
					Vector temp_FGSA_NO = new Vector();
					Vector temp_SN_NO = new Vector();
					Vector temp_Contract_Type = new Vector();
					Vector temp_Contract_Type_Name = new Vector();
					
					queryString = "SELECT DISTINCT FGSA_NO,SN_NO FROM FMS7_SN_MST WHERE " +
							      "CUSTOMER_CD="+SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY FGSA_NO,SN_NO";
					//System.out.println("SELECT DISTINCT FGSA_NO,SN_NO FROM FMS7_SN_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("S");
						temp_Contract_Type_Name.add("SN");
					}
					
					queryString = "SELECT DISTINCT TENDER_NO,LOA_NO FROM FMS7_LOA_MST WHERE " +
							      "CUSTOMER_CD="+SN_DTL_CUSTOMER_CD.elementAt(i)+" AND " +
							      "((START_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "(END_DT BETWEEN TO_DATE('"+from_dt+"','dd/mm/yyyy') AND TO_DATE('"+to_dt+"','dd/mm/yyyy')) " +
							      "OR " +
							      "((START_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy')) AND (END_DT>TO_DATE('"+to_dt+"','dd/mm/yyyy')))) " +
							      "AND TCQ IS NOT NULL ORDER BY TENDER_NO,LOA_NO";
					//System.out.println("SELECT DISTINCT TENDER_NO,LOA_NO FROM FMS7_LOA_MST --> "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						temp_FGSA_NO.add(rset.getString(1)==null?"0":rset.getString(1));
						temp_SN_NO.add(rset.getString(2)==null?"0":rset.getString(2));
						temp_Contract_Type.add("L");
						temp_Contract_Type_Name.add("LOA");
					}
					
					Vector TCQ1 = new Vector();	
					Vector RATE1 = new Vector();	
					
					Vector SN_NO1 = new Vector();
					Vector SN_REF_NO1 = new Vector();
					Vector SIGNING_DT1 = new Vector();	
					Vector START_DT1 = new Vector();	
					Vector END_DT1 = new Vector();	
					
					Vector FGSA_NO1 = new Vector();	
					Vector SN_REV_NO1 = new Vector();	
					Vector FGSA_REV_NO1 = new Vector();	
					Vector QTY1 = new Vector();	
					Vector SALE_USD1 = new Vector();
					Vector QTY2 = new Vector();	
					Vector SALE_USD2 = new Vector();
					Vector CONT_TYPE1 = new Vector();	
					Vector CONT_TYPE_NAME1 = new Vector();
					
					queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
							       "CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"'";
					//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						SN_DTL_CUSTOMER_NAME.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
					else
					{
						SN_DTL_CUSTOMER_NAME.add("");
					}	
					
					int count = 0;
					
					for(int j=0; j<temp_FGSA_NO.size(); j++)
					{
						if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
						{
							queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.SN_REF_NO FROM FMS7_SN_MST A WHERE " +
									      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.FGSA_NO="+temp_FGSA_NO.elementAt(j)+" AND A.SN_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO)";
						}
						else
						{
							queryString = "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
										  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
										  "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.LOA_REF_NO FROM FMS7_LOA_MST A WHERE " +
									      "A.CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
									      "A.TCQ IS NOT NULL AND " +
								          "A.TENDER_NO="+temp_FGSA_NO.elementAt(j)+" AND A.LOA_NO="+temp_SN_NO.elementAt(j)+" AND " +
								          "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
								          "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								          "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO)";
						}
						//System.out.println("TCQ FROM FMS7_SN_MST/FMS7_LOA_MST = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
							CONT_TYPE1.add((""+temp_Contract_Type.elementAt(j)).trim());
							CONT_TYPE_NAME1.add((""+temp_Contract_Type_Name.elementAt(j)).trim());
							TCQ1.add(rset.getString(1)==null?"":rset.getString(1));
							RATE1.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
							
							SN_NO1.add(rset.getString(3)==null?"":rset.getString(3));
							SIGNING_DT1.add(rset.getString(4)==null?"":rset.getString(4));
							START_DT1.add(rset.getString(5)==null?"":rset.getString(5));
							END_DT1.add(rset.getString(6)==null?"":rset.getString(6));
							
							FGSA_NO1.add(rset.getString(7)==null?"":rset.getString(7));
							SN_REV_NO1.add(rset.getString(8)==null?"":rset.getString(8));
							FGSA_REV_NO1.add(rset.getString(9)==null?"":rset.getString(9));
							
							String sn_ref = rset.getString(10)==null?"":rset.getString(10);
							
							if(sn_ref.trim().equals(""))
							{
								sn_ref = (rset.getString(3)==null?"":rset.getString(3));
							}
							
							SN_REF_NO1.add(sn_ref.trim());
							
							if((""+temp_Contract_Type.elementAt(j)).trim().equals("S"))
							{
								queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
										       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
										       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
										       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='S'"; 
								               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
							}
							else
							{
								queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
										       "WHERE CUSTOMER_CD='"+SN_DTL_CUSTOMER_CD.elementAt(i)+"' AND " +
										       "SN_NO='"+rset.getString(3)+"' AND FGSA_NO='"+rset.getString(7)+"' " +
										       "AND GAS_DT<TO_DATE('"+from_dt+"','dd/mm/yyyy') AND CONTRACT_TYPE='L'"; 
								               //"AND SN_REV_NO='"+rset.getString(8)+"' AND FGSA_REV_NO='"+rset.getString(9)+"' ";
							}
							//System.out.println("SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								//System.out.println("TCQ = "+rset.getString(1));
								//System.out.println("QTY_MMBTU = "+rset1.getString(1));
								String tcq = rset.getString(1)==null?"":rset.getString(1);
								String qty = rset1.getString(1)==null?"":rset1.getString(1);
								if(!tcq.trim().equals("") && !qty.trim().equals(""))
								{
									QTY1.add(nf.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
									SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
									QTY2.add(nf5.format((Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
									SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * (Double.parseDouble(rset.getString(1))-(Double.parseDouble(""+rset1.getString(1))))));
								}
								else if(!tcq.trim().equals(""))
								{	
									QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
									SALE_USD1.add(nf.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
									QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
									SALE_USD2.add(nf5.format(Double.parseDouble(rset.getString(2)) * Double.parseDouble(rset.getString(1))));
								}	
							}
							else
							{
								QTY1.add(nf.format(Double.parseDouble(rset.getString(1))));
								SALE_USD1.add("");
								QTY2.add(nf5.format(Double.parseDouble(rset.getString(1))));
								SALE_USD2.add("");
							}
							++count;
						}
					}
					
					if(count==0)
					{
						CONT_TYPE1.add("");
						CONT_TYPE_NAME1.add("");
						TCQ1.add("");
						RATE1.add("");
						
						SN_NO1.add("");
						SIGNING_DT1.add("");
						START_DT1.add("");
						END_DT1.add("");
						
						FGSA_NO1.add("");
						SN_REV_NO1.add("");
						FGSA_REV_NO1.add("");
						
						SN_REF_NO1.add("");
						
						QTY1.add("");
						SALE_USD1.add("");
						QTY2.add("");
						SALE_USD2.add("");
					}
					
					temp_QTY.add(QTY1);
					temp_SALE_USD.add(SALE_USD1);
					
					CONTRACT_TYPE.add(CONT_TYPE_NAME1);
					TCQ.add(TCQ1);
					RATE.add(RATE1);
					
					SN_NO.add(SN_NO1);
					SIGNING_DT.add(SIGNING_DT1);
					START_DT.add(START_DT1);
					END_DT.add(END_DT1);
					
					FGSA_NO.add(FGSA_NO1);
					SN_REV_NO.add(SN_REV_NO1);
					FGSA_REV_NO.add(FGSA_REV_NO1);
					
					SN_REF_NO.add(SN_REF_NO1);
					
					QTY.add(QTY2);
					SALE_USD.add(SALE_USD2);
				}
								
				for(int i=0; i<SN_DTL_CUSTOMER_CD.size(); i++)
				{
					double sum=0;
					double sales_sum=0;
					double sn_rate=0;
					
					for(int j=0; j<((Vector)QTY.elementAt(i)).size(); j++)
					{
						if(!(((Vector)temp_QTY.elementAt(i)).elementAt(j).equals("")) && !(((Vector)temp_SALE_USD.elementAt(i)).elementAt(j).equals("")))
						{
							sum += Double.parseDouble(""+((Vector)temp_QTY.elementAt(i)).elementAt(j));
							sales_sum += Double.parseDouble(""+((Vector)temp_SALE_USD.elementAt(i)).elementAt(j));
							sn_rate = sales_sum / sum;						
						}									 
					}
					temp_TOT_QTY.add(nf.format(sum));
					temp_SN_RATE.add(nf.format(sn_rate));
					temp_TOT_SALE_USD.add(nf.format(sales_sum));
					
					TOT_QTY.add(nf5.format(sum));
					SN_RATE.add(nf.format(sn_rate));
					TOT_SALE_USD.add(nf5.format(sales_sum));
				}			
				
				double final_sum=0;
				double final_sales_sum=0;
				double final_sn_rate=0;
				
				for(int i=0; i<TOT_QTY.size(); i++)
				{								
					if(!((""+temp_TOT_QTY.elementAt(i)).trim().equals("")) && !((""+temp_TOT_SALE_USD.elementAt(i)).trim().equals("")))
					{
						    final_sum += Double.parseDouble(""+(temp_TOT_QTY.elementAt(i)));
						    final_sales_sum += Double.parseDouble(""+(temp_TOT_SALE_USD.elementAt(i)));
						    final_sn_rate = final_sales_sum / final_sum;						
					}									 
				}	
				Final_qty = nf5.format(final_sum);
				Final_SN_rate = nf.format(final_sn_rate);
				Final_sale_USD = nf5.format(final_sales_sum);
				
				Final_qty2 = nf1.format(final_sum);
				Final_sale_USD2 = nf1.format(final_sales_sum);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----fetch_SN_Wise_Dtl()"+e);
			e.printStackTrace();
		}
	}
	public void fetchLNGMarginStatement()
	{/*
		try
		{
			//System.out.println(to_month);
			//System.out.println(month);
			//System.out.println(year);
			Vector tot_qty_inv = new Vector();
			//System.out.println("==================MD"+to_month);
			//System.out.println("==================MD"+month);
			//System.out.println("==================MD"+year+" ");
			//Integer.parseInt(to_month)-Integer.parseInt(month)
			//FINDING SALES GROSS AMOUNT IN USD AND INR ON PER MONTH/YEAR BASIS
			String mon_yr = "";
			int cnt = Integer.parseInt(to_month)-Integer.parseInt(month);
			double tot_inv_qty = 0;
			double gross_inv_amt_usd = 0;
			double gross_inv_amt_inr = 0;
			for(int i =0; i<=cnt; i++)
			{
			
				int m =0;
				String m_y[] = null;
				if(i==0)
				{
					m = Integer.parseInt(month);
				}
				else
				{
					m = Integer.parseInt(month)+1;
				}
				
				mon_yr = ""+m+"/"+year;
				//System.out.println("==================MD"+i+" "+mon_yr);
				queryString = "select sum(GROSS_AMT_USD), sum(GROSS_AMT_INR), sum(TOTAL_QTY)" +
							" from FMS7_INVOICE_MST " +
							" where to_char(to_date(invoice_dt , 'dd/mm/yyyy'),'mm/yy') = to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'mm/yy') " +
							" and (contract_type = 'S' or contract_type = 'L')";
								
	//			//System.out.println(queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//queryString1 = "select to_date(to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'Mon-yy'),'Mon-yy') from dual ";
					queryString1 = "select to_date(to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'dd/mm/yyyy'),'dd/mm/yyyy') from dual ";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						LNG_MON_YR.add(rset1.getDate(1));
					}
					LNG_SALES_GROSS_AMT_USD.add((rset.getString(1) == null ? "-" : rset.getString(1)));
					LNG_SALES_GROSS_AMT_INR.add((rset.getString(2) == null ? "-" : rset.getString(2)));
					tot_qty_inv.add(rset.getString(3));
					tot_inv_qty = Double.parseDouble(rset.getString(3) == null ? "0" : rset.getString(3));
					gross_inv_amt_usd = Double.parseDouble(rset.getString(1) == null ? "0" : rset.getString(1));
					gross_inv_amt_inr = Double.parseDouble(rset.getString(2) == null ? "0" : rset.getString(2));
					
					queryString1 = "SELECT to_char(to_date('"+mon_yr+"', 'mm/yy'),'mm/yyyy') from dual";
					//
					rset2 = stmt2.executeQuery(queryString1);
					if(rset2.next())
					{
						m_y = rset2.getString(1).split("/");
					}
					
					
					
				}
				else
				{
					//queryString1 = "select to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'Mon-yy') from dual ";
					//queryString1 = "select to_date(to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'Mon-yy'),'Mon-yy') from dual ";
					queryString1 = "select to_date(to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'dd/mm/yyyy'),'dd/mm/yyyy') from dual ";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						LNG_MON_YR.add((rset1.getString(1) == null ? "-" : rset1.getString(1)));
					}
					LNG_SALES_GROSS_AMT_USD.add("-");
					LNG_SALES_GROSS_AMT_INR.add("-");
					
					queryString1 = "SELECT to_char(to_date('"+mon_yr+"', 'mm/yy'),'mm/yyyy') from dual";
					//
					rset2 = stmt2.executeQuery(queryString1);
					if(rset2.next())
					{
						m_y = rset2.getString(1).split("/");
					}
					tot_qty_inv.add("0");
					tot_inv_qty = 0;
					gross_inv_amt_usd = 0;
					gross_inv_amt_inr = 0;
					
			//	}
					
				
				//stockMarginGrossRpt(gross_inv_amt_usd, gross_inv_amt_inr, tot_inv_qty, m_y[0], m_y[1]);
				
				
			}
			
			//FINDING SALES GROSS AMOUNT IN USD AND INR ON PER MONTH/YEAR BASIS END
			
			//System.out.println(LNG_MON_YR);
			//System.out.println(LNG_SALES_GROSS_AMT_USD);
			//System.out.println(LNG_SALES_GROSS_AMT_INR);
		}
		catch (Exception e) {
			// TODO: handle exception
		}
	*/}

	
	
	////////////////////////////////////////////////////////////////////////////////
//	introduce by milan MD20111213
//	public void stockMarginGrossRpt(double gross_inv_amt_usd, double gross_inv_amt_inr, double tot_inv_qty, String mon, String yr)
	public void stockMarginGrossRpt()
	{

		try
		{
			
			double total_closing_vol = 0;
			double closing_bal1 = 0;
			
			String last_year = "";
			
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			
			queryString = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
			rset=stmt.executeQuery(queryString);
			if(rset.next())
			{
				to_dt = rset.getString(1);
			}
			else
			{
				to_dt="28/"+month+"/"+year;
			}
			
			last_year = year;
			//FOR OPENING STOCK i.e. TANK READING OF CURRENT MONTH
			double opening_bal1 = 0;
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
						   "WHERE YEAR='"+year+"' AND MONTH='"+month+"'";
			////System.out.println("Select OPENING Stock Details Query = "+month+" "+year+" "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				opening_bal1 = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				opening_bal1 = 0;
			}
						
			double total_value_usd_opening = 0;
			double total_value_usd_opening_basic = 0;
			double total_value_usd_opening1 = 0;
			double total_value_inr_opening = 0;
			double total_value_inr_opening_basic = 0;
			double qty = 0 ;
			double total_vol_opening = 0 ;
			double conf_price = 0;
			String ship_cd = "";			
			/*Vector temp_inv_amt = new Vector();
			Vector temp_CONFIRM_VOL =new Vector();;	
			Vector temp_VALUE_USD=new Vector();;
			Vector temp_VALUE_INR=new Vector();;
*/
			double total_value_inr = 0;
			double total_value_usd = 0;	
			double total_vol = 0;
			double final_total_volume = 0;

			double total_inr_mmbtu = 0;
			boolean break_flag = false;
			
			if(opening_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month')," +
							  "TO_CHAR(A.ACT_ARRV_DT,'YYYY') " +
							  " FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.ACT_ARRV_DT<to_date('"+from_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
				////System.out.println("Confirmed Cargo Arrival Details Query 1st milan >>>>>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;
						
						last_year = rset.getString(5)==null?year:rset.getString(5);
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						////System.out.println("last_year >>>>>>>>>>>> "+last_year);
						//////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							conf_price = 0.0;
							temp_qty = 0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty_2 = 0;
						}
						
						if(opening_bal1>total_vol)
						{
						}
						else
						{
							temp_qty = temp_qty - (total_vol - opening_bal1);
							total_vol = opening_bal1;
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd = "2"; //SBI TT Selling Exchange Rate
						String exchg_rate = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
						}
						else
						{
						}
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						//Updated By Milan Dalsaniya MD20111005
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						if(temp_qty_2!=0.0)//JHP20120426
						{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
						}
						else
						{
							total_cost_per_mmbtu=0;	
						}
						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						
						double value_usd_fin= 0;
						value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
						
						//total_value_usd += temp_value_usd;
						//total_value_usd_opening += temp_value_usd;						
						//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						//total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						total_value_usd += value_usd_fin;
						//total_value_usd_opening += temp_value_usd;
						total_value_usd_opening += value_usd_fin;
						total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
						total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
						
						double temp_value_inr = 0;
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						//total_value_inr += temp_value_inr;
						//total_value_inr_opening += temp_value_inr;
						//total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						if(qty!=0)
						{
							//inr_mmbtu = temp_value_inr/qty;
							inr_mmbtu = value_inr/temp_qty_2;	
						}
						else
						{
						}
						////System.out.println("gadbad --> "+temp_qty_2+" "+qty+" "+temp_value_inr);
						
						total_value_inr += inr_mmbtu*qty;
						//total_value_inr_opening += temp_value_inr;
						total_value_inr_opening += inr_mmbtu*qty;
						total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						////System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
						}
						else
						{
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
			
			//FOR CLOSING STOCK i.e. TANK READING OF NEXT MONTH
			String month_int = "";
			String year_int = year;
			if(Integer.parseInt(month)==12)
			{
				month_int ="01";
				year_int= ""+(Integer.parseInt(year)+1);
			}
			else
			{
				if((Integer.parseInt(month)+1)<10)
				{
					month_int = "0"+(Integer.parseInt(month)+1);
				}
				else
				{
					month_int = ""+(Integer.parseInt(month)+1);
				}					
			}
			
			////System.out.println(">>>>>>>MILAN month_int = "+month_int);
			////System.out.println(">>>>>>>>MILAN year_int = "+year_int);
			//MD007
			queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
	          			   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
			////System.out.println("Select CLOSING Stock Details Query = "+queryString1);
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				closing_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
			}	
			else
			{
				closing_bal1 = 0;
			}
			
			if(closing_bal1!=0)
			{
				Total_Closing_vol = nf5.format(closing_bal1);
				total_closing_vol = closing_bal1;
				closing_bal += closing_bal1;
			}
			else
			{
				Total_Closing_vol = "0";
				total_closing_vol = 0;
				closing_bal += 0;
			}
			//////System.out.println("Total_Closing_vol = "+Total_Closing_vol);		
			
			/*Vector temp_inv_amt1 = new Vector();			
			Vector temp_CONFIRM_VOL1 = new Vector();
			Vector temp_VALUE_USD1 = new Vector();
			Vector temp_VALUE_INR1 = new Vector();	
		*/
					
			double total_usd_per_mmbtu = 0;
			double total_inr_per_usd = 0;
			
			break_flag = false;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
						  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
						  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) AND " +
						  "(to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
			////System.out.println("Confirmed Cargo Arrival Details Query 2nd hhhhhhhhhhhhhhh = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				if(!rset.getString(1).trim().equals("0"))
				{
					double temp_qty = 0;
					double temp_qty_2 = 0;
					double final_seller_inv_amt_usd = 0;
					
					String crg_ref = rset.getString(1);
					String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
					
					//////System.out.println("closing_bal_prev = "+closing_bal_prev);
					queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
								   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
				  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
					////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
//						md20111130					temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						temp_qty = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
						conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
						final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
						total_vol += Double.parseDouble(nf2.format(temp_qty));
						
					}
					else
					{					
						conf_price = 0.0;
						temp_qty = 0;
						final_seller_inv_amt_usd = 0.0;
						temp_qty_2 = 0;
					}
					
					qty = Double.parseDouble(nf1.format(temp_qty));
					total_vol_opening += qty;
										
					double foreign_exchg_rate = 0;
					String exchg_rate_cd="2"; //SBI TT Selling Exchange Rate ...
					String exchg_rate="";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
								   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== milan 007 "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
					}				
					
					if(foreign_exchg_rate>0)
					{
					}
					else
					{
					}
					
					String prov_custom_duty_payment_dt = "";
					String final_custom_duty_payment_dt = "";
					double total_custom_duty_inr = 0;
					double prov_custom_duty_inr = 0;
					double addl_custom_duty_inr = 0;
					double total_custom_duty_usd = 0;
					double prov_custom_duty_usd = 0;
					double addl_custom_duty_usd = 0;
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
					}
					
					queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
								   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
					////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
						final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
					}
					
					double foreign_exchg_rate_2 = 0;
					String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_2 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
								   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
					}
					
					double foreign_exchg_rate_3 = 0;
					String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
					String exchg_rate_3 = "";
					
					queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
								   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
								   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
					////System.out.println("Finding Out EXCHG_RATE =========== kkkk got it"+queryString2);
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
						foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
					}
					
					
					String cut_off_dt = "31/07/2011";
					int diff_in_days = 0;
					
					String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
					rset2=stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
						diff_in_days = rset2.getInt(1);
					}
					
					if(diff_in_days>0)
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
						}
					}
					else
					{
						if(foreign_exchg_rate_2>0.0001)
						{
							prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
						}
						
						if(foreign_exchg_rate_3>0.0001)
						{
							addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
						}
						
						if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
						{
							total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
						}
					}
					
					//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
					//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
					String tax_amt = "";
					String tax_str_cd = "0";
					double cd_charge_per_mmbtu = 0;
					
					
									
					double value_usd = 0;
					double value_inr = 0;
					double inr_mmbtu = 0;
					double total_cost_per_mmbtu = 0;
					
					double temp_value_usd = 0;      				
   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
					value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
					temp_value_usd = Double.parseDouble(nf1.format(value_usd));
					
//MD20111207
					if(temp_qty_2!=0.0)
					{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
					}
					else
					{
						total_cost_per_mmbtu = 0;
					}
//MD20111207					
					cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
					double value_usd_fin= 0;
					double temp_value_usd_fin = 0;
					value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
					
					
					//total_value_usd += temp_value_usd;
					//total_value_usd_opening += temp_value_usd;					
					//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
					
					total_value_usd += value_usd_fin;
					//total_value_usd_opening += temp_value_usd;
					total_value_usd_opening += value_usd_fin;
					total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
					
					double temp_value_inr = 0;    
					//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
					value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
					//VALUE_INR1.add(nf5.format(value_inr));
					temp_value_inr = Double.parseDouble(nf1.format(value_inr));
					//total_value_inr += temp_value_inr;
					//total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
					
					if(qty!=0)
					{
						inr_mmbtu = temp_value_inr/temp_qty_2;
					}
					else
					{
					}
					total_value_inr += inr_mmbtu*qty;
					total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
					
					ship_cd = "0";
					queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
								   "CARGO_REF_CD='"+crg_ref+"'";
					////System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
					}
								
					queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
					////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
					rset2 = stmt2.executeQuery(queryString2);
					if(rset2.next())
					{
					}
					else
					{
					}
				}
			}
			
			Total_vol = nf5.format(total_vol);
			final_total_volume = total_vol;
			
			Total_value_usd = nf5.format(total_value_usd);
			if(total_vol!=0)
			{
				total_usd_per_mmbtu = total_value_usd/total_vol;
			}
			else
			{
				total_usd_per_mmbtu = 0;
			}
			double total_usd_per_mmbtu1 = 0;
			total_usd_per_mmbtu1 = Double.parseDouble(nf2.format(total_usd_per_mmbtu));
			Total_usd_per_mmbtu = nf2.format(total_usd_per_mmbtu);
			Total_value_inr = nf5.format(total_value_inr);			
            //////System.out.println("Priyanka     total_usd_per_mmbtu = "+total_usd_per_mmbtu);
            //////System.out.println("Priyanka     total_inr_mmbtu = "+total_inr_mmbtu);
			
			if(total_vol!=0)
			{
				total_inr_mmbtu = total_value_inr/total_vol;
			}
			else
			{
				total_inr_mmbtu = 0;
			}
			double total_inr_mmbtu1 = 0;
			total_inr_mmbtu1 = Double.parseDouble(nf2.format(total_inr_mmbtu));
			Total_inr_mmbtu = nf2.format(total_inr_mmbtu);
			
			if(total_usd_per_mmbtu1!=0)
			{
				total_inr_per_usd = total_inr_mmbtu1/total_usd_per_mmbtu1;
			}
			else
			{
				total_inr_per_usd = 0;
			}
			Total_inr_per_usd= nf2.format(total_inr_per_usd);
			
			//FOR CLOSING STOCK --- AT COST
			

			
			double total_Closing_value_usd = 0;
			double total_Closing_usd_mmbtu = 0;
			double total_Closing_value_inr = 0;
			double total_Closing_inr_per_usd = 0;
			double total_Closing_inr_mmbtu = 0;
			
			double variance_vol = 0;
			double variance_value_usd = 0;
			double variance_value_inr = 0;
			
			double closing_total_inr_mmbtu = 0;
			
			double closing_total_value_usd= 0;		
			double closing_total_value_inr= 0;	
			double closing_qty = 0 ;
			double closing_conf_price = 0;
			String closing_ship_cd = "";			
			Vector closing_temp_inv_amt = new Vector();			
			Vector closing_temp_tot_cd_amt = new Vector();
			Vector closing_temp_tot_pay_refund = new Vector();
			Vector closing_temp_CONFIRM_VOL = new Vector();	
			Vector closing_temp_VALUE_USD = new Vector();
			Vector closing_temp_VALUE_INR = new Vector();
			Vector CLOSING_INVOICE_DT = new Vector();
			
			break_flag = false;
			total_vol = 0;
			conf_price = 0;
			qty = 0;
			total_vol_opening = 0;
			
			if(closing_bal1>0)				
			{
				queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
							  "TO_CHAR(A.ACT_ARRV_DT,'Month'), TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
							  "A.ACT_ARRV_DT<=to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
				////System.out.println("Confirmed Cargo Arrival Details Query 1st milan 2>>>>> = "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					if(!rset.getString(1).trim().equals("0"))
					{
						double temp_qty = 0;
						double temp_qty_2 = 0;
						double final_seller_inv_amt_usd = 0;

						last_year = rset.getString(5)==null?"year":rset.getString(5);
						String crg_ref = rset.getString(1);
						String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
						
						//////System.out.println("closing_bal_prev = "+closing_bal_prev);
						queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
									   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
					  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
							conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
							final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
							total_vol += Double.parseDouble(nf1.format(temp_qty));
						}
						else
						{					
							conf_price = 0.0;
							final_seller_inv_amt_usd = 0.0;
							temp_qty = 0;
							temp_qty_2 = 0;
						}
						
						if(closing_bal1>total_vol)
						{
							
						}
						else
						{
							temp_qty -= (total_vol - closing_bal1);
							break_flag = true;
						}
						
						qty = Double.parseDouble(nf1.format(temp_qty));
						total_vol_opening += qty;							
						
						double foreign_exchg_rate = 0;
						String exchg_rate_cd="2";
						String exchg_rate="";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
									   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
						}				
						
						if(foreign_exchg_rate>0)
						{
						}
						else
						{
						}
						
						
						String prov_custom_duty_payment_dt = "";
						String final_custom_duty_payment_dt = "";
						double total_custom_duty_inr = 0;
						double prov_custom_duty_inr = 0;
						double addl_custom_duty_inr = 0;
						double total_custom_duty_usd = 0;
						double prov_custom_duty_usd = 0;
						double addl_custom_duty_usd = 0;
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
							prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
						}
						
						queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
									   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
							final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
						}
						
						double foreign_exchg_rate_2 = 0;
						String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_2 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
									   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
						}
						
						double foreign_exchg_rate_3 = 0;
						String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
						String exchg_rate_3 = "";
						
						queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
									   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
									   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
						////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
							foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
						}
						
						String cut_off_dt = "31/07/2011";
						int diff_in_days = 0;
						
						String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
						rset2=stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							diff_in_days = rset2.getInt(1);
						}
						
						if(diff_in_days>0)
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
							}
						}
						else
						{
							if(foreign_exchg_rate_2>0.0001)
							{
								prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
							}
							
							if(foreign_exchg_rate_3>0.0001)
							{
								addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
							}
							
							if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
							{
								total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
							}
						}
						
						
						//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
						//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
						String tax_amt = "";
						String tax_str_cd = "0";
						double cd_charge_per_mmbtu = 0;
						
						
						
						//CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
										
						double value_usd = 0;
						double value_inr = 0;
						double inr_mmbtu = 0;
						double total_cost_per_mmbtu = 0;
						
						double temp_value_usd = 0;      				
	   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
						value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
						temp_value_usd = Double.parseDouble(nf1.format(value_usd));
						if(temp_qty_2!=0.0)//JHP20120426
						{
						total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
						}
						else
						{
							total_cost_per_mmbtu=0;	
						}
						cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
						
						double value_usd_fin= 0;
						double temp_value_usd_fin = 0;
						value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
						//CLOSING_VALUE_USD.add(nf5.format(value_usd));
						//total_Closing_value_usd += temp_value_usd;
						//total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));
						total_Closing_value_usd += value_usd_fin;
						total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));					
						
						
						double temp_value_inr = 0;    
						//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
						value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
						//value_inr = (temp_value_usd_fin * Double.parseDouble(nf2.format(foreign_exchg_rate)));
						//CLOSING_VALUE_INR.add(nf5.format(value_inr));
						//temp_value_inr = Double.parseDouble(nf1.format(value_inr));
						//closing_temp_VALUE_INR.add(nf1.format(value_inr));
						//total_Closing_value_inr += temp_value_inr;
												
						if(qty!=0)
						{
							//inr_mmbtu = temp_value_inr/qty;
							inr_mmbtu = value_inr/temp_qty_2;
						}
						else
						{
						}
						temp_value_inr = Double.parseDouble(nf1.format(inr_mmbtu*qty));
						total_Closing_value_inr += inr_mmbtu*qty;
						
						ship_cd = "0";
						queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
									   "CARGO_REF_CD='"+crg_ref+"'";
						////System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
						}
									
						queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
						////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
						}
						else
						{
						}
					}
					
					if(break_flag)
					{
						break;
					}
				}
			}
									
			double total_Closing_value_usd1 = 0;				
			//Total_Closing_value_usd = nf5.format(total_Closing_value_usd);	
			total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
					
			//Introduce by MIlan Dalsaniya MD20111007
//			 for opening stock				CARGO_REF_CD 			INVOICE_DT2 
			//for  closing stock			CARGO_REF_CD1 			INVOICE_DT1
			// for closing stock at cost	CLOSING_CARGO_REF_CD 	CLOSING_INVOICE_DT
			
			Vector act_arr_dt = new Vector();
			String act_arr_dt1 = "";
			String act_arr_yy1 = "";
			String act_arr_yy2 = "";
			Vector act_arr_sq = new Vector();
			
			
			boolean flg = true;
			long snq = 1;
			queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
			  "TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
			  "A.ACT_ARRV_DT BETWEEN TO_DATE('01/01/"+last_year+"','dd/mm/yyyy') AND to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT";										
			
			////System.out.println("Confirmed Cargo Arrival Details Query 1st milan 3>>>>> = "+last_year+" "+queryString);
			rset = stmt.executeQuery(queryString);
			
			while(rset.next())
			{
				act_arr_dt1 = rset.getString(2)==null?"" : rset.getString(2);
				act_arr_yy1 = rset.getString(3)==null?"" : rset.getString(3);
				if (snq==0){
					act_arr_yy2 = act_arr_yy1;
					snq = 1;
				}
				if (act_arr_yy1.equals(act_arr_yy2))
				{
					flg = true;
					act_arr_yy2 = act_arr_yy1;
					snq++;
				}
				else
				{
					if (flg)
					{
						snq=1;
					}
					flg = true;
					act_arr_yy2 = act_arr_yy1;
					snq++;
				}
				
				
			}
			////System.out.println("for opening stock : "+to_dt);
			////System.out.println("for sequence : "+act_arr_sq);
			////System.out.println("for arrival date : "+act_arr_dt);
			flg = true;
			int o=0, p=0, q=0;
			//for opneing stock
			if (!INVOICE_DT2.isEmpty())
			{
				for (int i =act_arr_dt.size()-1; i>=0; i--)
				{
					if (act_arr_dt.elementAt(i).equals(INVOICE_DT2.elementAt(0)))
					{
						for (int j=i; flg;){
							if (o>=INVOICE_DT2.size())
								break;
							////System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(INVOICE_DT2.elementAt(o)))
							{
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
						}
							
							
					}
				}
			}
			////System.out.println("for opening stock : "+INVOICE_DT2);
			////System.out.println("for opening stock : "+INVOICE_DT2_sq);
//			for closing stock
			o=0; p=0; q=0;
			if (!INVOICE_DT1.isEmpty())
			{
				for (int i =(act_arr_dt.size()-1); i>=0; i--)
				{
					
					if (act_arr_dt.elementAt(i).equals(INVOICE_DT1.elementAt(0)))
					{
						for (int j=i; flg;){
													
							if (o>=INVOICE_DT1.size())
								break;
							////System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(INVOICE_DT1.elementAt(o)))
							{
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
							
							
						}
							
							
					}
				}
			}
			////System.out.println("for closing stock : "+INVOICE_DT1);
			////System.out.println("for closing stock : "+INVOICE_DT1_sq);
			////System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
			////System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
//			for opneing stock at cost
			o=0; p=0; q=0;
			if (!CLOSING_INVOICE_DT.isEmpty())
			{
				for (int i =act_arr_dt.size()-1; i>=0; i--)
				{
					////System.out.println(i);
					if (act_arr_dt.elementAt(i).equals(CLOSING_INVOICE_DT.elementAt(0)))
					{
						for (int j=i; flg;){
							
							if (o>=CLOSING_INVOICE_DT.size())
								break;
							////System.out.println(o);
							if (act_arr_dt.elementAt(j).equals(CLOSING_INVOICE_DT.elementAt(o)))
							{
								o++;
								j--;
								flg = true;
							}
							else
								flg = false;
						}
							
							
					}
				}
			}
			/*////System.out.println("for opening stock : "+INVOICE_DT2);
			////System.out.println("for opening stock : "+INVOICE_DT2_sq);
			////System.out.println("for closing stock : "+INVOICE_DT1);
			////System.out.println("for closing stock : "+INVOICE_DT1_sq);*/
			////System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
			////System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
			
			
			//For Closing stock at NRV		
			String temp_to_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int)+1);	
			String temp_from_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int));
			//////System.out.println("temp_to_dt = "+temp_to_dt);
			//////System.out.println("temp_from_dt = "+temp_from_dt);		
			double sum_qty1 = closing_bal1;
			double sum_qty = 0;
			int count = 0;
			double remaining_qty = 0;
			double sn_rate = 0;
			double nrv_foreign_exchg_rate = 0;
			double sale_usd = 0;
			double nrv_value_inr=0;
			double nrv_inr_mmbtu = 0;
			
			double nrv_rate = 0;
			double sum_nrv_value_usd = 0;
			double sum_nrv_value_inr = 0;
			double sum_nrv_inr_mmbtu = 0;
			double total_sum_inr_mmbtu = 0;
			double final_nrv_value_usd = 0;
			
			double total_qty = 0;
			double total_sum_value_usd = 0;
			double total_rate = 0;
			double total_sum_value_inr = 0;
			double total_nvr_inr_mmbtu = 0;
			double mmbtu_qty = 0;

			double nrv_rate1 = 0;
			
			String month_int_2 = temp_from_dt.substring(3,5);
			String year_int_2 = temp_from_dt.substring(6);
			
			if(Integer.parseInt(month_int_2)==12)
			{
				month_int_2 = "01";
				year_int_2 = ""+(Integer.parseInt(year_int_2)+1);
			}
			else
			{
				if((Integer.parseInt(month_int_2)+1)<10)
				{
					month_int_2 = "0"+(Integer.parseInt(month_int_2)+1);
				}
				else
				{
					month_int_2 = ""+(Integer.parseInt(month_int_2)+1);
				}					
			}
			
			String temp_from_dt2 = "01/"+month_int_2+"/"+year_int_2;
			
			//Following Query Is Commented By Samik Shah On 16th July, 2011 ...
		    /*queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "A.END_DT<TO_DATE('"+temp_to_dt+"','dd/mm/yyyy') AND " +
					      "A.END_DT>=TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') AND A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.RATE";*/
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
			////System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
			stmt.executeUpdate(queryString);
			conn.commit();
			
			//Following Query Is Introduced By Samik Shah On 16th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
						  "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						  "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						  "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
					      "A.TCQ IS NOT NULL AND " +
					      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
					      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
					      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.START_DT";
			
			////System.out.println("SAMIK --> SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "S";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				////System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='S'"; 

				////System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					////System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_SN_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			
			//Following Query Is Introduced By Samik Shah On 16Th July, 2011 ...
			//Following Query Last Modified By Samik Shah On 8th September, 2011 ...
			queryString =  "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						   "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						   "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD FROM FMS7_LOA_MST A WHERE " +
						   "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
						   "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
						   "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
						   "A.TCQ IS NOT NULL AND " +
						   "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
						   "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
						   "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO) ORDER BY A.START_DT";
			
			////System.out.println("LOA DETAILS FROM FMS7_LOA_MST = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{
				String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
				String rate = rset.getString(2)==null?"0":rset.getString(2);
				String sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String sign_dt = rset.getString(4)==null?"":rset.getString(4);
				String start_dt = rset.getString(5)==null?"":rset.getString(5);
				String end_dt = rset.getString(6)==null?"":rset.getString(6);
				String contract_type = "L";
				String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String fgsa_rev_no = "0";
				String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String cust_nm = "";
				String alloc_qty = "0";
				double diff_qty = 0;
				
				queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
						       "CUSTOMER_CD='"+cust_cd+"'";
				////System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
				}
				
				queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
						       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
						       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
						       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
						       "AND CONTRACT_TYPE='L'"; 

				////System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				if(rset1.next())
				{
					alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
					
					if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
					{
						diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
					}
					else if(!tcq.trim().equals("0"))
					{	
						diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
					}
					else
					{
						diff_qty = 0;					
					}								
				}
				else
				{
					diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
				}
				
				if(diff_qty>0 && Double.parseDouble(tcq)>0)
				{
					queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
								   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
								   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
								   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
								   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
								   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
								   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
					////System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_LOA_MST = "+queryString1);
					stmt1.executeUpdate(queryString1);
				}
			}
			conn.commit();
			
			String max_start_date = "";
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT to_char(MAX(START_DT),'dd/mm/yyyy') FROM FMS7_TEMP_STOCK_VALUATION";
			////System.out.println("Query for finding-out MAX Signing Date for Stock Valuation = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				max_start_date = rset.getString(1)==null?"":rset.getString(1);
			}
			
			//Following Query Is Introduced By Samik Shah On 18th July, 2011 ...
			queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
						  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
						  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD," +
						  "A.CUSTOMER_NM,A.ALLOC_QTY,A.DIFF_QTY,CONTRACT_TYPE " +
						  "FROM FMS7_TEMP_STOCK_VALUATION A ORDER BY A.START_DT";
			
			////System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{		
				String temp_sn_rate = "";
				String sn_ref_no = "";
				String cont_type_dtl = "";
				
				String cont_type = rset.getString(14)==null?"":rset.getString(14);
								
				String temp_cust_cd = rset.getString(10)==null?"0":rset.getString(10);
				String temp_sn_no = rset.getString(3)==null?"0":rset.getString(3);
				String temp_fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
				String temp_sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
				String temp_fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
				
				if(cont_type.trim().equalsIgnoreCase("S"))
				{
					queryString1 = "SELECT NVL(SN_REF_NO,' ') FROM FMS7_SN_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND FGSA_NO="+temp_fgsa_no+" AND " +
								   "FGSA_REV_NO="+temp_fgsa_rev_no+" AND SN_NO="+temp_sn_no+" AND " +
								   "SN_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "SN";
				}
				else if(cont_type.trim().equalsIgnoreCase("L"))
				{
					queryString1 = "SELECT NVL(LOA_REF_NO,' ') FROM FMS7_LOA_MST WHERE " +
								   "CUSTOMER_CD="+temp_cust_cd+" AND TENDER_NO="+temp_fgsa_no+" AND " +
								   "LOA_NO="+temp_sn_no+" AND LOA_REV_NO="+temp_sn_rev_no+"";
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						sn_ref_no = rset1.getString(1).trim();
					}
					
					cont_type_dtl = "LOA";
				}
				
				if(sn_ref_no.trim().equals(""))
				{
					sn_ref_no = cont_type_dtl+" - "+temp_sn_no;
				}
				else
				{
					sn_ref_no = cont_type_dtl+" - "+sn_ref_no;
				}
				/*
				temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
				
				sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
				
								
				String tcq = rset.getString(1)==null?"0":rset.getString(1);
				String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
				mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
								
				sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
				
				sum_qty += mmbtu_qty;		
				Sum_qty = nf5.format(sum_qty);
				
				sum_nrv_value_usd += sale_usd;	
				if(sum_nrv_value_usd!=0)
				{
					Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				}
				else
				{
					Sum_nrv_value_usd = "0";
				}
				
				*/
				TCQ.add(rset.getString(1)==null?"0":rset.getString(1));
				RATE.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
				temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
				SN_NO2.add(sn_ref_no);
				SIGNING_DT2.add(rset.getString(5)==null?"":rset.getString(5)); //Actually it stores Contract Start Date of SN/LOA
				FGSA_NO2.add(rset.getString(7)==null?"0":rset.getString(7));
				SN_REV_NO2.add(rset.getString(8)==null?"0":rset.getString(8));
				FGSA_REV_NO2.add(rset.getString(9)==null?"0":rset.getString(9));
				CUSTOMER_CODE.add(rset.getString(10)==null?"0":rset.getString(10));
				
				sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
				
				CUSTOMER_NM.add(rset.getString(11)==null?"":rset.getString(11));
								
				String tcq = rset.getString(1)==null?"0":rset.getString(1);
				String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
				mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
				QTY.add(nf5.format(mmbtu_qty));					
								
				sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
				SALE_USD.add(nf5.format(sale_usd));
				
				sum_qty += mmbtu_qty;		
				Sum_qty = nf5.format(sum_qty);
				
				sum_nrv_value_usd += sale_usd;	
				if(sum_nrv_value_usd!=0)
				{
					Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				}
				else
				{
					Sum_nrv_value_usd = "0";
				}

				exchg_rate_cd = "5";
				
				String nrv_exchg_rate = "";					
				queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
							   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
							   "EFF_DT=TO_DATE('"+to_dt+"','DD/MM/YYYY')";
				////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
				rset2=stmt2.executeQuery(queryString2);
				if(rset2.next())
				{
					nrv_exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
					nrv_foreign_exchg_rate=Double.parseDouble(nrv_exchg_rate);
				}				
				
				if(nrv_foreign_exchg_rate>0)
				{
				}
				else
				{
				}
				
				nrv_value_inr = Double.parseDouble(nf1.format(nrv_foreign_exchg_rate * sale_usd));
				if(nrv_value_inr>0)
				{
				}
				else
				{
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * sn_rate;
				
				if(nrv_inr_mmbtu>0)
				{
				}
				else
				{
				}
				
				if(sum_qty!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}
				
				if(sum_nrv_value_inr!=0)
				{
					Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				}
				else
				{
					Sum_nrv_value_inr = "0";
				}
				if(nrv_rate1!=0 && nrv_foreign_exchg_rate!=0)
				{
					sum_nrv_inr_mmbtu =  nrv_rate1 * nrv_foreign_exchg_rate;
					Sum_nrv_inr_mmbtu = nf.format(sum_nrv_inr_mmbtu);
				}
				else
				{
					Sum_nrv_inr_mmbtu = "0";
				}
				//////System.out.println("nrv_rate"+nrv_rate);
				//////System.out.println("nrv_rate1"+nrv_rate1);
				//////System.out.println("nrv_foreign_exchg_rate"+nrv_foreign_exchg_rate);
				if(nrv_foreign_exchg_rate!=0)
				{
					Nrv_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);	
				}
				else
				{
					Nrv_foreign_exchange_rate = "0";
				}					
				
				if(sum_qty>closing_bal1)
				{
					remaining_qty = closing_bal1 - (sum_qty - mmbtu_qty);
					++count;
					break;							
				}					
			}		
				
			if(count>0)
			{
				sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				Sum_qty = nf5.format(sum_qty);					
				mmbtu_qty = remaining_qty;					
				
				sum_nrv_value_usd = sum_nrv_value_usd - sale_usd;				
				sale_usd = Double.parseDouble(nf1.format(Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)))) * mmbtu_qty));
				sum_nrv_value_usd += sale_usd;
				Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
				
				sum_nrv_value_inr = sum_nrv_value_inr - Double.parseDouble(nf1.format(nrv_value_inr));				
				nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
				
				//sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
				//Sum_qty = nf5.format(sum_qty);
				total_qty = sum_qty;
				if(sum_qty!=0 && sum_nrv_value_usd!=0)
				{
					nrv_rate = sum_nrv_value_usd / sum_qty ;
					nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
					Nrv_rate = nf.format(nrv_rate1);
				}
				else
				{
					Nrv_rate = "0";				
				}				
			}
			else
			{				
				String test_rate = "0";
				if(!max_start_date.trim().equals(""))
				{
			   	 	for(int i=0; i<SIGNING_DT2.size(); i++)
			   	 	{
			   	 		if(!(""+SIGNING_DT2.elementAt(i)).trim().equals(""))
			   	 		{	
				   	 		if((""+SIGNING_DT2.elementAt(i)).trim().equals(max_start_date))
				   	 		{
				   	 			test_rate = ""+RATE.elementAt(i);
				   	 			break;
				   	 		}
			   	 		}
			   	 	}
			   	 	
				}
				
			   	remaining_qty = closing_bal1 - sum_qty;
				double temp_remaining_qty = 0;
				temp_remaining_qty = Double.parseDouble(nf1.format(remaining_qty));
				if(temp_remaining_qty>0)
				{
					Test_qty = nf5.format(temp_remaining_qty);
				}
				else
				{
					Test_qty = "0";
				}	
				
				double temp_test_rate = 0;
				temp_test_rate = Double.parseDouble(nf.format(Double.parseDouble(test_rate)));
				
				if(!test_rate.trim().equals("") && test_rate!=null)
				{
					Test_rate= nf.format(Double.parseDouble(test_rate));
				}
				else
				{
					Test_rate = "0";
				}
				
				sale_usd = temp_remaining_qty * temp_test_rate;
				double temp_sale_usd = 0;
				temp_sale_usd = Double.parseDouble(nf1.format(sale_usd));
				if(temp_sale_usd!=0)
				{
					Test_sale_usd = nf5.format(temp_sale_usd);
				}
				else
				{
					Test_sale_usd = "0" ;
				}
				sum_nrv_value_usd += temp_sale_usd;
				Temp_value_usd = nf1.format(temp_sale_usd);
				
				if(nrv_foreign_exchg_rate>0)
				{
					Test_exch_rate = nf.format(nrv_foreign_exchg_rate);
				}
				else
				{
					Test_exch_rate = "0";
				}
				
				if(nrv_foreign_exchg_rate!=0 && sale_usd!=0)
				{
					nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
					Test_value_inr = nf5.format(nrv_value_inr);
				}
				else
				{
					Test_value_inr = "0";
				}
				sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
				Temp_value_inr = nf1.format(nrv_value_inr);
				
				double temp_nrv_inr_mmbtu = 0;
				nrv_inr_mmbtu = nrv_foreign_exchg_rate * Double.parseDouble(test_rate);
				temp_nrv_inr_mmbtu += Double.parseDouble(nf.format(nrv_inr_mmbtu));
				if(nrv_inr_mmbtu!=0)
				{
						Test_inr_mmbtu = nf.format(temp_nrv_inr_mmbtu);
				}
				else
				{
					Test_inr_mmbtu ="0";
				}	
				sum_nrv_inr_mmbtu = sum_nrv_inr_mmbtu + temp_nrv_inr_mmbtu;
			}	
			
			if(sum_qty<total_closing_vol)
			{
				total_qty = sum_qty + Double.parseDouble(nf1.format(remaining_qty));
			}
			else
			{
				total_qty +=0;
			}			
			if(total_qty>0)
			{
				Total_qty = nf5.format(total_qty);
			}
			else
			{
				Total_qty = "0";
				total_qty = 0;
			}	
			double total_sum_value_usd1 = 0;
			total_sum_value_usd = sum_nrv_value_usd;
			total_sum_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd));
			Total_sum_value_usd = nf5.format(total_sum_value_usd);
			
			double closing_stock_usd = 0;
			double closing_stock_inr = 0;
			double closing_stock_nrv_usd = 0;
			double closing_stock_nrv_inr = 0;
			
			queryString6 = "SELECT NVL(CLOSING_STOCK_NRV_USD,'0'), NVL(CLOSING_STOCK_NRV_INR,'0'), " +
						   "NVL(CLOSING_STOCK_USD,'0'), NVL(CLOSING_STOCK_INR,'0') " +
						   "FROM FMS7_STOCK_VALUATION WHERE " +
						   "MONTH='"+month+"' AND YEAR="+year+"";
			rset6 = stmt6.executeQuery(queryString6);
			while(rset6.next())
			{
				closing_stock_nrv_usd = rset6.getDouble(1);
				closing_stock_nrv_inr = rset6.getDouble(2);
				closing_stock_usd = rset6.getDouble(3);
				closing_stock_inr = rset6.getDouble(4);
			}
			
			Closing_Stock_USD = nf1.format(closing_stock_usd);
			Closing_stock_NRV_USD = nf1.format(closing_stock_nrv_usd);
			Closing_Stock_INR = nf1.format(closing_stock_inr);
			Closing_stock_NRV_INR = nf1.format(closing_stock_nrv_inr);
			
			//Mininmum of Cost or NRV
			if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
				if(closing_stock_nrv_usd<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(closing_stock_nrv_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(closing_stock_nrv_usd));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			else
			{
				if(total_sum_value_usd1<total_Closing_value_usd)
				{
					Total_Closing_value_usd = nf5.format(total_sum_value_usd1);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd1));
				}
				else
				{
					Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
					total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
				}
			}
			//////System.out.println("total_sum_value_usd1 = "+total_sum_value_usd1);				
			//////System.out.println("total_Closing_value_usd = "+total_Closing_value_usd);			
			//////System.out.println("Total_Closing_value_usd = "+Total_Closing_value_usd);			
			//////System.out.println("total_Closing_value_usd1 = "+total_Closing_value_usd1);
			
			if(total_closing_vol!=0)
			{
				total_Closing_usd_mmbtu = total_Closing_value_usd1/total_closing_vol;
			}
			else
			{
				total_Closing_usd_mmbtu = 0;
			}
			Total_Closing_usd_mmbtu = nf.format(total_Closing_usd_mmbtu);				
			
			variance_vol = closing_bal1-opening_bal1;
			if(variance_vol>=0)
			{
				Variance_vol = nf5.format(variance_vol);
			}
			else
			{
				variance_vol = (-1) * variance_vol;
				Variance_vol = "("+nf5.format(variance_vol)+")";
			}
					
			variance_value_usd = total_Closing_value_usd1 - total_value_usd_opening_basic;
			//////System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			//////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);

    		if(total_qty!=0)
    		{
    			total_rate = total_sum_value_usd/total_qty;
    			Total_rate = nf.format(total_rate);
    		}
    		else
    		{
    			Total_rate = "0.00";
    		}			
    		total_sum_value_inr = sum_nrv_value_inr ;    		
    		
    		//Minimum of cost of or NRV for value in INR
    		if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
			{
    			if(closing_stock_nrv_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(closing_stock_nrv_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(closing_stock_nrv_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			else
			{
				if(total_sum_value_inr<total_Closing_value_inr)
				{
					Total_Closing_value_inr = nf5.format(total_sum_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_sum_value_inr));
				}
				else
				{
					Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
					total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
				}
			}
			//Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
			//////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);
			
			if(total_Closing_value_usd1!=0)
			{
				total_Closing_inr_per_usd = total_Closing_value_inr/total_Closing_value_usd1;
			}
			else
			{
				total_Closing_inr_per_usd = 0;
			}
			Total_Closing_inr_per_usd = nf.format(total_Closing_inr_per_usd);
			
			if(total_closing_vol!=0)
			{
				total_Closing_inr_mmbtu = total_Closing_value_inr/total_closing_vol;
			}
			else
			{
				total_Closing_inr_mmbtu = 0;
			}
			Total_Closing_inr_mmbtu = nf.format(total_Closing_inr_mmbtu);
			
			Total_sum_value_inr = nf5.format(total_sum_value_inr);			
			Total_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);			
			total_nvr_inr_mmbtu = sum_nrv_inr_mmbtu; 
			Total_sum_inr_mmbtu = nf.format(total_nvr_inr_mmbtu);	
			
			//////System.out.println("variance_value_usd  = "+variance_value_usd);
			if(variance_value_usd>=0)
			{
				Variance_value_usd = nf5.format(variance_value_usd);
				Variance_value_usd1 = nf1.format(variance_value_usd);
			}
			else
			{
				//////System.out.println("variance_value_usd  = "+variance_value_usd);
				double variance_value_usd1 = (-1) * variance_value_usd;
				Variance_value_usd = "("+nf5.format(variance_value_usd1)+")";
				Variance_value_usd1 = nf1.format(variance_value_usd);
				//////System.out.println("Samik Variance_value_usd1  = "+Variance_value_usd1);
			}
			//////System.out.println("Variance_value_usd  = "+ Variance_value_usd);
			//////System.out.println("Variance_value_usd1  = "+ Variance_value_usd1);
			
			variance_value_inr = total_Closing_value_inr-total_value_inr_opening_basic;
			if(variance_value_inr>=0)
			{
				Variance_value_inr = nf5.format(variance_value_inr);
				Variance_value_inr1 = nf1.format(variance_value_inr);
			}
			else
			{
				double variance_value_inr1 = (-1) * variance_value_inr;
				Variance_value_inr = "("+nf5.format(variance_value_inr1)+")";
				Variance_value_inr1 = nf1.format(variance_value_inr);				
			}			
			
			
			//For Sales Qty
			double temp_sales_qty_total = 0;
			double temp_sales_qty_total1 = 0;
			double temp_margin_value_usd = 0;
			double temp_margin_value_inr = 0;
			double margin_rate = 0;
			double margin_inr_mmbtu = 0;
			
			double sales_usage_value_usd = 0;
			double sales_usage_value_usd1 = 0;
			sales_usage_value_usd = total_value_usd - total_Closing_value_usd1;
		
			////System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>total_Closing_value_usd1  = "+ total_Closing_value_usd1);
			////System.out.println("total_value_usd  = "+ total_value_usd);
			
			Sales_Usage_value_usd = nf5.format(sales_usage_value_usd);
	
			sales_usage_value_usd1 = Double.parseDouble(nf1.format(sales_usage_value_usd));
			
			double sales_usage_value_inr = 0;
			double sales_usage_value_inr1 = 0;
			sales_usage_value_inr = total_value_inr - total_Closing_value_inr;
			Sales_Usage_value_inr = nf5.format(sales_usage_value_inr);
			sales_usage_value_inr1 = Double.parseDouble(nf1.format(sales_usage_value_inr));
			
			setYear(year);
			setMonth(month);
			setTo_year(year);
			setTo_month(month);
			
			get_Sales_dtls_partial();  //Sales Register function called			

			//Following Logic For Calculation Of SUG Netted With Fule Has Been Introduced By Samik Shah On 9th September, 2011 ...
			double sales_regas_qty = 0;
			double regas_qty = 0;
			double re_gas_sug_qty = 0;
			sug_percent = "0";
			
			int temp_cust_cd = 0;
			int temp_re_gas_no = 0;
			int temp_cargo_seq_no = 0;
			
			queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
						   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
						   "FROM FMS7_DAILY_ALLOCATION_DTL " +
						   "WHERE CONTRACT_TYPE='R' AND " +
						   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
						   "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1 = stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				double temp_sales_regas_qty = 0;
				
				sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				
				temp_cust_cd = rset1.getInt(2);
				temp_re_gas_no = rset1.getInt(3);
				temp_cargo_seq_no = rset1.getInt(4);
				
				sug_percent = "0";
				
				queryString2 = "SELECT SYS_USE_GAS " +
							   "FROM FMS7_RE_GAS_CARGO_DTL " +
							   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
							   "RE_GAS_NO="+temp_re_gas_no+" AND " +
							   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
				rset2 = stmt2.executeQuery(queryString2);
			
				if(rset2.next())
				{
					sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
					temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
					sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
				}
				
				
				re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
			}
			//Logic Introduced By Samik Shah On 9th September, 2011 For Finding Out SUG Netted With Fule For The Selected Month Ends Here ...
			
			double flaring = 0;
			double auxiliary_consumption = 0;
			double scv_fuel_consumption = 0;
			double sug = 0;					
			double other_consumption = 0;
			double mass_balancing = 0;
			double consumption_percent = 0;
			double temp_flaring1 = 0;
			double temp_auxiliary_consumption = 0;
			double temp_scv_fuel_consumption = 0;
			double temp_sug = 0;					
			double temp_other_consumption = 0;
			double temp_mass_balancing = 0;
			
			queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
						   "WHERE YEAR='"+year+"' AND MONTH ='"+month+"'";
			////System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
				auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
				scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
				sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
				other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
				mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
			}				
			if(flaring!=0)
			{
				Flaring = nf5.format(flaring);
				temp_flaring1 = Double.parseDouble(nf1.format(flaring));
			}
			else
			{
				Flaring = "-" ;
				temp_flaring1 = 0;
			}
			
			if(auxiliary_consumption!=0)
			{
				Auxiliary_Consumption = nf5.format(auxiliary_consumption);
				temp_auxiliary_consumption = Double.parseDouble(nf1.format(auxiliary_consumption));
			}
			else
			{
				Auxiliary_Consumption = "-";
				temp_auxiliary_consumption = 0;
			}
			if(scv_fuel_consumption!=0)
			{
				Scv_fuel_consumption = nf5.format(scv_fuel_consumption);
				temp_scv_fuel_consumption = Double.parseDouble(nf1.format(scv_fuel_consumption));
			}
			else
			{
				Scv_fuel_consumption = "-";
				temp_scv_fuel_consumption = 0;
			}
			
			if(re_gas_sug_qty>=0)
			{
				sug = (-1)*re_gas_sug_qty;
			}
			
			if(sug!=0)
			{
				Sug = nf5.format(sug);
				temp_sug = Double.parseDouble(nf1.format(sug));
			}
			else
			{
				Sug = "-";
				temp_sug = 0;
			}
			
			if(other_consumption!=0)
			{
				Other_Consumption = nf5.format(other_consumption);
				temp_other_consumption = Double.parseDouble(nf1.format(other_consumption));
			}
			else
			{
				Other_Consumption = "-" ;
				temp_other_consumption = 0;
			}
			if(mass_balancing!=0)
			{
				Mass_Balancing = nf5.format(mass_balancing);
				temp_mass_balancing = Double.parseDouble(nf1.format(mass_balancing));
			}
			else
			{
				Mass_Balancing = "-";
				temp_mass_balancing = 0;
			}
			
			double captive_consumption = 0;
			double captive_consumption1 = 0;
			captive_consumption = temp_flaring1 + temp_auxiliary_consumption + temp_scv_fuel_consumption + temp_sug + temp_other_consumption + temp_mass_balancing;
			Captive_consumption = nf5.format(captive_consumption);
			captive_consumption1 = Double.parseDouble(nf1.format(captive_consumption));
						
			double flaring_usd_mmbtu = 0;
			double auxiliary_usd_mmbtu = 0;
			double scv_fuel_usd_mmbtu = 0;
			double mass_balancing_usd_mmbtu = 0;
			double sug_usd_mmbtu = 0;
			double other_usd_mmbtu = 0;

			double sales_usage_inr_mmbtu = 0;
			double sales_usage_inr_mmbtu1 = 0;

			double sales_usage_usd_mmbtu = 0;
			double sales_usage_usd_mmbtu1 = 0;
			
			double captive_value_usd = 0;
			double captive_value_usd1 = 0;
			
		
			//For Captive Consumption
			double temp_flaring = 0;
			double temp_total_fuel_gas = 0;
			double consumption_qty = 0;
			double consumption_qty1 = 0;
			double consumption_value_usd = 0;
			double consumption_value_inr = 0;
			
		//	fetch_Monthly_Energy();
			
			if(Flaring.trim().equals("-") || Flaring.trim().equals(""))
			{
				Flaring = "0";
			}
			if(Total_Fuel_Gas.trim().equals("-") || Total_Fuel_Gas.trim().equals(""))
			{
				Total_Fuel_Gas = "0";
			}
			
			//temp_flaring = Double.parseDouble(Flaring); //JHP
			temp_flaring = Double.parseDouble(nf1.format(flaring));
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
			consumption_qty = temp_flaring + temp_total_fuel_gas;
			consumption_qty1 = Double.parseDouble(nf1.format(captive_consumption));
			Consumption_qty = nf5.format(captive_consumption);		
			temp_sales_qty_total = sales_qty_total;
			temp_sales_qty_total1 = Double.parseDouble(nf1.format(sales_qty_total));
			
			////System.out.println("MILAN >>>>>>>>>>>> "+sales_gross_amt_usd_total);
			//mm
			temp_margin_value_usd = sales_gross_amt_usd_total;
			temp_margin_value_inr = sales_qty_amt_inr_total;
			
			
						
			double sales_usage_qty = 0;
			double sales_usage_qty1 = 0;
			//sales_usage_qty = temp_sales_qty_total1 + consumption_qty1; //Commented By Samik Shah On 9th September, 2011 ...
			
			
			sales_usage_qty = final_total_volume - total_qty;
			Sales_Usage_qty = nf5.format(sales_usage_qty);
			
			sales_usage_qty1 = Double.parseDouble(nf2.format(sales_usage_qty));
			
			
			if(sales_usage_qty1!=0)
			{
				
				sales_usage_usd_mmbtu = sales_usage_value_usd1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_usd_mmbtu = 0;
			}
			Sales_Usage_usd_mmbtu = nf.format(sales_usage_usd_mmbtu);
			
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			
			//////System.out.println("sales_usage_value_usd1 = "+sales_usage_value_usd1);
			//////System.out.println("sales_usage_qty1 = "+sales_usage_qty1);
			

			
			if(sales_usage_qty1!=0)
			{
				sales_usage_inr_mmbtu = sales_usage_value_inr1 / sales_usage_qty1;
			}
			else
			{
				sales_usage_inr_mmbtu = 0;
			}
			Sales_Usage_inr_mmbtu = nf.format(sales_usage_inr_mmbtu);
			sales_usage_inr_mmbtu1 = Double.parseDouble(nf.format(sales_usage_inr_mmbtu));
			
			
			double flaring_inr_mmbtu = 0;
			double auxiliary_inr_mmbtu = 0;
			double scv_fuel_inr_mmbtu = 0;
			double mass_balancing_inr_mmbtu = 0;
			double sug_inr_mmbtu = 0;
			double other_inr_mmbtu = 0;
			
			flaring_inr_mmbtu = Double.parseDouble(nf1.format(temp_flaring1 * sales_usage_inr_mmbtu1));
			auxiliary_inr_mmbtu = Double.parseDouble(nf1.format(temp_auxiliary_consumption * sales_usage_inr_mmbtu1));
			scv_fuel_inr_mmbtu = Double.parseDouble(nf1.format(temp_scv_fuel_consumption * sales_usage_inr_mmbtu1));
			mass_balancing_inr_mmbtu = Double.parseDouble(nf1.format(temp_mass_balancing * sales_usage_inr_mmbtu1));
			sug_inr_mmbtu = Double.parseDouble(nf1.format(temp_sug * sales_usage_inr_mmbtu1));
			other_inr_mmbtu = Double.parseDouble(nf1.format(temp_other_consumption * sales_usage_inr_mmbtu1));
			
					
			Flaring_inr_mmbtu = nf5.format(flaring_inr_mmbtu);
			Auxiliary_inr_mmbtu = nf5.format(auxiliary_inr_mmbtu);
			Scv_fuel_inr_mmbtu = nf5.format(scv_fuel_inr_mmbtu);
			Mass_balancing_inr_mmbtu = nf5.format(mass_balancing_inr_mmbtu);
			Sug_inr_mmbtu = nf5.format(sug_inr_mmbtu);
			Other_inr_mmbtu = nf5.format(other_inr_mmbtu);
			
			double captive_value_inr = 0;
			double captive_value_inr1 = 0;
			captive_value_inr = flaring_inr_mmbtu + auxiliary_inr_mmbtu + scv_fuel_inr_mmbtu + mass_balancing_inr_mmbtu + sug_inr_mmbtu + other_inr_mmbtu;
			Captive_value_inr = nf5.format(captive_value_inr);
			captive_value_inr1 = Double.parseDouble(nf1.format(captive_value_inr));
			
			double captive_usd_mmbtu = 0;
			double captive_inr_mmbtu = 0;
			
			flaring_usd_mmbtu = temp_flaring1 * sales_usage_usd_mmbtu1;
			auxiliary_usd_mmbtu = temp_auxiliary_consumption * sales_usage_usd_mmbtu1;
			scv_fuel_usd_mmbtu = temp_scv_fuel_consumption * sales_usage_usd_mmbtu1;
			mass_balancing_usd_mmbtu = temp_mass_balancing * sales_usage_usd_mmbtu1;
			sug_usd_mmbtu = temp_sug * sales_usage_usd_mmbtu1;
			other_usd_mmbtu = temp_other_consumption * sales_usage_usd_mmbtu1;
			
			Flaring_usd_mmbtu = nf5.format(flaring_usd_mmbtu);
			Auxiliary_usd_mmbtu = nf5.format(auxiliary_usd_mmbtu);
			Scv_fuel_usd_mmbtu = nf5.format(scv_fuel_usd_mmbtu);
			Mass_balancing_usd_mmbtu = nf5.format(mass_balancing_usd_mmbtu);
			Sug_usd_mmbtu = nf5.format(sug_usd_mmbtu);
			Other_usd_mmbtu = nf5.format(other_usd_mmbtu);
			
			captive_value_usd = flaring_usd_mmbtu + auxiliary_usd_mmbtu + scv_fuel_usd_mmbtu + mass_balancing_usd_mmbtu + sug_usd_mmbtu + other_usd_mmbtu;
			Captive_value_usd = nf5.format(captive_value_usd);
			captive_value_usd1 = Double.parseDouble(nf1.format(captive_value_usd));
			
			if(captive_consumption1!=0)
			{
				captive_usd_mmbtu = captive_value_usd1/captive_consumption1;
				captive_inr_mmbtu = captive_value_inr1/captive_consumption1;
			}
			else
			{
				captive_usd_mmbtu = 0;
				captive_inr_mmbtu = 0;
			}
			
			Captive_usd_mmbtu = nf.format(captive_usd_mmbtu);
			Captive_inr_mmbtu = nf.format(captive_inr_mmbtu);			
						
			Sales_mmbtu_total = nf5.format(temp_sales_qty_total);
			
			double consumption_value_usd1 =0 ;
			consumption_value_usd = consumption_qty1 * sales_usage_usd_mmbtu1;
			Consumption_value_usd = nf5.format(consumption_value_usd);	
			
			consumption_value_usd1 = Double.parseDouble(nf.format(consumption_value_usd));	
			
			sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
			//////System.out.println("consumption_value_usd1 = "+consumption_value_usd1);
			//////System.out.println("consumption_qty = "+consumption_qty);
			//////System.out.println("sales_usage_usd_mmbtu1 = "+sales_usage_usd_mmbtu1);
			
			if(sales_usage_qty!=0 && consumption_qty1!=0)
			{
				consumption_value_inr = sales_usage_value_inr1/sales_usage_qty * consumption_qty1;
			}
			else
			{
				consumption_value_inr = 0;
			}
			double consumption_value_inr1 = 0;
			consumption_value_inr1 = Double.parseDouble(nf.format(consumption_value_inr));	
			Consumption_value_inr = nf5.format(consumption_value_inr);
			
			double cost_sales_usd = 0;
			
			cost_sales_usd = temp_sales_qty_total1 * sales_usage_usd_mmbtu1;
			Cost_sales_usd = nf5.format(cost_sales_usd);
			Cost_sales_usd1 = nf1.format(cost_sales_usd);
			
			double cost_sales_inr = 0;
			cost_sales_inr = sales_usage_value_inr1 - consumption_value_inr;
			Cost_sales_inr = nf5.format(cost_sales_inr);
			
			//For Gross Margin
			Margin_value_usd = nf5.format(temp_margin_value_usd);
			Margin_value_inr = nf5.format(temp_margin_value_inr);
			
			if(temp_sales_qty_total!=0)
			{
				margin_rate = temp_margin_value_usd / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_rate = nf.format(margin_rate);
			
			if(temp_sales_qty_total!=0)
			{
				margin_inr_mmbtu = temp_margin_value_inr / temp_sales_qty_total;
			}
			else
			{
				margin_rate = 0;
			}
			Margin_inr_mmbtu = nf.format(margin_inr_mmbtu);
			
			double margin_sales_value_usd = 0;
			////System.out.println("kkk");
			margin_sales_value_usd = cost_sales_usd;
			Margin_sales_value_usd = nf5.format(margin_sales_value_usd);
			VMargin_sales_value_usd_tmp.add(""+margin_sales_value_usd); //MD20111223
			
			double margin_sales_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_rate = margin_sales_value_usd /temp_sales_qty_total1;
			}
			else
			{
				margin_sales_rate = 0;
			}
			//"MILAN>>>";//
			Margin_sales_rate = nf.format(margin_sales_rate);
			
			double margin_sales_inr = 0 ;
			double margin_sales_inr1 = 0 ;
			margin_sales_inr = cost_sales_inr;
			Margin_sales_inr = nf5.format(margin_sales_inr);
			if(margin_sales_inr>0)
			{
				margin_sales_inr1 = Double.parseDouble(nf1.format(margin_sales_inr));
			}
			
			double margin_sales_inr_mmbtu = 0 ;
			if(temp_sales_qty_total1!=0)
			{
				margin_sales_inr_mmbtu = margin_sales_inr1/temp_sales_qty_total1;
			}
			else
			{
				margin_sales_inr_mmbtu = 0;
			}			
			Margin_sales_inr_mmbtu = nf.format(margin_sales_inr_mmbtu);
			//////System.out.println("margin_sales_inr = "+margin_sales_inr);
			//////System.out.println("temp_sales_qty_total1 = "+temp_sales_qty_total1);
			
			double gross_margin_value_usd = 0;
			gross_margin_value_usd = temp_margin_value_usd - margin_sales_value_usd;
			//mm
			Gross_margin_value_usd = nf5.format(gross_margin_value_usd);
			
			if(sales_qty_total!=0)
			{
				Vmargin_per_mmBTU_usd.add(nf.format(gross_margin_value_usd/temp_sales_qty_total1));
			}
			else
			{
				Vmargin_per_mmBTU_usd.add("0");
			}
			//gross_margin_value_usd/Sales_Usage_qty
			//Sales_Usage_qty
			
			
			double gross_margin_rate = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_rate = gross_margin_value_usd/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_rate = 0;
			}
			Gross_margin_rate = nf.format(gross_margin_rate);
			
			double gross_margin_value_inr = 0;
			gross_margin_value_inr = temp_margin_value_inr - margin_sales_inr;
			Gross_margin_value_inr = nf5.format(gross_margin_value_inr);
			
			
			if(sales_qty_total!=0)
			{
				Vmargin_per_mmBTU_inr.add(nf.format(gross_margin_value_inr/temp_sales_qty_total1));
			}
			else
			{
				Vmargin_per_mmBTU_inr.add("0");
			}
			//gross_margin_value_inr/Sales_Usage_qty
			
			double gross_margin_inr_mmbtu = 0;
			if(temp_sales_qty_total1!=0)
			{
				gross_margin_inr_mmbtu = gross_margin_value_inr/temp_sales_qty_total1;
			}
			else
			{
				gross_margin_inr_mmbtu = 0;
			}
			
			Gross_margin_inr_mmbtu = nf.format(gross_margin_inr_mmbtu);
			
			//For Variable Costs
			//////System.out.println("month = "+month);
			//////System.out.println("year = "+year);
			double sales_qty = 0;
			
			queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
					       "WHERE (CONTRACT_TYPE='S' OR CONTRACT_TYPE='L') AND (GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') and " +
					       "to_date('"+to_dt+"','dd/mm/yyyy'))";
			rset1=stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				sales_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
			}					
			
			double check_value_usd = 0;
			double check_value_inr = 0;
			check_value_usd = captive_value_usd1 - consumption_value_usd1;
			check_value_inr = captive_value_inr1 - consumption_value_inr1;
			
			////System.out.println("captive_value_usd1 = "+captive_value_usd1+",  consumption_value_usd1 = "+consumption_value_usd1);
			if(captive_value_usd1==consumption_value_usd1)
			{
				Check_value_usd = "0";
			}
			else
			{
				Check_value_usd = nf5.format(check_value_usd);
			}
			
			if(captive_value_inr1==consumption_value_inr1)
			{
				Check_value_inr = "0";
			}
			else
			{
				Check_value_inr = nf5.format(check_value_inr);
			}			
			
			double final_value_usd = 0;
			final_value_usd = captive_value_usd1 + variance_value_usd;
			Final_value_usd = nf5.format(final_value_usd);

			double final_value_inr = 0;
			final_value_inr = captive_value_inr1 + variance_value_inr;
			Final_value_inr = nf5.format(final_value_inr);
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>> "+month+" "+year);
			//System.out.println(Gross_margin_value_inr);
			//System.out.println(Gross_margin_value_usd);
			//System.out.println(Margin_sales_inr);
			//System.out.println(Margin_sales_value_usd);
			//System.out.println(Margin_value_inr);
			//System.out.println(Margin_value_usd);
			//System.out.println(sales_qty_total);
			//Sales_Usage_qty
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>");
			
			VGross_margin_value_inr.add(""+Gross_margin_value_inr);
			VGross_margin_value_usd.add(""+Gross_margin_value_usd);
			VMargin_sales_inr.add(""+Margin_sales_inr);
			VMargin_sales_value_usd.add(""+Margin_sales_value_usd);
			VMargin_value_inr.add(""+Margin_value_inr);
			VMargin_value_usd.add(""+Margin_value_usd);
			VSales_Usage_qty.add(nf1.format(sales_qty_total));
			
			String mon_yr = "";
			mon_yr = ""+month+"/"+year;
			queryString1 = "select to_char(to_date('"+mon_yr+"' , 'mm/yyyy'),'Mon-yy') from dual ";
			rset1 = stmt1.executeQuery(queryString1);
			if(rset1.next())
			{
				LNG_MON_YR.add((rset1.getString(1) == null ? "-" : rset1.getString(1)).toUpperCase());
			}
			
			Final_value_inr = nf5.format(final_value_inr);
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>> "+LNG_MON_YR);
			//System.out.println(VGross_margin_value_inr);
			//System.out.println(VGross_margin_value_usd);
			//System.out.println(VMargin_sales_inr);
			//System.out.println(VMargin_sales_value_usd);
			//System.out.println(VMargin_value_inr);
			//System.out.println(VMargin_value_usd);
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>");
			
			//VGross_margin_value_usd
			Gross_margin_value_inr = "";
			Gross_margin_value_usd = "";
			Margin_sales_inr = "";
			Margin_sales_value_usd = "";
			Margin_value_inr = "";
			Margin_value_usd = "";
	
			
			
//			MD2011
			sales_gross_amt_usd_total = 0;
			sales_qty_amt_inr_total = 0;
			sales_qty_total = 0;
			//MD2011
			
			/*Gross Margin = Gross_margin_value_inr
			   Gross_margin_value_usd
			Cost Of Sales = Margin_sales_inr
			    		    Margin_sales_value_usd

			Sales = Margin_value_inr
				  Margin_value_usd*/
		}
		catch(Exception e)
		{
			//System.out.println("Exception in DataBean_Accounting----stockMarginGrossRpt()"+e);
			e.printStackTrace();			
		}
	
	}
///This Two Method for LNG Stock Valuation(INR)(USD)////////////
public void fetch_Stock_Details_INR()
	{
		try
		{	
			queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
		//	//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
			stmt.executeUpdate(queryString);
			conn.commit();
			
			double sum_opening_trading = 0;
			double sum_opening_regas = 0;
			double sum_opening_total = 0;
			
			double sum_receipt_trading = 0;
			double sum_receipt_regas = 0;
			double sum_sales_qty = 0;
			double sum_sales_regas = 0;
			
			double sum_re_gas_sug_qty = 0;
			
			double sum_flaring = 0;
			double sum_auxiliary= 0;
			double sum_scv = 0;
			double sum_sug = 0;					
			double sum_other = 0;
			double sum_mass= 0;
			double sum_consumption = 0;
			double sum_check = 0;
			double closing_total = 0;
			double sum_regas_sug_per = 0;
			
			////System.out.println("month = "+month);
			////System.out.println("to_month = "+to_month);
			//String from_dt = "";
			//String to_dt = "";
			String mon = "";
			if(!(month.trim().equals("0")) && month.trim()!=null && !(to_month.trim().equals("0")) && to_month.trim()!=null )
			{
				for(int l=Integer.parseInt(month.trim()); l<=Integer.parseInt(to_month.trim());l++)
				{
					if(l<10)
					{
						mon = "0"+l;
					}
					else
					{
						mon = ""+l;
					}
					double opening_bal1 = 0;
					String mnth="-";
					queryString1 = "SELECT MONTH,OP_BAL_TRADING,OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
			          "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
		
				//	//System.out.println("Select OPENING Stock Details Query = "+month+" "+year+" "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						opening_bal1 = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2))));
									
						mnth = rset1.getString(1)==null?"00":rset1.getString(1);
				
						
					}
					else
					{
						opening_bal1 = 0;
					}
						
							
						
						
						double total_closing_vol = 0;
						double closing_bal1 = 0;
						
						String last_year = "";
						
						String from_dt = "01/"+mon+"/"+year;
						String to_dt = "";
						
						queryString = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
						rset=stmt.executeQuery(queryString);
						if(rset.next())
						{
							to_dt = rset.getString(1);
						}
						else
						{
							to_dt="28/"+mon+"/"+year;
						}
						
						
						double total_value_usd_opening = 0;
						double total_value_usd_opening_basic = 0;
						double total_value_usd_opening1 = 0;
						double total_value_inr_opening = 0;
						double total_value_inr_opening_basic = 0;
						double qty = 0 ;
						double total_vol_opening = 0 ;
						double conf_price = 0;
						String ship_cd = "";			
						Vector temp_inv_amt = new Vector();
						Vector temp_CONFIRM_VOL =new Vector();;	
						Vector temp_VALUE_USD=new Vector();;
						Vector temp_VALUE_INR=new Vector();;

						double total_value_inr = 0;
						double total_value_usd = 0;	
						double total_vol = 0;
						double final_total_volume = 0;

						double total_inr_mmbtu = 0;
						boolean break_flag = false;
						
					
			if(opening_bal1>0)				
				{		
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(A.ACT_ARRV_DT,'Month')," +
									  "TO_CHAR(A.ACT_ARRV_DT,'YYYY') " +
									  " FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
									  "A.ACT_ARRV_DT<to_date('"+from_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
					//	//System.out.println("Confirmed Cargo Arrival Details Query 1st milan >>>>>>>>> = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							if(!rset.getString(1).trim().equals("0"))
							{
								double temp_qty = 0;
								double temp_qty_2 = 0;
								double final_seller_inv_amt_usd = 0;
								
								CARGO_REF_CD.add(rset.getString(1));
								INVOICE_DT2.add(rset.getString(3)==null?"":rset.getString(3));
								last_year = rset.getString(5)==null?year:rset.getString(5);
								String crg_ref = rset.getString(1);
								String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
							//	//System.out.println("last_year >>>>>>>>>>>> "+last_year);
								////System.out.println("closing_bal_prev = "+closing_bal_prev);
								queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
											   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
							  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
									temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									total_vol += Double.parseDouble(nf1.format(temp_qty));
								}
								else
								{					
									temp_inv_amt.add("0");
									conf_price = 0.0;
									temp_qty = 0;
									final_seller_inv_amt_usd = 0.0;
									temp_qty_2 = 0;
								}
							//	//System.out.println(opening_bal1+"<<<------->>>"+total_vol);
								if(opening_bal1>total_vol)
								{
								}
								else
								{
									temp_qty = temp_qty - (total_vol - opening_bal1);
									total_vol = opening_bal1;
									break_flag = true;
								}
								
								qty = Double.parseDouble(nf1.format(temp_qty));
								temp_CONFIRM_VOL.add(""+qty);
								CONFIRM_VOL.add(nf5.format(qty));	
								CONFIRM_PRICE.add(nf2.format(conf_price));
								total_vol_opening += qty;							
								
								double foreign_exchg_rate = 0;
								String exchg_rate_cd = "2"; //SBI TT Selling Exchange Rate
								String exchg_rate = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
											   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
								}				
								
								if(foreign_exchg_rate>0)
								{
									GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
								}
								else
								{
									GROUP_FOREIGN_EXCHG_RATE.add("0");
								}
								
								String prov_custom_duty_payment_dt = "";
								String final_custom_duty_payment_dt = "";
								double total_custom_duty_inr = 0;
								double prov_custom_duty_inr = 0;
								double addl_custom_duty_inr = 0;
								double total_custom_duty_usd = 0;
								double prov_custom_duty_usd = 0;
								double addl_custom_duty_usd = 0;
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
								}
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
								}
								
								double foreign_exchg_rate_2 = 0;
								String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_2 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
											   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
								}
								
								double foreign_exchg_rate_3 = 0;
								String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_3 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
											   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
								}
								
								String cut_off_dt = "31/07/2011";
								int diff_in_days = 0;
								
								String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									diff_in_days = rset2.getInt(1);
								}
								
								if(diff_in_days>0)
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
									}
								}
								else
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
									}
									
									if(foreign_exchg_rate_3>0.0001)
									{
										addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
									}
									
									if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
									{
										total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
									}
								}
								
								String tax_amt = "";
								String tax_str_cd = "0";
								double cd_charge_per_mmbtu = 0;
								
								
								//CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
												
								double value_usd = 0;
								double value_inr = 0;
								double inr_mmbtu = 0;
								double total_cost_per_mmbtu = 0;
								
								double temp_value_usd = 0;      				
			   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
								value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
								temp_VALUE_USD.add(nf1.format(value_usd));
								temp_value_usd = Double.parseDouble(nf1.format(value_usd));
								if(temp_qty_2!=0.0)
								{
								total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
								}
								else
								{
								 total_cost_per_mmbtu=0;	
								}
								cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
								CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
								
								double value_usd_fin= 0;
								value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
								VALUE_USD.add(nf5.format(value_usd_fin));
								
								//total_value_usd += temp_value_usd;
								//total_value_usd_opening += temp_value_usd;						
								//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
								//total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
								
								total_value_usd += value_usd_fin;
								//total_value_usd_opening += temp_value_usd;
								total_value_usd_opening += value_usd_fin;
								total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
								total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
								
								double temp_value_inr = 0;
								//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
								value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
								//VALUE_INR.add(nf5.format(value_inr));
								temp_value_inr = Double.parseDouble(nf1.format(value_inr));
								temp_VALUE_INR.add(nf1.format(value_inr));
								
								
								if(qty!=0)
								{
									//inr_mmbtu = temp_value_inr/qty;
									inr_mmbtu = value_inr/temp_qty_2;	
									INR_MMBTU.add(nf.format(inr_mmbtu));
								}
								else
								{
									INR_MMBTU.add("0.00");
								}
								////System.out.println("gadbad --> "+temp_qty_2+" "+qty+" "+temp_value_inr);
								//VALUE_INR.add(nf5.format(inr_mmbtu*qty));
								
								
								
								total_value_inr += inr_mmbtu*qty;
								//total_value_inr_opening += temp_value_inr;
								total_value_inr_opening += inr_mmbtu*qty;
								total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
								
								ship_cd = "0";
								queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
											   "CARGO_REF_CD='"+crg_ref+"'";
							///	//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
								}
											
								queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
								////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									 SHIP_NM.add("");
								}
							}
					//		//System.out.println("break_flag::"+break_flag);
							if(break_flag)
							{
								break;
							}
					//		//System.out.println("check::"+total_value_inr_opening_basic);
						}
				}		
						if(total_value_inr_opening_basic>0)
						{
						OP_BAL_TRADING.add(nf.format(total_value_inr_opening_basic));//(1)			
						}
						else
						{
						OP_BAL_TRADING.add("0");//(1)				
						}
					
						double recipt=0;
						String month_int = "";
						String year_int = year;
					//	//System.out.println(">>>>>>>month_int = "+mon);
						if(Integer.parseInt(mon)==12)
						{
							month_int ="01";
							year_int= ""+(Integer.parseInt(year)+1);
						}
						else
						{
							if((Integer.parseInt(mon)+1)<10)
							{
								month_int = "0"+(Integer.parseInt(mon)+1);
							}
							else
							{
								month_int = ""+(Integer.parseInt(mon)+1);
							}					
						}
						
					//	//System.out.println(">>>>>>>month_int = "+month_int);
					//	//System.out.println(">>>>>>>>year = "+year_int);
						
						queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
				          			   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
				//		//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							closing_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						}	
						else
						{
							closing_bal1 = 0;
						}
						
						if(closing_bal1!=0)
						{
							Total_Closing_vol = nf5.format(closing_bal1);
							total_closing_vol = closing_bal1;
							closing_bal += closing_bal1;
						}
						else
						{
							Total_Closing_vol = "0";
							total_closing_vol = 0;
							closing_bal += 0;
						}
					//	//System.out.println("Total_Closing_vol = "+Total_Closing_vol);		
						
						Vector temp_inv_amt1 = new Vector();			
						Vector temp_CONFIRM_VOL1 = new Vector();
						Vector temp_VALUE_USD1 = new Vector();
						Vector temp_VALUE_INR1 = new Vector();	
					
								
						double total_usd_per_mmbtu = 0;
						double total_inr_per_usd = 0;
						double recipt_sum=0;
						break_flag = false;
						conf_price = 0;
						qty = 0;
						total_vol_opening = 0;
						
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
									  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) AND " +
									  "(to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
					//	//System.out.println("Confirmed Cargo Arrival Details Query 2nd hhhhhhhhhhhhhhh = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							if(!rset.getString(1).trim().equals("0"))
							{
								double temp_qty = 0;
								double temp_qty_2 = 0;
								double final_seller_inv_amt_usd = 0;
								
								CARGO_REF_CD1.add(rset.getString(1));
								INVOICE_DT1.add(rset.getString(3)==null?"":rset.getString(3));
								String crg_ref = rset.getString(1);
								String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
								
								////System.out.println("closing_bal_prev = "+closing_bal_prev);
								queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
											   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
							  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
						//		//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{

									temp_qty = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
									temp_inv_amt1.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									total_vol += Double.parseDouble(nf2.format(temp_qty));
									
								}
								else
								{					
									temp_inv_amt1.add("0");
									conf_price = 0.0;
									temp_qty = 0;
									final_seller_inv_amt_usd = 0.0;
									temp_qty_2 = 0;
								}
								
								qty = Double.parseDouble(nf1.format(temp_qty));
								temp_CONFIRM_VOL1.add(""+qty);
								CONFIRM_VOL1.add(nf5.format(qty));	
								CONFIRM_PRICE1.add(nf2.format(conf_price));
								total_vol_opening += qty;
													
								double foreign_exchg_rate = 0;
								String exchg_rate_cd="2"; //SBI TT Selling Exchange Rate ...
								String exchg_rate="";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
											   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
						//		//System.out.println("Finding Out EXCHG_RATE =========== milan 007 "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
								}				
								
								if(foreign_exchg_rate>0)
								{
									GROUP_FOREIGN_EXCHG_RATE1.add(nf2.format(foreign_exchg_rate));
								}
								else
								{
									GROUP_FOREIGN_EXCHG_RATE1.add("0");
								}
								
								String prov_custom_duty_payment_dt = "";
								String final_custom_duty_payment_dt = "";
								double total_custom_duty_inr = 0;
								double prov_custom_duty_inr = 0;
								double addl_custom_duty_inr = 0;
								double total_custom_duty_usd = 0;
								double prov_custom_duty_usd = 0;
								double addl_custom_duty_usd = 0;
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
						//		//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
								}
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
							//	//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
								}
								
								double foreign_exchg_rate_2 = 0;
								String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_2 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
											   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
							//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
								}
								
								double foreign_exchg_rate_3 = 0;
								String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_3 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
											   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
							//	//System.out.println("Finding Out EXCHG_RATE =========== kkkk got it"+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
								}
								
								
								String cut_off_dt = "31/07/2011";
								int diff_in_days = 0;
								
								String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									diff_in_days = rset2.getInt(1);
								}
								
								if(diff_in_days>0)
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
									}
								}
								else
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
									}
									
									if(foreign_exchg_rate_3>0.0001)
									{
										addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
									}
									
									if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
									{
										total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
									}
								}
								
								String tax_amt = "";
								String tax_str_cd = "0";
								double cd_charge_per_mmbtu = 0;
								
								
														
								double value_usd = 0;
								double value_inr = 0;
								double inr_mmbtu = 0;
								double total_cost_per_mmbtu = 0;
								
								double temp_value_usd = 0;      				
			   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
								value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
								temp_VALUE_USD1.add(nf1.format(value_usd));
								temp_value_usd = Double.parseDouble(nf1.format(value_usd));
								

								if(temp_qty_2!=0.0)
								{
									total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
								}
								else
								{
									total_cost_per_mmbtu = 0;
								}
					
								cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
								CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu));
								double value_usd_fin= 0;
								double temp_value_usd_fin = 0;
								value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
								
								VALUE_USD1.add(nf5.format(value_usd_fin));
								
								//total_value_usd += temp_value_usd;
								//total_value_usd_opening += temp_value_usd;					
								//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
								
								total_value_usd += value_usd_fin;
								//total_value_usd_opening += temp_value_usd;
								total_value_usd_opening += value_usd_fin;
								total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
								
								double temp_value_inr = 0;    
								//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
								value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
								//VALUE_INR1.add(nf5.format(value_inr));
								temp_value_inr = Double.parseDouble(nf1.format(value_inr));
								temp_VALUE_INR1.add(nf1.format(value_inr));
								//total_value_inr += temp_value_inr;
								//total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
								
								if(qty!=0)
								{
									inr_mmbtu = temp_value_inr/temp_qty_2;
									INR_MMBTU1.add(nf.format(inr_mmbtu));
								}
								else
								{
									INR_MMBTU1.add("0.00");
								}
								
							//	//System.out.println("inr_mmbtu::"+inr_mmbtu+" qty:"+qty);
								
								VALUE_INR1.add(nf5.format(inr_mmbtu*qty));
								total_value_inr += inr_mmbtu*qty;
								recipt_sum += inr_mmbtu*qty;
								total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
								recipt=Double.parseDouble(nf1.format(recipt_sum));
								ship_cd = "0";
								queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
											   "CARGO_REF_CD='"+crg_ref+"'";
							//	//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
								}
											
								queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
							//	//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									SHIP_NM1.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									 SHIP_NM1.add("");
								}
							}
						}
						
						TRADING_QTY.add(nf.format(recipt)); //(2)
						
						Total_vol = nf5.format(total_vol);
						final_total_volume = total_vol;
						
						Total_value_usd = nf5.format(total_value_usd);
						if(total_vol!=0)
						{
							total_usd_per_mmbtu = total_value_usd/total_vol;
						}
						else
						{
							total_usd_per_mmbtu = 0;
						}
						double total_usd_per_mmbtu1 = 0;
						total_usd_per_mmbtu1 = Double.parseDouble(nf2.format(total_usd_per_mmbtu));
						Total_usd_per_mmbtu = nf2.format(total_usd_per_mmbtu);
						Total_value_inr = nf5.format(total_value_inr);			
			            ////System.out.println("Priyanka     total_usd_per_mmbtu = "+total_usd_per_mmbtu);
			            ////System.out.println("Priyanka     total_inr_mmbtu = "+total_inr_mmbtu);
						
						if(total_vol!=0)
						{
							total_inr_mmbtu = total_value_inr/total_vol;
						}
						else
						{
							total_inr_mmbtu = 0;
						}
						double total_inr_mmbtu1 = 0;
						total_inr_mmbtu1 = Double.parseDouble(nf2.format(total_inr_mmbtu));
						Total_inr_mmbtu = nf2.format(total_inr_mmbtu);
						
						if(total_usd_per_mmbtu1!=0)
						{
							total_inr_per_usd = total_inr_mmbtu1/total_usd_per_mmbtu1;
						}
						else
						{
							total_inr_per_usd = 0;
						}
						Total_inr_per_usd= nf2.format(total_inr_per_usd);
						
						
						double total_Closing_value_usd = 0;
						double total_Closing_usd_mmbtu = 0;
						double total_Closing_value_inr = 0;
						double total_Closing_inr_per_usd = 0;
						double total_Closing_inr_mmbtu = 0;
						
						double variance_vol = 0;
						double variance_value_usd = 0;
						double variance_value_inr = 0;
						
						double closing_total_inr_mmbtu = 0;
						
						double closing_total_value_usd= 0;		
						double closing_total_value_inr= 0;	
						double closing_qty = 0 ;
						double closing_conf_price = 0;
						String closing_ship_cd = "";			
						Vector closing_temp_inv_amt = new Vector();			
						Vector closing_temp_tot_cd_amt = new Vector();
						Vector closing_temp_tot_pay_refund = new Vector();
						Vector closing_temp_CONFIRM_VOL = new Vector();	
						Vector closing_temp_VALUE_USD = new Vector();
						Vector closing_temp_VALUE_INR = new Vector();
						Vector CLOSING_INVOICE_DT = new Vector();
						
						break_flag = false;
						total_vol = 0;
						conf_price = 0;
						qty = 0;
						total_vol_opening = 0;
						
		if(closing_bal1>0)			
		{
							queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
										  "TO_CHAR(A.ACT_ARRV_DT,'Month'), TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
										  "A.ACT_ARRV_DT<=to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
					//		//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 2>>>>> = "+queryString);
							rset = stmt.executeQuery(queryString);
							while(rset.next())
							{
								if(!rset.getString(1).trim().equals("0"))
								{
									double temp_qty = 0;
									double temp_qty_2 = 0;
									double final_seller_inv_amt_usd = 0;

									CLOSING_CARGO_REF_CD.add(rset.getString(1));
									CLOSING_INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
									last_year = rset.getString(5)==null?"year":rset.getString(5);
									String crg_ref = rset.getString(1);
									String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
									
									////System.out.println("closing_bal_prev = "+closing_bal_prev);
									queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
												   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
								  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
							//		//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
										temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
										conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
										closing_temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
										final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
										total_vol += Double.parseDouble(nf1.format(temp_qty));
									}
									else
									{					
										closing_temp_inv_amt.add("0");
										conf_price = 0.0;
										final_seller_inv_amt_usd = 0.0;
										temp_qty = 0;
										temp_qty_2 = 0;
									}
									
									if(closing_bal1>total_vol)
									{
										
									}
									else
									{
										temp_qty -= (total_vol - closing_bal1);
										break_flag = true;
									}
									
									qty = Double.parseDouble(nf1.format(temp_qty));
									closing_temp_CONFIRM_VOL.add(""+qty);
									CLOSING_CONFIRM_VOL.add(nf5.format(qty));	
									CLOSING_CONFIRM_PRICE.add(nf2.format(conf_price));
									total_vol_opening += qty;							
									
									double foreign_exchg_rate = 0;
									String exchg_rate_cd="2";
									String exchg_rate="";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
												   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
								//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
									}				
									
									if(foreign_exchg_rate>0)
									{
										CLOSING_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
									}
									else
									{
										CLOSING_GROUP_FOREIGN_EXCHG_RATE.add("0");
									}
									
									
									String prov_custom_duty_payment_dt = "";
									String final_custom_duty_payment_dt = "";
									double total_custom_duty_inr = 0;
									double prov_custom_duty_inr = 0;
									double addl_custom_duty_inr = 0;
									double total_custom_duty_usd = 0;
									double prov_custom_duty_usd = 0;
									double addl_custom_duty_usd = 0;
									
									queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
												   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
							//		//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
										prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
										prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
									}
									
									queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
												   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
							//		//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
										addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
										final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
									}
									
									double foreign_exchg_rate_2 = 0;
									String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
									String exchg_rate_2 = "";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
												   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
								//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
									}
									
									double foreign_exchg_rate_3 = 0;
									String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
									String exchg_rate_3 = "";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
												   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
								//	//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
									}
									
									String cut_off_dt = "31/07/2011";
									int diff_in_days = 0;
									
									String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										diff_in_days = rset2.getInt(1);
									}
									
									if(diff_in_days>0)
									{
										if(foreign_exchg_rate_2>0.0001)
										{
											total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
										}
									}
									else
									{
										if(foreign_exchg_rate_2>0.0001)
										{
											prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
										}
										
										if(foreign_exchg_rate_3>0.0001)
										{
											addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
										}
										
										if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
										{
											total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
										}
									}
									
									
									String tax_amt = "";
									String tax_str_cd = "0";
									double cd_charge_per_mmbtu = 0;
									
									
									
									//CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
													
									double value_usd = 0;
									double value_inr = 0;
									double inr_mmbtu = 0;
									double total_cost_per_mmbtu = 0;
									
									double temp_value_usd = 0;      				
				   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
									value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
									closing_temp_VALUE_USD.add(nf1.format(value_usd));
									temp_value_usd = Double.parseDouble(nf1.format(value_usd));
									if(temp_qty_2!=0.0)
									{
									total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
									}
									else
									{
										total_cost_per_mmbtu=0;	
									}
									cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
									CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
									
									double value_usd_fin= 0;
									double temp_value_usd_fin = 0;
									value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
									CLOSING_VALUE_USD.add(nf5.format(value_usd_fin));
									//CLOSING_VALUE_USD.add(nf5.format(value_usd));
									//total_Closing_value_usd += temp_value_usd;
									//total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));
									total_Closing_value_usd += value_usd_fin;
									total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));					
									
									
									double temp_value_inr = 0;    
									//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
									value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
									//value_inr = (temp_value_usd_fin * Double.parseDouble(nf2.format(foreign_exchg_rate)));
									//CLOSING_VALUE_INR.add(nf5.format(value_inr));
									//temp_value_inr = Double.parseDouble(nf1.format(value_inr));
									//closing_temp_VALUE_INR.add(nf1.format(value_inr));
									//total_Closing_value_inr += temp_value_inr;
															
									if(qty!=0)
									{
										//inr_mmbtu = temp_value_inr/qty;
										inr_mmbtu = value_inr/temp_qty_2;
										CLOSING_INR_MMBTU.add(nf.format(inr_mmbtu));
									}
									else
									{
										CLOSING_INR_MMBTU.add("0.00");
									}
									CLOSING_VALUE_INR.add(nf5.format(inr_mmbtu*qty));
									temp_value_inr = Double.parseDouble(nf1.format(inr_mmbtu*qty));
									closing_temp_VALUE_INR.add(nf1.format(inr_mmbtu*qty));
									//System.out.println(temp_value_inr+"total_Closing_value_inr::"+total_Closing_value_inr);
									total_Closing_value_inr += Double.parseDouble(nf1.format(inr_mmbtu*qty));;
									
									
									
									ship_cd = "0";
									queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
												   "CARGO_REF_CD='"+crg_ref+"'";
									////System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
									}
												
									queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
									////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
									rset2 = stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										CLOSING_SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
									}
									else
									{
										CLOSING_SHIP_NM.add("");
									}
								}
								
								if(break_flag)
								{
									break;
								}
							}
						}
						
	//System.out.println(closing_bal1+">>>>>>>>>><<<<<<<<>>>>>>>>>>>>>>>>>total_Closing_value_usd1  = "+ total_Closing_value_usd);
												
					//	if(closing_bal1>0)				
					//	{
					//	CLOSING_BAL_TRADING.add(nf.format(total_Closing_value_inr)); //(3)
					//	}
//jaimin	
						double total_Closing_value_usd1 = 0;				
						//Total_Closing_value_usd = nf5.format(total_Closing_value_usd);	
						total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
						
						Vector act_arr_dt = new Vector();
						String act_arr_dt1 = "";
						String act_arr_yy1 = "";
						String act_arr_yy2 = "";
						Vector act_arr_sq = new Vector();
						
						
						boolean flg = true;
						long snq = 1;
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
						  "TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
						  "A.ACT_ARRV_DT BETWEEN TO_DATE('01/01/"+year+"','dd/mm/yyyy') AND to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT";										
						
						//System.out.println("Confirmed Cargo Arrival Details Query >>>>> = "+last_year+" "+queryString);
						rset = stmt.executeQuery(queryString);
						
						while(rset.next())
						{
							act_arr_dt.add(rset.getString(2)==null?"" : rset.getString(2));
							act_arr_dt1 = rset.getString(2)==null?"" : rset.getString(2);
							act_arr_yy1 = rset.getString(3)==null?"" : rset.getString(3);
							if (snq==0){
								act_arr_yy2 = act_arr_yy1;
								snq = 1;
							}
							if (act_arr_yy1.equals(act_arr_yy2))
							{
								flg = true;
								act_arr_sq.add(act_arr_yy1+"-"+snq);
								act_arr_yy2 = act_arr_yy1;
								snq++;
							}
							else
							{
								if (flg)
								{
									snq=1;
								}
								flg = true;
								act_arr_sq.add(act_arr_yy1+"-"+snq);
								act_arr_yy2 = act_arr_yy1;
								snq++;
							}
							
							
						}
						//System.out.println("for opening stock : "+to_dt);
						//System.out.println("for sequence : "+act_arr_sq);
						//System.out.println("for arrival date : "+act_arr_dt);
				
						
						//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
						//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
						
						
						//For Closing stock at NRV		
						String temp_to_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int)+1);	
						String temp_from_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int));
						//System.out.println("temp_to_dt = "+temp_to_dt);
						//System.out.println("temp_from_dt = "+temp_from_dt);		
						double sum_qty1 = closing_bal1;
						double sum_qty = 0;
						int count = 0;
						double remaining_qty = 0;
						double sn_rate = 0;
						double nrv_foreign_exchg_rate = 0;
						double sale_usd = 0;
						double nrv_value_inr=0;
						double nrv_inr_mmbtu = 0;
						
						double nrv_rate = 0;
						double sum_nrv_value_usd = 0;
						double sum_nrv_value_inr = 0;
						double sum_nrv_inr_mmbtu = 0;
						double total_sum_inr_mmbtu = 0;
						double final_nrv_value_usd = 0;
						
						double total_qty = 0;
						double total_sum_value_usd = 0;
						double total_rate = 0;
						double total_sum_value_inr = 0;
						double total_nvr_inr_mmbtu = 0;
						double mmbtu_qty = 0;

						double nrv_rate1 = 0;
						
						String month_int_2 = temp_from_dt.substring(3,5);
						String year_int_2 = temp_from_dt.substring(6);
						
						if(Integer.parseInt(month_int_2)==12)
						{
							month_int_2 = "01";
							year_int_2 = ""+(Integer.parseInt(year_int_2)+1);
						}
						else
						{
							if((Integer.parseInt(month_int_2)+1)<10)
							{
								month_int_2 = "0"+(Integer.parseInt(month_int_2)+1);
							}
							else
							{
								month_int_2 = ""+(Integer.parseInt(month_int_2)+1);
							}					
						}
						
						String temp_from_dt2 = "01/"+month_int_2+"/"+year_int_2;
						
									
						
						queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
						//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
						stmt.executeUpdate(queryString);
						conn.commit();
						
						
						queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
									  "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
									  "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
									  "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
								      "A.TCQ IS NOT NULL AND " +
								      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
								      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.START_DT";
						
						//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
							String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
							String rate = rset.getString(2)==null?"0":rset.getString(2);
							String sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String sign_dt = rset.getString(4)==null?"":rset.getString(4);
							String start_dt = rset.getString(5)==null?"":rset.getString(5);
							String end_dt = rset.getString(6)==null?"":rset.getString(6);
							String contract_type = "S";
							String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
							String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String cust_nm = "";
							String alloc_qty = "0";
							double diff_qty = 0;
							
							queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
									       "CUSTOMER_CD='"+cust_cd+"'";
							//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
							}
							
							queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
									       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
									       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
									       "AND CONTRACT_TYPE='S'"; 

							//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
								
								if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
								{
									diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
								}
								else if(!tcq.trim().equals("0"))
								{	
									diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
								}
								else
								{
									diff_qty = 0;					
								}								
							}
							else
							{
								diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
							}
							
							if(diff_qty>0 && Double.parseDouble(tcq)>0)
							{
								queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
											   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
											   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
											   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
											   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
											   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
											   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
								//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_SN_MST = "+queryString1);
								stmt1.executeUpdate(queryString1);
							}
						}
						
						
						queryString =  "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									   "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									   "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD FROM FMS7_LOA_MST A WHERE " +
									   "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
									   "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
									   "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
									   "A.TCQ IS NOT NULL AND " +
									   "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
									   "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
									   "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO) ORDER BY A.START_DT";
						
						//System.out.println("LOA DETAILS FROM FMS7_LOA_MST = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
							String rate = rset.getString(2)==null?"0":rset.getString(2);
							String sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String sign_dt = rset.getString(4)==null?"":rset.getString(4);
							String start_dt = rset.getString(5)==null?"":rset.getString(5);
							String end_dt = rset.getString(6)==null?"":rset.getString(6);
							String contract_type = "L";
							String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String fgsa_rev_no = "0";
							String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String cust_nm = "";
							String alloc_qty = "0";
							double diff_qty = 0;
							
							queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
									       "CUSTOMER_CD='"+cust_cd+"'";
							//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
							}
							
							queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
									       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
									       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
									       "AND CONTRACT_TYPE='L'"; 

							//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
								
								if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
								{
									diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
								}
								else if(!tcq.trim().equals("0"))
								{	
									diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
								}
								else
								{
									diff_qty = 0;					
								}								
							}
							else
							{
								diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
							}
							
							if(diff_qty>0 && Double.parseDouble(tcq)>0)
							{
								queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
											   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
											   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
											   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
											   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
											   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
											   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
								//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_LOA_MST = "+queryString1);
								stmt1.executeUpdate(queryString1);
							}
						}
						conn.commit();
						
						String max_start_date = "";
					
						queryString = "SELECT to_char(MAX(START_DT),'dd/mm/yyyy') FROM FMS7_TEMP_STOCK_VALUATION";
						//System.out.println("Query for finding-out MAX Signing Date for Stock Valuation = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							max_start_date = rset.getString(1)==null?"":rset.getString(1);
						}
						SIGNING_DT2.clear();
						RATE.clear();
						queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD," +
									  "A.CUSTOMER_NM,A.ALLOC_QTY,A.DIFF_QTY,CONTRACT_TYPE " +
									  "FROM FMS7_TEMP_STOCK_VALUATION A ORDER BY A.START_DT";
						
						//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{		
							String temp_sn_rate = "";
							String sn_ref_no = "";
							String cont_type_dtl = "";
							
							String cont_type = rset.getString(14)==null?"":rset.getString(14);
											
							String temp_cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String temp_sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String temp_fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String temp_sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String temp_fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
							
							if(cont_type.trim().equalsIgnoreCase("S"))
							{
								queryString1 = "SELECT NVL(SN_REF_NO,' ') FROM FMS7_SN_MST WHERE " +
											   "CUSTOMER_CD="+temp_cust_cd+" AND FGSA_NO="+temp_fgsa_no+" AND " +
											   "FGSA_REV_NO="+temp_fgsa_rev_no+" AND SN_NO="+temp_sn_no+" AND " +
											   "SN_REV_NO="+temp_sn_rev_no+"";
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									sn_ref_no = rset1.getString(1).trim();
								}
								
								cont_type_dtl = "SN";
							}
							else if(cont_type.trim().equalsIgnoreCase("L"))
							{
								queryString1 = "SELECT NVL(LOA_REF_NO,' ') FROM FMS7_LOA_MST WHERE " +
											   "CUSTOMER_CD="+temp_cust_cd+" AND TENDER_NO="+temp_fgsa_no+" AND " +
											   "LOA_NO="+temp_sn_no+" AND LOA_REV_NO="+temp_sn_rev_no+"";
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									sn_ref_no = rset1.getString(1).trim();
								}
								
								cont_type_dtl = "LOA";
							}
							
							if(sn_ref_no.trim().equals(""))
							{
								sn_ref_no = cont_type_dtl+" - "+temp_sn_no;
							}
							else
							{
								sn_ref_no = cont_type_dtl+" - "+sn_ref_no;
							}
							
							TCQ.add(rset.getString(1)==null?"0":rset.getString(1));
							RATE.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
							temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
							SN_NO2.add(sn_ref_no);
							SIGNING_DT2.add(rset.getString(5)==null?"":rset.getString(5)); //Actually it stores Contract Start Date of SN/LOA
							FGSA_NO2.add(rset.getString(7)==null?"0":rset.getString(7));
							SN_REV_NO2.add(rset.getString(8)==null?"0":rset.getString(8));
							FGSA_REV_NO2.add(rset.getString(9)==null?"0":rset.getString(9));
							CUSTOMER_CODE.add(rset.getString(10)==null?"0":rset.getString(10));
							
							sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
							
							CUSTOMER_NM.add(rset.getString(11)==null?"":rset.getString(11));
											
							String tcq = rset.getString(1)==null?"0":rset.getString(1);
							String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
							mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
							QTY.add(nf5.format(mmbtu_qty));					
											
							sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
							SALE_USD.add(nf5.format(sale_usd));
							
							sum_qty += mmbtu_qty;		
							Sum_qty = nf5.format(sum_qty);
							
							sum_nrv_value_usd += sale_usd;	
							
							
							if(sum_nrv_value_usd!=0)
							{
								Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
							}
							else
							{
								Sum_nrv_value_usd = "0";
							}
							
							exchg_rate_cd = "5";
							String nrv_exchg_rate = "";					
							queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
										   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
										   "EFF_DT=TO_DATE('"+to_dt+"','DD/MM/YYYY')";
							//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								nrv_exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
								nrv_foreign_exchg_rate=Double.parseDouble(nrv_exchg_rate);
							}				
							
							if(nrv_foreign_exchg_rate>0)
							{
								NRV_FOREIGN_EXCHG_RATE.add(nf.format(nrv_foreign_exchg_rate));
							}
							else
							{
								NRV_FOREIGN_EXCHG_RATE.add("0");
							}
							//System.out.println("sale_usd::::"+sale_usd);
							nrv_value_inr = Double.parseDouble(nf1.format(nrv_foreign_exchg_rate * sale_usd));
							if(nrv_value_inr>0)
							{
								NRV_VALUE_INR.add(nf5.format(nrv_value_inr));
							}
							else
							{
								NRV_VALUE_INR.add("0");
							}
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							
							nrv_inr_mmbtu = nrv_foreign_exchg_rate * sn_rate;
							
							if(nrv_inr_mmbtu>0)
							{
								NRV_INR_MMBTU.add(nf.format(nrv_inr_mmbtu));
							}
							else
							{
								NRV_INR_MMBTU.add("0");
							}
							
							if(sum_qty!=0)
							{
								nrv_rate = sum_nrv_value_usd / sum_qty ;
								nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
								Nrv_rate = nf.format(nrv_rate1);
							}
							else
							{
								Nrv_rate = "0";				
							}
							
							if(sum_nrv_value_inr!=0)
							{
								Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
							}
							else
							{
								Sum_nrv_value_inr = "0";
							}
							if(nrv_rate1!=0 && nrv_foreign_exchg_rate!=0)
							{
								sum_nrv_inr_mmbtu =  nrv_rate1 * nrv_foreign_exchg_rate;
								Sum_nrv_inr_mmbtu = nf.format(sum_nrv_inr_mmbtu);
							}
							else
							{
								Sum_nrv_inr_mmbtu = "0";
							}
							////System.out.println("nrv_rate"+nrv_rate);
							////System.out.println("nrv_rate1"+nrv_rate1);
							////System.out.println("nrv_foreign_exchg_rate"+nrv_foreign_exchg_rate);
							if(nrv_foreign_exchg_rate!=0)
							{
								Nrv_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);	
							}
							else
							{
								Nrv_foreign_exchange_rate = "0";
							}					
							
							//System.out.println(sum_qty+">>>>"+closing_bal1);
							
							if(sum_qty>closing_bal1)
							{
								remaining_qty = closing_bal1 - (sum_qty - mmbtu_qty);
								++count;
								break;							
							}					
						}		
							
						if(count>0)
						{
							sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
							Sum_qty = nf5.format(sum_qty);					
							QTY.setElementAt(nf5.format(remaining_qty),QTY.size()-1);
							mmbtu_qty = remaining_qty;					
							//System.out.println(sum_nrv_value_usd+"-----------------"+sale_usd);
							sum_nrv_value_usd = sum_nrv_value_usd - sale_usd;				
							sale_usd = Double.parseDouble(nf1.format(Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)))) * mmbtu_qty));
							SALE_USD.setElementAt(nf5.format(sale_usd),SALE_USD.size()-1);	
							sum_nrv_value_usd += sale_usd;
							
							Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
							
							sum_nrv_value_inr = sum_nrv_value_inr - Double.parseDouble(nf1.format(nrv_value_inr));				
							nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
							NRV_VALUE_INR.setElementAt(nf5.format(nrv_value_inr),NRV_VALUE_INR.size()-1);
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
							
							//sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
							//Sum_qty = nf5.format(sum_qty);
							total_qty = sum_qty;
							if(sum_qty!=0 && sum_nrv_value_usd!=0)
							{
								nrv_rate = sum_nrv_value_usd / sum_qty ;
								nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
								Nrv_rate = nf.format(nrv_rate1);
							}
							else
							{
								Nrv_rate = "0";				
							}				
						}
						else
						{				
							String test_rate = "0";
							if(!max_start_date.trim().equals(""))
							{
								

						   	 	for(int i=0; i<SIGNING_DT2.size(); i++)
						   	 	{
						   	 		if(!(""+SIGNING_DT2.elementAt(i)).trim().equals(""))
						   	 		{	
							   	 		if((""+SIGNING_DT2.elementAt(i)).trim().equals(max_start_date))
							   	 		{
							   	 			test_rate = ""+RATE.elementAt(i);
							   	 			break;
							   	 		}
						   	 		}
						   	 	}
						   	 	
							
								
							}
							
						   	remaining_qty = closing_bal1 - sum_qty;
							double temp_remaining_qty = 0;
							temp_remaining_qty = Double.parseDouble(nf1.format(remaining_qty));
							if(temp_remaining_qty>0)
							{
								Test_qty = nf5.format(temp_remaining_qty);
							}
							else
							{
								Test_qty = "0";
							}	
							
							double temp_test_rate = 0;
							temp_test_rate = Double.parseDouble(nf.format(Double.parseDouble(test_rate)));
							
							if(!test_rate.trim().equals("") && test_rate!=null)
							{
								Test_rate= nf.format(Double.parseDouble(test_rate));
							}
							else
							{
								Test_rate = "0";
							}
							//System.out.println(temp_remaining_qty+"======================="+temp_test_rate);
							sale_usd = temp_remaining_qty * temp_test_rate;
							double temp_sale_usd = 0;
							temp_sale_usd = Double.parseDouble(nf1.format(sale_usd));
							if(temp_sale_usd!=0)
							{
								Test_sale_usd = nf5.format(temp_sale_usd);
							}
							else
							{
								Test_sale_usd = "0" ;
							}
							sum_nrv_value_usd += temp_sale_usd;
							Temp_value_usd = nf1.format(temp_sale_usd);
							
							CUSTOMER_CODE.add("");
							FGSA_REV_NO.add("");
							SN_REV_NO.add("");
							FGSA_NO.add("");
							TCQ.add("");
							SIGNING_DT2.add("");
							CUSTOMER_NM.add("");
							if(nrv_foreign_exchg_rate>0)
							{
								Test_exch_rate = nf.format(nrv_foreign_exchg_rate);
							}
							else
							{
								Test_exch_rate = "0";
							}
							//System.out.println(nrv_foreign_exchg_rate+"======================="+sale_usd);
							if(nrv_foreign_exchg_rate!=0 && sale_usd!=0)
							{
								
								nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
								Test_value_inr = nf5.format(nrv_value_inr);
							}
							else
							{
								Test_value_inr = "0";
							}
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							Temp_value_inr = nf1.format(nrv_value_inr);
							
							double temp_nrv_inr_mmbtu = 0;
							nrv_inr_mmbtu = nrv_foreign_exchg_rate * Double.parseDouble(test_rate);
							temp_nrv_inr_mmbtu += Double.parseDouble(nf.format(nrv_inr_mmbtu));
							if(nrv_inr_mmbtu!=0)
							{
									Test_inr_mmbtu = nf.format(temp_nrv_inr_mmbtu);
							}
							else
							{
								Test_inr_mmbtu ="0";
							}	
							sum_nrv_inr_mmbtu = sum_nrv_inr_mmbtu + temp_nrv_inr_mmbtu;
						}	
						
						if(sum_qty<total_closing_vol)
						{
							total_qty = sum_qty + Double.parseDouble(nf1.format(remaining_qty));
						}
						else
						{
							total_qty +=0;
						}			
						if(total_qty>0)
						{
							Total_qty = nf5.format(total_qty);
						}
						else
						{
							Total_qty = "0";
							total_qty = 0;
						}	
						double total_sum_value_usd1 = 0;
						total_sum_value_usd = sum_nrv_value_usd;
						total_sum_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd));
						Total_sum_value_usd = nf5.format(total_sum_value_usd);
						
						double closing_stock_usd = 0;
						double closing_stock_inr = 0;
						double closing_stock_nrv_usd = 0;
						double closing_stock_nrv_inr = 0;
						
						queryString6 = "SELECT NVL(CLOSING_STOCK_NRV_USD,'0'), NVL(CLOSING_STOCK_NRV_INR,'0'), " +
									   "NVL(CLOSING_STOCK_USD,'0'), NVL(CLOSING_STOCK_INR,'0') " +
									   "FROM FMS7_STOCK_VALUATION WHERE " +
									   "MONTH='"+mon+"' AND YEAR="+year+"";
						//System.out.println("121212:"+queryString6);
						rset6 = stmt6.executeQuery(queryString6);
						while(rset6.next())
						{
							closing_stock_nrv_usd = rset6.getDouble(1);
							closing_stock_nrv_inr = rset6.getDouble(2);
							closing_stock_usd = rset6.getDouble(3);
							closing_stock_inr = rset6.getDouble(4);
						}
						
						Closing_Stock_USD = nf1.format(closing_stock_usd);
						Closing_stock_NRV_USD = nf1.format(closing_stock_nrv_usd);
						Closing_Stock_INR = nf1.format(closing_stock_inr);
						Closing_stock_NRV_INR = nf1.format(closing_stock_nrv_inr);
						
						//Mininmum of Cost or NRV
						if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
						{
							if(closing_stock_nrv_usd<total_Closing_value_usd)
							{
								Total_Closing_value_usd = nf5.format(closing_stock_nrv_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(closing_stock_nrv_usd));
							}
							else
							{
								Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
							}
						}
						else
						{
							if(total_sum_value_usd1<total_Closing_value_usd)
							{
								Total_Closing_value_usd = nf5.format(total_sum_value_usd1);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd1));
							}
							else
							{
								Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
							}
						}
						////System.out.println("total_sum_value_usd1 = "+total_sum_value_usd1);				
						////System.out.println("total_Closing_value_usd = "+total_Closing_value_usd);			
						////System.out.println("Total_Closing_value_usd = "+Total_Closing_value_usd);			
						////System.out.println("total_Closing_value_usd1 = "+total_Closing_value_usd1);
						
						if(total_closing_vol!=0)
						{
							total_Closing_usd_mmbtu = total_Closing_value_usd1/total_closing_vol;
						}
						else
						{
							total_Closing_usd_mmbtu = 0;
						}
						Total_Closing_usd_mmbtu = nf.format(total_Closing_usd_mmbtu);				
						
						variance_vol = closing_bal1-opening_bal1;
						if(variance_vol>=0)
						{
							Variance_vol = nf5.format(variance_vol);
						}
						else
						{
							variance_vol = (-1) * variance_vol;
							Variance_vol = "("+nf5.format(variance_vol)+")";
						}
								
						variance_value_usd = total_Closing_value_usd1 - total_value_usd_opening_basic;
						////System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
						////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);

			    		if(total_qty!=0)
			    		{
			    			total_rate = total_sum_value_usd/total_qty;
			    			Total_rate = nf.format(total_rate);
			    		}
			    		else
			    		{
			    			Total_rate = "0.00";
			    		}			
			    		total_sum_value_inr = sum_nrv_value_inr ;    		
			    		
			    		//System.out.println(total_sum_value_inr+"()()()()()()"+total_Closing_value_inr);
			    		//Minimum of cost of or NRV for value in INR
			    		if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
						{
			    			if(closing_stock_nrv_inr<total_Closing_value_inr)
							{
								Total_Closing_value_inr = nf5.format(closing_stock_nrv_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(closing_stock_nrv_inr));
							}
							else
							{
								Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
							}
						}
						else
						{
							if(total_sum_value_inr<total_Closing_value_inr)
							{
								Total_Closing_value_inr = nf5.format(total_sum_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_sum_value_inr));
							}
							else
							{
								Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
							}
						}
						//Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
						////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);
						
						if(total_Closing_value_usd1!=0)
						{
							total_Closing_inr_per_usd = total_Closing_value_inr/total_Closing_value_usd1;
						}
						else
						{
							total_Closing_inr_per_usd = 0;
						}
						Total_Closing_inr_per_usd = nf.format(total_Closing_inr_per_usd);
						
						if(total_closing_vol!=0)
						{
							total_Closing_inr_mmbtu = total_Closing_value_inr/total_closing_vol;
						}
						else
						{
							total_Closing_inr_mmbtu = 0;
						}
						Total_Closing_inr_mmbtu = nf.format(total_Closing_inr_mmbtu);
						
						Total_sum_value_inr = nf5.format(total_sum_value_inr);			
						Total_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);			
						total_nvr_inr_mmbtu = sum_nrv_inr_mmbtu; 
						Total_sum_inr_mmbtu = nf.format(total_nvr_inr_mmbtu);	
						
						////System.out.println("variance_value_usd  = "+variance_value_usd);
						if(variance_value_usd>=0)
						{
							Variance_value_usd = nf5.format(variance_value_usd);
							Variance_value_usd1 = nf1.format(variance_value_usd);
						}
						else
						{
							////System.out.println("variance_value_usd  = "+variance_value_usd);
							double variance_value_usd1 = (-1) * variance_value_usd;
							Variance_value_usd = "("+nf5.format(variance_value_usd1)+")";
							Variance_value_usd1 = nf1.format(variance_value_usd);
							////System.out.println("Samik Variance_value_usd1  = "+Variance_value_usd1);
						}
						////System.out.println("Variance_value_usd  = "+ Variance_value_usd);
						////System.out.println("Variance_value_usd1  = "+ Variance_value_usd1);
						
						variance_value_inr = total_Closing_value_inr-total_value_inr_opening_basic;
						if(variance_value_inr>=0)
						{
							Variance_value_inr = nf5.format(variance_value_inr);
							Variance_value_inr1 = nf1.format(variance_value_inr);
						}
						else
						{
							double variance_value_inr1 = (-1) * variance_value_inr;
							Variance_value_inr = "("+nf5.format(variance_value_inr1)+")";
							Variance_value_inr1 = nf1.format(variance_value_inr);				
						}			
						
						
						//For Sales Qty
						double temp_sales_qty_total = 0;
						double temp_sales_qty_total1 = 0;
						double temp_margin_value_usd = 0;
						double temp_margin_value_inr = 0;
						double margin_rate = 0;
						double margin_inr_mmbtu = 0;
						
						double sales_usage_value_usd = 0;
						double sales_usage_value_usd1 = 0;
						sales_usage_value_usd = total_value_usd - total_Closing_value_usd1;
					
							//System.out.println("total_value_usd  = "+ total_value_usd);
						
						Sales_Usage_value_usd = nf5.format(sales_usage_value_usd);
				
						sales_usage_value_usd1 = Double.parseDouble(nf1.format(sales_usage_value_usd));
						
						double sales_usage_value_inr = 0;
						double sales_usage_value_inr1 = 0;
						//System.out.println(total_value_inr+">>>>>>>>>>>>>>>>>> "+ total_Closing_value_inr);						
						sales_usage_value_inr = total_value_inr - total_Closing_value_inr;
						Sales_Usage_value_inr = nf5.format(sales_usage_value_inr);
					sales_usage_value_inr1 = Double.parseDouble(nf1.format(sales_usage_value_inr));
	//	//System.out.println(closing_bal1+">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>total_Closing_value_usd1  = "+ sales_usage_value_inr1);
			
					//System.out.println(total_sum_value_inr+"------------------"+total_Closing_value_inr);
					//	if(closing_bal1<0)				
					//	{
						CLOSING_BAL_TRADING.add(nf.format(total_Closing_value_inr)); //(3)
					//	}
					//	setYear(year);
					//	setMonth(mon);
					//	setTo_year(year);
					//	setTo_month(mon);
						
					//	get_Sales_dtls();  //Sales Register function called			

						
						
						
						double sales_regas_qty = 0;
						double regas_qty = 0;
						double re_gas_sug_qty = 0;
						sug_percent = "0";
						
						int temp_cust_cd = 0;
						int temp_re_gas_no = 0;
						int temp_cargo_seq_no = 0;
						
						queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
									   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
									   "FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
									   "to_date('"+to_dt+"','dd/mm/yyyy'))";
						rset1 = stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							double temp_sales_regas_qty = 0;
							
							sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							
							temp_cust_cd = rset1.getInt(2);
							temp_re_gas_no = rset1.getInt(3);
							temp_cargo_seq_no = rset1.getInt(4);
							
							sug_percent = "0";
							
							queryString2 = "SELECT SYS_USE_GAS " +
										   "FROM FMS7_RE_GAS_CARGO_DTL " +
										   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
										   "RE_GAS_NO="+temp_re_gas_no+" AND " +
										   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
							rset2 = stmt2.executeQuery(queryString2);
						
							if(rset2.next())
							{
								sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
							}
							
							
							re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						}
						
						
						double flaring = 0;
						double auxiliary_consumption = 0;
						double scv_fuel_consumption = 0;
						double sug = 0;					
						double other_consumption = 0;
						double mass_balancing = 0;
						double consumption_percent = 0;
						double temp_flaring1 = 0;
						double temp_auxiliary_consumption = 0;
						double temp_scv_fuel_consumption = 0;
						double temp_sug = 0;					
						double temp_other_consumption = 0;
						double temp_mass_balancing = 0;
						
						queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
									   "WHERE YEAR='"+year+"' AND MONTH ='"+mon+"'";
						//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
							scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
							sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
							other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
							mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
						}				
						if(flaring!=0)
						{
							Flaring = nf5.format(flaring);
							temp_flaring1 = Double.parseDouble(nf1.format(flaring));
						}
						else
						{
							Flaring = "-" ;
							temp_flaring1 = 0;
						}
						
						if(auxiliary_consumption!=0)
						{
							Auxiliary_Consumption = nf5.format(auxiliary_consumption);
							temp_auxiliary_consumption = Double.parseDouble(nf1.format(auxiliary_consumption));
						}
						else
						{
							Auxiliary_Consumption = "-";
							temp_auxiliary_consumption = 0;
						}
						if(scv_fuel_consumption!=0)
						{
							Scv_fuel_consumption = nf5.format(scv_fuel_consumption);
							temp_scv_fuel_consumption = Double.parseDouble(nf1.format(scv_fuel_consumption));
						}
						else
						{
							Scv_fuel_consumption = "-";
							temp_scv_fuel_consumption = 0;
						}
						
						if(re_gas_sug_qty>=0)
						{
							sug = (-1)*re_gas_sug_qty;
						}
						
						if(sug!=0)
						{
							Sug = nf5.format(sug);
							temp_sug = Double.parseDouble(nf1.format(sug));
						}
						else
						{
							Sug = "-";
							temp_sug = 0;
						}
						
						if(other_consumption!=0)
						{
							Other_Consumption = nf5.format(other_consumption);
							temp_other_consumption = Double.parseDouble(nf1.format(other_consumption));
						}
						else
						{
							Other_Consumption = "-" ;
							temp_other_consumption = 0;
						}
						if(mass_balancing!=0)
						{
							Mass_Balancing = nf5.format(mass_balancing);
							temp_mass_balancing = Double.parseDouble(nf1.format(mass_balancing));
						}
						else
						{
							Mass_Balancing = "-";
							temp_mass_balancing = 0;
						}
						
						double captive_consumption = 0;
						double captive_consumption1 = 0;
						captive_consumption = temp_flaring1 + temp_auxiliary_consumption + temp_scv_fuel_consumption + temp_sug + temp_other_consumption + temp_mass_balancing;
						Captive_consumption = nf5.format(captive_consumption);
						captive_consumption1 = Double.parseDouble(nf1.format(captive_consumption));
									
						double flaring_usd_mmbtu = 0;
						double auxiliary_usd_mmbtu = 0;
						double scv_fuel_usd_mmbtu = 0;
						double mass_balancing_usd_mmbtu = 0;
						double sug_usd_mmbtu = 0;
						double other_usd_mmbtu = 0;

						double sales_usage_inr_mmbtu = 0;
						double sales_usage_inr_mmbtu1 = 0;

						double sales_usage_usd_mmbtu = 0;
						double sales_usage_usd_mmbtu1 = 0;
						
						double captive_value_usd = 0;
						double captive_value_usd1 = 0;
						
					
						//For Captive Consumption
						double temp_flaring = 0;
						double temp_total_fuel_gas = 0;
						double consumption_qty = 0;
						double consumption_qty1 = 0;
						double consumption_value_usd = 0;
						double consumption_value_inr = 0;
						
						//fetch_Monthly_Energy();
						
						if(Flaring.trim().equals("-") || Flaring.trim().equals(""))
						{
							Flaring = "0";
						}
						if(Total_Fuel_Gas.trim().equals("-") || Total_Fuel_Gas.trim().equals(""))
						{
							Total_Fuel_Gas = "0";
						}
						
						temp_flaring = Double.parseDouble(Flaring);
						temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
						temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
						consumption_qty = temp_flaring + temp_total_fuel_gas;
						consumption_qty1 = Double.parseDouble(nf1.format(captive_consumption));
						Consumption_qty = nf5.format(captive_consumption);		
						temp_sales_qty_total = sales_qty_total;
						temp_sales_qty_total1 = Double.parseDouble(nf1.format(sales_qty_total));
						
						
					
						temp_margin_value_usd = sales_gross_amt_usd_total;
						temp_margin_value_inr = sales_qty_amt_inr_total;
									
						double sales_usage_qty = 0;
						double sales_usage_qty1 = 0;
						
						//System.out.println("final_total_volume = "+final_total_volume);
						
						sales_usage_qty = final_total_volume - total_qty;
						Sales_Usage_qty = nf5.format(sales_usage_qty);
						
						sales_usage_qty1 = Double.parseDouble(nf2.format(sales_usage_qty));
						
						
						if(sales_usage_qty1!=0)
						{
							
							sales_usage_usd_mmbtu = sales_usage_value_usd1 / sales_usage_qty1;
						}
						else
						{
							sales_usage_usd_mmbtu = 0;
						}
						Sales_Usage_usd_mmbtu = nf.format(sales_usage_usd_mmbtu);
						
						sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
						
						//System.out.println("sales_usage_value_inr1 = "+sales_usage_value_inr1);
						//System.out.println("sales_usage_qty1 = "+sales_usage_qty1);
						

						
						if(sales_usage_qty1!=0)
						{
							sales_usage_inr_mmbtu = sales_usage_value_inr1 / sales_usage_qty1;
						}
						else
						{
							sales_usage_inr_mmbtu = 0;
						}
						Sales_Usage_inr_mmbtu = nf.format(sales_usage_inr_mmbtu);
						sales_usage_inr_mmbtu1 = Double.parseDouble(nf.format(sales_usage_inr_mmbtu));
						//System.out.println("jaimin::"+sales_usage_inr_mmbtu1);
						
						double flaring_inr_mmbtu = 0;
						double auxiliary_inr_mmbtu = 0;
						double scv_fuel_inr_mmbtu = 0;
						double mass_balancing_inr_mmbtu = 0;
						double sug_inr_mmbtu = 0;
						double other_inr_mmbtu = 0;
						
						
						
						flaring_inr_mmbtu = Double.parseDouble(nf1.format(temp_flaring1 * sales_usage_inr_mmbtu1));
						auxiliary_inr_mmbtu = Double.parseDouble(nf1.format(temp_auxiliary_consumption * sales_usage_inr_mmbtu1));
						scv_fuel_inr_mmbtu = Double.parseDouble(nf1.format(temp_scv_fuel_consumption * sales_usage_inr_mmbtu1));
						mass_balancing_inr_mmbtu = Double.parseDouble(nf1.format(temp_mass_balancing * sales_usage_inr_mmbtu1));
						sug_inr_mmbtu = Double.parseDouble(nf1.format(temp_sug * sales_usage_inr_mmbtu1));
						other_inr_mmbtu = Double.parseDouble(nf1.format(temp_other_consumption * sales_usage_inr_mmbtu1));
						
								
						Flaring_inr_mmbtu = nf5.format(flaring_inr_mmbtu);
						Auxiliary_inr_mmbtu = nf5.format(auxiliary_inr_mmbtu);
						Scv_fuel_inr_mmbtu = nf5.format(scv_fuel_inr_mmbtu);
						Mass_balancing_inr_mmbtu = nf5.format(mass_balancing_inr_mmbtu);
						Sug_inr_mmbtu = nf5.format(sug_inr_mmbtu);
						Other_inr_mmbtu = nf5.format(other_inr_mmbtu);
						
						double captive_value_inr = 0;
						double captive_value_inr1 = 0;
						captive_value_inr = flaring_inr_mmbtu + auxiliary_inr_mmbtu + scv_fuel_inr_mmbtu + mass_balancing_inr_mmbtu + sug_inr_mmbtu + other_inr_mmbtu;
						Captive_value_inr = nf5.format(captive_value_inr);
						captive_value_inr1 = Double.parseDouble(nf1.format(captive_value_inr));
						
						double captive_usd_mmbtu = 0;
						double captive_inr_mmbtu = 0;
						
						flaring_usd_mmbtu = temp_flaring1 * sales_usage_usd_mmbtu1;
						auxiliary_usd_mmbtu = temp_auxiliary_consumption * sales_usage_usd_mmbtu1;
						scv_fuel_usd_mmbtu = temp_scv_fuel_consumption * sales_usage_usd_mmbtu1;
						mass_balancing_usd_mmbtu = temp_mass_balancing * sales_usage_usd_mmbtu1;
						sug_usd_mmbtu = temp_sug * sales_usage_usd_mmbtu1;
						other_usd_mmbtu = temp_other_consumption * sales_usage_usd_mmbtu1;
						
						Flaring_usd_mmbtu = nf5.format(flaring_usd_mmbtu);
						Auxiliary_usd_mmbtu = nf5.format(auxiliary_usd_mmbtu);
						Scv_fuel_usd_mmbtu = nf5.format(scv_fuel_usd_mmbtu);
						Mass_balancing_usd_mmbtu = nf5.format(mass_balancing_usd_mmbtu);
						Sug_usd_mmbtu = nf5.format(sug_usd_mmbtu);
						Other_usd_mmbtu = nf5.format(other_usd_mmbtu);
						
						
						
						FLARING.add(nf5.format(flaring_inr_mmbtu));						//(4)
						SCV_FUEL_CONSUMPTION.add(nf5.format(scv_fuel_inr_mmbtu));       //(4)
						SUG.add(nf5.format(sug_inr_mmbtu));								//(4)
						AUXILIARY_CONSUMPTION.add(nf5.format(auxiliary_inr_mmbtu));		//(4)
						MASS_BALANCING.add(nf5.format(mass_balancing_inr_mmbtu));		//(4)
						
						captive_value_usd = flaring_usd_mmbtu + auxiliary_usd_mmbtu + scv_fuel_usd_mmbtu + mass_balancing_usd_mmbtu + sug_usd_mmbtu + other_usd_mmbtu;
						Captive_value_usd = nf5.format(captive_value_usd);
						captive_value_usd1 = Double.parseDouble(nf1.format(captive_value_usd));
						
						if(captive_consumption1!=0)
						{
							captive_usd_mmbtu = captive_value_usd1/captive_consumption1;
							captive_inr_mmbtu = captive_value_inr1/captive_consumption1;
						}
						else
						{
							captive_usd_mmbtu = 0;
							captive_inr_mmbtu = 0;
						}
						
						Captive_usd_mmbtu = nf.format(captive_usd_mmbtu);
						Captive_inr_mmbtu = nf.format(captive_inr_mmbtu);			
									
						Sales_mmbtu_total = nf5.format(temp_sales_qty_total);
						
						double consumption_value_usd1 =0 ;
						consumption_value_usd = consumption_qty1 * sales_usage_usd_mmbtu1;
						Consumption_value_usd = nf5.format(consumption_value_usd);	
						
						consumption_value_usd1 = Double.parseDouble(nf.format(consumption_value_usd));	
						
						sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
						
						if(sales_usage_qty!=0 && consumption_qty1!=0)
						{
							consumption_value_inr = sales_usage_value_inr1/sales_usage_qty * consumption_qty1;
						}
						else
						{
							consumption_value_inr = 0;
						}
						double consumption_value_inr1 = 0;
						consumption_value_inr1 = Double.parseDouble(nf.format(consumption_value_inr));	
						Consumption_value_inr = nf5.format(consumption_value_inr);
						
						double cost_sales_usd = 0;
						
						cost_sales_usd = temp_sales_qty_total1 * sales_usage_usd_mmbtu1;
						Cost_sales_usd = nf5.format(cost_sales_usd);
						Cost_sales_usd1 = nf1.format(cost_sales_usd);
						
						double cost_sales_inr = 0;
						
						//System.out.println(sales_usage_value_inr1+"-----"+consumption_value_inr);
						cost_sales_inr = sales_usage_value_inr1 - consumption_value_inr;
						Cost_sales_inr = nf5.format(cost_sales_inr);
					
						SALES_QTY.add(nf5.format(cost_sales_inr));  //(5)
					
						
						
						
						if(!mnth.equalsIgnoreCase("-"))
						{
							MONTH.add(mnth);
						}
						
						
					}//END of For loop
			
				double temp_opening=0;
				double temp_receipt=0;
				double temp_cos=0;
				double temp_flare=0;
				double temp_ffc=0;
				double temp_ffp=0;
				double temp_ul=0;
				double temp_sug=0;
				double temp_closing=0;
				for(int g=0;g<MONTH.size();g++)
				{
					
					temp_opening +=Double.parseDouble(OP_BAL_TRADING.elementAt(g).toString());
					temp_receipt +=Double.parseDouble(TRADING_QTY.elementAt(g).toString());
					temp_cos +=Double.parseDouble(SALES_QTY.elementAt(g).toString());
					temp_flare +=Double.parseDouble(FLARING.elementAt(g).toString());
					temp_ffc +=Double.parseDouble(SCV_FUEL_CONSUMPTION.elementAt(g).toString());
					temp_ffp +=Double.parseDouble(AUXILIARY_CONSUMPTION.elementAt(g).toString());
					temp_ul +=Double.parseDouble(MASS_BALANCING.elementAt(g).toString());
					temp_sug +=Double.parseDouble(SUG.elementAt(g).toString());
					temp_closing +=Double.parseDouble(CLOSING_BAL_TRADING.elementAt(g).toString());
					
	CHECK.add(nf.format((Double.parseDouble(OP_BAL_TRADING.elementAt(g).toString())+Double.parseDouble(TRADING_QTY.elementAt(g).toString()))-(Double.parseDouble(SALES_QTY.elementAt(g).toString())+Double.parseDouble(FLARING.elementAt(g).toString())+Double.parseDouble(SCV_FUEL_CONSUMPTION.elementAt(g).toString())+Double.parseDouble(AUXILIARY_CONSUMPTION.elementAt(g).toString())+Double.parseDouble(MASS_BALANCING.elementAt(g).toString())+Double.parseDouble(SUG.elementAt(g).toString())+Double.parseDouble(CLOSING_BAL_TRADING.elementAt(g).toString())))+"");					
				}
				
				 Sum_opening_trading = nf.format(temp_opening)+"";
				 Sum_receipt_trading = nf.format(temp_receipt)+"";
				 Sum_sales_qty = nf.format(temp_cos)+"";
				 Sum_flaring = nf.format(temp_flare)+"";
				 Sum_auxiliary =nf.format(temp_ffp)+"";
				 Sum_scv =nf.format(temp_ffc)+"";
				 Sum_sug = nf.format(temp_sug)+"";
				 Sum_mass = nf.format(temp_ul)+"";
				 Closing_trading = nf.format(temp_closing)+"";

				
				 Sum_check=nf.format((Double.parseDouble(Sum_opening_trading)+Double.parseDouble(Sum_receipt_trading))-(Double.parseDouble(Sum_sales_qty)+Double.parseDouble(Sum_flaring)+Double.parseDouble(Sum_auxiliary)+Double.parseDouble(Sum_scv)+Double.parseDouble(Sum_sug)+Double.parseDouble(Sum_mass)+Double.parseDouble(Closing_trading)))+"";
				
				
			}
			else if(!(year.trim().equalsIgnoreCase("0")) && !(year.trim().equalsIgnoreCase("")) && year!=null)
			{
				
				
			}
			
			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void fetch_Stock_Details_USD()
	{
		try
		{	
			queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
			//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
			stmt.executeUpdate(queryString);
			conn.commit();
			
			
			double sum_opening_trading = 0;
			double sum_opening_regas = 0;
			double sum_opening_total = 0;
			
			double sum_receipt_trading = 0;
			double sum_receipt_regas = 0;
			double sum_sales_qty = 0;
			double sum_sales_regas = 0;
			
			double sum_re_gas_sug_qty = 0;
			
			double sum_flaring = 0;
			double sum_auxiliary= 0;
			double sum_scv = 0;
			double sum_sug = 0;					
			double sum_other = 0;
			double sum_mass= 0;
			double sum_consumption = 0;
			double sum_check = 0;
			double closing_total = 0;
			double sum_regas_sug_per = 0;
			
			//System.out.println("month = "+month);
			//System.out.println("to_month = "+to_month);
			//String from_dt = "";
			//String to_dt = "";
			String mon = "";
			if(!(month.trim().equals("0")) && month.trim()!=null && !(to_month.trim().equals("0")) && to_month.trim()!=null )
			{
				for(int l=Integer.parseInt(month.trim()); l<=Integer.parseInt(to_month.trim());l++)
				{
					if(l<10)
					{
						mon = "0"+l;
					}
					else
					{
						mon = ""+l;
					}
					double opening_bal1 = 0;
					String mnth="-";
					queryString1 = "SELECT MONTH,OP_BAL_TRADING,OP_BAL_REGAS FROM FMS7_OPENING_STOCK_DTLS " +
			          "WHERE YEAR='"+year+"' AND MONTH='"+mon+"'";
		
				//	//System.out.println("Select OPENING Stock Details Query = "+month+" "+year+" "+queryString1);
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						opening_bal1 = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2))));
									
						mnth = rset1.getString(1)==null?"00":rset1.getString(1);
				
						
					}
					else
					{
						opening_bal1 = 0;
					}
						
							
						
						
						double total_closing_vol = 0;
						double closing_bal1 = 0;
						
						String last_year = "";
						
						String from_dt = "01/"+mon+"/"+year;
						String to_dt = "";
						
						queryString = "SELECT to_char(LAST_DAY(TO_DATE('"+from_dt+"','DD/MM/YYYY')),'DD/MM/YYYY') from dual";
						rset=stmt.executeQuery(queryString);
						if(rset.next())
						{
							to_dt = rset.getString(1);
						}
						else
						{
							to_dt="28/"+mon+"/"+year;
						}
						
						
						double total_value_usd_opening = 0;
						double total_value_usd_opening_basic = 0;
						double total_value_usd_opening1 = 0;
						double total_value_inr_opening = 0;
						double total_value_inr_opening_basic = 0;
						double qty = 0 ;
						double total_vol_opening = 0 ;
						double conf_price = 0;
						String ship_cd = "";			
						Vector temp_inv_amt = new Vector();
						Vector temp_CONFIRM_VOL =new Vector();;	
						Vector temp_VALUE_USD=new Vector();;
						Vector temp_VALUE_INR=new Vector();;

						double total_value_inr = 0;
						double total_value_usd = 0;	
						double total_vol = 0;
						double final_total_volume = 0;
						double open_qty=0;
						double open_qty_sum=0;
						double total_inr_mmbtu = 0;
						boolean break_flag = false;
						
						//System.out.println("open_qty_sum::"+open_qty_sum);
			if(opening_bal1>0)				
				{
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(A.ACT_ARRV_DT,'Month')," +
									  "TO_CHAR(A.ACT_ARRV_DT,'YYYY') " +
									  " FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
									  "A.ACT_ARRV_DT<to_date('"+from_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
						//System.out.println("Confirmed Cargo Arrival Details Query 1st milan >>>>>>>>> = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							if(!rset.getString(1).trim().equals("0"))
							{
								double temp_qty = 0;
								double temp_qty_2 = 0;
								double final_seller_inv_amt_usd = 0;
								
								CARGO_REF_CD.add(rset.getString(1));
								INVOICE_DT2.add(rset.getString(3)==null?"":rset.getString(3));
								last_year = rset.getString(5)==null?year:rset.getString(5);
								String crg_ref = rset.getString(1);
								String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
							//	//System.out.println("last_year >>>>>>>>>>>> "+last_year);
								////System.out.println("closing_bal_prev = "+closing_bal_prev);
								queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
											   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
							  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
									temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									total_vol += Double.parseDouble(nf1.format(temp_qty));
								}
								else
								{					
									temp_inv_amt.add("0");
									conf_price = 0.0;
									temp_qty = 0;
									final_seller_inv_amt_usd = 0.0;
									temp_qty_2 = 0;
								}
								//System.out.println(opening_bal1+"<<<------->>>"+total_vol);
								if(opening_bal1>total_vol)
								{
								}
								else
								{
									temp_qty = temp_qty - (total_vol - opening_bal1);
									total_vol = opening_bal1;
									break_flag = true;
								}
								
								
								qty = Double.parseDouble(nf1.format(temp_qty));
								
								temp_CONFIRM_VOL.add(""+qty);
								//System.out.println("Check QTY:::::::"+qty);
								
								CONFIRM_VOL.add(nf5.format(qty));	
								CONFIRM_PRICE.add(nf2.format(conf_price));
								total_vol_opening += qty;							
								
								double foreign_exchg_rate = 0;
								String exchg_rate_cd = "2"; //SBI TT Selling Exchange Rate
								String exchg_rate = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
											   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
								}				
								
								if(foreign_exchg_rate>0)
								{
									GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
								}
								else
								{
									GROUP_FOREIGN_EXCHG_RATE.add("0");
								}
								
								String prov_custom_duty_payment_dt = "";
								String final_custom_duty_payment_dt = "";
								double total_custom_duty_inr = 0;
								double prov_custom_duty_inr = 0;
								double addl_custom_duty_inr = 0;
								double total_custom_duty_usd = 0;
								double prov_custom_duty_usd = 0;
								double addl_custom_duty_usd = 0;
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
								}
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								////System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
								}
								
								double foreign_exchg_rate_2 = 0;
								String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_2 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
											   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
								}
								
								double foreign_exchg_rate_3 = 0;
								String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_3 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
											   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
								////System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
								}
								
								String cut_off_dt = "31/07/2011";
								int diff_in_days = 0;
								
								String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									diff_in_days = rset2.getInt(1);
								}
								
								if(diff_in_days>0)
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
									}
								}
								else
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
									}
									
									if(foreign_exchg_rate_3>0.0001)
									{
										addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
									}
									
									if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
									{
										total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
									}
								}
								
								String tax_amt = "";
								String tax_str_cd = "0";
								double cd_charge_per_mmbtu = 0;
								
								
								//CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
												
								double value_usd = 0;
								double value_inr = 0;
								double inr_mmbtu = 0;
								double total_cost_per_mmbtu = 0;
								
								double temp_value_usd = 0;      				
			   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
								value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
								temp_VALUE_USD.add(nf1.format(value_usd));
								temp_value_usd = Double.parseDouble(nf1.format(value_usd));
							if(temp_qty_2!=0.0)
							{
								total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
							}
							else
							{
								total_cost_per_mmbtu=0;
							}
								cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
								CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
								
								double value_usd_fin= 0;
								value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
								VALUE_USD.add(nf5.format(value_usd_fin));
								
								//total_value_usd += temp_value_usd;
								//total_value_usd_opening += temp_value_usd;						
								//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
								//total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
								
								total_value_usd += value_usd_fin;
								//total_value_usd_opening += temp_value_usd;
								total_value_usd_opening += value_usd_fin;
								open_qty +=value_usd_fin;
								
								total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd_opening));
								total_value_usd_opening_basic = Double.parseDouble(nf1.format(total_value_usd_opening));
								open_qty_sum = Double.parseDouble(nf1.format(open_qty));
								
								double temp_value_inr = 0;
								//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
								value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
								//VALUE_INR.add(nf5.format(value_inr));
								temp_value_inr = Double.parseDouble(nf1.format(value_inr));
								temp_VALUE_INR.add(nf1.format(value_inr));
								
								
								if(qty!=0)
								{
									//inr_mmbtu = temp_value_inr/qty;
									inr_mmbtu = value_inr/temp_qty_2;	
									INR_MMBTU.add(nf.format(inr_mmbtu));
								}
								else
								{
									INR_MMBTU.add("0.00");
								}
								////System.out.println("gadbad --> "+temp_qty_2+" "+qty+" "+temp_value_inr);
								//VALUE_INR.add(nf5.format(inr_mmbtu*qty));
								
								
								
								total_value_inr += inr_mmbtu*qty;
								//total_value_inr_opening += temp_value_inr;
								total_value_inr_opening += inr_mmbtu*qty;
								total_value_inr_opening_basic = Double.parseDouble(nf1.format(total_value_inr_opening));
								
								ship_cd = "0";
								queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
											   "CARGO_REF_CD='"+crg_ref+"'";
							///	//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
								}
											
								queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
								////System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									 SHIP_NM.add("");
								}
							}
							//System.out.println("break_flag::"+break_flag);
							if(break_flag)
							{
								break;
							}
							
						}
				}		
						//System.out.println("temp_CONFIRM_VOL.size()::"+open_qty_sum);
						if(open_qty_sum>0)
						{
						OP_BAL_TRADING.add(nf.format(open_qty_sum));//(1)			
						}
						else
						{
						OP_BAL_TRADING.add("0");//(1)			
						}
					    
						double recipt=0;
						String month_int = "";
						String year_int = year;
						//System.out.println(">>>>>>>month_int = "+mon);
						if(Integer.parseInt(mon)==12)
						{
							month_int ="01";
							year_int= ""+(Integer.parseInt(year)+1);
						}
						else
						{
							if((Integer.parseInt(mon)+1)<10)
							{
								month_int = "0"+(Integer.parseInt(mon)+1);
							}
							else
							{
								month_int = ""+(Integer.parseInt(mon)+1);
							}					
						}
						
						//System.out.println(">>>>>>>month_int = "+month_int);
						//System.out.println(">>>>>>>>year = "+year_int);
						
						queryString1 = "SELECT OP_BAL_TRADING, OP_BAL_REGAS, ACTUAL_TANK_READING FROM FMS7_OPENING_STOCK_DTLS " +
				          			   "WHERE YEAR='"+year_int+"' AND MONTH='"+month_int+"'";
						//System.out.println("Select CLOSING Stock Details Query = "+queryString1);
						rset1 = stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							closing_bal1 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
						}	
						else
						{
							closing_bal1 = 0;
						}
						
						if(closing_bal1!=0)
						{
							Total_Closing_vol = nf5.format(closing_bal1);
							total_closing_vol = closing_bal1;
							closing_bal += closing_bal1;
						}
						else
						{
							Total_Closing_vol = "0";
							total_closing_vol = 0;
							closing_bal += 0;
						}
						//System.out.println("Total_Closing_vol = "+Total_Closing_vol);		
						
						Vector temp_inv_amt1 = new Vector();			
						Vector temp_CONFIRM_VOL1 = new Vector();
						Vector temp_VALUE_USD1 = new Vector();
						Vector temp_VALUE_INR1 = new Vector();	
					
								
						double total_usd_per_mmbtu = 0;
						double total_inr_per_usd = 0;
						double recipt_sum=0;
						break_flag = false;
						conf_price = 0;
						qty = 0;
						total_vol_opening = 0;
						
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
									  "TO_CHAR(A.ACT_ARRV_DT,'Month') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
									  "A.ACT_ARRV_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) AND " +
									  "(to_date('"+to_dt+"','dd/mm/yyyy'))  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
						//System.out.println("Confirmed Cargo Arrival Details Query 2nd hhhhhhhhhhhhhhh = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							if(!rset.getString(1).trim().equals("0"))
							{
								double temp_qty = 0;
								double temp_qty_2 = 0;
								double final_seller_inv_amt_usd = 0;
								
								CARGO_REF_CD1.add(rset.getString(1));
								INVOICE_DT1.add(rset.getString(3)==null?"":rset.getString(3));
								String crg_ref = rset.getString(1);
								String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
								
								////System.out.println("closing_bal_prev = "+closing_bal_prev);
								queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
											   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
							  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
								//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{

									temp_qty = Double.parseDouble(nf2.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
									conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
									temp_inv_amt1.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
									total_vol += Double.parseDouble(nf2.format(temp_qty));
									
								}
								else
								{					
									temp_inv_amt1.add("0");
									conf_price = 0.0;
									temp_qty = 0;
									final_seller_inv_amt_usd = 0.0;
									temp_qty_2 = 0;
								}
								
								qty = Double.parseDouble(nf1.format(temp_qty));
								temp_CONFIRM_VOL1.add(""+qty);
								CONFIRM_VOL1.add(nf5.format(qty));	
								CONFIRM_PRICE1.add(nf2.format(conf_price));
								total_vol_opening += qty;
													
								double foreign_exchg_rate = 0;
								String exchg_rate_cd="2"; //SBI TT Selling Exchange Rate ...
								String exchg_rate="";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
											   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
								//System.out.println("Finding Out EXCHG_RATE =========== milan 007 "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
								}				
								
								if(foreign_exchg_rate>0)
								{
									GROUP_FOREIGN_EXCHG_RATE1.add(nf2.format(foreign_exchg_rate));
								}
								else
								{
									GROUP_FOREIGN_EXCHG_RATE1.add("0");
								}
								
								String prov_custom_duty_payment_dt = "";
								String final_custom_duty_payment_dt = "";
								double total_custom_duty_inr = 0;
								double prov_custom_duty_inr = 0;
								double addl_custom_duty_inr = 0;
								double total_custom_duty_usd = 0;
								double prov_custom_duty_usd = 0;
								double addl_custom_duty_usd = 0;
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
									prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
								}
								
								queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
											   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
								//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
									final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
								}
								
								double foreign_exchg_rate_2 = 0;
								String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_2 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
											   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
								//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
								}
								
								double foreign_exchg_rate_3 = 0;
								String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
								String exchg_rate_3 = "";
								
								queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
											   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
											   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
								//System.out.println("Finding Out EXCHG_RATE =========== kkkk got it"+queryString2);
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
									foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
								}
								
								
								String cut_off_dt = "31/07/2011";
								int diff_in_days = 0;
								
								String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
								rset2=stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									diff_in_days = rset2.getInt(1);
								}
								
								if(diff_in_days>0)
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
									}
								}
								else
								{
									if(foreign_exchg_rate_2>0.0001)
									{
										prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
									}
									
									if(foreign_exchg_rate_3>0.0001)
									{
										addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
									}
									
									if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
									{
										total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
									}
								}
								
								String tax_amt = "";
								String tax_str_cd = "0";
								double cd_charge_per_mmbtu = 0;
								
								
														
								double value_usd = 0;
								double value_inr = 0;
								double inr_mmbtu = 0;
								double total_cost_per_mmbtu = 0;
								
								double temp_value_usd = 0;      				
			   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
								value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
								temp_VALUE_USD1.add(nf1.format(value_usd));
								temp_value_usd = Double.parseDouble(nf1.format(value_usd));
								

								if(temp_qty_2!=0.0)
								{
									total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
								}
								else
								{
									total_cost_per_mmbtu = 0;
								}
					
								cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
								CUSTOM_DUTY1.add(nf2.format(cd_charge_per_mmbtu));
								double value_usd_fin= 0;
								double temp_value_usd_fin = 0;
								value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
								
								VALUE_USD1.add(nf5.format(value_usd_fin));
								
								//total_value_usd += temp_value_usd;
								//total_value_usd_opening += temp_value_usd;					
								//total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
								
								total_value_usd += value_usd_fin;
								recipt_sum += value_usd_fin;
								//total_value_usd_opening += temp_value_usd;
								total_value_usd_opening += value_usd_fin;
								total_value_usd_opening1 = Double.parseDouble(nf1.format(total_value_usd));					
								recipt=Double.parseDouble(nf1.format(recipt_sum));
								
								double temp_value_inr = 0;    
								//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
								value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
								//VALUE_INR1.add(nf5.format(value_inr));
								temp_value_inr = Double.parseDouble(nf1.format(value_inr));
								temp_VALUE_INR1.add(nf1.format(value_inr));
								//total_value_inr += temp_value_inr;
								//total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
								
								if(qty!=0)
								{
									inr_mmbtu = temp_value_inr/temp_qty_2;
									INR_MMBTU1.add(nf.format(inr_mmbtu));
								}
								else
								{
									INR_MMBTU1.add("0.00");
								}
								
								//System.out.println("inr_mmbtu::"+inr_mmbtu+" qty:"+qty);
								
								VALUE_INR1.add(nf5.format(inr_mmbtu*qty));
								total_value_inr += inr_mmbtu*qty;
								//recipt_sum += inr_mmbtu*qty;
								total_value_inr_opening = Double.parseDouble(nf1.format(total_value_inr));
								
								ship_cd = "0";
								queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
											   "CARGO_REF_CD='"+crg_ref+"'";
								//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
								}
											
								queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
								//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									SHIP_NM1.add(rset2.getString(1)==null?"":rset2.getString(1));
								}
								else
								{
									 SHIP_NM1.add("");
								}
							}
						}
						
						TRADING_QTY.add(nf.format(recipt)); //(2)
						
						Total_vol = nf5.format(total_vol);
						final_total_volume = total_vol;
						
						Total_value_usd = nf5.format(total_value_usd);
						if(total_vol!=0)
						{
							total_usd_per_mmbtu = total_value_usd/total_vol;
						}
						else
						{
							total_usd_per_mmbtu = 0;
						}
						double total_usd_per_mmbtu1 = 0;
						total_usd_per_mmbtu1 = Double.parseDouble(nf2.format(total_usd_per_mmbtu));
						Total_usd_per_mmbtu = nf2.format(total_usd_per_mmbtu);
						Total_value_inr = nf5.format(total_value_inr);			
			            ////System.out.println("Priyanka     total_usd_per_mmbtu = "+total_usd_per_mmbtu);
			            ////System.out.println("Priyanka     total_inr_mmbtu = "+total_inr_mmbtu);
						
						if(total_vol!=0)
						{
							total_inr_mmbtu = total_value_inr/total_vol;
						}
						else
						{
							total_inr_mmbtu = 0;
						}
						double total_inr_mmbtu1 = 0;
						total_inr_mmbtu1 = Double.parseDouble(nf2.format(total_inr_mmbtu));
						Total_inr_mmbtu = nf2.format(total_inr_mmbtu);
						
						if(total_usd_per_mmbtu1!=0)
						{
							total_inr_per_usd = total_inr_mmbtu1/total_usd_per_mmbtu1;
						}
						else
						{
							total_inr_per_usd = 0;
						}
						Total_inr_per_usd= nf2.format(total_inr_per_usd);
						
						
						double total_Closing_value_usd = 0;
						double total_Closing_usd_mmbtu = 0;
						double total_Closing_value_inr = 0;
						double total_Closing_inr_per_usd = 0;
						double total_Closing_inr_mmbtu = 0;
						
						double variance_vol = 0;
						double variance_value_usd = 0;
						double variance_value_inr = 0;
						
						double closing_total_inr_mmbtu = 0;
						
						double closing_total_value_usd= 0;		
						double closing_total_value_inr= 0;	
						double closing_qty = 0 ;
						double closing_conf_price = 0;
						String closing_ship_cd = "";			
						Vector closing_temp_inv_amt = new Vector();			
						Vector closing_temp_tot_cd_amt = new Vector();
						Vector closing_temp_tot_pay_refund = new Vector();
						Vector closing_temp_CONFIRM_VOL = new Vector();	
						Vector closing_temp_VALUE_USD = new Vector();
						Vector closing_temp_VALUE_INR = new Vector();
						Vector CLOSING_INVOICE_DT = new Vector();
						
						break_flag = false;
						total_vol = 0;
						conf_price = 0;
						qty = 0;
						total_vol_opening = 0;
						
						if(closing_bal1>0)				
						{
							queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), A.VESSEL_NM, TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
										  "TO_CHAR(A.ACT_ARRV_DT,'Month'), TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
										  "A.ACT_ARRV_DT<=to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT DESC";										
							//System.out.println("Confirmed Cargo Arrival Details Query 1st milan 2>>>>> = "+queryString);
							rset = stmt.executeQuery(queryString);
							while(rset.next())
							{
								if(!rset.getString(1).trim().equals("0"))
								{
									double temp_qty = 0;
									double temp_qty_2 = 0;
									double final_seller_inv_amt_usd = 0;

									CLOSING_CARGO_REF_CD.add(rset.getString(1));
									CLOSING_INVOICE_DT.add(rset.getString(3)==null?"":rset.getString(3));
									last_year = rset.getString(5)==null?"year":rset.getString(5);
									String crg_ref = rset.getString(1);
									String arrival_dt = rset.getString(3)==null?"":rset.getString(3);
									
									////System.out.println("closing_bal_prev = "+closing_bal_prev);
									queryString1 = "SELECT A.INVOICE_NO, TO_CHAR(A.INVOICE_DT,'DD/MM/YYYY'), A.ACTUAL_UNLOADED_QTY, " +
												   "A.CONFIRM_PRICE, A.INVOICE_AMT, TO_CHAR(A.DUE_DT,'DD/MM/YYYY') "+
								  	  			   "FROM FMS7_FINAL_SELLER_PAY A WHERE A.CARGO_REF_NO="+crg_ref+"  AND SPLIT_SEQ='0'";					
									//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										temp_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
										temp_qty_2 = Double.parseDouble(nf1.format(Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3))));
										conf_price = Double.parseDouble(rset1.getString(4)==null?"0":nf2.format(Double.parseDouble(rset1.getString(4))));
										closing_temp_inv_amt.add(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
										final_seller_inv_amt_usd = Double.parseDouble(rset1.getString(5)==null?"0":nf.format(Double.parseDouble(rset1.getString(5))));
										total_vol += Double.parseDouble(nf1.format(temp_qty));
									}
									else
									{					
										closing_temp_inv_amt.add("0");
										conf_price = 0.0;
										final_seller_inv_amt_usd = 0.0;
										temp_qty = 0;
										temp_qty_2 = 0;
									}
									
									if(closing_bal1>total_vol)
									{
										
									}
									else
									{
										temp_qty -= (total_vol - closing_bal1);
										break_flag = true;
									}
									
									qty = Double.parseDouble(nf1.format(temp_qty));
									closing_temp_CONFIRM_VOL.add(""+qty);
									CLOSING_CONFIRM_VOL.add(nf5.format(qty));	
									CLOSING_CONFIRM_PRICE.add(nf2.format(conf_price));
									total_vol_opening += qty;							
									
									double foreign_exchg_rate = 0;
									String exchg_rate_cd="2";
									String exchg_rate="";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
												   "EFF_DT=TO_DATE('"+arrival_dt+"','DD/MM/YYYY')";
									//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate=Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate)));
									}				
									
									if(foreign_exchg_rate>0)
									{
										CLOSING_GROUP_FOREIGN_EXCHG_RATE.add(nf2.format(foreign_exchg_rate));
									}
									else
									{
										CLOSING_GROUP_FOREIGN_EXCHG_RATE.add("0");
									}
									
									
									String prov_custom_duty_payment_dt = "";
									String final_custom_duty_payment_dt = "";
									double total_custom_duty_inr = 0;
									double prov_custom_duty_inr = 0;
									double addl_custom_duty_inr = 0;
									double total_custom_duty_usd = 0;
									double prov_custom_duty_usd = 0;
									double addl_custom_duty_usd = 0;
									
									queryString1 = "SELECT A.CUSTOM_DUTY_PAY, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
												   "FROM FMS7_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
									//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										total_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
										prov_custom_duty_inr = Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))));
										prov_custom_duty_payment_dt = rset1.getString(2)==null?"":rset1.getString(2);
									}
									
									queryString1 = "SELECT A.CUSTOM_DUTY_PAY_REFUND, A.INTERST_X_DAYS, TO_CHAR(A.CUSTOM_DUTY_DT,'DD/MM/YYYY') " +
												   "FROM FMS7_FINAL_CUSTOM_DUTY A WHERE A.CARGO_REF_NO="+crg_ref+"";					
									//System.out.println("Seller Final Invoice Detail Query = "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										total_custom_duty_inr += (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
										addl_custom_duty_inr = (Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1))))-Double.parseDouble(nf.format(Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2)))));
										final_custom_duty_payment_dt = rset1.getString(3)==null?"":rset1.getString(3);
									}
									
									double foreign_exchg_rate_2 = 0;
									String exchg_rate_cd_2 = "5"; //Group Foreign Exchange Rate ...
									String exchg_rate_2 = "";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd_2+"' AND " +
												   "EFF_DT=TO_DATE('"+prov_custom_duty_payment_dt+"','DD/MM/YYYY')";
									//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate_2 = rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate_2 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_2)));
									}
									
									double foreign_exchg_rate_3 = 0;
									String exchg_rate_cd_3 = "5"; //Group Foreign Exchange Rate ...
									String exchg_rate_3 = "";
									
									queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
												   "EXCHG_RATE_CD='"+exchg_rate_cd_3+"' AND " +
												   "EFF_DT=TO_DATE('"+final_custom_duty_payment_dt+"','DD/MM/YYYY')";
									//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										exchg_rate_3 = rset2.getString(1)==null?"0":rset2.getString(1);
										foreign_exchg_rate_3 = Double.parseDouble(nf2.format(Double.parseDouble(exchg_rate_3)));
									}
									
									String cut_off_dt = "31/07/2011";
									int diff_in_days = 0;
									
									String queryString2 = "SELECT TO_DATE('"+arrival_dt+"','DD/MM/YYYY')-TO_DATE('"+cut_off_dt+"','DD/MM/YYYY') FROM DUAL";
									rset2=stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										diff_in_days = rset2.getInt(1);
									}
									
									if(diff_in_days>0)
									{
										if(foreign_exchg_rate_2>0.0001)
										{
											total_custom_duty_usd = total_custom_duty_inr/foreign_exchg_rate_2;
										}
									}
									else
									{
										if(foreign_exchg_rate_2>0.0001)
										{
											prov_custom_duty_usd = prov_custom_duty_inr/foreign_exchg_rate_2;
										}
										
										if(foreign_exchg_rate_3>0.0001)
										{
											addl_custom_duty_usd = addl_custom_duty_inr/foreign_exchg_rate_3;
										}
										
										if(foreign_exchg_rate_2>0.0001 || foreign_exchg_rate_3>0.0001)
										{
											total_custom_duty_usd = prov_custom_duty_usd+addl_custom_duty_usd;
										}
									}
									
									
									//Following Logic Has Been Introduced By Samik Shah On 15th July, 2011 ...
									//Following Logic Has Been Introduced To Calculate Custom Tax Amount Per MMBTU ...
									String tax_amt = "";
									String tax_str_cd = "0";
									double cd_charge_per_mmbtu = 0;
									
									
									
									//CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu)); //Commented By Samik Shah On 8th September, 2011 ...
													
									double value_usd = 0;
									double value_inr = 0;
									double inr_mmbtu = 0;
									double total_cost_per_mmbtu = 0;
									
									double temp_value_usd = 0;      				
				   				    //value_usd = qty * (Double.parseDouble(nf2.format(conf_price))+Double.parseDouble(nf2.format(cd_charge_per_mmbtu))); //Commented By Samik Shah On 8th September, 2011 ...
									value_usd = final_seller_inv_amt_usd+total_custom_duty_usd;
									closing_temp_VALUE_USD.add(nf1.format(value_usd));
									temp_value_usd = Double.parseDouble(nf1.format(value_usd));
									//System.out.println("temp_qty_2::"+temp_qty_2);
									if(temp_qty_2!=0.0)
									{
									total_cost_per_mmbtu = temp_value_usd/temp_qty_2;
									}
									else
									{
										total_cost_per_mmbtu=0;	
									}
									cd_charge_per_mmbtu = Double.parseDouble(nf2.format(total_cost_per_mmbtu))-Double.parseDouble(nf2.format(conf_price));
									CLOSING_CUSTOM_DUTY.add(nf2.format(cd_charge_per_mmbtu));
									
									double value_usd_fin= 0;
									double temp_value_usd_fin = 0;
									value_usd_fin = qty*(conf_price+cd_charge_per_mmbtu);
									CLOSING_VALUE_USD.add(nf5.format(value_usd_fin));
									//CLOSING_VALUE_USD.add(nf5.format(value_usd));
									//total_Closing_value_usd += temp_value_usd;
									//total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));
									total_Closing_value_usd += value_usd_fin;
									total_Closing_value_usd = Double.parseDouble(nf1.format(total_Closing_value_usd));					
									
									
									double temp_value_inr = 0;    
									//value_inr = temp_value_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)); //Commented By Samik Shah On 8th September, 2011 ...
									value_inr = (final_seller_inv_amt_usd * Double.parseDouble(nf2.format(foreign_exchg_rate)))+total_custom_duty_inr;
									//value_inr = (temp_value_usd_fin * Double.parseDouble(nf2.format(foreign_exchg_rate)));
									//CLOSING_VALUE_INR.add(nf5.format(value_inr));
									//temp_value_inr = Double.parseDouble(nf1.format(value_inr));
									//closing_temp_VALUE_INR.add(nf1.format(value_inr));
									//total_Closing_value_inr += temp_value_inr;
															
									if(qty!=0)
									{
										//inr_mmbtu = temp_value_inr/qty;
										inr_mmbtu = value_inr/temp_qty_2;
										CLOSING_INR_MMBTU.add(nf.format(inr_mmbtu));
									}
									else
									{
										CLOSING_INR_MMBTU.add("0.00");
									}
									CLOSING_VALUE_INR.add(nf5.format(inr_mmbtu*qty));
									temp_value_inr = Double.parseDouble(nf1.format(inr_mmbtu*qty));
									closing_temp_VALUE_INR.add(nf1.format(inr_mmbtu*qty));
									total_Closing_value_inr += inr_mmbtu*qty;
									
									
									
									ship_cd = "0";
									queryString1 = "SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION WHERE " +
												   "CARGO_REF_CD='"+crg_ref+"'";
									//System.out.println("SELECT SHIP_CD FROM FMS7_CARGO_NOMINATION  --> "+queryString1);
									rset1 = stmt1.executeQuery(queryString1);
									if(rset1.next())
									{
										ship_cd = rset1.getString(1)==null?"0":rset1.getString(1);
									}
												
									queryString2 = "SELECT SHIP_NAME FROM FMS7_SHIP_MST WHERE SHIP_CD='"+ship_cd+"'";
									//System.out.println("SELECT SHIP_NAME FROM FMS7_SHIP_MST  --> "+queryString2);
									rset2 = stmt2.executeQuery(queryString2);
									if(rset2.next())
									{
										CLOSING_SHIP_NM.add(rset2.getString(1)==null?"":rset2.getString(1));
									}
									else
									{
										CLOSING_SHIP_NM.add("");
									}
								}
								
								if(break_flag)
								{
									break;
								}
							}
						}
						
						//System.out.println("asasasasas::::::"+total_Closing_value_usd);
						
						//if(closing_bal1>0)				
					//	{
					//	CLOSING_BAL_TRADING.add(nf.format(total_Closing_value_usd)); //(3)
					//	}
//jaimin	
						double total_Closing_value_usd1 = 0;				
						//Total_Closing_value_usd = nf5.format(total_Closing_value_usd);	
						total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
						
						Vector act_arr_dt = new Vector();
						String act_arr_dt1 = "";
						String act_arr_yy1 = "";
						String act_arr_yy2 = "";
						Vector act_arr_sq = new Vector();
						
						
						boolean flg = true;
						long snq = 1;
						queryString = "SELECT NVL(A.CARGO_REF_NO,'0'), TO_CHAR(A.ACT_ARRV_DT,'DD/MM/YYYY'), " +
						  "TO_CHAR(A.ACT_ARRV_DT,'yyyy') FROM FMS7_CARGO_ARRIVAL_DTL A WHERE " +
						  "A.ACT_ARRV_DT BETWEEN TO_DATE('01/01/"+year+"','dd/mm/yyyy') AND to_date('"+to_dt+"','dd/mm/yyyy')  AND SPLIT_SEQ='0' ORDER BY A.ACT_ARRV_DT";										
						
						//System.out.println("Confirmed Cargo Arrival Details Query >>>>> = "+last_year+" "+queryString);
						rset = stmt.executeQuery(queryString);
						
						while(rset.next())
						{
							act_arr_dt.add(rset.getString(2)==null?"" : rset.getString(2));
							act_arr_dt1 = rset.getString(2)==null?"" : rset.getString(2);
							act_arr_yy1 = rset.getString(3)==null?"" : rset.getString(3);
							if (snq==0){
								act_arr_yy2 = act_arr_yy1;
								snq = 1;
							}
							if (act_arr_yy1.equals(act_arr_yy2))
							{
								flg = true;
								act_arr_sq.add(act_arr_yy1+"-"+snq);
								act_arr_yy2 = act_arr_yy1;
								snq++;
							}
							else
							{
								if (flg)
								{
									snq=1;
								}
								flg = true;
								act_arr_sq.add(act_arr_yy1+"-"+snq);
								act_arr_yy2 = act_arr_yy1;
								snq++;
							}
							
							
						}
						//System.out.println("for opening stock : "+to_dt);
						//System.out.println("for sequence : "+act_arr_sq);
						//System.out.println("for arrival date : "+act_arr_dt);
				
						
						//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT);
						//System.out.println("for closing stock at cost : "+CLOSING_INVOICE_DT_sq);
						
						
						//For Closing stock at NRV		
						String temp_to_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int)+1);	
						String temp_from_dt = "01/"+month_int+"/"+(Integer.parseInt(year_int));
						//System.out.println("temp_to_dt = "+temp_to_dt);
						//System.out.println("temp_from_dt = "+temp_from_dt);		
						double sum_qty1 = closing_bal1;
						double sum_qty = 0;
						int count = 0;
						double remaining_qty = 0;
						double sn_rate = 0;
						double nrv_foreign_exchg_rate = 0;
						double sale_usd = 0;
						double nrv_value_inr=0;
						double nrv_inr_mmbtu = 0;
						
						double nrv_rate = 0;
						double sum_nrv_value_usd = 0;
						double sum_nrv_value_inr = 0;
						double sum_nrv_inr_mmbtu = 0;
						double total_sum_inr_mmbtu = 0;
						double final_nrv_value_usd = 0;
						
						double total_qty = 0;
						double total_sum_value_usd = 0;
						double total_rate = 0;
						double total_sum_value_inr = 0;
						double total_nvr_inr_mmbtu = 0;
						double mmbtu_qty = 0;

						double nrv_rate1 = 0;
						
						String month_int_2 = temp_from_dt.substring(3,5);
						String year_int_2 = temp_from_dt.substring(6);
						
						if(Integer.parseInt(month_int_2)==12)
						{
							month_int_2 = "01";
							year_int_2 = ""+(Integer.parseInt(year_int_2)+1);
						}
						else
						{
							if((Integer.parseInt(month_int_2)+1)<10)
							{
								month_int_2 = "0"+(Integer.parseInt(month_int_2)+1);
							}
							else
							{
								month_int_2 = ""+(Integer.parseInt(month_int_2)+1);
							}					
						}
						
						String temp_from_dt2 = "01/"+month_int_2+"/"+year_int_2;
						
									
						
						queryString = "DELETE FROM FMS7_TEMP_STOCK_VALUATION";
						//System.out.println("Query for Deleting Records from FMS7_TEMP_STOCK_VALUATION table = "+queryString);
						stmt.executeUpdate(queryString);
						conn.commit();
						
						
						
						queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD FROM FMS7_SN_MST A WHERE " +
									  "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
									  "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
									  "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
								      "A.TCQ IS NOT NULL AND " +
								      "A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM FMS7_SN_MST B WHERE " +
								      "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
								      "A.FGSA_NO=B.FGSA_NO AND A.SN_NO=B.SN_NO) ORDER BY A.START_DT";
						
						//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
							String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
							String rate = rset.getString(2)==null?"0":rset.getString(2);
							String sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String sign_dt = rset.getString(4)==null?"":rset.getString(4);
							String start_dt = rset.getString(5)==null?"":rset.getString(5);
							String end_dt = rset.getString(6)==null?"":rset.getString(6);
							String contract_type = "S";
							String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
							String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String cust_nm = "";
							String alloc_qty = "0";
							double diff_qty = 0;
							
							queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
									       "CUSTOMER_CD='"+cust_cd+"'";
							//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
							}
							
							queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
									       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
									       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
									       "AND CONTRACT_TYPE='S'"; 

							//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
								
								if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
								{
									diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
								}
								else if(!tcq.trim().equals("0"))
								{	
									diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
								}
								else
								{
									diff_qty = 0;					
								}								
							}
							else
							{
								diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
							}
							
							if(diff_qty>0 && Double.parseDouble(tcq)>0)
							{
								queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
											   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
											   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
											   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
											   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
											   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
											   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
								//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_SN_MST = "+queryString1);
								stmt1.executeUpdate(queryString1);
							}
						}
						
						
						queryString =  "SELECT A.TCQ,A.RATE,A.LOA_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									   "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									   "A.TENDER_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD FROM FMS7_LOA_MST A WHERE " +
									   "((TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') BETWEEN A.START_DT AND A.END_DT) OR " +
									   "(TO_DATE('"+temp_from_dt+"','dd/mm/yyyy')<A.START_DT AND " +
									   "TO_DATE('"+temp_from_dt2+"','dd/mm/yyyy')>=A.START_DT)) AND " +
									   "A.TCQ IS NOT NULL AND " +
									   "A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE " +
									   "A.CUSTOMER_CD=B.CUSTOMER_CD AND " +
									   "A.TENDER_NO=B.TENDER_NO AND A.LOA_NO=B.LOA_NO) ORDER BY A.START_DT";
						
						//System.out.println("LOA DETAILS FROM FMS7_LOA_MST = "+queryString);
						rset = stmt.executeQuery(queryString);
						while(rset.next())
						{
							String tcq = nf1.format(Double.parseDouble(rset.getString(1)==null?"0":rset.getString(1)));
							String rate = rset.getString(2)==null?"0":rset.getString(2);
							String sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String sign_dt = rset.getString(4)==null?"":rset.getString(4);
							String start_dt = rset.getString(5)==null?"":rset.getString(5);
							String end_dt = rset.getString(6)==null?"":rset.getString(6);
							String contract_type = "L";
							String fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String fgsa_rev_no = "0";
							String cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String cust_nm = "";
							String alloc_qty = "0";
							double diff_qty = 0;
							
							queryString1 = "SELECT CUSTOMER_NAME FROM FMS7_CUSTOMER_MST WHERE " +
									       "CUSTOMER_CD='"+cust_cd+"'";
							//System.out.println("Select Query for FMS7_CUSTOMER_MST = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								cust_nm = rset1.getString(1)==null?"":rset1.getString(1);
							}
							
							queryString1 = "SELECT SUM(QTY_MMBTU) FROM FMS7_DAILY_ALLOCATION_DTL " +
									       "WHERE CUSTOMER_CD='"+cust_cd+"' AND " +
									       "SN_NO='"+sn_no+"' AND FGSA_NO='"+fgsa_no+"' " +
									       "AND GAS_DT<TO_DATE('"+temp_from_dt+"','dd/mm/yyyy') " +
									       "AND CONTRACT_TYPE='L'"; 

							//System.out.println("QTY_MMBTU FROM FMS7_DAILY_ALLOCATION_DTL = "+queryString1);
							rset1=stmt1.executeQuery(queryString1);
							if(rset1.next())
							{
								alloc_qty = nf1.format(Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1)));
								
								if(!tcq.trim().equals("0") && !alloc_qty.trim().equals("0"))
								{
									diff_qty = Double.parseDouble(nf1.format((Double.parseDouble(tcq)-Double.parseDouble(alloc_qty))));
								}
								else if(!tcq.trim().equals("0"))
								{	
									diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));					
								}
								else
								{
									diff_qty = 0;					
								}								
							}
							else
							{
								diff_qty = Double.parseDouble(nf1.format(Double.parseDouble(tcq)));	
							}
							
							if(diff_qty>0 && Double.parseDouble(tcq)>0)
							{
								queryString1 = "INSERT INTO FMS7_TEMP_STOCK_VALUATION(CUSTOMER_CD, CUSTOMER_NM, " +
											   "FGSA_NO, FGSA_REV_NO, SN_NO, SN_REV_NO, CONTRACT_TYPE, TCQ, " +
											   "ALLOC_QTY, DIFF_QTY, RATE, SIGNING_DT, START_DT, END_DT) " +
											   "VALUES("+cust_cd+", '"+cust_nm+"', "+fgsa_no+", "+fgsa_rev_no+", "+sn_no+", " +
											   ""+sn_rev_no+", '"+contract_type+"', "+tcq+", "+alloc_qty+", "+diff_qty+", " +
											   ""+rate+", TO_DATE('"+sign_dt+"','DD/MM/YYYY'), " +
											   "TO_DATE('"+start_dt+"','DD/MM/YYYY'), TO_DATE('"+end_dt+"','DD/MM/YYYY'))";
								//System.out.println("Query for Inserting Values into FMS7_TEMP_STOCK_VALUATION from FMS7_LOA_MST = "+queryString1);
								stmt1.executeUpdate(queryString1);
							}
						}
						conn.commit();
						
						String max_start_date = "";
					
						queryString = "SELECT to_char(MAX(START_DT),'dd/mm/yyyy') FROM FMS7_TEMP_STOCK_VALUATION";
						//System.out.println("Query for finding-out MAX Signing Date for Stock Valuation = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							max_start_date = rset.getString(1)==null?"":rset.getString(1);
						}
						SIGNING_DT2.clear();
						RATE.clear();
						queryString = "SELECT A.TCQ,A.RATE,A.SN_NO,to_char(A.SIGNING_DT,'dd/mm/yyyy')," +
									  "to_char(A.START_DT,'dd/mm/yyyy'),to_char(A.END_DT,'dd/mm/yyyy')," +
									  "A.FGSA_NO,A.SN_REV_NO,A.FGSA_REV_NO,A.CUSTOMER_CD," +
									  "A.CUSTOMER_NM,A.ALLOC_QTY,A.DIFF_QTY,CONTRACT_TYPE " +
									  "FROM FMS7_TEMP_STOCK_VALUATION A ORDER BY A.START_DT";
						
						//System.out.println("SN DETAILS FROM FMS7_SN_MST = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{		
							String temp_sn_rate = "";
							String sn_ref_no = "";
							String cont_type_dtl = "";
							
							String cont_type = rset.getString(14)==null?"":rset.getString(14);
											
							String temp_cust_cd = rset.getString(10)==null?"0":rset.getString(10);
							String temp_sn_no = rset.getString(3)==null?"0":rset.getString(3);
							String temp_fgsa_no = rset.getString(7)==null?"0":rset.getString(7);
							String temp_sn_rev_no = rset.getString(8)==null?"0":rset.getString(8);
							String temp_fgsa_rev_no = rset.getString(9)==null?"0":rset.getString(9);
							
							if(cont_type.trim().equalsIgnoreCase("S"))
							{
								queryString1 = "SELECT NVL(SN_REF_NO,' ') FROM FMS7_SN_MST WHERE " +
											   "CUSTOMER_CD="+temp_cust_cd+" AND FGSA_NO="+temp_fgsa_no+" AND " +
											   "FGSA_REV_NO="+temp_fgsa_rev_no+" AND SN_NO="+temp_sn_no+" AND " +
											   "SN_REV_NO="+temp_sn_rev_no+"";
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									sn_ref_no = rset1.getString(1).trim();
								}
								
								cont_type_dtl = "SN";
							}
							else if(cont_type.trim().equalsIgnoreCase("L"))
							{
								queryString1 = "SELECT NVL(LOA_REF_NO,' ') FROM FMS7_LOA_MST WHERE " +
											   "CUSTOMER_CD="+temp_cust_cd+" AND TENDER_NO="+temp_fgsa_no+" AND " +
											   "LOA_NO="+temp_sn_no+" AND LOA_REV_NO="+temp_sn_rev_no+"";
								rset1 = stmt1.executeQuery(queryString1);
								if(rset1.next())
								{
									sn_ref_no = rset1.getString(1).trim();
								}
								
								cont_type_dtl = "LOA";
							}
							
							if(sn_ref_no.trim().equals(""))
							{
								sn_ref_no = cont_type_dtl+" - "+temp_sn_no;
							}
							else
							{
								sn_ref_no = cont_type_dtl+" - "+sn_ref_no;
							}
							
							TCQ.add(rset.getString(1)==null?"0":rset.getString(1));
							RATE.add(nf.format(Double.parseDouble(rset.getString(2)==null?"0":rset.getString(2))));
							temp_sn_rate = rset.getString(2)==null?"0":rset.getString(2);	
							SN_NO2.add(sn_ref_no);
							SIGNING_DT2.add(rset.getString(5)==null?"":rset.getString(5)); //Actually it stores Contract Start Date of SN/LOA
							FGSA_NO2.add(rset.getString(7)==null?"0":rset.getString(7));
							SN_REV_NO2.add(rset.getString(8)==null?"0":rset.getString(8));
							FGSA_REV_NO2.add(rset.getString(9)==null?"0":rset.getString(9));
							CUSTOMER_CODE.add(rset.getString(10)==null?"0":rset.getString(10));
							
							sn_rate = Double.parseDouble(nf.format(Double.parseDouble(temp_sn_rate)));
							
							CUSTOMER_NM.add(rset.getString(11)==null?"":rset.getString(11));
											
							String tcq = rset.getString(1)==null?"0":rset.getString(1);
							String qty_mmbtu = rset.getString(12)==null?"0":rset.getString(12);
							mmbtu_qty = Double.parseDouble(nf1.format(Double.parseDouble(rset.getString(13)==null?"0":rset.getString(13))));
							QTY.add(nf5.format(mmbtu_qty));					
											
							sale_usd = Double.parseDouble(nf1.format(sn_rate * mmbtu_qty));
							SALE_USD.add(nf5.format(sale_usd));
							
							sum_qty += mmbtu_qty;		
							Sum_qty = nf5.format(sum_qty);
							
							sum_nrv_value_usd += sale_usd;	
							if(sum_nrv_value_usd!=0)
							{
								Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
							}
							else
							{
								Sum_nrv_value_usd = "0";
							}
							
							exchg_rate_cd = "5";
							String nrv_exchg_rate = "";					
							queryString2 = "SELECT EXCHG_VAL FROM FMS7_EXCHG_RATE_ENTRY WHERE " +
										   "EXCHG_RATE_CD='"+exchg_rate_cd+"' AND " +
										   "EFF_DT=TO_DATE('"+to_dt+"','DD/MM/YYYY')";
							//System.out.println("Finding Out EXCHG_RATE =========== "+queryString2);
							rset2=stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								nrv_exchg_rate=rset2.getString(1)==null?"0":rset2.getString(1);
								nrv_foreign_exchg_rate=Double.parseDouble(nrv_exchg_rate);
							}				
							
							if(nrv_foreign_exchg_rate>0)
							{
								NRV_FOREIGN_EXCHG_RATE.add(nf.format(nrv_foreign_exchg_rate));
							}
							else
							{
								NRV_FOREIGN_EXCHG_RATE.add("0");
							}
							
							nrv_value_inr = Double.parseDouble(nf1.format(nrv_foreign_exchg_rate * sale_usd));
							if(nrv_value_inr>0)
							{
								NRV_VALUE_INR.add(nf5.format(nrv_value_inr));
							}
							else
							{
								NRV_VALUE_INR.add("0");
							}
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							
							nrv_inr_mmbtu = nrv_foreign_exchg_rate * sn_rate;
							
							if(nrv_inr_mmbtu>0)
							{
								NRV_INR_MMBTU.add(nf.format(nrv_inr_mmbtu));
							}
							else
							{
								NRV_INR_MMBTU.add("0");
							}
							
							if(sum_qty!=0)
							{
								nrv_rate = sum_nrv_value_usd / sum_qty ;
								nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
								Nrv_rate = nf.format(nrv_rate1);
							}
							else
							{
								Nrv_rate = "0";				
							}
							
							if(sum_nrv_value_inr!=0)
							{
								Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
							}
							else
							{
								Sum_nrv_value_inr = "0";
							}
							if(nrv_rate1!=0 && nrv_foreign_exchg_rate!=0)
							{
								sum_nrv_inr_mmbtu =  nrv_rate1 * nrv_foreign_exchg_rate;
								Sum_nrv_inr_mmbtu = nf.format(sum_nrv_inr_mmbtu);
							}
							else
							{
								Sum_nrv_inr_mmbtu = "0";
							}
							////System.out.println("nrv_rate"+nrv_rate);
							////System.out.println("nrv_rate1"+nrv_rate1);
							////System.out.println("nrv_foreign_exchg_rate"+nrv_foreign_exchg_rate);
							if(nrv_foreign_exchg_rate!=0)
							{
								Nrv_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);	
							}
							else
							{
								Nrv_foreign_exchange_rate = "0";
							}					
							
							//System.out.println(sum_qty+">>>>"+closing_bal1);
							
							if(sum_qty>closing_bal1)
							{
								remaining_qty = closing_bal1 - (sum_qty - mmbtu_qty);
								++count;
								break;							
							}					
						}		
							
						if(count>0)
						{
							sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
							Sum_qty = nf5.format(sum_qty);					
							QTY.setElementAt(nf5.format(remaining_qty),QTY.size()-1);
							mmbtu_qty = remaining_qty;					
							
							sum_nrv_value_usd = sum_nrv_value_usd - sale_usd;				
							sale_usd = Double.parseDouble(nf1.format(Double.parseDouble(nf.format(Double.parseDouble(rset.getString(2)))) * mmbtu_qty));
							SALE_USD.setElementAt(nf5.format(sale_usd),SALE_USD.size()-1);	
							sum_nrv_value_usd += sale_usd;
							Sum_nrv_value_usd = nf5.format(sum_nrv_value_usd);
							
							sum_nrv_value_inr = sum_nrv_value_inr - Double.parseDouble(nf1.format(nrv_value_inr));				
							nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
							NRV_VALUE_INR.setElementAt(nf5.format(nrv_value_inr),NRV_VALUE_INR.size()-1);
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							Sum_nrv_value_inr = nf5.format(sum_nrv_value_inr);
							
							//sum_qty = (sum_qty - mmbtu_qty) + remaining_qty;				
							//Sum_qty = nf5.format(sum_qty);
							total_qty = sum_qty;
							if(sum_qty!=0 && sum_nrv_value_usd!=0)
							{
								nrv_rate = sum_nrv_value_usd / sum_qty ;
								nrv_rate1 = Double.parseDouble(nf.format(nrv_rate));
								Nrv_rate = nf.format(nrv_rate1);
							}
							else
							{
								Nrv_rate = "0";				
							}				
						}
						else
						{				
							String test_rate = "0";
							if(!max_start_date.trim().equals(""))
							{
								

						   	 	for(int i=0; i<SIGNING_DT2.size(); i++)
						   	 	{
						   	 		if(!(""+SIGNING_DT2.elementAt(i)).trim().equals(""))
						   	 		{	
							   	 		if((""+SIGNING_DT2.elementAt(i)).trim().equals(max_start_date))
							   	 		{
							   	 			test_rate = ""+RATE.elementAt(i);
							   	 			break;
							   	 		}
						   	 		}
						   	 	}
						   	 	
							
								
							}
							
						   	remaining_qty = closing_bal1 - sum_qty;
							double temp_remaining_qty = 0;
							temp_remaining_qty = Double.parseDouble(nf1.format(remaining_qty));
							if(temp_remaining_qty>0)
							{
								Test_qty = nf5.format(temp_remaining_qty);
							}
							else
							{
								Test_qty = "0";
							}	
							
							double temp_test_rate = 0;
							temp_test_rate = Double.parseDouble(nf.format(Double.parseDouble(test_rate)));
							
							if(!test_rate.trim().equals("") && test_rate!=null)
							{
								Test_rate= nf.format(Double.parseDouble(test_rate));
							}
							else
							{
								Test_rate = "0";
							}
							
							sale_usd = temp_remaining_qty * temp_test_rate;
							double temp_sale_usd = 0;
							temp_sale_usd = Double.parseDouble(nf1.format(sale_usd));
							if(temp_sale_usd!=0)
							{
								Test_sale_usd = nf5.format(temp_sale_usd);
							}
							else
							{
								Test_sale_usd = "0" ;
							}
							sum_nrv_value_usd += temp_sale_usd;
							Temp_value_usd = nf1.format(temp_sale_usd);
							
							CUSTOMER_CODE.add("");
							FGSA_REV_NO.add("");
							SN_REV_NO.add("");
							FGSA_NO.add("");
							TCQ.add("");
							SIGNING_DT2.add("");
							CUSTOMER_NM.add("");
							if(nrv_foreign_exchg_rate>0)
							{
								Test_exch_rate = nf.format(nrv_foreign_exchg_rate);
							}
							else
							{
								Test_exch_rate = "0";
							}
							
							if(nrv_foreign_exchg_rate!=0 && sale_usd!=0)
							{
								nrv_value_inr = nrv_foreign_exchg_rate * sale_usd;
								Test_value_inr = nf5.format(nrv_value_inr);
							}
							else
							{
								Test_value_inr = "0";
							}
							sum_nrv_value_inr += Double.parseDouble(nf1.format(nrv_value_inr));
							Temp_value_inr = nf1.format(nrv_value_inr);
							
							double temp_nrv_inr_mmbtu = 0;
							nrv_inr_mmbtu = nrv_foreign_exchg_rate * Double.parseDouble(test_rate);
							temp_nrv_inr_mmbtu += Double.parseDouble(nf.format(nrv_inr_mmbtu));
							if(nrv_inr_mmbtu!=0)
							{
									Test_inr_mmbtu = nf.format(temp_nrv_inr_mmbtu);
							}
							else
							{
								Test_inr_mmbtu ="0";
							}	
							sum_nrv_inr_mmbtu = sum_nrv_inr_mmbtu + temp_nrv_inr_mmbtu;
						}	
						
						if(sum_qty<total_closing_vol)
						{
							total_qty = sum_qty + Double.parseDouble(nf1.format(remaining_qty));
						}
						else
						{
							total_qty +=0;
						}			
						if(total_qty>0)
						{
							Total_qty = nf5.format(total_qty);
						}
						else
						{
							Total_qty = "0";
							total_qty = 0;
						}	
						double total_sum_value_usd1 = 0;
						total_sum_value_usd = sum_nrv_value_usd;
						total_sum_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd));
						Total_sum_value_usd = nf5.format(total_sum_value_usd);
						
						double closing_stock_usd = 0;
						double closing_stock_inr = 0;
						double closing_stock_nrv_usd = 0;
						double closing_stock_nrv_inr = 0;
						
						queryString6 = "SELECT NVL(CLOSING_STOCK_NRV_USD,'0'), NVL(CLOSING_STOCK_NRV_INR,'0'), " +
									   "NVL(CLOSING_STOCK_USD,'0'), NVL(CLOSING_STOCK_INR,'0') " +
									   "FROM FMS7_STOCK_VALUATION WHERE " +
									   "MONTH='"+mon+"' AND YEAR="+year+"";
						rset6 = stmt6.executeQuery(queryString6);
						while(rset6.next())
						{
							closing_stock_nrv_usd = rset6.getDouble(1);
							closing_stock_nrv_inr = rset6.getDouble(2);
							closing_stock_usd = rset6.getDouble(3);
							closing_stock_inr = rset6.getDouble(4);
						}
						
						Closing_Stock_USD = nf1.format(closing_stock_usd);
						Closing_stock_NRV_USD = nf1.format(closing_stock_nrv_usd);
						Closing_Stock_INR = nf1.format(closing_stock_inr);
						Closing_stock_NRV_INR = nf1.format(closing_stock_nrv_inr);
						
						//Mininmum of Cost or NRV
						if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
						{
							if(closing_stock_nrv_usd<total_Closing_value_usd)
							{
								Total_Closing_value_usd = nf5.format(closing_stock_nrv_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(closing_stock_nrv_usd));
							}
							else
							{
								Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
							}
						}
						else
						{
							if(total_sum_value_usd1<total_Closing_value_usd)
							{
								Total_Closing_value_usd = nf5.format(total_sum_value_usd1);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_sum_value_usd1));
							}
							else
							{
								Total_Closing_value_usd = nf5.format(total_Closing_value_usd);
								total_Closing_value_usd1 = Double.parseDouble(nf1.format(total_Closing_value_usd));
							}
						}
						////System.out.println("total_sum_value_usd1 = "+total_sum_value_usd1);				
						////System.out.println("total_Closing_value_usd = "+total_Closing_value_usd);			
						////System.out.println("Total_Closing_value_usd = "+Total_Closing_value_usd);			
						////System.out.println("total_Closing_value_usd1 = "+total_Closing_value_usd1);
						
						if(total_closing_vol!=0)
						{
							total_Closing_usd_mmbtu = total_Closing_value_usd1/total_closing_vol;
						}
						else
						{
							total_Closing_usd_mmbtu = 0;
						}
						Total_Closing_usd_mmbtu = nf.format(total_Closing_usd_mmbtu);				
						
						variance_vol = closing_bal1-opening_bal1;
						if(variance_vol>=0)
						{
							Variance_vol = nf5.format(variance_vol);
						}
						else
						{
							variance_vol = (-1) * variance_vol;
							Variance_vol = "("+nf5.format(variance_vol)+")";
						}
								
						variance_value_usd = total_Closing_value_usd1 - total_value_usd_opening_basic;
						////System.out.println("total_Closing_value_usd1  = "+ total_Closing_value_usd1);
						////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);

			    		if(total_qty!=0)
			    		{
			    			total_rate = total_sum_value_usd/total_qty;
			    			Total_rate = nf.format(total_rate);
			    		}
			    		else
			    		{
			    			Total_rate = "0.00";
			    		}			
			    		total_sum_value_inr = sum_nrv_value_inr ;    		
			    		
			    		//Minimum of cost of or NRV for value in INR
			    		if(closing_stock_nrv_usd>0 && closing_stock_nrv_inr>0)
						{
			    			if(closing_stock_nrv_inr<total_Closing_value_inr)
							{
								Total_Closing_value_inr = nf5.format(closing_stock_nrv_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(closing_stock_nrv_inr));
							}
							else
							{
								Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
							}
						}
						else
						{
							if(total_sum_value_inr<total_Closing_value_inr)
							{
								Total_Closing_value_inr = nf5.format(total_sum_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_sum_value_inr));
							}
							else
							{
								Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
								total_Closing_value_inr = Double.parseDouble(nf1.format(total_Closing_value_inr));
							}
						}
						//Total_Closing_value_inr = nf5.format(total_Closing_value_inr);
						////System.out.println("total_Closing_value_inr  = "+ total_Closing_value_inr);
						
						if(total_Closing_value_usd1!=0)
						{
							total_Closing_inr_per_usd = total_Closing_value_inr/total_Closing_value_usd1;
						}
						else
						{
							total_Closing_inr_per_usd = 0;
						}
						Total_Closing_inr_per_usd = nf.format(total_Closing_inr_per_usd);
						
						if(total_closing_vol!=0)
						{
							total_Closing_inr_mmbtu = total_Closing_value_inr/total_closing_vol;
						}
						else
						{
							total_Closing_inr_mmbtu = 0;
						}
						Total_Closing_inr_mmbtu = nf.format(total_Closing_inr_mmbtu);
						
						Total_sum_value_inr = nf5.format(total_sum_value_inr);			
						Total_foreign_exchange_rate = nf.format(nrv_foreign_exchg_rate);			
						total_nvr_inr_mmbtu = sum_nrv_inr_mmbtu; 
						Total_sum_inr_mmbtu = nf.format(total_nvr_inr_mmbtu);	
						
						////System.out.println("variance_value_usd  = "+variance_value_usd);
						if(variance_value_usd>=0)
						{
							Variance_value_usd = nf5.format(variance_value_usd);
							Variance_value_usd1 = nf1.format(variance_value_usd);
						}
						else
						{
							////System.out.println("variance_value_usd  = "+variance_value_usd);
							double variance_value_usd1 = (-1) * variance_value_usd;
							Variance_value_usd = "("+nf5.format(variance_value_usd1)+")";
							Variance_value_usd1 = nf1.format(variance_value_usd);
							////System.out.println("Samik Variance_value_usd1  = "+Variance_value_usd1);
						}
						////System.out.println("Variance_value_usd  = "+ Variance_value_usd);
						////System.out.println("Variance_value_usd1  = "+ Variance_value_usd1);
						
						variance_value_inr = total_Closing_value_inr-total_value_inr_opening_basic;
						if(variance_value_inr>=0)
						{
							Variance_value_inr = nf5.format(variance_value_inr);
							Variance_value_inr1 = nf1.format(variance_value_inr);
						}
						else
						{
							double variance_value_inr1 = (-1) * variance_value_inr;
							Variance_value_inr = "("+nf5.format(variance_value_inr1)+")";
							Variance_value_inr1 = nf1.format(variance_value_inr);				
						}			
						
						
						//For Sales Qty
						double temp_sales_qty_total = 0;
						double temp_sales_qty_total1 = 0;
						double temp_margin_value_usd = 0;
						double temp_margin_value_inr = 0;
						double margin_rate = 0;
						double margin_inr_mmbtu = 0;
						
						double sales_usage_value_usd = 0;
						double sales_usage_value_usd1 = 0;
						sales_usage_value_usd = total_value_usd - total_Closing_value_usd1;
					
						//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>total_Closing_value_usd1  = "+ total_Closing_value_usd1);
						//System.out.println("total_value_usd  = "+ total_value_usd);
						//if(closing_bal1<0)				
					//	{
						CLOSING_BAL_TRADING.add(nf.format(total_Closing_value_usd1)); //(3)
					//	}
						
						
						
						Sales_Usage_value_usd = nf5.format(sales_usage_value_usd);
				
						sales_usage_value_usd1 = Double.parseDouble(nf1.format(sales_usage_value_usd));
						
						double sales_usage_value_inr = 0;
						double sales_usage_value_inr1 = 0;
						sales_usage_value_inr = total_value_inr - total_Closing_value_inr;
						Sales_Usage_value_inr = nf5.format(sales_usage_value_inr);
						sales_usage_value_inr1 = Double.parseDouble(nf1.format(sales_usage_value_inr));
						
					//	setYear(year);
					//	setMonth(mon);
					//	setTo_year(year);
					//	setTo_month(mon);
						
					//	get_Sales_dtls();  //Sales Register function called			//JHP007

						String vat_code = "0";
						String cst_code = "0";
						String addl_code = "0";
						String st_code = "0";
						String ecs_code = "0";
						String hecs_code = "0";
						Vector tmp_group_gross_usd_amt = new Vector();
						
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='VAT'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							vat_code = rset.getString(1)==null?"0":rset.getString(1);
						}			
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='CST'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							cst_code = rset.getString(1)==null?"0":rset.getString(1);
						}			
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ADD. VAT'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							addl_code = rset.getString(1)==null?"0":rset.getString(1);
						}			
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ST'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							st_code = rset.getString(1)==null?"0":rset.getString(1);
						}			
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='ECS'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							ecs_code = rset.getString(1)==null?"0":rset.getString(1);
						}			
						queryString = "SELECT tax_code FROM FMS7_TAX_MST WHERE UPPER(sht_nm)='HECS'";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							hecs_code = rset.getString(1)==null?"0":rset.getString(1);
						}
						
						
						
						
						double tot_tcq=0.0;
						double sales_qty_total1=0;
						
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
						  "TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
						  "EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
						  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_TYPE," +
						  "PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
						  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND CONTRACT_TYPE='S' ORDER BY FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					
					//System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						sales_qty_total1 += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
						
					}
					
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),TO_CHAR(PERIOD_START_DT,'DD/MM/YYYY')," +
					"TO_CHAR(PERIOD_END_DT,'DD/MM/YYYY'),SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					"EXCHG_RATE_VALUE,GROSS_AMT_USD,GROSS_AMT_INR,NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					"TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					"CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, " +
					"EXCHG_RATE_TYPE,PLANT_SEQ_NO,CUST_INV_SEQ_NO,SUN_APPROVAL " +
					"FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					"AND CONTRACT_TYPE='L' ORDER BY INVOICE_DT";
		
					//System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						sales_qty_total1 += Double.parseDouble(rset.getString(7)==null?"0":rset.getString(7));
					}
					    sales_qty_total=sales_qty_total1;
			            //System.out.println("check data::"+sales_qty_total);					
						double sales_regas_qty = 0;
						double regas_qty = 0;
						double re_gas_sug_qty = 0;
						sug_percent = "0";
						
						int temp_cust_cd = 0;
						int temp_re_gas_no = 0;
						int temp_cargo_seq_no = 0;
						
						queryString1 = "SELECT QTY_MMBTU, NVL(CUSTOMER_CD,'0'), " +
									   "NVL(FGSA_NO,'0'), NVL(SN_NO,'0') " +
									   "FROM FMS7_DAILY_ALLOCATION_DTL " +
									   "WHERE CONTRACT_TYPE='R' AND " +
									   "(GAS_DT BETWEEN to_date('"+from_dt+"','dd/mm/yyyy') AND " +
									   "to_date('"+to_dt+"','dd/mm/yyyy'))";
						rset1 = stmt1.executeQuery(queryString1);
						while(rset1.next())
						{
							double temp_sales_regas_qty = 0;
							
							sales_regas_qty += Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							temp_sales_regas_qty = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							
							temp_cust_cd = rset1.getInt(2);
							temp_re_gas_no = rset1.getInt(3);
							temp_cargo_seq_no = rset1.getInt(4);
							
							sug_percent = "0";
							
							queryString2 = "SELECT SYS_USE_GAS " +
										   "FROM FMS7_RE_GAS_CARGO_DTL " +
										   "WHERE CUSTOMER_CD="+temp_cust_cd+" AND " +
										   "RE_GAS_NO="+temp_re_gas_no+" AND " +
										   "CARGO_SEQ_NO="+temp_cargo_seq_no+"";
							rset2 = stmt2.executeQuery(queryString2);
						
							if(rset2.next())
							{
								sales_regas_qty += Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								temp_sales_regas_qty = Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								sug_percent = rset2.getString(1)==null?"0":rset2.getString(1);
							}
							
							
							re_gas_sug_qty += Double.parseDouble(nf.format((Double.parseDouble(nf.format(temp_sales_regas_qty))*Double.parseDouble(sug_percent))/(100-Double.parseDouble(sug_percent))));
						}
						
						
						double flaring = 0;
						double auxiliary_consumption = 0;
						double scv_fuel_consumption = 0;
						double sug = 0;					
						double other_consumption = 0;
						double mass_balancing = 0;
						double consumption_percent = 0;
						double temp_flaring1 = 0;
						double temp_auxiliary_consumption = 0;
						double temp_scv_fuel_consumption = 0;
						double temp_sug = 0;					
						double temp_other_consumption = 0;
						double temp_mass_balancing = 0;
						
						queryString1 = "SELECT FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG,OTHER_CONSUMPTION,MASS_BALANCING FROM FMS7_INTERNAL_CONSUMPTION " +
									   "WHERE YEAR='"+year+"' AND MONTH ='"+mon+"'";
						//System.out.println("SELECT QUERY FOR FLARING,AUXILARY_CONSUMPTION,SCV_FUEL_CONSUMPTION,SUG = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
							flaring = Double.parseDouble(rset1.getString(1)==null?"0":rset1.getString(1));
							auxiliary_consumption = Double.parseDouble(rset1.getString(2)==null?"0":rset1.getString(2));
							scv_fuel_consumption = Double.parseDouble(rset1.getString(3)==null?"0":rset1.getString(3));
							sug = Double.parseDouble(rset1.getString(4)==null?"0":rset1.getString(4));					
							other_consumption = Double.parseDouble(rset1.getString(5)==null?"0":rset1.getString(5));
							mass_balancing = Double.parseDouble(rset1.getString(6)==null?"0":rset1.getString(6));
						}				
						if(flaring!=0)
						{
							Flaring = nf5.format(flaring);
							temp_flaring1 = Double.parseDouble(nf1.format(flaring));
						}
						else
						{
							Flaring = "-" ;
							temp_flaring1 = 0;
						}
						
						if(auxiliary_consumption!=0)
						{
							Auxiliary_Consumption = nf5.format(auxiliary_consumption);
							temp_auxiliary_consumption = Double.parseDouble(nf1.format(auxiliary_consumption));
						}
						else
						{
							Auxiliary_Consumption = "-";
							temp_auxiliary_consumption = 0;
						}
						if(scv_fuel_consumption!=0)
						{
							Scv_fuel_consumption = nf5.format(scv_fuel_consumption);
							temp_scv_fuel_consumption = Double.parseDouble(nf1.format(scv_fuel_consumption));
						}
						else
						{
							Scv_fuel_consumption = "-";
							temp_scv_fuel_consumption = 0;
						}
						
						if(re_gas_sug_qty>=0)
						{
							sug = (-1)*re_gas_sug_qty;
						}
						
						if(sug!=0)
						{
							Sug = nf5.format(sug);
							temp_sug = Double.parseDouble(nf1.format(sug));
						}
						else
						{
							Sug = "-";
							temp_sug = 0;
						}
						
						if(other_consumption!=0)
						{
							Other_Consumption = nf5.format(other_consumption);
							temp_other_consumption = Double.parseDouble(nf1.format(other_consumption));
						}
						else
						{
							Other_Consumption = "-" ;
							temp_other_consumption = 0;
						}
						if(mass_balancing!=0)
						{
							Mass_Balancing = nf5.format(mass_balancing);
							temp_mass_balancing = Double.parseDouble(nf1.format(mass_balancing));
						}
						else
						{
							Mass_Balancing = "-";
							temp_mass_balancing = 0;
						}
						
						double captive_consumption = 0;
						double captive_consumption1 = 0;
						captive_consumption = temp_flaring1 + temp_auxiliary_consumption + temp_scv_fuel_consumption + temp_sug + temp_other_consumption + temp_mass_balancing;
						Captive_consumption = nf5.format(captive_consumption);
						captive_consumption1 = Double.parseDouble(nf1.format(captive_consumption));
									
						double flaring_usd_mmbtu = 0;
						double auxiliary_usd_mmbtu = 0;
						double scv_fuel_usd_mmbtu = 0;
						double mass_balancing_usd_mmbtu = 0;
						double sug_usd_mmbtu = 0;
						double other_usd_mmbtu = 0;

						double sales_usage_inr_mmbtu = 0;
						double sales_usage_inr_mmbtu1 = 0;

						double sales_usage_usd_mmbtu = 0;
						double sales_usage_usd_mmbtu1 = 0;
						
						double captive_value_usd = 0;
						double captive_value_usd1 = 0;
						
					
						//For Captive Consumption
						double temp_flaring = 0;
						double temp_total_fuel_gas = 0;
						double consumption_qty = 0;
						double consumption_qty1 = 0;
						double consumption_value_usd = 0;
						double consumption_value_inr = 0;
						
						//fetch_Monthly_Energy();
						
						if(Flaring.trim().equals("-") || Flaring.trim().equals(""))
						{
							Flaring = "0";
						}
						if(Total_Fuel_Gas.trim().equals("-") || Total_Fuel_Gas.trim().equals(""))
						{
							Total_Fuel_Gas = "0";
						}
						
						temp_flaring = Double.parseDouble(Flaring);
						temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
						temp_total_fuel_gas = Double.parseDouble(Total_Fuel_Gas);
						consumption_qty = temp_flaring + temp_total_fuel_gas;
						consumption_qty1 = Double.parseDouble(nf1.format(captive_consumption));
						Consumption_qty = nf5.format(captive_consumption);		
						temp_sales_qty_total = sales_qty_total;
						temp_sales_qty_total1 = Double.parseDouble(nf1.format(sales_qty_total));
						
						
					
						temp_margin_value_usd = sales_gross_amt_usd_total;
						temp_margin_value_inr = sales_qty_amt_inr_total;
									
						double sales_usage_qty = 0;
						double sales_usage_qty1 = 0;
						
						//System.out.println(total_qty+" = final_total_volume = "+final_total_volume);
						
						sales_usage_qty = final_total_volume - total_qty;
						Sales_Usage_qty = nf5.format(sales_usage_qty);
						
						//System.out.println("sales_usage_qty::"+sales_usage_qty);
						
						sales_usage_qty1 = Double.parseDouble(nf2.format(sales_usage_qty));
						
						
						if(sales_usage_qty1!=0)
						{
							
							sales_usage_usd_mmbtu = sales_usage_value_usd1 / sales_usage_qty1;
						}
						else
						{
							sales_usage_usd_mmbtu = 0;
						}
						Sales_Usage_usd_mmbtu = nf.format(sales_usage_usd_mmbtu);
						
						sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
						
						//System.out.println("sales_usage_usd_mmbtu = "+sales_usage_usd_mmbtu);
						
						

						
						if(sales_usage_qty1!=0)
						{
							sales_usage_inr_mmbtu = sales_usage_value_inr1 / sales_usage_qty1;
						}
						else
						{
							sales_usage_inr_mmbtu = 0;
						}
						Sales_Usage_inr_mmbtu = nf.format(sales_usage_inr_mmbtu);
						sales_usage_inr_mmbtu1 = Double.parseDouble(nf.format(sales_usage_inr_mmbtu));
						//System.out.println("jaimin::"+sales_usage_inr_mmbtu1);
						
						double flaring_inr_mmbtu = 0;
						double auxiliary_inr_mmbtu = 0;
						double scv_fuel_inr_mmbtu = 0;
						double mass_balancing_inr_mmbtu = 0;
						double sug_inr_mmbtu = 0;
						double other_inr_mmbtu = 0;
						
						
						
						flaring_inr_mmbtu = Double.parseDouble(nf1.format(temp_flaring1 * sales_usage_inr_mmbtu1));
						auxiliary_inr_mmbtu = Double.parseDouble(nf1.format(temp_auxiliary_consumption * sales_usage_inr_mmbtu1));
						scv_fuel_inr_mmbtu = Double.parseDouble(nf1.format(temp_scv_fuel_consumption * sales_usage_inr_mmbtu1));
						mass_balancing_inr_mmbtu = Double.parseDouble(nf1.format(temp_mass_balancing * sales_usage_inr_mmbtu1));
						sug_inr_mmbtu = Double.parseDouble(nf1.format(temp_sug * sales_usage_inr_mmbtu1));
						other_inr_mmbtu = Double.parseDouble(nf1.format(temp_other_consumption * sales_usage_inr_mmbtu1));
						
								
						Flaring_inr_mmbtu = nf5.format(flaring_inr_mmbtu);
						Auxiliary_inr_mmbtu = nf5.format(auxiliary_inr_mmbtu);
						Scv_fuel_inr_mmbtu = nf5.format(scv_fuel_inr_mmbtu);
						Mass_balancing_inr_mmbtu = nf5.format(mass_balancing_inr_mmbtu);
						Sug_inr_mmbtu = nf5.format(sug_inr_mmbtu);
						Other_inr_mmbtu = nf5.format(other_inr_mmbtu);
						
						double captive_value_inr = 0;
						double captive_value_inr1 = 0;
						captive_value_inr = flaring_inr_mmbtu + auxiliary_inr_mmbtu + scv_fuel_inr_mmbtu + mass_balancing_inr_mmbtu + sug_inr_mmbtu + other_inr_mmbtu;
						Captive_value_inr = nf5.format(captive_value_inr);
						captive_value_inr1 = Double.parseDouble(nf1.format(captive_value_inr));
						
						double captive_usd_mmbtu = 0;
						double captive_inr_mmbtu = 0;
						
						
						
						flaring_usd_mmbtu = temp_flaring1 * sales_usage_usd_mmbtu1;
						//System.out.println(flaring_usd_mmbtu+"="+temp_flaring1+"<<-------->>"+sales_usage_usd_mmbtu1);
						
						auxiliary_usd_mmbtu = temp_auxiliary_consumption * sales_usage_usd_mmbtu1;
						
						//System.out.println(auxiliary_usd_mmbtu+"="+temp_auxiliary_consumption+"<<-------->>"+sales_usage_usd_mmbtu1);
						scv_fuel_usd_mmbtu = temp_scv_fuel_consumption * sales_usage_usd_mmbtu1;
						mass_balancing_usd_mmbtu = temp_mass_balancing * sales_usage_usd_mmbtu1;
						sug_usd_mmbtu = temp_sug * sales_usage_usd_mmbtu1;
						other_usd_mmbtu = temp_other_consumption * sales_usage_usd_mmbtu1;
						
						Flaring_usd_mmbtu = nf5.format(flaring_usd_mmbtu);
						Auxiliary_usd_mmbtu = nf5.format(auxiliary_usd_mmbtu);
						Scv_fuel_usd_mmbtu = nf5.format(scv_fuel_usd_mmbtu);
						Mass_balancing_usd_mmbtu = nf5.format(mass_balancing_usd_mmbtu);
						Sug_usd_mmbtu = nf5.format(sug_usd_mmbtu);
						Other_usd_mmbtu = nf5.format(other_usd_mmbtu);
						
						
						
						FLARING.add(nf5.format(flaring_usd_mmbtu));						//(4)
						SCV_FUEL_CONSUMPTION.add(nf5.format(scv_fuel_usd_mmbtu));       //(4)
						SUG.add(nf5.format(sug_usd_mmbtu));								//(4)
						AUXILIARY_CONSUMPTION.add(nf5.format(auxiliary_usd_mmbtu));		//(4)
						MASS_BALANCING.add(nf5.format(mass_balancing_usd_mmbtu));		//(4)
						
						captive_value_usd = flaring_usd_mmbtu + auxiliary_usd_mmbtu + scv_fuel_usd_mmbtu + mass_balancing_usd_mmbtu + sug_usd_mmbtu + other_usd_mmbtu;
						Captive_value_usd = nf5.format(captive_value_usd);
						captive_value_usd1 = Double.parseDouble(nf1.format(captive_value_usd));
						
						if(captive_consumption1!=0)
						{
							captive_usd_mmbtu = captive_value_usd1/captive_consumption1;
							captive_inr_mmbtu = captive_value_inr1/captive_consumption1;
						}
						else
						{
							captive_usd_mmbtu = 0;
							captive_inr_mmbtu = 0;
						}
						
						Captive_usd_mmbtu = nf.format(captive_usd_mmbtu);
						Captive_inr_mmbtu = nf.format(captive_inr_mmbtu);			
									
						Sales_mmbtu_total = nf5.format(temp_sales_qty_total);
						
						//System.out.println("Sales_mmbtu_total = "+Sales_mmbtu_total);
						
						double consumption_value_usd1 =0 ;
						consumption_value_usd = consumption_qty1 * sales_usage_usd_mmbtu1;
						Consumption_value_usd = nf5.format(consumption_value_usd);	
						
						consumption_value_usd1 = Double.parseDouble(nf.format(consumption_value_usd));	
						
						sales_usage_usd_mmbtu1 = Double.parseDouble(nf.format(sales_usage_usd_mmbtu));
						
						if(sales_usage_qty!=0 && consumption_qty1!=0)
						{
							consumption_value_inr = sales_usage_value_inr1/sales_usage_qty * consumption_qty1;
						}
						else
						{
							consumption_value_inr = 0;
						}
						double consumption_value_inr1 = 0;
						consumption_value_inr1 = Double.parseDouble(nf.format(consumption_value_inr));	
						Consumption_value_inr = nf5.format(consumption_value_inr);
						
						double cost_sales_usd = 0;
						
						//System.out.println(temp_sales_qty_total1+"=============="+sales_usage_usd_mmbtu1);
						cost_sales_usd = temp_sales_qty_total1 * sales_usage_usd_mmbtu1;
						Cost_sales_usd = nf5.format(cost_sales_usd);
						Cost_sales_usd1 = nf1.format(cost_sales_usd);
						
						double cost_sales_inr = 0;
						cost_sales_inr = sales_usage_value_inr1 - consumption_value_inr;
						Cost_sales_inr = nf5.format(cost_sales_inr);
					
						SALES_QTY.add(nf5.format(cost_sales_usd));  //(5)
					
						
						//System.out.println("mnth::"+mnth);
						
						if(!mnth.equalsIgnoreCase("-"))
						{
							MONTH.add(mnth);
						}
						
						
					}//END of For loop
			
				double temp_opening=0;
				double temp_receipt=0;
				double temp_cos=0;
				double temp_flare=0;
				double temp_ffc=0;
				double temp_ffp=0;
				double temp_ul=0;
				double temp_sug=0;
				double temp_closing=0;
				for(int g=0;g<MONTH.size();g++)
				{
					
					temp_opening +=Double.parseDouble(OP_BAL_TRADING.elementAt(g).toString());
					temp_receipt +=Double.parseDouble(TRADING_QTY.elementAt(g).toString());
					temp_cos +=Double.parseDouble(SALES_QTY.elementAt(g).toString());
					temp_flare +=Double.parseDouble(FLARING.elementAt(g).toString());
					temp_ffc +=Double.parseDouble(SCV_FUEL_CONSUMPTION.elementAt(g).toString());
					temp_ffp +=Double.parseDouble(AUXILIARY_CONSUMPTION.elementAt(g).toString());
					temp_ul +=Double.parseDouble(MASS_BALANCING.elementAt(g).toString());
					temp_sug +=Double.parseDouble(SUG.elementAt(g).toString());
					temp_closing +=Double.parseDouble(CLOSING_BAL_TRADING.elementAt(g).toString());
					
	CHECK.add(nf.format((Double.parseDouble(OP_BAL_TRADING.elementAt(g).toString())+Double.parseDouble(TRADING_QTY.elementAt(g).toString()))-(Double.parseDouble(SALES_QTY.elementAt(g).toString())+Double.parseDouble(FLARING.elementAt(g).toString())+Double.parseDouble(SCV_FUEL_CONSUMPTION.elementAt(g).toString())+Double.parseDouble(AUXILIARY_CONSUMPTION.elementAt(g).toString())+Double.parseDouble(MASS_BALANCING.elementAt(g).toString())+Double.parseDouble(SUG.elementAt(g).toString())+Double.parseDouble(CLOSING_BAL_TRADING.elementAt(g).toString())))+"");					
				}
				
				 Sum_opening_trading = nf.format(temp_opening)+"";
				 Sum_receipt_trading = nf.format(temp_receipt)+"";
				 Sum_sales_qty = nf.format(temp_cos)+"";
				 Sum_flaring = nf.format(temp_flare)+"";
				 Sum_auxiliary =nf.format(temp_ffp)+"";
				 Sum_scv =nf.format(temp_ffc)+"";
				 Sum_sug = nf.format(temp_sug)+"";
				 Sum_mass = nf.format(temp_ul)+"";
				 Closing_trading = nf.format(temp_closing)+"";

				
				 Sum_check=nf.format((Double.parseDouble(Sum_opening_trading)+Double.parseDouble(Sum_receipt_trading))-(Double.parseDouble(Sum_sales_qty)+Double.parseDouble(Sum_flaring)+Double.parseDouble(Sum_auxiliary)+Double.parseDouble(Sum_scv)+Double.parseDouble(Sum_sug)+Double.parseDouble(Sum_mass)+Double.parseDouble(Closing_trading)))+"";
				
				
			}
			else if(!(year.trim().equalsIgnoreCase("0")) && !(year.trim().equalsIgnoreCase("")) && year!=null)
			{
				
				
			}
			
			
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
///////////////////////End Of this function ////////////////	
	///////////////////////////////////////////////////////////////////////////////
	
	//Following String Setter Methods Are Defined By Achal Pathak On 20th May, 2010 ...
	public void setCallFlag(String callFlag) {this.callFlag = callFlag;} //Introduced By Samik Shah On 20th May, 2010 ...
	public void setMonth(String month) {this.month = month;}
	public void setYear(String year) {this.year = year;}
	public void setTo_month(String to_month) {this.to_month = to_month;}
	public void setTo_year(String to_year) {this.to_year = to_year;}
	public void setCargo_ref_cd(String cargo_ref_cd) {this.cargo_ref_cd = cargo_ref_cd;}
	public void setTrader_cd(String trader_cd) {this.trader_cd = trader_cd;}
	public void setFinancial_year(String financial_year) {this.financial_year = financial_year;}
	public void setCustomer_cd(String customer_cd) {this.customer_cd = customer_cd;}	
	
	public void setGross_amt_inr(String gross_amt_inr) {this.gross_amt_inr = gross_amt_inr;}
	public void setHlpl_inv_seq_no(String hlpl_inv_seq_no) {this.hlpl_inv_seq_no = hlpl_inv_seq_no;}
	public void setPeriod_start_dt(String period_start_dt) {this.period_start_dt = period_start_dt;}
	public void setTax_struct_cd(String tax_struct_cd) {this.tax_struct_cd = tax_struct_cd;}
	
	public void setFrom_dt(String from_dt) {this.from_dt = from_dt;}
	public void setTo_dt(String to_dt) {this.to_dt = to_dt;}
	public void setXml_file_nm(String xml_file_nm) {this.xml_file_nm = xml_file_nm;} //Introduced By Samik Shah On 25th August, 2011 ...
	public void setDr_cr_flag(String dr_cr_flag) {this.dr_cr_flag = dr_cr_flag;}

	public void setInvoice_from_date(String invoice_from_date) {this.invoice_from_date = invoice_from_date;}
	public void setInvoice_to_date(String invoice_to_date) {this.invoice_to_date = invoice_to_date;}	

	//Following Vector Getter Methods Has Been Defined By Achal Pathak On 23rd June, 2010 ...
	public Vector getTRADER_ABBR() {return TRADER_ABBR;}
	public Vector getTRADER_CD() {return TRADER_CD;}
	public Vector getTRADER_NAME() {return TRADER_NAME;}	
	
	public Vector getCARGO_REF_CD() {return CARGO_REF_CD;}	
	public Vector getCONFIRM_VOLUME() {return CONFIRM_VOLUME;}
	public Vector getDUE_DT() {return DUE_DT;}	
	public Vector getINVOICE_AMT() {return INVOICE_AMT;}
	public Vector getINVOICE_DT() {return INVOICE_DT;}
	public Vector getINVOICE_NO() {return INVOICE_NO;}		
	public Vector getVOLUME_UNIT_ABBR() {return VOLUME_UNIT_ABBR;}
	public Vector getCONF_PRICE() {return CONF_PRICE;}
	
//	Following Vector Getter Methods Has Been Defined By Achal Pathak On 24th June, 2010 ... For Provisional_Custom_Duty
	public Vector getFACTOR() {return FACTOR;}
	public Vector getTAX_AMOUNT() {return TAX_AMOUNT;}
	public Vector getTAX_CODE() {return TAX_CODE;}
	public Vector getTAX_NAME() {return TAX_NAME;}
	public Vector getTAX_ON_TITLE() {return TAX_ON_TITLE;}
//	Following Vector Getter Methods Has Been Defined By Achal Pathak On 25th June, 2010 ... For Final_Custom_Duty
	public Vector getFINAL_FACTOR() {return FINAL_FACTOR;}
	public Vector getFINAL_TAX_AMOUNT() {return FINAL_TAX_AMOUNT;}
	public Vector getFINAL_TAX_CODE() {return FINAL_TAX_CODE;}
	public Vector getFINAL_TAX_NAME() {return FINAL_TAX_NAME;}
	public Vector getFINAL_TAX_ON_TITLE() {return FINAL_TAX_ON_TITLE;}
//	Following Vector Getter Methods Has Been Defined By Achal Pathak On 24th June, 2010 ...	
	public Vector getBE_NO() {return BE_NO;}
	public Vector getLOAD_PORT() {return LOAD_PORT;}
	public Vector getSHIP_FLAG() {return SHIP_FLAG;}
	public Vector getVESSEL_NM() {return VESSEL_NM;}
	
//	Following Vector Getter Methods Has Been Defined By Achal Pathak On 28th June, 2010 ...	
	public Vector getCUSTOMER_ABBR() {return CUSTOMER_ABBR;}
	public Vector getCUSTOMER_CD() {return CUSTOMER_CD;}
	public Vector getCUSTOMER_NAME() {return CUSTOMER_NAME;}
//	Following Vector Getter Methods Has Been Defined By Achal Pathak On 29th June, 2010 ...For Sales_Accounting_SEARCH 01 September	
	public Vector getEXCHG_RATE_VALUE() {return EXCHG_RATE_VALUE;}
	public Vector getFINANCIAL_YEAR() {return FINANCIAL_YEAR;}
	public Vector getGROSS_AMT_INR() {return GROSS_AMT_INR;}
	public Vector getGROSS_AMT_USD() {return GROSS_AMT_USD;}
	public Vector getHLPL_INV_SEQ_NO() {return HLPL_INV_SEQ_NO;}
	public Vector getNET_AMT_INR() {return NET_AMT_INR;}
	public Vector getPERIOD_END_DT() {return PERIOD_END_DT;}
	public Vector getPERIOD_START_DT() {return PERIOD_START_DT;}
	public Vector getSALE_PRICE() {return SALE_PRICE;}
	public Vector getTOTAL_QTY() {return TOTAL_QTY;}
	public Vector getTAX_STRUCT_CD() {return TAX_STRUCT_CD;}
	public Vector getTRANSPORTER_CD() {return TRANSPORTER_CD;}
	
	public Vector getSN_NO() {return SN_NO;}
	public Vector getFGSA_NO() {return FGSA_NO;}
	public Vector getFGSA_REV_NO() {return FGSA_REV_NO;}
	public Vector getSN_REV_NO() {return SN_REV_NO;}
	public Vector getEND_DT() {return END_DT;}
	public Vector getSTART_DT() {return START_DT;}
	public Vector getTCQ() {return TCQ;	}
	public Vector getCUM_SUPPLY() {return CUM_SUPPLY;}
	public Vector getREM_SUPPLY() {return REM_SUPPLY;}
	
	public Vector getTOT_SALE_VAL() {return TOT_SALE_VAL;}
	public Vector getTRANS_CHARGES() {return TRANS_CHARGES;}
//	Following String Getter Methods Has Been Defined By Achal Pathak On 23rd June, 2010 ...
	public String getCargo_ref_cd() {return cargo_ref_cd;}
	public String getTax_str_cd() {return tax_str_cd;}
	public String getTrader_cd() {return trader_cd;}
	public String getTrader_abbr() {return trader_abbr;}
	
	public String getConf_price() {return conf_price;}
	public String getActual_unloaded_qty() {return actual_unloaded_qty;}		
	public String getFinal_inv_dt() {return final_inv_dt;}
	public String getFinal_inv_no() {return final_inv_no;}
	public String getInv_no() {return inv_no;}	
	public String getInvoice_value() {return invoice_value;}	
//	Following String Getter Methods Has Been Defined By Achal Pathak On 24th June, 2010 ...		
	public String getSeller_inv_amt() {return seller_inv_amt;}
	public String getAccess_value() {return access_value;}
	public String getCif_val() {return cif_val;}
	public String getLading_val() {return lading_val;}
	public String getExchg_rate() {return exchg_rate;}
	public String getPd_bond_value() {return pd_bond_value;}
	public String getInv_amt() {return inv_amt;}
	public String getSurvey_fee() {return survey_fee;}
	public String getTotal_cd_amt() {return total_cd_amt;}	
	public String getConf_qty() {return conf_qty;}
	public String getProv_cust_conf_price() {return prov_cust_conf_price;}
	public String getProv_cust_conf_qty() {return prov_cust_conf_qty;}
//	Following String Getter Methods Has Been Defined By Achal Pathak On 25th June, 2010 ...	
	public String getInc_dec_amt() {return inc_dec_amt;}
	public String getInc_dec_qty() {return inc_dec_qty;}	
	public String getInvoice_value_inr() {return invoice_value_inr;}	
	public String getInv_dt() {return inv_dt;}
	public String getCust_due_dt() {return cust_due_dt;}
	public String getDue_dt() {return due_dt;}
	public String getFinal_access_value() {return final_access_value;}
	public String getFinal_cif_val() {return final_cif_val;}
	public String getFinal_exchg_rate() {return final_exchg_rate;}
	public String getFinal_lading_val() {return final_lading_val;}
	public String getFinal_total_cd_amt() {return final_total_cd_amt;}
	public String getTot_paid_refund() {return tot_paid_refund;}
	public String getInt_amt() {return int_amt;}
	public String getDays() {return days;}
	public String getInt_val() {return int_val;}
	public String getFinal_inc_dec_amt() {return final_inc_dec_amt;}
//	Following String Getter Methods Has Been Defined By Achal Pathak On 29th June, 2010 ...	
	public String getFinancial_year() {return financial_year;}
	public String getGross_amt_inr() {return gross_amt_inr;}
	public String getHlpl_inv_seq_no() {return hlpl_inv_seq_no;}
	public String getPeriod_start_dt() {return period_start_dt;}
	public String getTax_struct_cd() {return tax_struct_cd;}
//	Following String Getter Methods Has Been Defined By Achal Pathak On 1st July, 2010 ...	
	public String getContact_person_cd() {return contact_person_cd;}
	public String getContract_type() {return contract_type;}
	public String getCust_inv_seq_no() {return cust_inv_seq_no;}
	public String getExchg_rate_cd() {return exchg_rate_cd;}
	public String getExchg_rate_dt() {return exchg_rate_dt;}
	public String getExchg_rate_type() {return exchg_rate_type;}
	public String getFgsa_no() {return fgsa_no;}
	public String getFgsa_rev_no() {return fgsa_rev_no;}
	public String getPlant_seq_no() {return plant_seq_no;}
	public String getSn_no() {return sn_no;}
	public String getSn_rev_no() {return sn_rev_no;}
	public String getTax_amt_inr() {return tax_amt_inr;}
	public String getTax_flag() {return tax_flag;}
	public String getAdd_tax() {return add_tax;}
	public String getSales_tax_amt() {return sales_tax_amt;}
	public String getVat_amt() {return vat_amt;}
	public String getPlant_name() {return plant_name;}
	public String getTransporter_abbr() {return transporter_abbr;}
	public String getTransporter_name() {return transporter_name;}
	public String getMon() {return mon;}
	public String getTo_mon() {return to_mon;}

	public Vector getHLPL_INV_SEQ() {return HLPL_INV_SEQ;}
	public Vector getADD_TAX() {return ADD_TAX;}
	public Vector getSALES_TAX_AMT() {return SALES_TAX_AMT;}
	public Vector getVAT_AMT() {return VAT_AMT;}
	public Vector getAVG_PRICE_MMBTU() {return AVG_PRICE_MMBTU;}
	public Vector getEDU_CESS_TAX() {return EDU_CESS_TAX;}
	public Vector getHEDU_CESS_TAX() {return HEDU_CESS_TAX;}
	public Vector getSERVICE_TAX() {return SERVICE_TAX;}
	public Vector getMONTH() {return MONTH;}
	public Vector getCONTRACT_TYPE() {return CONTRACT_TYPE;}	
	public Vector getNET_AMT_USD() {return NET_AMT_USD;}
	public Vector getTAX_AMT_USD() {return TAX_AMT_USD;}
	public Vector getACT_ARRV_DT() {return ACT_ARRV_DT;}
	public Vector getACT_ARRV_MONTH() {return ACT_ARRV_MONTH;}
	public Vector getTRD_CD() {return TRD_CD;}
	public Vector getACTUAL_UNLOADED_ATY() {return ACTUAL_UNLOADED_ATY;}
	public Vector getDR_CR_NOTE() {return DR_CR_NOTE;}
	public Vector getUSD_BOOKS() {return USD_BOOKS;}
	public Vector getUSD_DR_CR() {return USD_DR_CR;}
	public Vector getUSD_VAL_INVOICE() {return USD_VAL_INVOICE;}
	public Vector getUSD_VAL_JBB() {return USD_VAL_JBB;}
	public Vector getDUTY_PER_JBB() {return DUTY_PER_JBB;}
	public Vector getTOTAL_CD_AMT() {return TOTAL_CD_AMT;}
	public Vector getTOTAL_PAID_REFUND() {return TOTAL_PAID_REFUND;}
	public Vector getCD_PAID() {return CD_PAID;}
	public void setInv_no(String inv_no) {this.inv_no = inv_no;}
	public String getHedge_seq() {return hedge_seq;}
	public String getHedge_no() {return hedge_no;}
	public void setHedge_no(String hedge_no) {this.hedge_no = hedge_no;}
	public void setHedge_rollover_no(String hedge_rollover_no) {this.hedge_rollover_no = hedge_rollover_no;}
	public Vector getBANK_CD() {return BANK_CD;}
	public Vector getBANK_NAME() {return BANK_NAME;}
	public Vector getCREDIT_RATING() {return CREDIT_RATING;}
	public String getBank_cd() {return bank_cd;}
	public String getBank_cont_no() {return bank_cont_no;}
	public String getCredit_rate() {return credit_rate;}
	public String getDiff_exchg() {return diff_exchg;}
	public String getHedge_con_dt() {return hedge_con_dt;}
	public String getHedge_excg_dt() {return hedge_excg_dt;}
	public String getHedge_pos() {return hedge_pos;}
	public String getHedge_under() {return hedge_under;}
	public String getHedge_val_dt() {return hedge_val_dt;}
	public String getHedge_value() {return hedge_value;}
	public String getMargin() {return margin;}
	public String getMarket2() {return market2;}
	public String getPremium() {return premium;}
	public String getSpot_rate() {return spot_rate;}
	public String getTotal() {return total;}
	public String getExg_rt_on_prov_inv_dt() {return exg_rt_on_prov_inv_dt;}
	public void setActivity(String activity) {this.activity = activity;}
	public Vector getBANK_CONTR_NO() {return BANK_CONTR_NO;}
	public Vector getDIFF_EXCHG() {return DIFF_EXCHG;}
	public Vector getHEDGE_CON_DT() {return HEDGE_CON_DT;}
	public Vector getHEDGE_VAL_DT() {return HEDGE_VAL_DT;}
	public Vector getHEDGE_VALUE() {return HEDGE_VALUE;}
	public Vector getHEDGE_PAYMENT() {return HEDGE_PAYMENT;}
	public Vector getHEDGE_SEQ_NO() {return HEDGE_SEQ_NO;}
	public Vector getHEDGE_RATE_TOTAL() {return HEDGE_RATE_TOTAL;}
	public Vector getBANK_CHARGES() {return BANK_CHARGES;}
	public Vector getPAYMENT_REF_NO() {return PAYMENT_REF_NO;}
	public Vector getREMITTANCE_DT() {return REMITTANCE_DT;}
	public Vector getTOTAL_PAYMENT() {return TOTAL_PAYMENT;}
	public String getBank_name() {return bank_name;}
	public String getHedge_payment() {return hedge_payment;}
	public String getBank_charges() {return bank_charges;}
	public String getPayment_ref_no() {return payment_ref_no;}
	public String getRemark() {return remark;}
	public String getRemit_dt() {return remit_dt;}
	public String getRemit_flag() {return remit_flag;}
	public String getTotal_payment() {return total_payment;}	
	//Following TEN Vector Getter Methods Has Been Defined By Samik Shah On 21st October, 2010 ...
	public Vector getSEGMENT_NAME() {return SEGMENT_NAME;}
	public Vector getTAX_AMT_INR() {return TAX_AMT_INR;}
	public Vector getSALES_TAX_AMT_USD() {return SALES_TAX_AMT_USD;}
	public Vector getVAT_AMT_USD() {return VAT_AMT_USD;}
	public Vector getADD_TAX_USD() {return ADD_TAX_USD;}
	public Vector getSERVICE_TAX_USD() {return SERVICE_TAX_USD;}
	public Vector getEDU_CESS_TAX_USD() {return EDU_CESS_TAX_USD;}
	public Vector getHEDU_CESS_TAX_USD() {return HEDU_CESS_TAX_USD;}
	public Vector getGROUP_FOREIGN_EXCHG_RATE() {return GROUP_FOREIGN_EXCHG_RATE;}
	public Vector getGROSS_AMT_USD_GROUP_FOREIGN_EXCHG() {return GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;}


	//Following 4 integer Getter Methods Has Been Defined By Samik Shah On 22nd October, 2010 ...
	public int getStart_index_1() {return start_index_1;}
	public int getStart_index_2() {return start_index_2;}
	public int getEnd_index_1() {return end_index_1;}
	public int getEnd_index_2() {return end_index_2;}	

	//Following 56 double Getter Methods Has Been Defined By Samik Shah On 22nd October, 2010 ...
	public double getSales_addl_tax_inr_total() {return sales_addl_tax_inr_total;}
	public double getSales_addl_tax_usd_total() {return sales_addl_tax_usd_total;}
	public double getSales_edu_cess_inr_total() {return sales_edu_cess_inr_total;}
	public double getSales_edu_cess_usd_total() {return sales_edu_cess_usd_total;}
	public double getSales_gross_amt_inr_total() {return sales_gross_amt_inr_total;}
	public double getSales_gross_amt_usd_total() {return sales_gross_amt_usd_total;}
	public double getSales_group_foreign_gross_amt_usd_total() {return sales_group_foreign_gross_amt_usd_total;}
	public double getSales_high_edu_cess_inr_total() {return sales_high_edu_cess_inr_total;}
	public double getSales_high_edu_cess_usd_total() {return sales_high_edu_cess_usd_total;}
	public double getSales_net_amt_inr_total() {return sales_net_amt_inr_total;}
	public double getSales_net_amt_usd_total() {return sales_net_amt_usd_total;}
	public double getSales_other_tax1_inr_total() {return sales_other_tax1_inr_total;}
	public double getSales_other_tax1_usd_total() {return sales_other_tax1_usd_total;}
	public double getSales_other_tax2_inr_total() {return sales_other_tax2_inr_total;}
	public double getSales_other_tax2_usd_total() {return sales_other_tax2_usd_total;}
	public double getSales_qty_amt_inr_total() {return sales_qty_amt_inr_total;}
	public double getSales_qty_amt_usd_total() {return sales_qty_amt_usd_total;}
	public double getSales_qty_total() {return sales_qty_total;}
	public double getSales_sales_tax_inr_total() {return sales_sales_tax_inr_total;}
	public double getSales_sales_tax_usd_total() {return sales_sales_tax_usd_total;}
	public double getSales_service_tax_inr_total() {return sales_service_tax_inr_total;}
	public double getSales_service_tax_usd_total() {return sales_service_tax_usd_total;}
	public double getSales_total_tax_inr_total() {return sales_total_tax_inr_total;}
	public double getSales_total_tax_usd_total() {return sales_total_tax_usd_total;}
	public double getSales_transportation_cost_inr_total() {return sales_transportation_cost_inr_total;}
	public double getSales_transportation_cost_usd_total() {return sales_transportation_cost_usd_total;}
	public double getSales_vat_inr_total() {return sales_vat_inr_total;}
	public double getSales_vat_usd_total() {return sales_vat_usd_total;}
	
	public double getRegas_addl_tax_inr_total() {return regas_addl_tax_inr_total;}
	public double getRegas_addl_tax_usd_total() {return regas_addl_tax_usd_total;}
	public double getRegas_edu_cess_inr_total() {return regas_edu_cess_inr_total;}
	public double getRegas_edu_cess_usd_total() {return regas_edu_cess_usd_total;}
	public double getRegas_gross_amt_inr_total() {return regas_gross_amt_inr_total;}
	public double getRegas_gross_amt_usd_total() {return regas_gross_amt_usd_total;}
	public double getRegas_group_foreign_gross_amt_usd_total() {return regas_group_foreign_gross_amt_usd_total;}
	public double getRegas_high_edu_cess_inr_total() {return regas_high_edu_cess_inr_total;}
	public double getRegas_high_edu_cess_usd_total() {return regas_high_edu_cess_usd_total;}
	public double getRegas_net_amt_inr_total() {return regas_net_amt_inr_total;}
	public double getRegas_net_amt_usd_total() {return regas_net_amt_usd_total;}
	public double getRegas_other_tax1_inr_total() {return regas_other_tax1_inr_total;}
	public double getRegas_other_tax1_usd_total() {return regas_other_tax1_usd_total;}
	public double getRegas_other_tax2_inr_total() {return regas_other_tax2_inr_total;}
	public double getRegas_other_tax2_usd_total() {return regas_other_tax2_usd_total;}
	public double getRegas_qty_amt_inr_total() {return regas_qty_amt_inr_total;}
	public double getRegas_qty_amt_usd_total() {return regas_qty_amt_usd_total;}
	public double getRegas_qty_total() {return regas_qty_total;}
	public double getRegas_sales_tax_inr_total() {return regas_sales_tax_inr_total;}
	public double getRegas_sales_tax_usd_total() {return regas_sales_tax_usd_total;}
	public double getRegas_service_tax_inr_total() {return regas_service_tax_inr_total;}
	public double getRegas_service_tax_usd_total() {return regas_service_tax_usd_total;}
	public double getRegas_total_tax_inr_total() {return regas_total_tax_inr_total;}
	public double getRegas_total_tax_usd_total() {return regas_total_tax_usd_total;}
	public double getRegas_transportation_cost_inr_total() {return regas_transportation_cost_inr_total;}
	public double getRegas_transportation_cost_usd_total() {return regas_transportation_cost_usd_total;}
	public double getRegas_vat_inr_total() {return regas_vat_inr_total;}
	public double getRegas_vat_usd_total() {return regas_vat_usd_total;}

	//Following (6) Vector Getter Methods Has Been Defined By Samik Shah On 25th October, 2010 ...
	public Vector getACTUAL_UNLOADED_QTY() {return ACTUAL_UNLOADED_QTY;}
	public Vector getCERTIFIED_QTY() {return CERTIFIED_QTY;}
	public Vector getPROVISIONAL_QTY() {return PROVISIONAL_QTY;}
	public Vector getCREDIT_NOTE_QTY() {return CREDIT_NOTE_QTY;}
	public Vector getFINAL_SELLER_INV_AMT_INR() {return FINAL_SELLER_INV_AMT_INR;}
	public Vector getINR_PER_MMBTU() {return INR_PER_MMBTU;}

	//Following (2) Vector Getter Methods Has Been Defined By Samik Shah On 26th October, 2010 ...
	public Vector getGROSS_AMT_INR_2() {return GROSS_AMT_INR_2;}
	public Vector getGROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2() {return GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2;}

	//Following (4) Vector Getter Methods Has Been Defined By Samik Shah On 26th October, 2010 ...
	public Vector getCUSTOM_DUTY_USD() {return CUSTOM_DUTY_USD;}
	public Vector getADDL_CUSTOM_DUTY_USD() {return ADDL_CUSTOM_DUTY_USD;}
	public Vector getCOST_OF_PURCHASE_USD() {return COST_OF_PURCHASE_USD;}
	public Vector getUSD_PER_MMBTU() {return USD_PER_MMBTU;}

	//Following (13) double Getter Methods Has Been Defined By Samik Shah On 26th October, 2010 ...
	public double getPurchase_total_qty() {return purchase_total_qty;}
	public double getPurchase_prov_total_qty() {return purchase_prov_total_qty;}
	public double getPurchase_credit_note_total_qty() {return purchase_credit_note_total_qty;}
	public double getPurchase_certified_total_qty() {return purchase_certified_total_qty;}
	public double getPurchase_total_invoice_value() {return purchase_total_invoice_value;}
	public double getPurchase_total_inv_value_inr() {return purchase_total_inv_value_inr;}
	public double getPurchase_total_cd_inr() {return purchase_total_cd_inr;}
	public double getPurchase_total_addl_cd_inr() {return purchase_total_addl_cd_inr;}
	public double getPurchase_total_cost_inr() {return purchase_total_cost_inr;}
	public double getPurchase_total_inv_value_usd() {return purchase_total_inv_value_usd;}
	public double getPurchase_total_cd_usd() {return purchase_total_cd_usd;}
	public double getPurchase_total_addl_cd_usd() {return purchase_total_addl_cd_usd;}
	public double getPurchase_total_cost_usd() {return purchase_total_cost_usd;}

	//Following (2) Vector Getter Methods Has Been Defined By Samik Shah On 28th October, 2010 ...
	public Vector getCUSTOM_PROVISIONS() {return CUSTOM_PROVISIONS;}
	public Vector getCUSTOM_JBB() {return CUSTOM_JBB;}

	//Following (2) double Getter Methods Has Been Defined By Samik Shah On 28th October, 2010 ...
	public double getPurchase_total_custom_provisions() {return purchase_total_custom_provisions;}
	public double getPurchase_total_custom_jbb() {return purchase_total_custom_jbb;}

	//Following (7) Vector Getter Methods Has Been Defined By Samik Shah On 30th October, 2010 ...
	public Vector getTRADER_CODE() {return TRADER_CODE;}
	public Vector getTRADER_ABR() {return TRADER_ABR;}
	public Vector getINV_NO() {return INV_NO;}
	public Vector getINV_DT() {return INV_DT;}
	public Vector getINV_DUE_DT() {return INV_DUE_DT;}
	public Vector getINV_AMT() {return INV_AMT;}
	public Vector getCARGO_REF_NO_ARR() {return CARGO_REF_NO_ARR;}
	
	//Following Vectors Getter Methods Has Been Defined By Achal On 24th January, 2011 ...
	public Vector getCUST_CD() {return CUST_CD;}
	public Vector getCUST_NM() {return CUST_NM;}
	
	public Vector getDR_CR_FLAG() {return DR_CR_FLAG;}
	public Vector getDR_CR_GROSS_AMT_INR() {return DR_CR_GROSS_AMT_INR;}
	public Vector getDR_CR_NO() {return DR_CR_NO;}
	public Vector getCRITERIA() {return CRITERIA;}
	public Vector getDR_CR_FIN_YEAR() {return DR_CR_FIN_YEAR;}
	public Vector getDR_CR_DT() {return DR_CR_DT;}
	public Vector getCRITERIA_TYPE() {return CRITERIA_TYPE;}
	public Vector getPAY_AMT() {return PAY_AMT;}
	public Vector getPAY_DT() {return PAY_DT;}
	public String getCustomer_cd() {return customer_cd;}
	public Vector getCUSTOMER_CD2() {return CUSTOMER_CD2;}
	public Vector getCUSTOMER_NAME2() {	return CUSTOMER_NAME2;}
	public Vector getHLPL_INV_SEQ_NO_FINANCIAL_YEAR() {return HLPL_INV_SEQ_NO_FINANCIAL_YEAR;}
	public Vector getCUSTOMER_ABBR2() {return CUSTOMER_ABBR2;}
	public Vector getPLANT_SEQ_NO() {return PLANT_SEQ_NO;}
	public Vector getEXCHG_RATE_CD() {return EXCHG_RATE_CD;}
	public Vector getPLANT_NAME() {return PLANT_NAME;}
	public Vector getCONTACT_PERSON_CD() {return CONTACT_PERSON_CD;}
	public Vector getCUST_INV_SEQ_NO() {return CUST_INV_SEQ_NO;}
	public Vector getEXCHG_RATE_TYPE() {return EXCHG_RATE_TYPE;}
	
	
	// Following Vectors Getter Methods Has Been Defined By Priyanka Sharma On 31st January, 2011 ...
	public void setEff_date(String eff_date) {this.eff_date = eff_date;}
	public String getOp_bal_trading() {return op_bal_trading;}
	public String getOp_bal_regas() {return op_bal_regas;}
	public String getRemark1() {return remark1;}
	public String getSug_percent() {return sug_percent;}
	public String getRemark2() {return remark2;}
	public Vector getOP_BAL_TRADING() {return OP_BAL_TRADING;}
	public Vector getOP_BAL_REGAS() {return OP_BAL_REGAS;}
	public Vector getTOTAL() {return TOTAL;}
	public Vector getSUG_PERCENT() {return SUG_PERCENT;}
	public Vector getTRADING_QTY() {return TRADING_QTY;}
	public Vector getREGAS_QTY() {return REGAS_QTY;}
	public Vector getSALES_REGAS_QTY() {return SALES_REGAS_QTY;}
	public Vector getSALES_QTY() {return SALES_QTY;}
	
    // Following Vectors Getter Methods Has Been Defined by Priyanka Sharma on 2 feb., 2011.......
	public Vector getFLARING() {return FLARING;}
	public Vector getAUXILIARY_CONSUMPTION() {return AUXILIARY_CONSUMPTION;}
	public Vector getSCV_FUEL_CONSUMPTION() {return SCV_FUEL_CONSUMPTION;}
	public Vector getSUG() {return SUG;}
	public Vector getOTHER_CONSUMPTION() {return OTHER_CONSUMPTION;}
	public Vector getCLOSING_MONTH() {return CLOSING_MONTH;}
	public Vector getCLOSING_BAL_TRADING() {return CLOSING_BAL_TRADING;}
	public Vector getCLOSING_BAL_REGAS() {return CLOSING_BAL_REGAS;}
	public Vector getCLOSING_TOTAL() {return CLOSING_TOTAL;}
	public Vector getMASS_BALANCING() {return MASS_BALANCING;}
	public Vector getCONSUMPTION_UNACCOUNTED_LOSS() {return CONSUMPTION_UNACCOUNTED_LOSS;}
	public Vector getCONSUMPTION_POWER_FUEL() {return CONSUMPTION_POWER_FUEL;}
	public Vector getCONSUMPTION_SCV_FUEL() {return CONSUMPTION_SCV_FUEL;}
	public Vector getCONSUMPTION_FLARE() {return CONSUMPTION_FLARE;}
	public String getOp_bal_trading_saved() {return op_bal_trading_saved;}
	public String getOp_bal_regas_saved() {return op_bal_regas_saved;}
	
	// Following Vectors Getter Methods Has Been Defined by Priyanka Sharma on 4 feb., 2011.......
	public Vector getSN_SIGNING_DT() {return SN_SIGNING_DT;}
	public Vector getRATE() {return RATE;}
	public String getPrev_yr() {return prev_yr;}
	public String getEff_date() {return eff_date;}
	public Vector getREMARK() {return REMARK;}
	
	//	Following Vectors Getter Methods Has Been Defined by Priyanka Sharma on 5 feb., 2011.......
	public Vector getCHECK() {return CHECK;}
	public Vector getCHECK_PURCHASES() {return CHECK_PURCHASES;}
	public Vector getCHECK_SALES() {return CHECK_SALES;}
	public String getOpening_Stock() {return Opening_Stock;}
	public String getReciept() {return reciept;}
	public String getClosing_stock() {return Closing_stock;}
	public String getDepletion() {return Depletion;}
	public String getExport_gas() {return Export_gas;}
	public String getTotal_Fuel_Gas() {return Total_Fuel_Gas;}
	public String getFlaring() {return Flaring;}
	public String getTotal_Consumption() {return Total_Consumption;}
	public String getUnaccounted_Consumption() {return Unaccounted_Consumption;}
	public String getPercent_unaccounted_gas() {return Percent_unaccounted_gas;}
	public String getScv_fuel_consumption() {return Scv_fuel_consumption;}
	public Vector getPREV_YR_SUPPLY() {return PREV_YR_SUPPLY;}
	public Vector getCURR_YR_SUPPLY() {return CURR_YR_SUPPLY;}	
	public Vector getEXCESS_SUPPLY() {return EXCESS_SUPPLY;}
	public Vector getREMAINING_SUPPLY() {return REMAINING_SUPPLY;}

	public Vector getSIGNING_DT() {return SIGNING_DT;}
	public Vector getQTY_MMBTU() {return QTY_MMBTU;}
	public Vector getQTY() {return QTY;}
	public Vector getSALE_USD() {return SALE_USD;}
	public Vector getTOT_QTY() {return TOT_QTY;}
	public Vector getSN_RATE() {return SN_RATE;}

	public String getActual_tank_reading() {return actual_tank_reading;}
	public Vector getEDQ() {return EDQ;}
	public Vector getSUN_APPROVAL() {return SUN_APPROVAL;}

	public Vector getV_Export_gas() {return V_Export_gas;}
	public String getTotal_send_out() {return Total_send_out;}
	public Vector getSALES_EX_VAT() {return SALES_EX_VAT;}
	public String getNext_date() {return next_date;}

	public Vector getCONFIRM_VOL() {return CONFIRM_VOL;}
	public Vector getCONFIRM_PRICE() {return CONFIRM_PRICE;}
	public Vector getAMOUNT() {return AMOUNT;}
	public Vector getSHIP_NM() {return SHIP_NM;}
	public String getTotal_confirm_volume() {return Total_confirm_volume;}
	public String getTotal_confirm_price() {return Total_confirm_price;}
	public String getTotal_amount() {return Total_amount;}
	public Vector getSHIP_NM_PURCHASE() {return SHIP_NM_PURCHASE;}
	public Vector getAMOUNT_PURCHASE() {return AMOUNT_PURCHASE;}
	public Vector getCONFIRM_PRICE_PURCHASE() {return CONFIRM_PRICE_PURCHASE;}
	public Vector getCONFIRM_VOL_PURCHASE() {return CONFIRM_VOL_PURCHASE;}
	public String getTotal_confirm_volume_purchase() {return Total_confirm_volume_purchase;}
	public String getTotal_confirm_price_purchase() {return Total_confirm_price_purchase;}
	public String getTotal_amount_purchase() {return Total_amount_purchase;}
	public String getWeighted_average_volume() {return Weighted_average_volume;}
	public String getWeighted_average_price() {return Weighted_average_price;}
	public String getWeighted_average_amount() {return Weighted_average_amount;}
	public Vector getTOT_SALE_USD() {return TOT_SALE_USD;}
	public String getFinal_qty() {return Final_qty;}
	public String getFinal_SN_rate() {return Final_SN_rate;}
	public String getFinal_sale_USD() {return Final_sale_USD;}
	public String getExpected_amount() {return Expected_amount;}
	public String getExpected_rate() {return Expected_rate;}
	public String getClosing_vol() {return Closing_vol;}
	public String getClosing_rate() {return Closing_rate;}
	public String getClosing_amount() {return Closing_amount;}
	public String getExpected_margin_amount() {return Expected_margin_amount;}
	public String getExpected_margin_rate() {return Expected_margin_rate;}

	public Vector getSELLER_INV_NO() {return SELLER_INV_NO;}
	public Vector getSELLER_INV_DT() {return SELLER_INV_DT;}
	public Vector getSELLER_INV_AMT() {return SELLER_INV_AMT;}
	public Vector getSELLER_DUE_DT() {return SELLER_DUE_DT;}
	public Vector getCUSTOM_DUTY_DT() {return CUSTOM_DUTY_DT;}
	public Vector getSURVEY_FEE() {return SURVEY_FEE;}
	public Vector getLADING_CHARGES() {return LADING_CHARGES;}
	public Vector getTAX_STR_CD() {return TAX_STR_CD;}
	public Vector getPD_BOND_AMT() {return PD_BOND_AMT;}
	public Vector getCHALLAN_NO() {return CHALLAN_NO;}
	public Vector getCUSTOM_CLEAR_DT() {return CUSTOM_CLEAR_DT;}
	public Vector getDIFF_CD() {return DIFF_CD;}
	public Vector getCIF_VALUE() {return CIF_VALUE;}
	public Vector getASSESSABLE_VALUE() {return ASSESSABLE_VALUE;}
	
	public String getVessel_Nm() {return Vessel_Nm;}
	public String getTotal_Gross_Amt() {return total_Gross_Amt;}
	public String getSales_Qty_Total() {return sales_Qty_Total;}
	public Vector getEXCHG_RATE() {return EXCHG_RATE;}
	public Vector getCUSTOM_DUTY() {return CUSTOM_DUTY;}
	public Vector getVALUE_USD() {return VALUE_USD;}
	public Vector getVALUE_INR() {return VALUE_INR;}
	public Vector getINR_MMBTU() {return INR_MMBTU;}
	
	public Vector getCARGO_REF_CD1() {return CARGO_REF_CD1;}
	public Vector getCONFIRM_VOL1() {return CONFIRM_VOL1;}
	public Vector getCONFIRM_PRICE1() {return CONFIRM_PRICE1;}
	public Vector getGROUP_FOREIGN_EXCHG_RATE1() {return GROUP_FOREIGN_EXCHG_RATE1;}
	public Vector getCUSTOM_DUTY1() {return CUSTOM_DUTY1;}
	public Vector getVALUE_USD1() {return VALUE_USD1;}
	public Vector getVALUE_INR1() {return VALUE_INR1;}
	public Vector getINR_MMBTU1() {return INR_MMBTU1;}
	public Vector getSHIP_NM1() {return SHIP_NM1;}
	
	//Following Vectors Getter Methods Has Been Defined by Priyanka Sharma on 2 Mar., 2011.......
	public String getTotal_vol() {return Total_vol;}
	public String getTotal_value_usd() {return Total_value_usd;}
	public String getTotal_usd_per_mmbtu() {return Total_usd_per_mmbtu;}
	public String getTotal_value_inr() {return Total_value_inr;}
	public String getTotal_inr_mmbtu() {return Total_inr_mmbtu;}
	public String getTotal_inr_per_usd() {return Total_inr_per_usd;}
	public String getTotal_Closing_vol() {return Total_Closing_vol;}
	public double getClosing_bal() {return closing_bal;}

	public Vector getCLOSING_CARGO_REF_CD() {return CLOSING_CARGO_REF_CD;}
	public Vector getCLOSING_CONFIRM_VOL() {return CLOSING_CONFIRM_VOL;}
	public Vector getCLOSING_CONFIRM_PRICE() {return CLOSING_CONFIRM_PRICE;}
	public Vector getCLOSING_SHIP_NM() {return CLOSING_SHIP_NM;}
	public Vector getCLOSING_CUSTOM_DUTY() {return CLOSING_CUSTOM_DUTY;}
	public Vector getCLOSING_VALUE_USD() {return CLOSING_VALUE_USD;}
	public Vector getCLOSING_VALUE_INR() {return CLOSING_VALUE_INR;}
	public Vector getCLOSING_GROUP_FOREIGN_EXCHG_RATE() {return CLOSING_GROUP_FOREIGN_EXCHG_RATE;}
	public Vector getCLOSING_INR_MMBTU() {return CLOSING_INR_MMBTU;}
	
	public String getTotal_Closing_value_usd() {return Total_Closing_value_usd;}
	public String getTotal_Closing_usd_mmbtu() {return Total_Closing_usd_mmbtu;}
	public String getTotal_Closing_value_inr() {return Total_Closing_value_inr;}
	public String getTotal_Closing_inr_per_usd() {return Total_Closing_inr_per_usd;}
	public String getTotal_Closing_inr_mmbtu() {return Total_Closing_inr_mmbtu;}
	public String getVariance_vol() {return Variance_vol;}
	public String getVariance_value_usd() {return Variance_value_usd;}
	public String getVariance_value_inr() {return Variance_value_inr;}
	
	public Vector getNRV_CUSTOMER_CD() {return NRV_CUSTOMER_CD;}
	public Vector getNRV_VALUE_USD() {return NRV_VALUE_USD;}
	public Vector getNRV_FOREIGN_EXCHG_RATE() {return NRV_FOREIGN_EXCHG_RATE;}
	public Vector getNRV_VALUE_INR() {return NRV_VALUE_INR;}
	public Vector getNRV_INR_MMBTU() {return NRV_INR_MMBTU;}
	
	public String getNrv_rate() {return Nrv_rate;}
	public String getSum_nrv_value_usd() {return Sum_nrv_value_usd;}
	public String getSum_nrv_value_inr() {return Sum_nrv_value_inr;}
	public String getSum_nrv_inr_mmbtu() {return Sum_nrv_inr_mmbtu;}
	public String getNrv_foreign_exchange_rate() {return Nrv_foreign_exchange_rate;}
	
	public String getTest_qty() {return Test_qty;}
	public String getTest_rate() {return Test_rate;}
	public String getTest_exch_rate() {return Test_exch_rate;}
	public String getTest_sale_usd() {return Test_sale_usd;}
	public String getTest_value_inr() {return Test_value_inr;}
	public String getTest_inr_mmbtu() {return Test_inr_mmbtu;}

	public String getFinal_nrv_value_inr() {return Final_nrv_value_inr;}
	public String getSum_qty() {return Sum_qty;}
	public Vector getINV_CARGO_NO() {return INV_CARGO_NO;}
	public Vector getJOURNAL_TYPE() {return JOURNAL_TYPE;}

	public void setApprove_dt(String approve_dt) {this.approve_dt = approve_dt;}
	public Vector getT_CODE() {return T_CODE;}
	public Vector getAPPROVAL_DT() {return APPROVAL_DT;}
	public Vector getLEDGER() {return LEDGER;}
	public Vector getACCOUNT_CODE() {return ACCOUNT_CODE;}
	public Vector getACCOUNT_PERIOD() {return ACCOUNT_PERIOD;}
	public Vector getBASE_AMT() {return BASE_AMT;}
	public Vector getDR_CR_MARKER() {return DR_CR_MARKER;}
	public Vector getTRANSACTION_AMT() {return TRANSACTION_AMT;}
	public Vector getREPORT_AMT() {return REPORT_AMT;}
	public Vector getMEMO_AMT() {return MEMO_AMT;}
	
	public Vector getCURRENCY_CODE() {return CURRENCY_CODE;}
	public Vector getCURRENCY_RATE() {return CURRENCY_RATE;}
	public Vector getTRANSACTION_DT() {return TRANSACTION_DT;}
	public Vector getJOURNAL_SOURCE() {return JOURNAL_SOURCE;}
	public Vector getTRANSACTION_REF() {return TRANSACTION_REF;}
	public Vector getDESCRIPTION() {return DESCRIPTION;}
	public Vector getCOST_CENTER_CD() {return COST_CENTER_CD;}
	public Vector getEMPLOYEE_CD() {return EMPLOYEE_CD;}
	public Vector getCOA_CD() {return COA_CD;}
	public Vector getTDS_TAX_CD() {return TDS_TAX_CD;}
	public Vector getBUSINESS_UNIT_CD() {return BUSINESS_UNIT_CD;}
	public String getTotal_qty() {return Total_qty;}
	public String getTotal_rate() {return Total_rate;}
	public String getTotal_sum_value_usd() {return Total_sum_value_usd;}
	public String getTotal_sum_value_inr() {return Total_sum_value_inr;}
	public String getTotal_foreign_exchange_rate() {return Total_foreign_exchange_rate;}
	public String getTotal_nrv_inr_mmbtu() {return Total_nrv_inr_mmbtu;}
	public String getTotal_sum_inr_mmbtu() {return Total_sum_inr_mmbtu;}

//	Following Vectors Getter Methods Has Been Defined by Priyanka Sharma on 4 Mar., 2011.......
	public String getTemp_value_usd() {return Temp_value_usd;}
	public String getTemp_value_inr() {return Temp_value_inr;}
	public String getSales_mmbtu_total() {return Sales_mmbtu_total;}
	public String getConsumption_qty() {return Consumption_qty;}
	public String getSales_Usage_qty() {return Sales_Usage_qty;}
	
	public String getMargin_value_usd() {return Margin_value_usd;}
	public String getMargin_value_inr() {return Margin_value_inr;}
	public String getMargin_rate() {return Margin_rate;}
	public String getMargin_inr_mmbtu() {return Margin_inr_mmbtu;}
	
	public String getSales_Usage_value_usd() {return Sales_Usage_value_usd;}
	public String getSales_Usage_value_inr() {return Sales_Usage_value_inr;}
	public String getSales_Usage_usd_mmbtu() {return Sales_Usage_usd_mmbtu;}
	public String getSales_Usage_inr_mmbtu() {return Sales_Usage_inr_mmbtu;}

	public Vector getCUSTOMER_CODE() {return CUSTOMER_CODE;}
	public Vector getCUSTOMER_NM() {return CUSTOMER_NM;}
	public Vector getINVOICE_DT2() {return INVOICE_DT2;}
	public Vector getSN_NO2() {return SN_NO2;}
	public Vector getFGSA_NO2() {return FGSA_NO2;}
	
	public String getConsumption_value_usd() {return Consumption_value_usd;}
	public String getConsumption_value_inr() {return Consumption_value_inr;}
	public String getCost_sales_usd() {return Cost_sales_usd;}
	public String getCost_sales_inr() {return Cost_sales_inr;}
	
	public String getMargin_sales_value_usd() {return Margin_sales_value_usd;}
	public String getMargin_sales_rate() {return Margin_sales_rate;}
	public String getMargin_sales_inr() {return Margin_sales_inr;}
	public String getMargin_sales_inr_mmbtu() {return Margin_sales_inr_mmbtu;}
	
	public String getGross_margin_value_usd() {return Gross_margin_value_usd;}
	public String getGross_margin_rate() {return Gross_margin_rate;}
	public String getGross_margin_value_inr() {return Gross_margin_value_inr;}
	public String getGross_margin_inr_mmbtu() {return Gross_margin_inr_mmbtu;}
	
	public String getAuxiliary_Consumption() {return Auxiliary_Consumption;}
	public String getSug() {return Sug;}
	public String getOther_Consumption() {return Other_Consumption;}
	public String getMass_Balancing() {return Mass_Balancing;}
	public String getCaptive_consumption() {return Captive_consumption;}
	public String getFlaring_usd_mmbtu() {return Flaring_usd_mmbtu;}
	public String getAuxiliary_usd_mmbtu() {return Auxiliary_usd_mmbtu;}
	public String getScv_fuel_usd_mmbtu() {return Scv_fuel_usd_mmbtu;}
	public String getMass_balancing_usd_mmbtu() {return Mass_balancing_usd_mmbtu;}
	public String getSug_usd_mmbtu() {return Sug_usd_mmbtu;}
	public String getOther_usd_mmbtu() {return Other_usd_mmbtu;}
	
	public String getFlaring_inr_mmbtu() {return Flaring_inr_mmbtu;}
	public String getAuxiliary_inr_mmbtu() {return Auxiliary_inr_mmbtu;}
	public String getScv_fuel_inr_mmbtu() {return Scv_fuel_inr_mmbtu;}
	public String getMass_balancing_inr_mmbtu() {return Mass_balancing_inr_mmbtu;}
	public String getSug_inr_mmbtu() {return Sug_inr_mmbtu;}
	public String getOther_inr_mmbtu() {return Other_inr_mmbtu;}
	
	public String getCaptive_usd_mmbtu() {return Captive_usd_mmbtu;}
	public String getCaptive_inr_mmbtu() {return Captive_inr_mmbtu;}
	public String getCaptive_value_usd() {return Captive_value_usd;}
	public String getCaptive_value_inr() {return Captive_value_inr;}
	
	public String getCheck_value_usd() {return Check_value_usd;}
	public String getCheck_value_inr() {return Check_value_inr;}
	public String getVariance_value_usd1() {return Variance_value_usd1;}
	public String getVariance_value_inr1() {return Variance_value_inr1;}
	
	public String getFinal_value_usd() {return Final_value_usd;}
	public String getFinal_value_inr() {return Final_value_inr;}

	//Following (9) Vector Getter Methods Has Been Defined By Samik Shah On 4th March, 2011 ...
	public Vector getHEDGE_ROLLOVER_NO() {return HEDGE_ROLLOVER_NO;}
	public Vector getHEDGE_SEQ_NUMBER() {return HEDGE_SEQ_NUMBER;}
	public Vector getHEDGE_FINANCIAL_YEAR() {return HEDGE_FINANCIAL_YEAR;}
	public Vector getHEDGE_ROLLOVER_NUMBER() {return HEDGE_ROLLOVER_NUMBER;}
	public Vector getHEDGE_CONTRACT_DATE() {return HEDGE_CONTRACT_DATE;}
	public Vector getHEDGE_VALUE_DATE() {return HEDGE_VALUE_DATE;}
	public Vector getHEDGE_VALUE_AMOUNT() {return HEDGE_VALUE_AMOUNT;}
	public Vector getHEDGE_CONTRACT_NUMBER() {return HEDGE_CONTRACT_NUMBER;}
	public Vector getHEDGE_CONTRACT_NO() {return HEDGE_CONTRACT_NO;}
	
	//Following (22) String Getter Methods Has Been Defined by Priyanka Sharma on 5th Mar., 2011.......
	public String getSum_opening_trading() {return Sum_opening_trading;}
	public String getSum_opening_regas() {return Sum_opening_regas;}
	public String getSum_opening_total() {return Sum_opening_total;}
	public String getSum_receipt_trading() {return Sum_receipt_trading;}
	public String getSum_receipt_regas() {return Sum_receipt_regas;}
	public String getSum_sales_qty() {return Sum_sales_qty;}
	public String getSum_sales_regas() {return Sum_sales_regas;}
	public String getSum_flaring() {return Sum_flaring;}
	public String getSum_auxiliary() {return Sum_auxiliary;}
	public String getSum_scv() {return Sum_scv;}
	public String getSum_sug() {return Sum_sug;}
	public String getSum_other() {return Sum_other;}
	public String getSum_mass() {return Sum_mass;}
	public String getSum_consumption() {return Sum_consumption;}
	public String getClosing_trading() {return Closing_trading;}
	public String getClosing_regas() {return Closing_regas;}
	public String getClosing_total() {return Closing_total;}
	public String getSum_check() {return Sum_check;}
	public String getSum_flare_percent() {return Sum_flare_percent;}
	public String getSum_scv_percent() {return Sum_scv_percent;}
	public String getSum_power_percent() {return Sum_power_percent;}
	public String getSum_loss_percent() {return Sum_loss_percent;}

	
	//Following (4) String Getter Methods Has Been Defined By Samik Shah On 5th March, 2011 ...
	//For Hedge Details ...
	public String getFinal_inv_amt() {return final_inv_amt;}
	public String getFinal_inv_amt_gain_loss() {return final_inv_amt_gain_loss;}
	public String getHedge_gain_loss() {return hedge_gain_loss;}
	public String getHedge_m2m_die() {return hedge_m2m_die;}

	//Following (2) Vector Getter Methods Has Been Defined By Samik Shah On 7th March, 2011 ...
	public Vector getFINAL_INV_AMT() {return FINAL_INV_AMT;}
	public Vector getFINAL_INVOICE_AMT() {return FINAL_INVOICE_AMT;}

	//Following (3) String Getter Methods Has Been Defined By Samik Shah On 7th March, 2011 ...
	public String getCancellation_dt() {return cancellation_dt;}
	public String getCancellation_flag() {return cancellation_flag;}
	public String getCancel_remark() {return cancel_remark;}

	//Following Vector Has Been Defined By Samik Shah On 8th March, 2011 ...
	public Vector getCANCELLATION_DT() {return CANCELLATION_DT;}

	public Vector getCOGS() {
		return COGS;
	}
	
	public Vector getCOGS_MMBTU() {
		return COGS_MMBTU;
	}

	public String getTotal_cogs() {
		return Total_cogs;
	}

	public String getCost_sales_usd1() {
		return Cost_sales_usd1;
	}

	public String getTotal_margin() {
		return Total_margin;
	}

	public Vector getMARGIN() {
		return MARGIN;
	}

	public Vector getMARGIN_PER_MMBTU() {
		return MARGIN_PER_MMBTU;
	}

	public String getTotal_margin_per_mmbtu() {
		return Total_margin_per_mmbtu;
	}

	public String getFinal_sum_tcq() {
		return Final_sum_tcq;
	}

	public String getFinal_sum_regas_tcq() {
		return Final_sum_regas_tcq;
	}

	public String getSum_rem_supply() {
		return Sum_rem_supply;
	}

	public String getSum_regas_rem_supply() {
		return Sum_regas_rem_supply;
	}

	public Vector getPAY_MODE() {
		return PAY_MODE;
	}

	public Vector getXML_GEN_FLAG() {
		return XML_GEN_FLAG;
	}

	public Vector getXML_FILE() {
		return XML_FILE;
	}

	public Vector getSUN_APPROVAL_DT() {
		return SUN_APPROVAL_DT;
	}

	public Vector getXML_FILE_UPLOAD() {
		return XML_FILE_UPLOAD;
	}


	public void setCust_cd(String cust_cd) {
		this.cust_cd = cust_cd;
	}


	public Vector getJOURNAL_NO() {
		return JOURNAL_NO;
	}


	public Vector getALLOCATION_REF() {
		return ALLOCATION_REF;
	}


	public Vector getSEQ_NO() {
		return SEQ_NO;
	}


	public Vector getREGAS_SUG_QTY() {
		return REGAS_SUG_QTY;
	}

	//Following String Getter Method Has Been Defined By Samik Shah On 12th July, 2011 ...
	public String getSum_re_gas_sug_qty() {
		return Sum_re_gas_sug_qty;
	}

	//Following (3) String Getter Methods Have Been Defined By Samik Shah On 13th July, 2011 ...
	public String getClosing_bal_trading() {return closing_bal_trading;}
	public String getClosing_bal_regas() {return closing_bal_regas;}
	public String getClosing_actual_tank_reading() {return closing_actual_tank_reading;}

	//Following (4) String Getter Methods Have Been Defined By Samik Shah On 20th July, 2011 ...
	public String getClosing_Stock_USD() {return Closing_Stock_USD;}
	public String getClosing_stock_NRV_USD() {return Closing_stock_NRV_USD;}
	public String getClosing_Stock_INR() {return Closing_Stock_INR;}
	public String getClosing_stock_NRV_INR() {return Closing_stock_NRV_INR;}

	//Following (2) String Getter Methods Have Been Defined By Samik Shah On 21st July, 2011 ...
	public String getFinal_qty2() {return Final_qty2;}
	public String getFinal_sale_USD2() {return Final_sale_USD2;}

	//Following Vector Getter Method Has Been Introduced By Samik Shah On 1st August, 2011 ...
	public Vector getXML_GENERATED_JOURNAL_TYPE() {return XML_GENERATED_JOURNAL_TYPE;}


	//Following (3) Vector Getter Methods Has Been Defined By Samik Shah On 3rd August, 2011 ...
	public Vector getARRIVAL_DATE_RATE_NOTE() {return ARRIVAL_DATE_RATE_NOTE;}
	public Vector getCUSTOM_DUTY_DATE_RATE_NOTE() {return CUSTOM_DUTY_DATE_RATE_NOTE;}
	public Vector getCUSTOM_DUTY_INTEREST() {return CUSTOM_DUTY_INTEREST;}

	//Following double Getter Method Has Been Introduced By Samik Shah On 4th August, 2011 ...
	public double getCustom_duty_interest_total_inr() {return custom_duty_interest_total_inr;}

	//Following (14) Vector Getter Methods Have Been Introduced By Samik Shah On 9th August, 2011 ...
	public Vector getACTUAL_UNLOADED_QTY_NUMERIC() {return ACTUAL_UNLOADED_QTY_NUMERIC;}
	public Vector getCONF_PRICE_NUMERIC() {return CONF_PRICE_NUMERIC;}
	public Vector getUSD_VAL_INVOICE_NUMERIC() {return USD_VAL_INVOICE_NUMERIC;}
	public Vector getGROUP_FOREIGN_EXCHG_RATE_NUMERIC() {return GROUP_FOREIGN_EXCHG_RATE_NUMERIC;}
	public Vector getFINAL_SELLER_INV_AMT_INR_NUMERIC() {return FINAL_SELLER_INV_AMT_INR_NUMERIC;}
	public Vector getTOTAL_CD_AMT_NUMERIC() {return TOTAL_CD_AMT_NUMERIC;}
	public Vector getTOTAL_PAID_REFUND_NUMERIC() {return TOTAL_PAID_REFUND_NUMERIC;}
	public Vector getCUSTOM_DUTY_INTEREST_NUMERIC() {return CUSTOM_DUTY_INTEREST_NUMERIC;}
	public Vector getCD_PAID_NUMERIC() {return CD_PAID_NUMERIC;}
	public Vector getINR_PER_MMBTU_NUMERIC() {return INR_PER_MMBTU_NUMERIC;}
	public Vector getCUSTOM_DUTY_USD_NUMERIC() {return CUSTOM_DUTY_USD_NUMERIC;}
	public Vector getADDL_CUSTOM_DUTY_USD_NUMERIC() {return ADDL_CUSTOM_DUTY_USD_NUMERIC;}
	public Vector getCOST_OF_PURCHASE_USD_NUMERIC() {return COST_OF_PURCHASE_USD_NUMERIC;}
	public Vector getUSD_PER_MMBTU_NUMERIC() {return USD_PER_MMBTU_NUMERIC;}

	//Following (23) Vector Getter Methods Have Been Introduced By Samik Shah On 10th August, 2011 ...
	public Vector getTCQ_NUMERIC() {return TCQ_NUMERIC;}
	public Vector getRATE_NUMERIC() {return RATE_NUMERIC;}
	public Vector getREM_SUPPLY_NUMERIC() {return REM_SUPPLY_NUMERIC;}
	public Vector getTOTAL_QTY_NUMERIC() {return TOTAL_QTY_NUMERIC;}
	public Vector getSALE_PRICE_NUMERIC() {return SALE_PRICE_NUMERIC;}
	public Vector getGROSS_AMT_USD_NUMERIC() {return GROSS_AMT_USD_NUMERIC;}
	public Vector getEXCHG_RATE_VALUE_NUMERIC() {return EXCHG_RATE_VALUE_NUMERIC;}
	public Vector getGROSS_AMT_INR_NUMERIC() {return GROSS_AMT_INR_NUMERIC;}
	public Vector getVAT_AMT_NUMERIC() {return VAT_AMT_NUMERIC;}
	public Vector getADD_TAX_NUMERIC() {return ADD_TAX_NUMERIC;}
	public Vector getSALES_TAX_AMT_NUMERIC() {return SALES_TAX_AMT_NUMERIC;}
	public Vector getSERVICE_TAX_NUMERIC() {return SERVICE_TAX_NUMERIC;}
	public Vector getEDU_CESS_TAX_NUMERIC() {return EDU_CESS_TAX_NUMERIC;}
	public Vector getHEDU_CESS_TAX_NUMERIC() {return HEDU_CESS_TAX_NUMERIC;}
	public Vector getNET_AMT_INR_NUMERIC() {return NET_AMT_INR_NUMERIC;}
	public Vector getGROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC() {return GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC;}
	public Vector getVAT_AMT_USD_NUMERIC() {return VAT_AMT_USD_NUMERIC;}
	public Vector getADD_TAX_USD_NUMERIC() {return ADD_TAX_USD_NUMERIC;}
	public Vector getSALES_TAX_AMT_USD_NUMERIC() {return SALES_TAX_AMT_USD_NUMERIC;}
	public Vector getSERVICE_TAX_USD_NUMERIC() {return SERVICE_TAX_USD_NUMERIC;}
	public Vector getEDU_CESS_TAX_USD_NUMERIC() {return EDU_CESS_TAX_USD_NUMERIC;}
	public Vector getHEDU_CESS_TAX_USD_NUMERIC() {return HEDU_CESS_TAX_USD_NUMERIC;}
	public Vector getNET_AMT_USD_NUMERIC() {return NET_AMT_USD_NUMERIC;}

	//Following Vector Getter Method Has Been Introduced By Samik Shah On 29th August, 2011 ...
	public Vector getSN_REF_NO() {return SN_REF_NO;}


	public Vector getCONSUMPTION_REGAS_SUG() {
		return CONSUMPTION_REGAS_SUG;
	}


	public String getSum_Regas_sug_per() {
		return Sum_Regas_sug_per;
	}
	public Vector getREGAS_TOT_INVOICE_VAL_INR() {
		return REGAS_TOT_INVOICE_VAL_INR;
	}
	public Vector getREGAS_ACTUAL_RECPT_DT() {
		return REGAS_ACTUAL_RECPT_DT;
	}
	public Vector getREGAS_ADQ_QTY() {
		return REGAS_ADQ_QTY;
	}
	public Vector getREGAS_CLOSING_STOCK() {
		return REGAS_CLOSING_STOCK;
	}
	public Vector getREGAS_CONTACT_PERSON_CD() {
		return REGAS_CONTACT_PERSON_CD;
	}
	public Vector getREGAS_CONTRACT_TYPE() {
		return REGAS_CONTRACT_TYPE;
	}
	public Vector getREGAS_CUST_INV_SEQ_NO() {
		return REGAS_CUST_INV_SEQ_NO;
	}
	public Vector getREGAS_CUSTOMER_ABBR() {
		return REGAS_CUSTOMER_ABBR;
	}
	public Vector getREGAS_CUSTOMER_CD_INV() {
		return REGAS_CUSTOMER_CD_INV;
	}
	public Vector getREGAS_CUSTOMER_NM() {
		return REGAS_CUSTOMER_NM;
	}
	public Vector getREGAS_EXCHG_RATE_CD() {
		return REGAS_EXCHG_RATE_CD;
	}
	public Vector getREGAS_EXCHG_RATE_VALUE() {
		return REGAS_EXCHG_RATE_VALUE;
	}
	public Vector getREGAS_FINANCIAL_YEAR() {
		return REGAS_FINANCIAL_YEAR;
	}
	public Vector getREGAS_GAS_TARIF() {
		return REGAS_GAS_TARIF;
	}
	public Vector getREGAS_GROSS_AMT_INR() {
		return REGAS_GROSS_AMT_INR;
	}
	public Vector getREGAS_GROSS_AMT_USD() {
		return REGAS_GROSS_AMT_USD;
	}
	public Vector getREGAS_HLPL_INV_SEQ_NO() {
		return REGAS_HLPL_INV_SEQ_NO;
	}
	public Vector getREGAS_INVOICE_DT() {
		return REGAS_INVOICE_DT;
	}
	public Vector getREGAS_INVOICE_MONTH() {
		return REGAS_INVOICE_MONTH;
	}
	public Vector getREGAS_NET_AMT_INR() {
		return REGAS_NET_AMT_INR;
	}
	public Vector getREGAS_OP_BAL_REGAS() {
		return REGAS_OP_BAL_REGAS;
	}
	public Vector getREGAS_OP_BAL_REGAS_MONTH() {
		return REGAS_OP_BAL_REGAS_MONTH;
	}
	public Vector getREGAS_OP_BAL_REGAS_YEAR() {
		return REGAS_OP_BAL_REGAS_YEAR;
	}
	public Vector getREGAS_RECIEPT() {
		return REGAS_RECIEPT;
	}
	public Vector getREGAS_REGASSIFIED() {
		return REGAS_REGASSIFIED;
	}
	public Vector getREGAS_SHIP_NAME() {
		return REGAS_SHIP_NAME;
	}
	public Vector getREGAS_SUN_APPROVAL() {
		return REGAS_SUN_APPROVAL;
	}
	public Vector getREGAS_SUPP_CD() {
		return REGAS_SUPP_CD;
	}
	public Vector getREGAS_SUPPL_ABBR() {
		return REGAS_SUPPL_ABBR;
	}
	public Vector getREGAS_SUPPL_NM() {
		return REGAS_SUPPL_NM;
	}
	public Vector getREGAS_TAX_EDU_CESS() {
		return REGAS_TAX_EDU_CESS;
	}
	public Vector getREGAS_TAX_HIEDU_CESS() {
		return REGAS_TAX_HIEDU_CESS;
	}
	public Vector getREGAS_TAX_SERVICE() {
		return REGAS_TAX_SERVICE;
	}
	public Vector getREGAS_TAX_STRUCT_CD() {
		return REGAS_TAX_STRUCT_CD;
	}
	public Vector getREGAS_TOTAL_QTY() {
		return REGAS_TOTAL_QTY;
	}
	public void setREGAS_QTY(Vector regas_qty) {
		REGAS_QTY = regas_qty;
	}
	public void setREGAS_TOT_INVOICE_VAL_INR(Vector regas_tot_invoice_val_inr) {
		REGAS_TOT_INVOICE_VAL_INR = regas_tot_invoice_val_inr;
	}
	public Vector getREGAS_VARIABLE_COST() {
		return REGAS_VARIABLE_COST;
	}
	public Vector getREGAS_OFFSPEC_FLAG() {
		return REGAS_OFFSPEC_FLAG;
	}
	public Vector getREGAS_OFFSPEC_ACC_QTY() {
		return REGAS_OFFSPEC_ACC_QTY;
	}
	public Vector getREGAS_OFFSPEC_REJ_QTY() {
		return REGAS_OFFSPEC_REJ_QTY;
	}
	public Vector getCLOSING_INVOICE_DT_sq() {
		return CLOSING_INVOICE_DT_sq;
	}
	public Vector getINVOICE_DT1_sq() {
		return INVOICE_DT1_sq;
	}
	public Vector getINVOICE_DT2_sq() {
		return INVOICE_DT2_sq;
	}
	public Vector getLC_BANK_AMOUNT() {
		return LC_BANK_AMOUNT;
	}
	public Vector getLC_CUST_CD() {
		return LC_CUST_CD;
	}
	public Vector getLC_CUST_NM() {
		return LC_CUST_NM;
	}
	public Vector getLC_REMARK() {
		return LC_REMARK;
	}
	public Vector getLC_VALID_END_DT() {
		return LC_VALID_END_DT;
	}
	public Vector getLC_VALID_STR_DT() {
		return LC_VALID_STR_DT;
	}
	public Vector getLC_SEQ_NO() {
		return LC_SEQ_NO;
	}
	public Vector getLC_REGAS_BANK_AMOUNT() {
		return LC_REGAS_BANK_AMOUNT;
	}
	public Vector getLC_REGAS_CUST_CD() {
		return LC_REGAS_CUST_CD;
	}
	public Vector getLC_REGAS_CUST_NM() {
		return LC_REGAS_CUST_NM;
	}
	public Vector getLC_REGAS_REMARK() {
		return LC_REGAS_REMARK;
	}
	public Vector getLC_REGAS_SEQ_NO() {
		return LC_REGAS_SEQ_NO;
	}
	public Vector getLC_REGAS_VALID_END_DT() {
		return LC_REGAS_VALID_END_DT;
	}
	public Vector getLC_REGAS_VALID_STR_DT() {
		return LC_REGAS_VALID_STR_DT;
	}
	public Vector getLC_REGAS_FIN_YEAR() {
		return LC_REGAS_FIN_YEAR;
	}
	public Vector getLC_FIN_YEAR() {
		return LC_FIN_YEAR;
	}
	public Vector getREGAS_CARGO_REF_NO() {
		return REGAS_CARGO_REF_NO;
	}
	public Vector getREGAS_SUG() {
		return REGAS_SUG;
	}


	public Vector getREGAS_CUSTOMER_CD_CARGO() {
		return REGAS_CUSTOMER_CD_CARGO;
	}


	public Vector getREGAS_CUSTOMER_ABBR_CARGO() {
		return REGAS_CUSTOMER_ABBR_CARGO;
	}


	public Vector getREGAS_CARGO_REF_NO_ON_INV() {
		return REGAS_CARGO_REF_NO_ON_INV;
	}


	public Vector getVGross_margin_value_inr() {
		return VGross_margin_value_inr;
	}


	public void setVGross_margin_value_inr(Vector gross_margin_value_inr) {
		VGross_margin_value_inr = gross_margin_value_inr;
	}


	public Vector getVGross_margin_value_usd() {
		return VGross_margin_value_usd;
	}


	public void setVGross_margin_value_usd(Vector gross_margin_value_usd) {
		VGross_margin_value_usd = gross_margin_value_usd;
	}


	public Vector getVMargin_sales_inr() {
		return VMargin_sales_inr;
	}


	public void setVMargin_sales_inr(Vector margin_sales_inr) {
		VMargin_sales_inr = margin_sales_inr;
	}


	public Vector getVMargin_sales_value_usd() {
		return VMargin_sales_value_usd;
	}


	public void setVMargin_sales_value_usd(Vector margin_sales_value_usd) {
		VMargin_sales_value_usd = margin_sales_value_usd;
	}


	public Vector getVMargin_value_inr() {
		return VMargin_value_inr;
	}


	public void setVMargin_value_inr(Vector margin_value_inr) {
		VMargin_value_inr = margin_value_inr;
	}


	public Vector getVMargin_value_usd() {
		return VMargin_value_usd;
	}


	public void setVMargin_value_usd(Vector margin_value_usd) {
		VMargin_value_usd = margin_value_usd;
	}


	public Vector getLNG_MON_YR() {
		return LNG_MON_YR;
	}


	public void setLNG_MON_YR(Vector lng_mon_yr) {
		LNG_MON_YR = lng_mon_yr;
	}


	public Vector getVSales_Usage_qty() {
		return VSales_Usage_qty;
	}


	public void setVSales_Usage_qty(Vector sales_Usage_qty) {
		VSales_Usage_qty = sales_Usage_qty;
	}
	
	
	public Vector getVmargin_per_mmBTU_usd() {
		return Vmargin_per_mmBTU_usd;
	}


	public void setVmargin_per_mmBTU_usd(Vector vmargin_per_mmBTU_usd) {
		Vmargin_per_mmBTU_usd = vmargin_per_mmBTU_usd;
	}


	public Vector getVmargin_per_mmBTU_inr() {
		return Vmargin_per_mmBTU_inr;
	}


	public void setVmargin_per_mmBTU_inr(Vector vmargin_per_mmBTU_inr) {
		Vmargin_per_mmBTU_inr = vmargin_per_mmBTU_inr;
	}


	public Vector getREGAS_SUMRY_INVOICE_MONTH() {
		return REGAS_SUMRY_INVOICE_MONTH;
	}


	public void setREGAS_SUMRY_INVOICE_MONTH(Vector regas_sumry_invoice_month) {
		REGAS_SUMRY_INVOICE_MONTH = regas_sumry_invoice_month;
	}


	public Vector getREGAS_SUMRY_ADQ_QTY() {
		return REGAS_SUMRY_ADQ_QTY;
	}


	public Vector getREGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU() {
		return REGAS_SUMRY_AVG_PRICE_INR_PER_MMBTU;
	}


	public Vector getREGAS_SUMRY_EXCHG_RATE_VALUE() {
		return REGAS_SUMRY_EXCHG_RATE_VALUE;
	}


	public Vector getREGAS_SUMRY_GAS_TARIF() {
		return REGAS_SUMRY_GAS_TARIF;
	}


	public Vector getREGAS_SUMRY_GROSS_AMT_INR() {
		return REGAS_SUMRY_GROSS_AMT_INR;
	}


	public Vector getREGAS_SUMRY_GROSS_AMT_USD() {
		return REGAS_SUMRY_GROSS_AMT_USD;
	}


	public Vector getREGAS_SUMRY_OFFSPEC_ACC_QTY() {
		return REGAS_SUMRY_OFFSPEC_ACC_QTY;
	}


	public Vector getREGAS_SUMRY_OFFSPEC_REJ_QTY() {
		return REGAS_SUMRY_OFFSPEC_REJ_QTY;
	}


	public Vector getREGAS_SUMRY_OP_BAL_REGAS() {
		return REGAS_SUMRY_OP_BAL_REGAS;
	}


	public Vector getREGAS_SUMRY_RECIEPT() {
		return REGAS_SUMRY_RECIEPT;
	}


	public Vector getREGAS_SUMRY_REGASSIFIED() {
		return REGAS_SUMRY_REGASSIFIED;
	}


	public Vector getREGAS_SUMRY_TAX_EDU_CESS() {
		return REGAS_SUMRY_TAX_EDU_CESS;
	}


	public Vector getREGAS_SUMRY_TAX_HIEDU_CESS() {
		return REGAS_SUMRY_TAX_HIEDU_CESS;
	}


	public Vector getREGAS_SUMRY_TAX_SERVICE() {
		return REGAS_SUMRY_TAX_SERVICE;
	}


	public Vector getREGAS_SUMRY_TOT_INVOICE_VAL_INR() {
		return REGAS_SUMRY_TOT_INVOICE_VAL_INR;
	}


	public Vector getREGAS_SUMRY_TOTAL_QTY() {
		return REGAS_SUMRY_TOTAL_QTY;
	}


	public Vector getREGAS_SUMRY_VARIABLE_COST() {
		return REGAS_SUMRY_VARIABLE_COST;
	}


	public Vector getREGAS_SUMRY_CL_BAL_REGAS() {
		return REGAS_SUMRY_CL_BAL_REGAS;
	}


	public Vector getSN_SUMRY_CUSTOMER_NAME() {
		return SN_SUMRY_CUSTOMER_NAME;
	}


	public Vector getSN_SUMRY_CUSTOMER_CD() {
		return SN_SUMRY_CUSTOMER_CD;
	}


	public Vector getSN_DTL_CUSTOMER_NAME() {
		return SN_DTL_CUSTOMER_NAME;
	}


	public Vector getSN_DTL_CUSTOMER_CD() {
		return SN_DTL_CUSTOMER_CD;
	}


	public Vector getVMargin_sales_value_usd_tmp() {
		return VMargin_sales_value_usd_tmp;
	}


	public void setVMargin_sales_value_usd_tmp(Vector margin_sales_value_usd_tmp) {
		VMargin_sales_value_usd_tmp = margin_sales_value_usd_tmp;
	}


	public void setFor1(String for1) {
		For1 = for1;
	}


	public Vector getTCQ_ZERO_REV() {
		return TCQ_ZERO_REV;
	}


	public Vector getTCQ_APP_DT_MAX_REV() {
		return TCQ_APP_DT_MAX_REV;
	}


	public Vector getSTART_DT_ZR_RV() {
		return START_DT_ZR_RV;
	}


	public Vector getEND_DT_ZR_RV() {
		return END_DT_ZR_RV;
	}


	public String getDiff() {
		return Diff;
	}


	public String getExport_gas_own() {
		return Export_gas_own;
	}


	public String getExport_gas_re() {
		return Export_gas_re;
	}


	public Vector getSUMMRY_ACT_ARRV_MONTH() {
		return SUMMRY_ACT_ARRV_MONTH;
	}


	public void setSUMMRY_ACT_ARRV_MONTH(Vector summry_act_arrv_month) {
		SUMMRY_ACT_ARRV_MONTH = summry_act_arrv_month;
	}


	public Vector getSUMMRY_ACTUAL_UNLOADED_QTY() {
		return SUMMRY_ACTUAL_UNLOADED_QTY;
	}


	public Vector getSUMMRY_ADDL_CUSTOM_DUTY_USD() {
		return SUMMRY_ADDL_CUSTOM_DUTY_USD;
	}


	public Vector getSUMMRY_CARGO_REF_CD() {
		return SUMMRY_CARGO_REF_CD;
	}


	public Vector getSUMMRY_CD_PAID() {
		return SUMMRY_CD_PAID;
	}


	public Vector getSUMMRY_COST_OF_PURCHASE_USD() {
		return SUMMRY_COST_OF_PURCHASE_USD;
	}


	public Vector getSUMMRY_CUSTOM_DUTY_USD() {
		return SUMMRY_CUSTOM_DUTY_USD;
	}


	public Vector getSUMMRY_FINAL_SELLER_INV_AMT_INR() {
		return SUMMRY_FINAL_SELLER_INV_AMT_INR;
	}


	public Vector getSUMMRY_INR_PER_MMBTU() {
		return SUMMRY_INR_PER_MMBTU;
	}


	public Vector getSUMMRY_TOTAL_CD_AMT() {
		return SUMMRY_TOTAL_CD_AMT;
	}


	public Vector getSUMMRY_TOTAL_PAID_REFUND() {
		return SUMMRY_TOTAL_PAID_REFUND;
	}


	public Vector getSUMMRY_USD_PER_MMBTU() {
		return SUMMRY_USD_PER_MMBTU;
	}


	public Vector getSUMMRY_USD_VAL_INVOICE() {
		return SUMMRY_USD_VAL_INVOICE;
	}


	public Vector getSUMMRY_ADD_TAX() {
		return SUMMRY_ADD_TAX;
	}


	public Vector getSUMMRY_ADD_TAX_USD() {
		return SUMMRY_ADD_TAX_USD;
	}


	public Vector getSUMMRY_EDU_CESS_TAX() {
		return SUMMRY_EDU_CESS_TAX;
	}


	public Vector getSUMMRY_EDU_CESS_TAX_USD() {
		return SUMMRY_EDU_CESS_TAX_USD;
	}


	public Vector getSUMMRY_GROSS_AMT_INR() {
		return SUMMRY_GROSS_AMT_INR;
	}


	public Vector getSUMMRY_GROSS_AMT_USD() {
		return SUMMRY_GROSS_AMT_USD;
	}


	public Vector getSUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG() {
		return SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;
	}


	public Vector getSUMMRY_HEDU_CESS_TAX() {
		return SUMMRY_HEDU_CESS_TAX;
	}


	public Vector getSUMMRY_HEDU_CESS_TAX_USD() {
		return SUMMRY_HEDU_CESS_TAX_USD;
	}


	public Vector getSUMMRY_inr_per_mmbtu() {
		return SUMMRY_inr_per_mmbtu;
	}


	public Vector getSUMMRY_MONTH() {
		return SUMMRY_MONTH;
	}


	public Vector getSUMMRY_NET_AMT_INR() {
		return SUMMRY_NET_AMT_INR;
	}


	public Vector getSUMMRY_NET_AMT_USD() {
		return SUMMRY_NET_AMT_USD;
	}


	public Vector getSUMMRY_REM_SUPPLY() {
		return SUMMRY_REM_SUPPLY;
	}


	public Vector getSUMMRY_SALE_PRICE() {
		return SUMMRY_SALE_PRICE;
	}


	public Vector getSUMMRY_SALES_TAX_AMT() {
		return SUMMRY_SALES_TAX_AMT;
	}


	public Vector getSUMMRY_SALES_TAX_AMT_USD() {
		return SUMMRY_SALES_TAX_AMT_USD;
	}


	public Vector getSUMMRY_SEGMENT_NAME() {
		return SUMMRY_SEGMENT_NAME;
	}


	public Vector getSUMMRY_SERVICE_TAX() {
		return SUMMRY_SERVICE_TAX;
	}


	public Vector getSUMMRY_SERVICE_TAX_USD() {
		return SUMMRY_SERVICE_TAX_USD;
	}


	public Vector getSUMMRY_TCQ() {
		return SUMMRY_TCQ;
	}


	public Vector getSUMMRY_TOTAL_QTY() {
		return SUMMRY_TOTAL_QTY;
	}


	public Vector getSUMMRY_VAT_AMT() {
		return SUMMRY_VAT_AMT;
	}


	public Vector getSUMMRY_VAT_AMT_USD() {
		return SUMMRY_VAT_AMT_USD;
	}


	public long getSummry_start_index_1() {
		return summry_start_index_1;
	}


	public long getSummry_start_index_2() {
		return summry_start_index_2;
	}


	public long getSummry_end_index_1() {
		return summry_end_index_1;
	}


	public long getSummry_end_index_2() {
		return summry_end_index_2;
	}


	public Vector getVess_nm() {
		return vess_nm;
	}


	public Vector getFinal_inv_no1() {
		return Final_inv_no1;
	}


	public Vector getFinal_inv_no11() {
		return Final_inv_no11;
	}
	
	
	
	public void setLc_customer_cd(String lc_customer_cd) {
		this.lc_customer_cd = lc_customer_cd;
	}
	public void setLc_from_dt(String lc_from_dt) {
		this.lc_from_dt = lc_from_dt;
	}
	public void setLc_seq_no(String lc_seq_no) {
		this.lc_seq_no = lc_seq_no;
	}
	public void setLc_to_dt(String lc_to_dt) {
		this.lc_to_dt = lc_to_dt;
	}
	
	
	
	public Vector getLC_REGAS_CONT_TYPE() {
		return LC_REGAS_CONT_TYPE;
	}
	public Vector getLC_REGAS_DCQ() {
		return LC_REGAS_DCQ;
	}
	public Vector getLC_REGAS_END_DT() {
		return LC_REGAS_END_DT;
	}
	public Vector getLC_REGAS_FINANCIAL_YR() {
		return LC_REGAS_FINANCIAL_YR;
	}
	public Vector getLC_REGAS_NO() {
		return LC_REGAS_NO;
	}
	public Vector getLC_REGAS_START_DT() {
		return LC_REGAS_START_DT;
	}
	public Vector getLC_REGAS_TCQ() {
		return LC_REGAS_TCQ;
	}
	public Vector getLC_REV_NO() {
		return LC_REV_NO;
	}
	public void setLc_fin_yr(String lc_fin_yr) {
		this.lc_fin_yr = lc_fin_yr;
	}
	
	public Vector getLC_FGSA_NO() {
		return LC_FGSA_NO;
	}
	public Vector getLC_SN_END_DT() {
		return LC_SN_END_DT;
	}
	public Vector getLC_SN_NO() {
		return LC_SN_NO;
	}
	public Vector getLC_SN_START_DT() {
		return LC_SN_START_DT;
	}
	public Vector getLC_DCQ() {
		return LC_DCQ;
	}
	public Vector getLC_TCQ() {
		return LC_TCQ;
	}
	public Vector getLC_FINANCIAL_YR() {
		return LC_FINANCIAL_YR;
	}
	public Vector getLC_CONT_TYPE() {
		return LC_CONT_TYPE;
	}

	public Vector getYEAR() {
		return YEAR;
	}
	public Vector[] getREGAS_QTY1() {
		return REGAS_QTY1;
	}


	public Vector getCust_nm() {
		return cust_nm;
	}


	public Vector getCustm_cd() {
		return custm_cd;
	}


	public Vector[] getSALES_REGAS_QTY1() {
		return SALES_REGAS_QTY1;
	}


	public Vector[] getREGAS_SUG_QTY1() {
		return REGAS_SUG_QTY1;
	}


	public Vector[] getREGAS_OPENING() {
		return REGAS_OPENING;
	}


	public Vector[] getREGAS_CLOSING() {
		return REGAS_CLOSING;
	}


	public Vector getAccount_Mapping_id() {
		return Account_Mapping_id;
	}


	public void setAccount_Mapping_id(Vector account_Mapping_id) {
		Account_Mapping_id = account_Mapping_id;
	}


	public double getLTCORA_CN_addl_tax_inr_total() {
		return LTCORA_CN_addl_tax_inr_total;
	}


	public void setLTCORA_CN_addl_tax_inr_total(double ltcora_cn_addl_tax_inr_total) {
		LTCORA_CN_addl_tax_inr_total = ltcora_cn_addl_tax_inr_total;
	}


	public double getLTCORA_CN_addl_tax_usd_total() {
		return LTCORA_CN_addl_tax_usd_total;
	}


	public void setLTCORA_CN_addl_tax_usd_total(double ltcora_cn_addl_tax_usd_total) {
		LTCORA_CN_addl_tax_usd_total = ltcora_cn_addl_tax_usd_total;
	}


	public double getLTCORA_CN_edu_cess_inr_total() {
		return LTCORA_CN_edu_cess_inr_total;
	}


	public void setLTCORA_CN_edu_cess_inr_total(double ltcora_cn_edu_cess_inr_total) {
		LTCORA_CN_edu_cess_inr_total = ltcora_cn_edu_cess_inr_total;
	}


	public double getLTCORA_CN_edu_cess_usd_total() {
		return LTCORA_CN_edu_cess_usd_total;
	}


	public void setLTCORA_CN_edu_cess_usd_total(double ltcora_cn_edu_cess_usd_total) {
		LTCORA_CN_edu_cess_usd_total = ltcora_cn_edu_cess_usd_total;
	}


	public double getLTCORA_CN_gross_amt_inr_total() {
		return LTCORA_CN_gross_amt_inr_total;
	}


	public void setLTCORA_CN_gross_amt_inr_total(
			double ltcora_cn_gross_amt_inr_total) {
		LTCORA_CN_gross_amt_inr_total = ltcora_cn_gross_amt_inr_total;
	}


	public double getLTCORA_CN_gross_amt_usd_total() {
		return LTCORA_CN_gross_amt_usd_total;
	}


	public void setLTCORA_CN_gross_amt_usd_total(
			double ltcora_cn_gross_amt_usd_total) {
		LTCORA_CN_gross_amt_usd_total = ltcora_cn_gross_amt_usd_total;
	}


	public double getLTCORA_CN_group_foreign_gross_amt_usd_total() {
		return LTCORA_CN_group_foreign_gross_amt_usd_total;
	}


	public void setLTCORA_CN_group_foreign_gross_amt_usd_total(
			double ltcora_cn_group_foreign_gross_amt_usd_total) {
		LTCORA_CN_group_foreign_gross_amt_usd_total = ltcora_cn_group_foreign_gross_amt_usd_total;
	}


	public double getLTCORA_CN_high_edu_cess_inr_total() {
		return LTCORA_CN_high_edu_cess_inr_total;
	}


	public void setLTCORA_CN_high_edu_cess_inr_total(
			double ltcora_cn_high_edu_cess_inr_total) {
		LTCORA_CN_high_edu_cess_inr_total = ltcora_cn_high_edu_cess_inr_total;
	}


	public double getLTCORA_CN_high_edu_cess_usd_total() {
		return LTCORA_CN_high_edu_cess_usd_total;
	}


	public void setLTCORA_CN_high_edu_cess_usd_total(
			double ltcora_cn_high_edu_cess_usd_total) {
		LTCORA_CN_high_edu_cess_usd_total = ltcora_cn_high_edu_cess_usd_total;
	}


	public double getLTCORA_CN_net_amt_inr_total() {
		return LTCORA_CN_net_amt_inr_total;
	}


	public void setLTCORA_CN_net_amt_inr_total(double ltcora_cn_net_amt_inr_total) {
		LTCORA_CN_net_amt_inr_total = ltcora_cn_net_amt_inr_total;
	}


	public double getLTCORA_CN_net_amt_usd_total() {
		return LTCORA_CN_net_amt_usd_total;
	}


	public void setLTCORA_CN_net_amt_usd_total(double ltcora_cn_net_amt_usd_total) {
		LTCORA_CN_net_amt_usd_total = ltcora_cn_net_amt_usd_total;
	}


	public double getLTCORA_CN_qty_amt_inr_total() {
		return LTCORA_CN_qty_amt_inr_total;
	}


	public void setLTCORA_CN_qty_amt_inr_total(double ltcora_cn_qty_amt_inr_total) {
		LTCORA_CN_qty_amt_inr_total = ltcora_cn_qty_amt_inr_total;
	}


	public double getLTCORA_CN_qty_amt_usd_total() {
		return LTCORA_CN_qty_amt_usd_total;
	}


	public void setLTCORA_CN_qty_amt_usd_total(double ltcora_cn_qty_amt_usd_total) {
		LTCORA_CN_qty_amt_usd_total = ltcora_cn_qty_amt_usd_total;
	}


	public double getLTCORA_CN_sales_tax_inr_total() {
		return LTCORA_CN_sales_tax_inr_total;
	}


	public void setLTCORA_CN_sales_tax_inr_total(
			double ltcora_cn_sales_tax_inr_total) {
		LTCORA_CN_sales_tax_inr_total = ltcora_cn_sales_tax_inr_total;
	}


	public double getLTCORA_CN_sales_tax_usd_total() {
		return LTCORA_CN_sales_tax_usd_total;
	}


	public void setLTCORA_CN_sales_tax_usd_total(
			double ltcora_cn_sales_tax_usd_total) {
		LTCORA_CN_sales_tax_usd_total = ltcora_cn_sales_tax_usd_total;
	}


	public double getLTCORA_CN_service_tax_inr_total() {
		return LTCORA_CN_service_tax_inr_total;
	}


	public void setLTCORA_CN_service_tax_inr_total(
			double ltcora_cn_service_tax_inr_total) {
		LTCORA_CN_service_tax_inr_total = ltcora_cn_service_tax_inr_total;
	}


	public double getLTCORA_CN_service_tax_usd_total() {
		return LTCORA_CN_service_tax_usd_total;
	}


	public void setLTCORA_CN_service_tax_usd_total(
			double ltcora_cn_service_tax_usd_total) {
		LTCORA_CN_service_tax_usd_total = ltcora_cn_service_tax_usd_total;
	}


	public double getLTCORA_CN_total_tax_inr_total() {
		return LTCORA_CN_total_tax_inr_total;
	}


	public void setLTCORA_CN_total_tax_inr_total(
			double ltcora_cn_total_tax_inr_total) {
		LTCORA_CN_total_tax_inr_total = ltcora_cn_total_tax_inr_total;
	}


	public double getLTCORA_CN_total_tax_usd_total() {
		return LTCORA_CN_total_tax_usd_total;
	}


	public void setLTCORA_CN_total_tax_usd_total(
			double ltcora_cn_total_tax_usd_total) {
		LTCORA_CN_total_tax_usd_total = ltcora_cn_total_tax_usd_total;
	}


	public double getLTCORA_CN_vat_inr_total() {
		return LTCORA_CN_vat_inr_total;
	}


	public void setLTCORA_CN_vat_inr_total(double ltcora_cn_vat_inr_total) {
		LTCORA_CN_vat_inr_total = ltcora_cn_vat_inr_total;
	}


	public double getLTCORA_CN_vat_usd_total() {
		return LTCORA_CN_vat_usd_total;
	}


	public void setLTCORA_CN_vat_usd_total(double ltcora_cn_vat_usd_total) {
		LTCORA_CN_vat_usd_total = ltcora_cn_vat_usd_total;
	}


	public String getSum_LTCORA_CN_rem_supply() {
		return Sum_LTCORA_CN_rem_supply;
	}


	public void setSum_LTCORA_CN_rem_supply(String sum_LTCORA_CN_rem_supply) {
		Sum_LTCORA_CN_rem_supply = sum_LTCORA_CN_rem_supply;
	}


	public double getLTCORA_CN_other_tax1_inr_total() {
		return LTCORA_CN_other_tax1_inr_total;
	}


	public void setLTCORA_CN_other_tax1_inr_total(
			double ltcora_cn_other_tax1_inr_total) {
		LTCORA_CN_other_tax1_inr_total = ltcora_cn_other_tax1_inr_total;
	}


	public double getLTCORA_CN_other_tax1_usd_total() {
		return LTCORA_CN_other_tax1_usd_total;
	}


	public void setLTCORA_CN_other_tax1_usd_total(
			double ltcora_cn_other_tax1_usd_total) {
		LTCORA_CN_other_tax1_usd_total = ltcora_cn_other_tax1_usd_total;
	}


	public double getLTCORA_CN_other_tax2_inr_total() {
		return LTCORA_CN_other_tax2_inr_total;
	}


	public void setLTCORA_CN_other_tax2_inr_total(
			double ltcora_cn_other_tax2_inr_total) {
		LTCORA_CN_other_tax2_inr_total = ltcora_cn_other_tax2_inr_total;
	}


	public double getLTCORA_CN_other_tax2_usd_total() {
		return LTCORA_CN_other_tax2_usd_total;
	}


	public void setLTCORA_CN_other_tax2_usd_total(
			double ltcora_cn_other_tax2_usd_total) {
		LTCORA_CN_other_tax2_usd_total = ltcora_cn_other_tax2_usd_total;
	}


	public double getLTCORA_CN_qty_total() {
		return LTCORA_CN_qty_total;
	}


	public void setLTCORA_CN_qty_total(double ltcora_cn_qty_total) {
		LTCORA_CN_qty_total = ltcora_cn_qty_total;
	}


	public int getEnd_index_3() {
		return end_index_3;
	}


	public void setEnd_index_3(int end_index_3) {
		this.end_index_3 = end_index_3;
	}


	public int getStart_index_3() {
		return start_index_3;
	}


	public void setStart_index_3(int start_index_3) {
		this.start_index_3 = start_index_3;
	}


	public String getFinal_sum_LTCORA_CN_tcq() {
		return Final_sum_LTCORA_CN_tcq;
	}


	public void setFinal_sum_LTCORA_CN_tcq(String final_sum_LTCORA_CN_tcq) {
		Final_sum_LTCORA_CN_tcq = final_sum_LTCORA_CN_tcq;
	}


	public long getSummry_end_index_3() {
		return summry_end_index_3;
	}


	public void setSummry_end_index_3(long summry_end_index_3) {
		this.summry_end_index_3 = summry_end_index_3;
	}


	public long getSummry_start_index_3() {
		return summry_start_index_3;
	}


	public void setSummry_start_index_3(long summry_start_index_3) {
		this.summry_start_index_3 = summry_start_index_3;
	}


	public Vector getSPLIT_SEQ() {
		return SPLIT_SEQ;
	}


	public void setSPLIT_SEQ(Vector sPLIT_SEQ) {
		SPLIT_SEQ = sPLIT_SEQ;
	}

	public Vector getContact_Customer_GST_NO() {
		return contact_Customer_GST_NO;
	}

	public void setContact_Customer_GST_NO(Vector contact_Customer_GST_NO) {
		this.contact_Customer_GST_NO = contact_Customer_GST_NO;
	}

	public Vector getContact_Customer_CST_NO() {
		return contact_Customer_CST_NO;
	}

	public void setContact_Customer_CST_NO(Vector contact_Customer_CST_NO) {
		this.contact_Customer_CST_NO = contact_Customer_CST_NO;
	}

	public Vector getvSTAT_NO() {
		return vSTAT_NO;
	}

	public void setvSTAT_NO(Vector vSTAT_NO) {
		this.vSTAT_NO = vSTAT_NO;
	}

	public Vector getContact_Customer_GVAT_NO() {
		return contact_Customer_GVAT_NO;
	}

	public void setContact_Customer_GVAT_NO(Vector contact_Customer_GVAT_NO) {
		this.contact_Customer_GVAT_NO = contact_Customer_GVAT_NO;
	}

	public Vector getContact_Customer_MVAT_NO() {
		return contact_Customer_MVAT_NO;
	}

	public void setContact_Customer_MVAT_NO(Vector contact_Customer_MVAT_NO) {
		this.contact_Customer_MVAT_NO = contact_Customer_MVAT_NO;
	}


	public Vector getREGAS_TAX_SBC() {
		return REGAS_TAX_SBC;
	}

	public Vector getREGAS_SUMRY_TAX_SBC() {
		return REGAS_SUMRY_TAX_SBC;
	}

	public Vector getSBC_TAX() {
		return SBC_TAX;
	}
	public Vector getKKC_TAX() {return KKC_TAX;} //SB20160620
	
	public Vector getSBC_TAX_NUMERIC() {
		return SBC_TAX_NUMERIC;
	}

	public double getRegas_sbc_tax_inr_total() {
		return regas_sbc_tax_inr_total;
	}
	public double getRegas_kkc_tax_inr_total() {return regas_kkc_tax_inr_total;} //SB20160620
	
	public double getLTCORA_CN_sbc_tax_inr_total() {
		return LTCORA_CN_sbc_tax_inr_total;
	}
	public double getLTCORA_CN_kkc_tax_inr_total() {return LTCORA_CN_kkc_tax_inr_total;} //SB20160620
	
	public Vector getSBC_TAX_USD() {
		return SBC_TAX_USD;
	}

	public Vector getSBC_TAX_USD_NUMERIC() {
		return SBC_TAX_USD_NUMERIC;
	}

	public double getRegas_sbc_tax_usd_total() {
		return regas_sbc_tax_usd_total;
	}

	public double getSales_sbc_tax_usd_total() {
		return sales_sbc_tax_usd_total;
	}

	public double getLTCORA_CN_sbc_tax_usd_total() {
		return LTCORA_CN_sbc_tax_usd_total;
	}

	public double getSales_sbc_tax_inr_total() {
		return sales_sbc_tax_inr_total;
	}
	public double getSales_kkc_tax_inr_total() {return sales_kkc_tax_inr_total;} //SB20160620
	
	public Vector getSUMMRY_SBC_TAX() {
		return SUMMRY_SBC_TAX;
	}

	public Vector getSUMMRY_SBC_TAX_USD() {
		return SUMMRY_SBC_TAX_USD;
	}

	public Vector getVinvno() {
		return Vinvno;
	}

	public String getInvstatus() {
		return invstatus;
	}

	public void setInvstatus(String invstatus) {
		this.invstatus = invstatus;
	}

	public String getSegment() {
		return segment;
	}

	public void setSegment(String segment) {
		this.segment = segment;
	}

	public Vector getVmonth() {
		return Vmonth;
	}

	public void setVmonth(Vector vmonth) {
		Vmonth = vmonth;
	}

	public Vector getVcustomer_cd() {
		return Vcustomer_cd;
	}

	public void setVcustomer_cd(Vector vcustomer_cd) {
		Vcustomer_cd = vcustomer_cd;
	}

	public Vector getVcustomer_abbr() {
		return Vcustomer_abbr;
	}

	public void setVcustomer_abbr(Vector vcustomer_abbr) {
		Vcustomer_abbr = vcustomer_abbr;
	}

	public Vector getVhlplinvseqno() {
		return Vhlplinvseqno;
	}

	public void setVhlplinvseqno(Vector vhlplinvseqno) {
		Vhlplinvseqno = vhlplinvseqno;
	}

	public Vector getVfinancial_year() {
		return Vfinancial_year;
	}

	public void setVfinancial_year(Vector vfinancial_year) {
		Vfinancial_year = vfinancial_year;
	}

	public Vector getVinv_dt() {
		return Vinv_dt;
	}

	public void setVinv_dt(Vector vinv_dt) {
		Vinv_dt = vinv_dt;
	}

	public Vector getVdue_dt() {
		return Vdue_dt;
	}

	public void setVdue_dt(Vector vdue_dt) {
		Vdue_dt = vdue_dt;
	}

	public Vector getVsales_value() {
		return Vsales_value;
	}

	public void setVsales_value(Vector vsales_value) {
		Vsales_value = vsales_value;
	}

	public Vector getVtax_nm() {
		return Vtax_nm;
	}

	public void setVtax_nm(Vector vtax_nm) {
		Vtax_nm = vtax_nm;
	}

	public Vector getVtax_cd() {
		return Vtax_cd;
	}

	public void setVtax_cd(Vector vtax_cd) {
		Vtax_cd = vtax_cd;
	}

	public Vector getVinv_value() {
		return Vinv_value;
	}

	public void setVinv_value(Vector vinv_value) {
		Vinv_value = vinv_value;
	}

	public Vector getVcont_type() {
		return Vcont_type;
	}

	public void setVcont_type(Vector vcont_type) {
		Vcont_type = vcont_type;
	}

	public Vector getVxml_gen_flag() {
		return Vxml_gen_flag;
	}

	public void setVxml_gen_flag(Vector vxml_gen_flag) {
		Vxml_gen_flag = vxml_gen_flag;
	}

	public Vector getVhlpl_inv_seq() {
		return Vhlpl_inv_seq;
	}

	public void setVhlpl_inv_seq(Vector vhlpl_inv_seq) {
		Vhlpl_inv_seq = vhlpl_inv_seq;
	}

	public Vector getVtax_str_cd() {
		return Vtax_str_cd;
	}

	public void setVtax_str_cd(Vector vtax_str_cd) {
		Vtax_str_cd = vtax_str_cd;
	}

	public Vector getTax_amount() {
		return tax_amount;
	}

	public void setTax_amount(Vector tax_amount) {
		this.tax_amount = tax_amount;
	}

	public Vector getVinvseqno() {
		return Vinvseqno;
	}

	public void setVinvseqno(Vector vinvseqno) {
		Vinvseqno = vinvseqno;
	}

	public Vector getVtaxamtinr() {
		return Vtaxamtinr;
	}

	public void setVtaxamtinr(Vector vtaxamtinr) {
		Vtaxamtinr = vtaxamtinr;
	}

	public Vector getVinvamtinr() {
		return Vinvamtinr;
	}

	public void setVinvamtinr(Vector vinvamtinr) {
		Vinvamtinr = vinvamtinr;
	}

	public Vector getVtax_code() {
		return Vtax_code;
	}

	public void setVtax_code(Vector vtax_code) {
		Vtax_code = vtax_code;
	}

	public Vector getVtax_amt() {
		return Vtax_amt;
	}

	public void setVtax_amt(Vector vtax_amt) {
		Vtax_amt = vtax_amt;
	}

	public Vector getVtaxnm() {
		return Vtaxnm;
	}

	public void setVtaxnm(Vector vtaxnm) {
		Vtaxnm = vtaxnm;
	}

	public Vector getVtaxcnt() {
		return Vtaxcnt;
	}

	public void setVtaxcnt(Vector vtaxcnt) {
		Vtaxcnt = vtaxcnt;
	}

	public String getVat_code() {
		return vat_code;
	}

	public void setVat_code(String vat_code) {
		this.vat_code = vat_code;
	}

	public String getCst_code() {
		return cst_code;
	}

	public void setCst_code(String cst_code) {
		this.cst_code = cst_code;
	}

	public String getAddl_code() {
		return addl_code;
	}

	public void setAddl_code(String addl_code) {
		this.addl_code = addl_code;
	}

	public String getSt_code() {
		return st_code;
	}

	public void setSt_code(String st_code) {
		this.st_code = st_code;
	}

	public String getSbc_code() {
		return sbc_code;
	}

	public void setSbc_code(String sbc_code) {
		this.sbc_code = sbc_code;
	}

	public String getEcs_code() {
		return ecs_code;
	}

	public void setEcs_code(String ecs_code) {
		this.ecs_code = ecs_code;
	}

	public String getHecs_code() {
		return hecs_code;
	}

	public void setHecs_code(String hecs_code) {
		this.hecs_code = hecs_code;
	}

	public String getZvat_code() {
		return zvat_code;
	}

	public void setZvat_code(String zvat_code) {
		this.zvat_code = zvat_code;
	}

	public Vector getVpay_recv_dt() {
		return Vpay_recv_dt;
	}

	public void setVpay_recv_dt(Vector vpay_recv_dt) {
		Vpay_recv_dt = vpay_recv_dt;
	}

	public Vector getVpay_remark() {
		return Vpay_remark;
	}

	public void setVpay_remark(Vector vpay_remark) {
		Vpay_remark = vpay_remark;
	}

	public Vector getVpay_short_recv_amt() {
		return Vpay_short_recv_amt;
	}

	public void setVpay_short_recv_amt(Vector vpay_short_recv_amt) {
		Vpay_short_recv_amt = vpay_short_recv_amt;
	}

	public Vector getVpayflag() {
		return Vpayflag;
	}

	public void setVpayflag(Vector vpayflag) {
		Vpayflag = vpayflag;
	}

	public Vector getVpay_actual_recv_amt() {
		return Vpay_actual_recv_amt;
	}

	public void setVpay_actual_recv_amt(Vector vpay_actual_recv_amt) {
		Vpay_actual_recv_amt = vpay_actual_recv_amt;
	}

	public Vector getVinv_gen_by_cd() {
		return Vinv_gen_by_cd;
	}

	public void setVinv_gen_by_cd(Vector vinv_gen_by_cd) {
		Vinv_gen_by_cd = vinv_gen_by_cd;
	}

	public Vector getVchecked_by_cd() {
		return Vchecked_by_cd;
	}

	public void setVchecked_by_cd(Vector vchecked_by_cd) {
		Vchecked_by_cd = vchecked_by_cd;
	}

	public Vector getVapproved_by_cd() {
		return Vapproved_by_cd;
	}

	public void setVapproved_by_cd(Vector vapproved_by_cd) {
		Vapproved_by_cd = vapproved_by_cd;
	}

	public Vector getVinv_gen_by_emailid() {
		return Vinv_gen_by_emailid;
	}

	public void setVinv_gen_by_emailid(Vector vinv_gen_by_emailid) {
		Vinv_gen_by_emailid = vinv_gen_by_emailid;
	}

	public Vector getVchecked_by_emailid() {
		return Vchecked_by_emailid;
	}

	public void setVchecked_by_emailid(Vector vchecked_by_emailid) {
		Vchecked_by_emailid = vchecked_by_emailid;
	}

	public Vector getVapproved_by_emailid() {
		return Vapproved_by_emailid;
	}

	public void setVapproved_by_emailid(Vector vapproved_by_emailid) {
		Vapproved_by_emailid = vapproved_by_emailid;
	}

	public Vector getVinv_gen_by_nm() {
		return Vinv_gen_by_nm;
	}

	public void setVinv_gen_by_nm(Vector vinv_gen_by_nm) {
		Vinv_gen_by_nm = vinv_gen_by_nm;
	}

	public Vector getVchecked_by_nm() {
		return Vchecked_by_nm;
	}

	public void setVchecked_by_nm(Vector vchecked_by_nm) {
		Vchecked_by_nm = vchecked_by_nm;
	}

	public Vector getVapproved_by_nm() {
		return Vapproved_by_nm;
	}

	public void setVapproved_by_nm(Vector vapproved_by_nm) {
		Vapproved_by_nm = vapproved_by_nm;
	}

	public String getAllInvoiceCount() {
		return allInvoiceCount;
	}

	public Vector getVprint_by_cd() {
		return Vprint_by_cd;
	}

	public void setVprint_by_cd(Vector vprint_by_cd) {
		Vprint_by_cd = vprint_by_cd;
	}

	public Vector getVprint_by_emailid() {
		return Vprint_by_emailid;
	}

	public void setVprint_by_emailid(Vector vprint_by_emailid) {
		Vprint_by_emailid = vprint_by_emailid;
	}

	public Vector getVprint_by_nm() {
		return Vprint_by_nm;
	}

	public void setVprint_by_nm(Vector vprint_by_nm) {
		Vprint_by_nm = vprint_by_nm;
	}

	public Vector getVpdf_inv_dtl() {
		return Vpdf_inv_dtl;
	}

	public void setVpdf_inv_dtl(Vector vpdf_inv_dtl) {
		Vpdf_inv_dtl = vpdf_inv_dtl;
	}

	public Vector getVtds_per() {
		return Vtds_per;
	}

	public void setVtds_per(Vector vtds_per) {
		Vtds_per = vtds_per;
	}

	public Vector getVautomail_inv_no() {
		return Vautomail_inv_no;
	}

	public void setVautomail_inv_no(Vector vautomail_inv_no) {
		Vautomail_inv_no = vautomail_inv_no;
	}

	public Vector getVautomail_inv_dt() {
		return Vautomail_inv_dt;
	}

	public void setVautomail_inv_dt(Vector vautomail_inv_dt) {
		Vautomail_inv_dt = vautomail_inv_dt;
	}

	public Vector getVautomail_due_dt() {
		return Vautomail_due_dt;
	}

	public void setVautomail_due_dt(Vector vautomail_due_dt) {
		Vautomail_due_dt = vautomail_due_dt;
	}

	public Vector getVautomail_customer_abbr() {
		return Vautomail_customer_abbr;
	}

	public void setVautomail_customer_abbr(Vector vautomail_customer_abbr) {
		Vautomail_customer_abbr = vautomail_customer_abbr;
	}

	public Vector getVautomail_inv_amt() {
		return Vautomail_inv_amt;
	}

	public void setVautomail_inv_amt(Vector vautomail_inv_amt) {
		Vautomail_inv_amt = vautomail_inv_amt;
	}

	public Vector getVautomail_inv_gen_by_emailid() {
		return Vautomail_inv_gen_by_emailid;
	}

	public void setVautomail_inv_gen_by_emailid(Vector vautomail_inv_gen_by_emailid) {
		Vautomail_inv_gen_by_emailid = vautomail_inv_gen_by_emailid;
	}

	public Vector getVautomail_checked_by_emailid() {
		return Vautomail_checked_by_emailid;
	}

	public void setVautomail_checked_by_emailid(Vector vautomail_checked_by_emailid) {
		Vautomail_checked_by_emailid = vautomail_checked_by_emailid;
	}

	public Vector getVautomail_approved_by_emailid() {
		return Vautomail_approved_by_emailid;
	}

	public void setVautomail_approved_by_emailid(Vector vautomail_approved_by_emailid) {
		Vautomail_approved_by_emailid = vautomail_approved_by_emailid;
	}

	public Vector getVautomail_print_by_emailid() {
		return Vautomail_print_by_emailid;
	}

	public void setVautomail_print_by_emailid(Vector vautomail_print_by_emailid) {
		Vautomail_print_by_emailid = vautomail_print_by_emailid;
	}

	public String getEmp_cd() {
		return emp_cd;
	}

	public void setEmp_cd(String emp_cd) {
		this.emp_cd = emp_cd;
	}

	public String getUpdate_flag() {
		return update_flag;
	}

	public void setUpdate_flag(String update_flag) {
		this.update_flag = update_flag;
	}

	public Vector getVpay_update_dt() {
		return Vpay_update_dt;
	}

	public void setVpay_update_dt(Vector vpay_update_dt) {
		Vpay_update_dt = vpay_update_dt;
	}

	public Vector getVpay_update_cnt() {
		return Vpay_update_cnt;
	}

	public void setVpay_update_cnt(Vector vpay_update_cnt) {
		Vpay_update_cnt = vpay_update_cnt;
	}

	public String getLogged_on_user_emailid() {
		return logged_on_user_emailid;
	}

	public void setLogged_on_user_emailid(String logged_on_user_emailid) {
		this.logged_on_user_emailid = logged_on_user_emailid;
	}

	public String getFormname() {
		return formname;
	}

	public void setFormname(String formname) {
		this.formname = formname;
	}

	public String getFormcd() {
		return formcd;
	}

	public void setFormcd(String formcd) {
		this.formcd = formcd;
	}

	public Vector getVtottax() {
		return Vtottax;
	}

	public void setVtottax(Vector vtottax) {
		Vtottax = vtottax;
	}

	public Vector getVfgsa_no() {
		return Vfgsa_no;
	}

	public void setVfgsa_no(Vector vfgsa_no) {
		Vfgsa_no = vfgsa_no;
	}

	public Vector getVfgsa_rev_no() {
		return Vfgsa_rev_no;
	}

	public void setVfgsa_rev_no(Vector vfgsa_rev_no) {
		Vfgsa_rev_no = vfgsa_rev_no;
	}

	public Vector getVsn_rev_no() {
		return Vsn_rev_no;
	}

	public void setVsn_rev_no(Vector vsn_rev_no) {
		Vsn_rev_no = vsn_rev_no;
	}

	public Vector getVplant_seq_no() {
		return Vplant_seq_no;
	}

	public void setVplant_seq_no(Vector vplant_seq_no) {
		Vplant_seq_no = vplant_seq_no;
	}

	public Vector getVperiod_st_dt() {
		return Vperiod_st_dt;
	}

	public void setVperiod_st_dt(Vector vperiod_st_dt) {
		Vperiod_st_dt = vperiod_st_dt;
	}

	public Vector getVperiod_end_dt() {
		return Vperiod_end_dt;
	}

	public void setVperiod_end_dt(Vector vperiod_end_dt) {
		Vperiod_end_dt = vperiod_end_dt;
	}

	public Vector getVexchg_rate_cd() {
		return Vexchg_rate_cd;
	}

	public void setVexchg_rate_cd(Vector vexchg_rate_cd) {
		Vexchg_rate_cd = vexchg_rate_cd;
	}

	public Vector getVexchg_rate_type() {
		return Vexchg_rate_type;
	}

	public void setVexchg_rate_type(Vector vexchg_rate_type) {
		Vexchg_rate_type = vexchg_rate_type;
	}

	public Vector getVcust_inv_seq_no() {
		return Vcust_inv_seq_no;
	}

	public void setVcust_inv_seq_no(Vector vcust_inv_seq_no) {
		Vcust_inv_seq_no = vcust_inv_seq_no;
	}

	public Vector getVapproved_flag() {
		return Vapproved_flag;
	}

	public void setVapproved_flag(Vector vapproved_flag) {
		Vapproved_flag = vapproved_flag;
	}

	public Vector getVinv_adj_flag() {
		return Vinv_adj_flag;
	}

	public void setVinv_adj_flag(Vector vinv_adj_flag) {
		Vinv_adj_flag = vinv_adj_flag;
	}

	public Vector getVtax_adj_flag() {
		return Vtax_adj_flag;
	}

	public void setVtax_adj_flag(Vector vtax_adj_flag) {
		Vtax_adj_flag = vtax_adj_flag;
	}

	public Vector getVsn_no() {
		return Vsn_no;
	}

	public void setVsn_no(Vector vsn_no) {
		Vsn_no = vsn_no;
	}

	public Vector getVplant_seq_nm() {
		return Vplant_seq_nm;
	}

	public void setVplant_seq_nm(Vector vplant_seq_nm) {
		Vplant_seq_nm = vplant_seq_nm;
	}

	public String getBtnFlag() {
		return btnFlag;
	}

	public void setBtnFlag(String btnFlag) {
		this.btnFlag = btnFlag;
	}

	public String getMonth() {
		return month;
	}

	public String getYear() {
		return year;
	}

	public String getTo_month() {
		return to_month;
	}

	public String getTo_year() {
		return to_year;
	}
	//////////////////////////////////////////
	public void AllCrDrInvoice()			//BK20151125	//*Added new SBC value here
	{

		try
		{
			
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			int count=0; Vector 
			InvSeqNo= new Vector();
			queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID " + //SB20160404
			  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			  "AND (FLAG !='Y' AND FLAG!='U' AND FLAG!='A') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				InvSeqNo.add(rset.getString(1));
				Vmapping_id.add(rset.getString(2)==null?"":rset.getString(2));
			}
		//	//System.out.println("1: "+InvSeqNo); //System.out.println("2: "+Vmapping_id);
			for (int i=0; i<InvSeqNo.size(); i++)
			{
				//System.out.println("1: GET CREDIT INVOICE ...........>>>>"+InvSeqNo);
				get_Sales_dtlsNEW();
				get_Sales_Summary();
				
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	//////////////////////////////////////////
	/////SB20160524: To indicate Adv adjustment in Sales Approval List////////
	public Vector AdvADJ_FLAG = new Vector();	//SB20160524
	public Vector getAdvADJ_FLAG() {return AdvADJ_FLAG;}
	Vector INV_TAX_AMT = new Vector();
	//////////////////////////////////////////
///////////SB20160404: To get the list of CREDIT NOTE Invoice for Approval /////////
	Vector NEW_INV_SEQ_NO_CRDR = new Vector();
	Vector DLNG_NEW_INV_SEQ_NO_CRDR= new Vector();
	public void GetCreditInvoice()	throws Exception		//BK20151125	//*Added new SBC value here
	{

		try
		{
			//System.out.println("1: GET CREDIT INVOICE ...........>>>>");
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			int count=0; 
			Vector InvSeqNo= new Vector();
			Vector conttyp= new Vector();
			Vector finyear= new Vector();
			Vector temp_mapping_id = new Vector();
			Vector temp_NEW_INV_SEQ_NO_CRDR = new Vector();
			Vector temp_cust_cd=new Vector();
			Vector temp_sup_state_cd=new Vector();
			queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID,NEW_INV_SEQ_NO,contract_type,financial_year,FGSA_NO,SN_NO,FGSA_REV_NO,"
					+ "SN_REV_NO,customer_cd,sup_state_code " + //SB20160404
			  "FROM FMS7_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			 // "AND (FLAG!='U' AND FLAG!='A') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
			 "AND (FLAG!='U' AND FLAG!='A') and contract_type in ('S','L','R','T','C','B','K','M') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
			//System.out.println("Sales Details Query java= "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				InvSeqNo.add(rset.getString(1));
				temp_mapping_id.add(rset.getString(2)==null?"":rset.getString(2));
				temp_NEW_INV_SEQ_NO_CRDR.add(rset.getString(3)==null?"":rset.getString(3));
				conttyp.add(rset.getString(4)==null?"":rset.getString(4));
				finyear.add(rset.getString(5)==null?"":rset.getString(5));
				Vfgsa_no.add(rset.getString(6)==null?"":rset.getString(6));
				Vsn_no.add(rset.getString(7)==null?"":rset.getString(7));
				Vfgsa_rev_no.add(rset.getString(8)==null?"":rset.getString(8));
				Vsn_rev_no.add(rset.getString(9)==null?"":rset.getString(9));
				temp_cust_cd.add(rset.getString(10)==null?"":rset.getString(10));
				temp_sup_state_cd.add(rset.getString(11)==null?"":rset.getString(11));
			}
			queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID,NEW_INV_SEQ_NO,contract_type,financial_year,FGSA_NO,SN_NO,FGSA_REV_NO,"
					+ "SN_REV_NO,customer_cd,sup_state_code " + //SB20160404
					  "FROM FMS7_MANUAL_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					 // "AND (FLAG!='U' AND FLAG!='A') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
					 "AND (FLAG!='U' AND FLAG!='A') and contract_type in ('S','L','R','T','C','B','K','M') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
					//System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						InvSeqNo.add(rset.getString(1));
						temp_mapping_id.add(rset.getString(2)==null?"":rset.getString(2));
						temp_NEW_INV_SEQ_NO_CRDR.add(rset.getString(3)==null?"":rset.getString(3));
						conttyp.add(rset.getString(4)==null?"":rset.getString(4));
						finyear.add(rset.getString(5)==null?"":rset.getString(5));
						Vfgsa_no.add(rset.getString(6)==null?"":rset.getString(6));
						Vsn_no.add(rset.getString(7)==null?"":rset.getString(7));
						Vfgsa_rev_no.add(rset.getString(8)==null?"":rset.getString(8));
						Vsn_rev_no.add(rset.getString(9)==null?"":rset.getString(9));
						temp_cust_cd.add(rset.getString(10)==null?"":rset.getString(10));
						temp_sup_state_cd.add(rset.getString(11)==null?"":rset.getString(11));
					}
					//System.out.println("2: GET CREDIT INVOICE ...........>>>>"+InvSeqNo.size());
			for (int i=0; i<InvSeqNo.size(); i++)
			{
				
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
				  "EXCHG_RATE_VALUE,nvl(DR_CR_GROSS_AMT_USD,'0'),DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
				  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
				 // "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_VALUE," +
				  "PLANT_SEQ_NO," +
				  " DR_CR_NO,FLAG,CRITERIA" +
				  ", SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),"
				  + " DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE,DR_CR_FIN_YEAR,GROSS_AMT_INR,GROSS_AMT_USD,NET_AMT_INR,SUP_STATE_CODE "+
				  "FROM FMS7_DR_CR_NOTE WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
				  "AND FLAG ='Y' AND HLPL_INV_SEQ_NO= '"+InvSeqNo.elementAt(i)+"' and contract_type='"+conttyp.elementAt(i)+"' "
				  		+ "and financial_year='"+finyear.elementAt(i)+"' and customer_cd='"+temp_cust_cd.elementAt(i)+"' "
  				+ "and sup_state_code='"+temp_sup_state_cd.elementAt(i)+"' " +
				  " AND APRV_BY IS NOT NULL " + //SB20160620
				  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{		
					Vmapping_id.add(temp_mapping_id.elementAt(i));
					NEW_INV_SEQ_NO_CRDR.add(temp_NEW_INV_SEQ_NO_CRDR.elementAt(i));
					//SUMMRY_CONT_TYP.add(rset.getString(1)==null?"":rset.getString(1));
					Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
					Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
					String sup_st_cd=rset.getString(33)==null?"0":rset.getString(33);
//					if(sup_st_cd.equals("0")){
//						sup_st_cd="24";
//					}
					if(!sup_st_cd.equals("0")){
						queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
						//System.out.println("Sales Details Query for state name = "+queryString);
						rset1 = stmt1.executeQuery(queryString);
						if(rset1.next())
						{			
							String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
							if(!cost_cd.equals("-")){
								drcr_cost_center_code_.add("Y");
							}else{
								drcr_cost_center_code_.add("N");
							}
						}else{
							drcr_cost_center_code_.add("N");
						}
					}else{
						drcr_cost_center_code_.add("Y");
					}
					String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
					String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
					String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
					String tmp_sn_rev_no = rset.getString(14)==null?"0":rset.getString(14);
					String tmp_fgsa_rev_no = rset.getString(16)==null?"0":rset.getString(16);
					String cont_type = rset.getString(18)==null?"":rset.getString(18);
					//PERIOD_START_DT.add("");						
					//PERIOD_END_DT.add("");
					//SALE_PRICE.add(rset.getString(3)==null?"":rset.getString(3));
						//SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
					//DUE_DT.add(rset.getString(4)==null?"":rset.getString(4));	
					
					
					//TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0.00":rset.getString(5))));				
					//EXCHG_RATE.add(rset.getString(6)==null?"":rset.getString(6));	
					String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
					Vcrdr_financial_year.add(rset.getString(29)==null?"":rset.getString(29));
					String exg_rt=rset.getString(6)==null?"":rset.getString(6);
					//String gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
					String gross_inr="";
					String totinvqty="";
					String temp_grossamt="";
					if(rset.getString(22).equals("DIFF-QTY")){
						double inv_qty=0;double tot_drcr_qty=0;
						queryString2 = "SELECT DR_CR_QUANTITY from fms7_DRCR_QTY_DTL where dr_cr_no='"+rset.getString(20)+"' and contract_type='"+rset.getString(18)+"' "
								+ "and financial_year='"+rset.getString(10)+"'"
								+ "";
						rset2 = stmt2.executeQuery(queryString2);
						while(rset2.next())
						{
							inv_qty+=Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
							//
						}
						
						Vcrdr_inv_total_qty.add(nf.format(inv_qty));
						totinvqty=nf.format(inv_qty);
						tot_drcr_qty=Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))-inv_qty;
						//System.out.println("tot_drcr_qty----"+totinvqty);
						double grossamt_inr=tot_drcr_qty * Double.parseDouble(exg_rt) * Double.parseDouble(rset.getString(3));
						//System.out.println("exg_rt----"+exg_rt);
						//gross_inr=nf.format(grossamt_inr);
						//System.out.println("FMS7_CUSTOMER_MST Fetch Query = ");
						if((cont_type.equalsIgnoreCase("S") || cont_type.equalsIgnoreCase("L") || cont_type.equalsIgnoreCase("K")) && rset.getString(22).equals("DIFF-QTY")){
							String cont_base="";
							//System.out.println("FMS7_CUSTOMER_MST Fetch Query = ");
							if(cont_type.equalsIgnoreCase("S")){
								queryString = "select CONT_BASE from fms7_SN_mst where fgsa_no='"+tmp_fgsa_no+"' and fgsa_rev_no='"+tmp_fgsa_rev_no+"' and customer_cd='"+tmp_cust_cd+"' and sn_no='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"'	";
								//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
								rset2 = stmt2.executeQuery(queryString);				
								if(rset2.next())
								{
									cont_base=rset2.getString(1)==null?"":rset2.getString(1);
									if(cont_base.equals("")){
										queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' and rev_no='"+tmp_fgsa_rev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
										//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
										rset3 = stmt3.executeQuery(queryString);				
										if(rset3.next())
										{
											cont_base=rset3.getString(1)==null?"":rset3.getString(1);
										}
									}
								}else{
									queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' and rev_no='"+tmp_fgsa_rev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
									//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
									rset2 = stmt2.executeQuery(queryString);				
									if(rset2.next())
									{
										cont_base=rset2.getString(1)==null?"":rset2.getString(1);
									}
								}
							}else if(cont_type.equalsIgnoreCase("K")){
								queryString = "select AGMT_BASE from fms10_IGX_mst where sn_no='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_sn_rev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
								//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
								rset2 = stmt2.executeQuery(queryString);				
								if(rset2.next())
								{
									cont_base=rset2.getString(1)==null?"":rset2.getString(1);
								}
							}
							else{
								queryString = "select CONT_BASE from fms7_LOA_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"' AND LOA_REV_NO='"+tmp_sn_rev_no+"' and LOA_no='"+tmp_sn_no+"'	";
								////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
								rset2 = stmt2.executeQuery(queryString);				
								if(rset2.next())
								{
									cont_base=rset2.getString(1)==null?"":rset2.getString(1);
									if(cont_base.equals("")){
										queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
										////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
										rset3 = stmt3.executeQuery(queryString);				
										if(rset3.next())
										{
											cont_base=rset3.getString(1)==null?"":rset3.getString(1);
										}
									}
								}else{
								queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
								////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
								rset2 = stmt2.executeQuery(queryString);				
								if(rset2.next())
								{
									cont_base=rset2.getString(1)==null?"":rset2.getString(1);
								}
								}
							}
							//System.out.println("queryString--here");
							
							if(cont_base.equals("D")){
								String transp_charges="";
								//String temp_grossamt="";
								String queryString_tr="";
								if(cont_type.equals("S")){
									queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+Vfgsa_no.elementAt(i)+"' AND FGSA_REV_NO='"+Vfgsa_rev_no.elementAt(i)+"' AND SN_NO='"+Vsn_no.elementAt(i)+"' AND SN_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
								}else if(cont_type.equals("K")){
									queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS10_IGX_MST WHERE SN_NO='"+Vsn_no.elementAt(i)+"' AND SN_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
								}
								else if(cont_type.equals("L")){
									queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+Vfgsa_no.elementAt(i)+"' AND LOA_NO='"+Vsn_no.elementAt(i)+"' AND LOA_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
									
								}
								rset2=stmt2.executeQuery(queryString_tr);
								//System.out.println("queryString--"+queryString_tr);
								if(rset2.next()){
									transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
								}
	//							System.out.println("queryString--here"+totinvqty);
								//System.out.println("totinvqty--here"+tot_drcr_qty);
								//System.out.println("---rset.getString(7)--"+rset1.getString(5)+"--transp_charges--"+transp_charges+"--TMP_QTY---"+TMP_QTY);
								if(!transp_charges.equals("")){
									
									temp_grossamt=""+(tot_drcr_qty * Double.parseDouble(transp_charges));
									//System.out.println("---temp====="+temp_grossamt);
								}else{
									temp_grossamt=rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8)));
								}
							}
							//System.out.println("grossamt_inr--here"+grossamt_inr);
							gross_inr=nf.format(grossamt_inr+Double.parseDouble(temp_grossamt));
						}else{
							gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
						}
						
						//System.out.println("gross_inr----"+gross_inr);
					}else{
						Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
						gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
					}
//					System.out.println("rset.getString(7)---"+rset.getString(7));
					if(!cr_dr_exgrt.equals("")){
						
						Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
					}else if(!exg_rt.equals("") && !exg_rt.equals("0")){
						if(rset.getString(22).equals("REV_INV")){
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
						}else{
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
						}
					}else{
//						System.out.println("rset.getString(7)---"+rset.getString(7));
						if(rset.getString(22).equals("REV_INV")){
							if(!exg_rt.equals("") && !exg_rt.equals("0"))
								Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
							else
								Vcrdr_inv_gross_amt_USD.add("-");
								
						}else{
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						}
						
					}
					//GROSS_AMT_USD_NUMERIC.add(rset.getString(7)==null?"0.00":nf.format(Double.parseDouble(rset.getString(7))));
					if(rset.getString(22).equals("REV_INV")){
						Vcrdr_inv_gross_amt_INR.add(rset.getString(30)==null?"":nf3.format(Double.parseDouble(rset.getString(30))));
					}else{
						if(rset.getString(22).equals("DIFF-QTY")){
							Vcrdr_inv_gross_amt_INR.add(gross_inr);
						}else{
							Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
						}
					}
					//GROSS_AMT_INR_2.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
					//GROSS_AMT_INR_NUMERIC.add(rset.getString(8)==null?"0.00":nf.format(Double.parseDouble(rset.getString(8))));
					//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
					//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("0");
					//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("0");
					//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add("0");
					////////////////////
					
					//NET_AMT_INR_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
					
					Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					//CUSTOMER_CD.add(rset.getString(11)==null?"":rset.getString(11));
					//TAX_STRUCT_CD.add(rset.getString(12)==null?"":rset.getString(12));
					
					
					
					String contract_no = "";
					String contract_name = "";
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
						}
						else
						{
							contract_no = tmp_sn_no;
						}
					}else if(cont_type.equalsIgnoreCase("K"))
					{
						queryString2 = "SELECT SN_REF_NO FROM FMS10_IGX_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   " SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
						}
						else
						{
							contract_no = tmp_sn_no;
						}
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
						}
						else
						{
							contract_no = tmp_sn_no;
						}
					}
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+contract_no;
						//SEGMENT_NAME.add("Sales");
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+contract_no;
						//SEGMENT_NAME.add("LOA");
					}else if(cont_type.equalsIgnoreCase("K"))
					{
						contract_name = "TCN-"+contract_no;
						//SEGMENT_NAME.add("LOA");
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						//SEGMENT_NAME.add("Regas");
					}else if(cont_type.equalsIgnoreCase("C"))
					{
						contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						//SEGMENT_NAME.add("CN");
					}else{
						//SEGMENT_NAME.add("");
					}
					Vcrdr_sn_no.add(contract_name);
				//	temp_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
					Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
				//	temp_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
				//	MONTH.add(rset.getString(17)==null?"":rset.getString(17));
				//	CONTRACT_TYPE.add(rset.getString(18)==null?"":rset.getString(18));
					Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					//SEGMENT_NAME.add("Sales");
				//	PLANT_SEQ_NO.add(rset.getString(19));
				//	SUN_APPROVAL.add(rset.getString(21)==null?"":rset.getString(21));
					Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
				//	Account_Mapping_id.add(rset.getString(20)==null?"":rset.getString(20));//ADDED FOR LTCORA AND CN
					Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));//SB20160404
					Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));//SB20160404
					Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));//SB20160404
					Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));//SB20160404
					Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));//SB20160404
					VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27)); //RS23062017
					
					//For getting tax amount
					
					if((cont_type.equalsIgnoreCase("S") || cont_type.equalsIgnoreCase("L")  || cont_type.equalsIgnoreCase("K")) && rset.getString(22).equals("DIFF-QTY")){
						/*String cont_base="";
						if(cont_type.equalsIgnoreCase("S")){
							queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
							////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);				
							if(rset2.next())
							{
								cont_base=rset2.getString(1)==null?"":rset2.getString(1);
							}
						}else{
							queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
							////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
							rset2 = stmt2.executeQuery(queryString);				
							if(rset2.next())
							{
								cont_base=rset2.getString(1)==null?"":rset2.getString(1);
							}
						}
						//System.out.println("queryString--here");
						String temp_grossamt="";
						if(cont_base.equals("D")){
							String transp_charges="";
							//String temp_grossamt="";
							String queryString_tr="";
							if(cont_type.equals("S")){
								queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+Vfgsa_no.elementAt(i)+"' AND FGSA_REV_NO='"+Vfgsa_rev_no.elementAt(i)+"' AND SN_NO='"+Vsn_no.elementAt(i)+"' AND SN_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
							}else if(cont_type.equals("L")){
								queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+Vfgsa_no.elementAt(i)+"' AND LOA_NO='"+Vsn_no.elementAt(i)+"' AND LOA_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
								
							}
							rset2=stmt2.executeQuery(queryString_tr);
							//System.out.println("queryString--"+queryString_tr);
							if(rset2.next()){
								transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
							}
//							System.out.println("queryString--here"+totinvqty);
//							System.out.println("transp_charges--here"+transp_charges);
							//System.out.println("---rset.getString(7)--"+rset1.getString(5)+"--transp_charges--"+transp_charges+"--TMP_QTY---"+TMP_QTY);
							if(!transp_charges.equals("")){
								
								temp_grossamt=""+(Double.parseDouble(totinvqty) * Double.parseDouble(transp_charges));
								//System.out.println("---temp====="+temp_grossamt);
							}else{
								temp_grossamt=rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8)));
							}
						}*/
						//System.out.println("---temp====="+temp_grossamt);
					double total_tax_amt = 0;
					double tax_amt = 0;
					String tax_cd = "0";
					String tax_factor = "0.00";
					
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+rset.getString(12)+"' AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+rset.getString(12)+"' AND " +
								  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
					//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
					rset2=stmt2.executeQuery(queryString);
					while(rset2.next())
						{
							tax_cd = rset2.getString(1);
							tax_factor = rset2.getString(2);
							
							if(rset2.getString(3).equals("1"))
							{
								//////System.out.println("TAX----aa----"+Double.parseDouble(rset.getString(2)));
								tax_amt = (Double.parseDouble(gross_inr)*Double.parseDouble(rset2.getString(2)))/100;
//								System.out.println("TAX---aa111-----"+tax_amt);
							}
							else if(rset2.getString(3).equals("2"))
							{
								queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+rset.getString(12)+"' AND " +
											  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+rset.getString(12)+"' AND " +
											  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) AND A.tax_code='"+rset2.getString(4)+"'";
//								System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
								rset3=stmt3.executeQuery(queryString1);
								if(rset3.next())
								{
									//////System.out.println("TAX--------"+Double.parseDouble(rset.getString(2)));
									
							 			if(rset3.getString(3).equals("1"))
										{
											tax_amt = (Double.parseDouble(gross_inr)*Double.parseDouble(rset3.getString(2)))/100;
										}
							 			//////System.out.println("TAX---111-----"+tax_amt);
							 			tax_amt = (tax_amt*Double.parseDouble(rset2.getString(2)))/100;
							 			//////System.out.println("TAX---111-bb----"+tax_amt);
								}
								else
								{
									tax_amt = 0;
								}
							}
							else
							{
								tax_amt = 0;
							}
								total_tax_amt += Double.parseDouble(nf.format(tax_amt));
						}
					//System.out.println("total_tax_amt---"+total_tax_amt);
					double net_amt=Double.parseDouble(gross_inr)+total_tax_amt;
					Vcrdr_inv_net_amt_INR.add(nf.format(net_amt));
					}else{
						if(rset.getString(22).equals("REV_INV")){
							Vcrdr_inv_net_amt_INR.add(rset.getString(32)==null?"":nf3.format(Double.parseDouble(rset.getString(32))));
						}else{
							Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						}
					}
					//
				}else{
					//System.out.println("121 else: GET CREDIT INVOICE ...........>>>>");
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
							  "EXCHG_RATE_VALUE,DR_CR_GROSS_AMT_USD,DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
							  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
							 // "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_VALUE," +
							  "PLANT_SEQ_NO," +
							  " DR_CR_NO,FLAG,CRITERIA" +
							  ", SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'), "
							  + " DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE,DR_CR_FIN_YEAR,SUP_STATE_CODE "+
							  "FROM FMS7_manual_DR_CR_NOTE WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
							  "AND FLAG ='Y' AND HLPL_INV_SEQ_NO= '"+InvSeqNo.elementAt(i)+"' and contract_type='"+conttyp.elementAt(i)+"' "
							  		+ "and financial_year='"+finyear.elementAt(i)+"' and customer_cd='"+temp_cust_cd.elementAt(i)+"' "
							  		+ "and sup_state_code='"+temp_sup_state_cd.elementAt(i)+"' " +
							  " AND APRV_BY IS NOT NULL " + //SB20160620
							  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
							//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE:MANULA "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{
						Vmapping_id.add(temp_mapping_id.elementAt(i));
						NEW_INV_SEQ_NO_CRDR.add(temp_NEW_INV_SEQ_NO_CRDR.elementAt(i));
						//SUMMRY_CONT_TYP.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
						String sup_st_cd=rset.getString(30)==null?"0":rset.getString(30);
						String exg_rt=rset.getString(6)==null?"":rset.getString(6);
//						if(sup_st_cd.equals("0")){
//							sup_st_cd="24";
//						}
						if(!sup_st_cd.equals("0")){
							queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
							//System.out.println("Sales Details Query for state name = "+queryString);
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next())
							{			
								String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
								if(!cost_cd.equals("-")){
									drcr_cost_center_code_.add("Y");
								}else{
									drcr_cost_center_code_.add("N");
								}
							}else{
								drcr_cost_center_code_.add("N");
							}
						}else{
							drcr_cost_center_code_.add("Y");
						}
						//PERIOD_START_DT.add("");						
						//PERIOD_END_DT.add("");
						//SALE_PRICE.add(rset.getString(3)==null?"":rset.getString(3));
							//SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
						//DUE_DT.add(rset.getString(4)==null?"":rset.getString(4));	
						
						//Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
						String gross_inr="";
						if(rset.getString(22).equals("DIFF-QTY")){
							double inv_qty=0;double tot_drcr_qty=0;
							queryString2 = "SELECT DR_CR_QUANTITY from fms7_DRCR_QTY_DTL where dr_cr_no='"+rset.getString(20)+"' and contract_type='"+rset.getString(18)+"' "
									+ "and financial_year='"+rset.getString(10)+"'"
									+ "";
							rset2 = stmt2.executeQuery(queryString2);
							while(rset2.next())
							{
								inv_qty+=Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
								//
							}
							
							Vcrdr_inv_total_qty.add(nf.format(inv_qty));
							tot_drcr_qty=Double.parseDouble(rset.getString(5))-inv_qty;
							//System.out.println("tot_drcr_qty----"+tot_drcr_qty);
							double grossamt_inr=tot_drcr_qty * Double.parseDouble(exg_rt) * Double.parseDouble(rset.getString(3));
							//System.out.println("exg_rt----"+exg_rt);
							gross_inr=nf.format(grossamt_inr);
							//System.out.println("gross_inr----"+gross_inr);
						}else{
							Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
							gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
						}
						//TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0.00":rset.getString(5))));				
						//EXCHG_RATE.add(rset.getString(6)==null?"":rset.getString(6));				
						//Vcrdr_inv_gross_amt_USD.add(rset.getString(7)==null?"":nf3.format(Double.parseDouble(rset.getString(7))));
						String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
						//String exg_rt=rset.getString(6)==null?"":rset.getString(6);
						//String gross_inr=rset.getString(8)==null?"":rset.getString(8);
						/*if(!cr_dr_exgrt.equals("")){
							
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
						}else if(!exg_rt.equals("")){
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
						}else{
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						}*/
						if(!cr_dr_exgrt.equals("")){
							
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
						}else if(!exg_rt.equals("") && !exg_rt.equals("0")){
							if(rset.getString(22).equals("REV_INV")){
								Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
							}else{
								Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
							}
						}else{
//							System.out.println("rset.getString(7)---"+rset.getString(7));
							if(rset.getString(22).equals("REV_INV")){
								if(!exg_rt.equals("") && !exg_rt.equals("0"))
									Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
								else
									Vcrdr_inv_gross_amt_USD.add("-");
									
							}else{
								Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
							}
							
						}
						//GROSS_AMT_USD_NUMERIC.add(rset.getString(7)==null?"0.00":nf.format(Double.parseDouble(rset.getString(7))));
						//Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
						if(rset.getString(22).equals("REV_INV")){
							Vcrdr_inv_gross_amt_INR.add(rset.getString(30)==null?"":nf3.format(Double.parseDouble(rset.getString(30))));
						}else{
							if(rset.getString(22).equals("DIFF-QTY")){
								Vcrdr_inv_gross_amt_INR.add(gross_inr);
							}else{
								Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
							}
						}
						//GROSS_AMT_INR_2.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
						//GROSS_AMT_INR_NUMERIC.add(rset.getString(8)==null?"0.00":nf.format(Double.parseDouble(rset.getString(8))));
						//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("0");
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("0");
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add("0");
						////////////////////
						//Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						if(rset.getString(22).equals("REV_INV")){
							Vcrdr_inv_net_amt_INR.add(rset.getString(32)==null?"":nf3.format(Double.parseDouble(rset.getString(32))));
						}else{
							Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						}
						//NET_AMT_INR_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						
						Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
						Vcrdr_financial_year.add(rset.getString(29)==null?"":rset.getString(29));
						//CUSTOMER_CD.add(rset.getString(11)==null?"":rset.getString(11));
						//TAX_STRUCT_CD.add(rset.getString(12)==null?"":rset.getString(12));
						
						String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
						String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
						
						String contract_no = "";
						String contract_name = "";
						String cont_type = rset.getString(18)==null?"":rset.getString(18);
						if(cont_type.equalsIgnoreCase("S"))
						{
							queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}else if(cont_type.equalsIgnoreCase("K"))
						{
							queryString2 = "SELECT SN_REF_NO FROM FMS10_IGX_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   " SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						
						if(cont_type.equalsIgnoreCase("S"))
						{
							contract_name = "SN-"+contract_no;
							//SEGMENT_NAME.add("Sales");
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							contract_name = "LOA-"+contract_no;
							//SEGMENT_NAME.add("LOA");
						}else if(cont_type.equalsIgnoreCase("K"))
						{
							contract_name = "TCN-"+contract_no;
							//SEGMENT_NAME.add("LOA");
						}
						else if(cont_type.equalsIgnoreCase("R"))
						{
							contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("Regas");
						}else if(cont_type.equalsIgnoreCase("C"))
						{
							contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("CN");
						}else{
							//SEGMENT_NAME.add("");
						}
						Vcrdr_sn_no.add(contract_name);
					//	temp_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
						Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
						Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					//	temp_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
						Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					//	MONTH.add(rset.getString(17)==null?"":rset.getString(17));
					//	CONTRACT_TYPE.add(rset.getString(18)==null?"":rset.getString(18));
						Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
						//SEGMENT_NAME.add("Sales");
					//	PLANT_SEQ_NO.add(rset.getString(19));
					//	SUN_APPROVAL.add(rset.getString(21)==null?"":rset.getString(21));
						Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
					//	Account_Mapping_id.add(rset.getString(20)==null?"":rset.getString(20));//ADDED FOR LTCORA AND CN
						Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));//SB20160404
						Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));//SB20160404
						Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));//SB20160404
						Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));//SB20160404
						Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));//SB20160404
						VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27)); //RS23062017
				   }
				}
				
			}
			//for getting credit debit invoice ref
			//System.out.println("S FMS7_DR_CR_NOTE:for VDR_CR_DOC_NO-- "+VDR_CR_DOC_NO);
			queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
					  "EXCHG_RATE_VALUE,nvl(DR_CR_GROSS_AMT_USD,'0'),DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
					  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
					  "PLANT_SEQ_NO, DR_CR_NO,FLAG,CRITERIA, SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),"
					  + " DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE,DR_CR_FIN_YEAR,GROSS_AMT_INR,GROSS_AMT_USD,NET_AMT_INR,SUP_STATE_CODE "+
					  "FROM FMS7_DR_CR_NOTE WHERE DR_CR_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					  "AND FLAG ='Y' AND APRV_BY IS NOT NULL " + 
					  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
					//System.out.println("S FMS7_DR_CR_NOTE:for  "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						String doc_no=rset.getString(27)==null?"":rset.getString(27);
						//System.out.println("S FMS7_DR_CR_NOTE:for doc_no-- "+doc_no);
						if(!VDR_CR_DOC_NO.contains(doc_no)){
							queryString = "Select MAPPING_ID,new_inv_seq_no FROM FMS7_INVOICE_MST WHERE hlpl_inv_seq_no='"+rset.getString(1)+"' and contract_type='"+rset.getString(18)+"' and financial_year='"+rset.getString(10)+"' "
										+ "and sup_state_code='"+rset.getString(33)+"' and customer_cd='"+rset.getString(11)+"' ";
							//System.out.println("Sales Details Query java= "+queryString);
							rset1 = stmt1.executeQuery(queryString);
							if(rset1.next()){
								Vmapping_id.add(rset1.getString(1)==null?"":rset1.getString(1));
								NEW_INV_SEQ_NO_CRDR.add(rset1.getString(2)==null?"":rset1.getString(2));
							}else{
								Vmapping_id.add("");
								NEW_INV_SEQ_NO_CRDR.add("");
							}
							
							//SUMMRY_CONT_TYP.add(rset.getString(1)==null?"":rset.getString(1));
							Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
							Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
							String sup_st_cd=rset.getString(33)==null?"0":rset.getString(33);
	//						if(sup_st_cd.equals("0")){
	//							sup_st_cd="24";
	//						}
							if(!sup_st_cd.equals("0")){
								queryString = "Select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"'";
								//System.out.println("Sales Details Query for state name = "+queryString);
								rset1 = stmt1.executeQuery(queryString);
								if(rset1.next())
								{			
									String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
									if(!cost_cd.equals("-")){
										drcr_cost_center_code_.add("Y");
									}else{
										drcr_cost_center_code_.add("N");
									}
								}else{
									drcr_cost_center_code_.add("N");
								}
							}else{
								drcr_cost_center_code_.add("Y");
							}
							String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
							String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
							String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
							String tmp_fgsarev_no = rset.getString(16)==null?"0":rset.getString(16);
							String tmp_snrev_no = rset.getString(14)==null?"0":rset.getString(14);
							String cont_type = rset.getString(18)==null?"":rset.getString(18);
							//PERIOD_START_DT.add("");						
							//PERIOD_END_DT.add("");
							//SALE_PRICE.add(rset.getString(3)==null?"":rset.getString(3));
								//SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
							//DUE_DT.add(rset.getString(4)==null?"":rset.getString(4));	
							
							
							//TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0.00":rset.getString(5))));				
							//EXCHG_RATE.add(rset.getString(6)==null?"":rset.getString(6));	
							String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
							Vcrdr_financial_year.add(rset.getString(29)==null?"":rset.getString(29));
							String exg_rt=rset.getString(6)==null?"":rset.getString(6);
							//String gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
							String gross_inr="";
							String totinvqty="";
							String temp_grossamt="";
							if(rset.getString(22).equals("DIFF-QTY")){
								double inv_qty=0;double tot_drcr_qty=0;
								queryString2 = "SELECT DR_CR_QUANTITY from fms7_DRCR_QTY_DTL where dr_cr_no='"+rset.getString(20)+"' and contract_type='"+rset.getString(18)+"' "
										+ "and financial_year='"+rset.getString(10)+"'"
										+ "";
								rset2 = stmt2.executeQuery(queryString2);
								while(rset2.next())
								{
									inv_qty+=Double.parseDouble(rset2.getString(1)==null?"0":rset2.getString(1));
									//
								}
								
								Vcrdr_inv_total_qty.add(nf.format(inv_qty));
								totinvqty=nf.format(inv_qty);
								tot_drcr_qty=Double.parseDouble(rset.getString(5))-inv_qty;
								//System.out.println("tot_drcr_qty----"+totinvqty);
								double grossamt_inr=tot_drcr_qty * Double.parseDouble(exg_rt) * Double.parseDouble(rset.getString(3));
								//System.out.println("exg_rt----"+exg_rt);
								//gross_inr=nf.format(grossamt_inr);
								//System.out.println("FMS7_CUSTOMER_MST Fetch Query = ");
								if((cont_type.equalsIgnoreCase("S") || cont_type.equalsIgnoreCase("L") || cont_type.equalsIgnoreCase("K")) && rset.getString(22).equals("DIFF-QTY")){
									String cont_base="";
									//System.out.println("FMS7_CUSTOMER_MST Fetch Query = ");
									if(cont_type.equalsIgnoreCase("S")){
										queryString = "select CONT_BASE from fms7_SN_mst where fgsa_no='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsarev_no+"' and customer_cd='"+tmp_cust_cd+"'	and sn_no='"+tmp_sn_no+"' and SN_REV_NO='"+tmp_snrev_no+"'";
										//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
										rset2 = stmt2.executeQuery(queryString);				
										if(rset2.next())
										{
											cont_base=rset2.getString(1)==null?"":rset2.getString(1);
											if(cont_base.equals("")){
												queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' AND REV_NO='"+tmp_fgsarev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
												//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
												rset3 = stmt3.executeQuery(queryString);				
												if(rset3.next())
												{
													cont_base=rset3.getString(1)==null?"":rset3.getString(1);
												}
											}
										}else{
											queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' AND REV_NO='"+tmp_fgsarev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
											//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
											rset2 = stmt2.executeQuery(queryString);				
											if(rset2.next())
											{
												cont_base=rset2.getString(1)==null?"":rset2.getString(1);
											}
										}
									}else if(cont_type.equalsIgnoreCase("K")){
										queryString = "select AGMT_BASE from fms10_IGX_mst where sn_no='"+tmp_sn_no+"' and SN_REV_NO='"+tmp_snrev_no+"' and customer_cd='"+tmp_cust_cd+"'	";
										//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
										rset2 = stmt2.executeQuery(queryString);				
										if(rset2.next())
										{
											cont_base=rset2.getString(1)==null?"":rset2.getString(1);
										}
									}
									else{
										queryString = "select CONT_BASE from fms7_LOA_mst where tender_no='"+tmp_fgsa_no+"' and LOA_REV_NO='"+tmp_snrev_no+"' and customer_cd='"+tmp_cust_cd+"' and loa_no='"+tmp_sn_no+"'";
										////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
										rset2 = stmt2.executeQuery(queryString);				
										if(rset2.next())
										{
											cont_base=rset2.getString(1)==null?"":rset2.getString(1);
											if(cont_base.equals("")){
												queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
												////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
												rset3 = stmt3.executeQuery(queryString);				
												if(rset3.next())
												{
													cont_base=rset3.getString(1)==null?"":rset3.getString(1);
												}
											}
										}else{
											queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
											////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
											rset2 = stmt2.executeQuery(queryString);				
											if(rset2.next())
											{
												cont_base=rset2.getString(1)==null?"":rset2.getString(1);
											}
										}
									}
									//System.out.println("queryString--here");
									
									if(cont_base.equals("D")){
										String transp_charges="";
										//String temp_grossamt="";
										String queryString_tr="";
										if(cont_type.equals("S")){
											queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+tmp_fgsa_no+"' AND FGSA_REV_NO='"+tmp_fgsarev_no+"' AND SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_snrev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
										}else if(cont_type.equals("K")){
											queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS10_IGX_MST WHERE SN_NO='"+tmp_sn_no+"' AND SN_REV_NO='"+tmp_snrev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
										}
										else if(cont_type.equals("L")){
											queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+tmp_fgsa_no+"' AND LOA_NO='"+tmp_sn_no+"' AND LOA_REV_NO='"+tmp_snrev_no+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
											
										}
										rset2=stmt2.executeQuery(queryString_tr);
										//System.out.println("queryString--"+queryString_tr);
										if(rset2.next()){
											transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
										}
			//							System.out.println("queryString--here"+totinvqty);
										//System.out.println("totinvqty--here"+tot_drcr_qty);
										//System.out.println("---rset.getString(7)--"+rset1.getString(5)+"--transp_charges--"+transp_charges+"--TMP_QTY---"+TMP_QTY);
										if(!transp_charges.equals("")){
											
											temp_grossamt=""+(tot_drcr_qty * Double.parseDouble(transp_charges));
											//System.out.println("---temp====="+temp_grossamt);
										}else{
											temp_grossamt=rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8)));
										}
									}
									//System.out.println("grossamt_inr--here"+grossamt_inr);
									gross_inr=nf.format(grossamt_inr+Double.parseDouble(temp_grossamt));
								}else{
									gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
								}
								
								//System.out.println("gross_inr----"+gross_inr);
							}else{
								Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
								gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
							}
	//						System.out.println("rset.getString(7)---"+rset.getString(7));
							if(!cr_dr_exgrt.equals("")){
								
								Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
							}else if(!exg_rt.equals("") && !exg_rt.equals("0")){
								if(rset.getString(22).equals("REV_INV")){
									Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
								}else{
									Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
								}
							}else{
	//							System.out.println("rset.getString(7)---"+rset.getString(7));
								if(rset.getString(22).equals("REV_INV")){
									if(!exg_rt.equals("") && !exg_rt.equals("0"))
										Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(31)==null?"0.00":rset.getString(31))));
									else
										Vcrdr_inv_gross_amt_USD.add("-");
										
								}else{
									Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
								}
								
							}
							//GROSS_AMT_USD_NUMERIC.add(rset.getString(7)==null?"0.00":nf.format(Double.parseDouble(rset.getString(7))));
							if(rset.getString(22).equals("REV_INV")){
								Vcrdr_inv_gross_amt_INR.add(rset.getString(30)==null?"":nf3.format(Double.parseDouble(rset.getString(30))));
							}else{
								if(rset.getString(22).equals("DIFF-QTY")){
									Vcrdr_inv_gross_amt_INR.add(gross_inr);
								}else{
									Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
								}
							}
							//GROSS_AMT_INR_2.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
							//GROSS_AMT_INR_NUMERIC.add(rset.getString(8)==null?"0.00":nf.format(Double.parseDouble(rset.getString(8))));
							//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
							//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("0");
							//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("0");
							//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add("0");
							////////////////////
							
							//NET_AMT_INR_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
							
							Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
							//CUSTOMER_CD.add(rset.getString(11)==null?"":rset.getString(11));
							//TAX_STRUCT_CD.add(rset.getString(12)==null?"":rset.getString(12));
							
							
							
							String contract_no = "";
							String contract_name = "";
							
							if(cont_type.equalsIgnoreCase("S"))
							{
								queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
										   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									contract_no = rset2.getString(1);
									if(contract_no.trim().equals(""))
									{
										contract_no = tmp_sn_no;
									}
								}
								else
								{
									contract_no = tmp_sn_no;
								}
							}else if(cont_type.equalsIgnoreCase("K"))
							{
								queryString2 = "SELECT SN_REF_NO FROM FMS10_IGX_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
										   	   " SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									contract_no = rset2.getString(1);
									if(contract_no.trim().equals(""))
									{
										contract_no = tmp_sn_no;
									}
								}
								else
								{
									contract_no = tmp_sn_no;
								}
							}
							else if(cont_type.equalsIgnoreCase("L"))
							{
								queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
										   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
								rset2 = stmt2.executeQuery(queryString2);
								if(rset2.next())
								{
									contract_no = rset2.getString(1);
									if(contract_no.trim().equals(""))
									{
										contract_no = tmp_sn_no;
									}
								}
								else
								{
									contract_no = tmp_sn_no;
								}
							}
							
							if(cont_type.equalsIgnoreCase("S"))
							{
								contract_name = "SN-"+contract_no;
								//SEGMENT_NAME.add("Sales");
							}
							else if(cont_type.equalsIgnoreCase("L"))
							{
								contract_name = "LOA-"+contract_no;
								//SEGMENT_NAME.add("LOA");
							}else if(cont_type.equalsIgnoreCase("K"))
							{
								contract_name = "TCN-"+contract_no;
								//SEGMENT_NAME.add("LOA");
							}
							else if(cont_type.equalsIgnoreCase("R"))
							{
								contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
								//SEGMENT_NAME.add("Regas");
							}else if(cont_type.equalsIgnoreCase("C"))
							{
								contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
								//SEGMENT_NAME.add("CN");
							}else{
								//SEGMENT_NAME.add("");
							}
							Vcrdr_sn_no.add(contract_name);
						//	temp_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
							Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
							Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
						//	temp_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
							Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
						//	MONTH.add(rset.getString(17)==null?"":rset.getString(17));
						//	CONTRACT_TYPE.add(rset.getString(18)==null?"":rset.getString(18));
							Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
							//SEGMENT_NAME.add("Sales");
						//	PLANT_SEQ_NO.add(rset.getString(19));
						//	SUN_APPROVAL.add(rset.getString(21)==null?"":rset.getString(21));
							Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
						//	Account_Mapping_id.add(rset.getString(20)==null?"":rset.getString(20));//ADDED FOR LTCORA AND CN
							Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));//SB20160404
							Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));//SB20160404
							Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));//SB20160404
							Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));//SB20160404
							Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));//SB20160404
							VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27)); //RS23062017
							
							//For getting tax amount
							
							if((cont_type.equalsIgnoreCase("S") || cont_type.equalsIgnoreCase("L")  || cont_type.equalsIgnoreCase("K")) && rset.getString(22).equals("DIFF-QTY")){
								/*String cont_base="";
								if(cont_type.equalsIgnoreCase("S")){
									queryString = "select FGSA_BASE from fms7_fgsa_mst where fgsa_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
									////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
									rset2 = stmt2.executeQuery(queryString);				
									if(rset2.next())
									{
										cont_base=rset2.getString(1)==null?"":rset2.getString(1);
									}
								}else{
									queryString = "select tender_BASE from fms7_tender_mst where tender_no='"+tmp_fgsa_no+"' and customer_cd='"+tmp_cust_cd+"'	";
									////System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
									rset2 = stmt2.executeQuery(queryString);				
									if(rset2.next())
									{
										cont_base=rset2.getString(1)==null?"":rset2.getString(1);
									}
								}
								//System.out.println("queryString--here");
								String temp_grossamt="";
								if(cont_base.equals("D")){
									String transp_charges="";
									//String temp_grossamt="";
									String queryString_tr="";
									if(cont_type.equals("S")){
										queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_SN_MST WHERE FGSA_NO='"+Vfgsa_no.elementAt(i)+"' AND FGSA_REV_NO='"+Vfgsa_rev_no.elementAt(i)+"' AND SN_NO='"+Vsn_no.elementAt(i)+"' AND SN_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
									}else if(cont_type.equals("L")){
										queryString_tr="SELECT TRANSPORTATION_CHARGE FROM FMS7_LOA_MST WHERE TENDER_NO='"+Vfgsa_no.elementAt(i)+"' AND LOA_NO='"+Vsn_no.elementAt(i)+"' AND LOA_REV_NO='"+Vsn_rev_no.elementAt(i)+"' AND CUSTOMER_CD='"+tmp_cust_cd+"' ";
										
									}
									rset2=stmt2.executeQuery(queryString_tr);
									//System.out.println("queryString--"+queryString_tr);
									if(rset2.next()){
										transp_charges=rset2.getString(1)==null?"":rset2.getString(1);
									}
	//								System.out.println("queryString--here"+totinvqty);
	//								System.out.println("transp_charges--here"+transp_charges);
									//System.out.println("---rset.getString(7)--"+rset1.getString(5)+"--transp_charges--"+transp_charges+"--TMP_QTY---"+TMP_QTY);
									if(!transp_charges.equals("")){
										
										temp_grossamt=""+(Double.parseDouble(totinvqty) * Double.parseDouble(transp_charges));
										//System.out.println("---temp====="+temp_grossamt);
									}else{
										temp_grossamt=rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8)));
									}
								}*/
								//System.out.println("---temp====="+temp_grossamt);
							double total_tax_amt = 0;
							double tax_amt = 0;
							String tax_cd = "0";
							String tax_factor = "0.00";
							
							queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+rset.getString(12)+"' AND " +
										  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+rset.getString(12)+"' AND " +
										  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) ORDER BY A.tax_code";
							//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
							rset2=stmt2.executeQuery(queryString);
							while(rset2.next())
								{
									tax_cd = rset2.getString(1);
									tax_factor = rset2.getString(2);
									
									if(rset2.getString(3).equals("1"))
									{
										//////System.out.println("TAX----aa----"+Double.parseDouble(rset.getString(2)));
										tax_amt = (Double.parseDouble(gross_inr)*Double.parseDouble(rset2.getString(2)))/100;
	//									System.out.println("TAX---aa111-----"+tax_amt);
									}
									else if(rset2.getString(3).equals("2"))
									{
										queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
													  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+rset.getString(12)+"' AND " +
													  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+rset.getString(12)+"' AND " +
													  "B.app_date<=TO_DATE('"+rset.getString(2)+"','DD/MM/YYYY')) AND A.tax_code='"+rset2.getString(4)+"'";
	//									System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
										rset3=stmt3.executeQuery(queryString1);
										if(rset3.next())
										{
											//////System.out.println("TAX--------"+Double.parseDouble(rset.getString(2)));
											
									 			if(rset3.getString(3).equals("1"))
												{
													tax_amt = (Double.parseDouble(gross_inr)*Double.parseDouble(rset3.getString(2)))/100;
												}
									 			//////System.out.println("TAX---111-----"+tax_amt);
									 			tax_amt = (tax_amt*Double.parseDouble(rset2.getString(2)))/100;
									 			//////System.out.println("TAX---111-bb----"+tax_amt);
										}
										else
										{
											tax_amt = 0;
										}
									}
									else
									{
										tax_amt = 0;
									}
										total_tax_amt += Double.parseDouble(nf.format(tax_amt));
								}
							//System.out.println("total_tax_amt---"+total_tax_amt);
							double net_amt=Double.parseDouble(gross_inr)+total_tax_amt;
							Vcrdr_inv_net_amt_INR.add(nf.format(net_amt));
							}else{
								if(rset.getString(22).equals("REV_INV")){
									Vcrdr_inv_net_amt_INR.add(rset.getString(32)==null?"":nf3.format(Double.parseDouble(rset.getString(32))));
								}else{
									Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
								}
							}
						}
					}
		}
		catch(Exception e)
		{
			System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	public void GetCreditInvoice_DLNG()			//BK20151125	//*Added new SBC value here
	{
		try
		{
//			//System.out.println("1: GET CREDIT INVOICE ...........>>>>");
			String from_dt = "01/"+month+"/"+year;
			String to_dt = "";
			queryString = "Select To_char(Last_Day(to_date('"+to_month+"/"+to_year+"','mm/yyyy')),'dd/mm/yyyy') from dual";
			////System.out.println("Last Date Of The Selected Month = "+queryString);
			rset = stmt.executeQuery(queryString);			
			if(rset.next())
			{
				to_dt = rset.getString(1)==null?"0":rset.getString(1);
			}
			
			int count=0; 
			Vector InvSeqNo= new Vector();
			Vector conttyp= new Vector();
			Vector finyear= new Vector();
			Vector temp_mapping_id = new Vector();
			Vector temp_NEW_INV_SEQ_NO_CRDR = new Vector();
			queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID,NEW_INV_SEQ_NO,contract_type,financial_year " + //SB20160404
			  "FROM DLNG_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
			 // "AND (FLAG!='U' AND FLAG!='A') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
			 "AND (FLAG!='U' AND FLAG!='A') and contract_type in ('S','L') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
			//System.out.println("Sales Details Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			while(rset.next())
			{					
				InvSeqNo.add(rset.getString(1));
				temp_mapping_id.add(rset.getString(2)==null?"":rset.getString(2));
				temp_NEW_INV_SEQ_NO_CRDR.add(rset.getString(3)==null?"":rset.getString(3));
				conttyp.add(rset.getString(4)==null?"":rset.getString(4));
				finyear.add(rset.getString(5)==null?"":rset.getString(5));
			}
			/*queryString = "Select HLPL_INV_SEQ_NO, MAPPING_ID,NEW_INV_SEQ_NO,contract_type,financial_year " + //SB20160404
					  "FROM DLNG_MANUAL_INVOICE_MST WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
					 // "AND (FLAG!='U' AND FLAG!='A') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
					 "AND (FLAG!='U' AND FLAG!='A') and contract_type in ('S','L','R','T','C') ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO ";
				//	//System.out.println("Sales Details Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{					
						InvSeqNo.add(rset.getString(1));
						temp_mapping_id.add(rset.getString(2)==null?"":rset.getString(2));
						temp_NEW_INV_SEQ_NO_CRDR.add(rset.getString(3)==null?"":rset.getString(3));
						conttyp.add(rset.getString(4)==null?"":rset.getString(4));
						finyear.add(rset.getString(5)==null?"":rset.getString(5));
					}*/
		//	//System.out.println("1: "+InvSeqNo); //System.out.println("2: "+Vmapping_id);
			for (int i=0; i<InvSeqNo.size(); i++)
			{
				
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(DR_CR_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),"
							+ "TOTAL_QTY,EXCHG_RATE_VALUE,DR_CR_GROSS_AMT_USD,DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR"
							+ ",CUSTOMER_CD,TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
							  "PLANT_SEQ_NO,DR_CR_NO,FLAG,CRITERIA,SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),"
							+ " DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE,sup_state_code FROM DLNG_DR_CR_NOTE WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
							  "AND FLAG ='Y' AND HLPL_INV_SEQ_NO= '"+InvSeqNo.elementAt(i)+"' and contract_type='"+conttyp.elementAt(i)+"' "
							+ "and financial_year='"+finyear.elementAt(i)+"' AND APRV_BY IS NOT NULL " + 
							  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{		
					DLNG_Vmapping_id.add(temp_mapping_id.elementAt(i));
					DLNG_NEW_INV_SEQ_NO_CRDR.add(temp_NEW_INV_SEQ_NO_CRDR.elementAt(i));
					DLNG_Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
					DLNG_Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
					//SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
					//Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
					String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
					String sup_st_cd=rset.getString(29)==null?"":rset.getString(29);
//					if(sup_st_cd.equals("0")){
//						sup_st_cd="24";
//					}
					if(!sup_st_cd.equals("0")){
						String queryTax = "select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"' ";
						rset1=stmt1.executeQuery(queryTax);
						if(rset1.next())
						{
							String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
							if(!cost_cd.equals("-")){
								DLNG_Vcrdr_cost_center.add("Y");
							}else{
								DLNG_Vcrdr_cost_center.add("N");
							}
						}else{
							DLNG_Vcrdr_cost_center.add("N");
						}
					}else{
						DLNG_Vcrdr_cost_center.add("Y");
					}
					String exg_rt=rset.getString(6)==null?"0.00":rset.getString(6);
					String gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
					if(!cr_dr_exgrt.equals("")){
						DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
					}else if(!exg_rt.equals("")){
						DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
					}else{
						DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
					}
					DLNG_Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
					DLNG_Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(9))));
					DLNG_Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
					String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
					String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
					String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
					
					String contract_no = "";
					String contract_name = "";
					String cont_type = rset.getString(18)==null?"":rset.getString(18);
					if(cont_type.equalsIgnoreCase("S"))
					{
						queryString2 = "SELECT SN_REF_NO FROM DLNG_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "FLSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
						}
						else
						{
							contract_no = tmp_sn_no;
						}
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
								   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
						rset2 = stmt2.executeQuery(queryString2);
						if(rset2.next())
						{
							contract_no = rset2.getString(1);
							if(contract_no.trim().equals(""))
							{
								contract_no = tmp_sn_no;
							}
						}
						else
						{
							contract_no = tmp_sn_no;
						}
					}
					
					if(cont_type.equalsIgnoreCase("S"))
					{
						contract_name = "SN-"+contract_no;
						//SEGMENT_NAME.add("Sales");
					}
					else if(cont_type.equalsIgnoreCase("L"))
					{
						contract_name = "LOA-"+contract_no;
						//SEGMENT_NAME.add("LOA");
					}
					else if(cont_type.equalsIgnoreCase("R"))
					{
						contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						//SEGMENT_NAME.add("Regas");
					}else if(cont_type.equalsIgnoreCase("C"))
					{
						contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
						//SEGMENT_NAME.add("CN");
					}else{
						//SEGMENT_NAME.add("");
					}
					/*Vcrdr_sn_no.add(contract_name);
					Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
					Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));*/
					DLNG_Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
					DLNG_Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
					DLNG_Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));
					DLNG_Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));
					DLNG_Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));
					DLNG_Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));
					DLNG_Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));
					DLNG_VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27));
				}
				/*else{
					queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(INVOICE_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),TOTAL_QTY," +
							  "EXCHG_RATE_VALUE,DR_CR_GROSS_AMT_USD,DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR,CUSTOMER_CD," +
							  "TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
							 // "CONTACT_PERSON_CD,TAX_AMT_INR,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT, EXCHG_RATE_VALUE," +
							  "PLANT_SEQ_NO," +
							  " DR_CR_NO,FLAG,CRITERIA" +
							  ", SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'), DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE "+
							  "FROM DLNG_manual_DR_CR_NOTE WHERE INVOICE_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
							  "AND FLAG ='Y' AND HLPL_INV_SEQ_NO= '"+InvSeqNo.elementAt(i)+"' and contract_type='"+conttyp.elementAt(i)+"' "
							  		+ "and financial_year='"+finyear.elementAt(i)+"' " +
							  " AND APRV_BY IS NOT NULL " + //SB20160620
							  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
						//	//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE: "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{
						Vmapping_id.add(temp_mapping_id.elementAt(i));
						NEW_INV_SEQ_NO_CRDR.add(temp_NEW_INV_SEQ_NO_CRDR.elementAt(i));
						//SUMMRY_CONT_TYP.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
						Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
						//PERIOD_START_DT.add("");						
						//PERIOD_END_DT.add("");
						//SALE_PRICE.add(rset.getString(3)==null?"":rset.getString(3));
							SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
						//DUE_DT.add(rset.getString(4)==null?"":rset.getString(4));	
						
						Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
						//TOTAL_QTY_NUMERIC.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0.00":rset.getString(5))));				
						//EXCHG_RATE.add(rset.getString(6)==null?"":rset.getString(6));				
						//Vcrdr_inv_gross_amt_USD.add(rset.getString(7)==null?"":nf3.format(Double.parseDouble(rset.getString(7))));
						String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
						String exg_rt=rset.getString(6)==null?"":rset.getString(6);
						String gross_inr=rset.getString(8)==null?"":rset.getString(8);
						if(!cr_dr_exgrt.equals("")){
							
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
						}else if(!exg_rt.equals("")){
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
						}else{
							Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						}
						//GROSS_AMT_USD_NUMERIC.add(rset.getString(7)==null?"0.00":nf.format(Double.parseDouble(rset.getString(7))));
						Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
						//GROSS_AMT_INR_2.add(rset.getString(8)==null?"":nf.format(Double.parseDouble(rset.getString(8))));
						//GROSS_AMT_INR_NUMERIC.add(rset.getString(8)==null?"0.00":nf.format(Double.parseDouble(rset.getString(8))));
						//Following Section of coding has been introduced by Samik Shah on 2nd August, 2011 ...
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.add("0");
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2.add("0");
						//GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC.add("0");
						////////////////////
						Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"":nf3.format(Double.parseDouble(rset.getString(9))));
						//NET_AMT_INR_NUMERIC.add(rset.getString(9)==null?"0.00":nf.format(Double.parseDouble(rset.getString(9))));
						
						Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
						//CUSTOMER_CD.add(rset.getString(11)==null?"":rset.getString(11));
						//TAX_STRUCT_CD.add(rset.getString(12)==null?"":rset.getString(12));
						
						String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
						String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
						
						String contract_no = "";
						String contract_name = "";
						String cont_type = rset.getString(18)==null?"":rset.getString(18);
						if(cont_type.equalsIgnoreCase("S"))
						{
							queryString2 = "SELECT SN_REF_NO FROM FMS7_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FGSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						
						if(cont_type.equalsIgnoreCase("S"))
						{
							contract_name = "SN-"+contract_no;
							//SEGMENT_NAME.add("Sales");
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							contract_name = "LOA-"+contract_no;
							//SEGMENT_NAME.add("LOA");
						}
						else if(cont_type.equalsIgnoreCase("R"))
						{
							contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("Regas");
						}else if(cont_type.equalsIgnoreCase("C"))
						{
							contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("CN");
						}else{
							//SEGMENT_NAME.add("");
						}
						Vcrdr_sn_no.add(contract_name);
					//	temp_sn_no.add(rset.getString(13)==null?"":rset.getString(13));
						Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
						Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
					//	temp_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
						Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));
					//	MONTH.add(rset.getString(17)==null?"":rset.getString(17));
					//	CONTRACT_TYPE.add(rset.getString(18)==null?"":rset.getString(18));
						Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
						//SEGMENT_NAME.add("Sales");
					//	PLANT_SEQ_NO.add(rset.getString(19));
					//	SUN_APPROVAL.add(rset.getString(21)==null?"":rset.getString(21));
						Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
					//	Account_Mapping_id.add(rset.getString(20)==null?"":rset.getString(20));//ADDED FOR LTCORA AND CN
						Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));//SB20160404
						Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));//SB20160404
						Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));//SB20160404
						Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));//SB20160404
						Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));//SB20160404
						VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27)); //RS23062017
				   }
				}*/
			//	//System.out.println("1: "+Vinvoice_FLag);
			//	//System.out.println("contract_type: "+Vcrdr_contract_type);
			}
				queryString = "Select HLPL_INV_SEQ_NO,TO_CHAR(DR_CR_DT,'DD/MM/YYYY'), SALE_PRICE,TO_CHAR(DUE_DT,'DD/MM/YYYY'),"
						+ "TOTAL_QTY,EXCHG_RATE_VALUE,DR_CR_GROSS_AMT_USD,DR_CR_GROSS_AMT_INR, DR_CR_NET_AMT_INR,FINANCIAL_YEAR"
						+ ",CUSTOMER_CD,TAX_STRUCT_CD,SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,TO_CHAR(INVOICE_DT,'Month'),CONTRACT_TYPE," +
						  "PLANT_SEQ_NO,DR_CR_NO,FLAG,CRITERIA,SUN_APPROVAL, SUN_APPROVAL_BY, TO_CHAR(SUN_APPROVAL_DT,'DD/MM/YYYY'),"
						+ " DR_CR_FLAG,DR_CR_DOC_NO,DR_CR_EXG_RATE,sup_state_code FROM DLNG_DR_CR_NOTE WHERE DR_CR_DT between (to_date('"+from_dt+"','dd/mm/yyyy')) and (to_date('"+to_dt+"','dd/mm/yyyy')) " +
						  "AND FLAG ='Y'  AND APRV_BY IS NOT NULL " + 
						  "ORDER BY INVOICE_DT, FINANCIAL_YEAR,HLPL_INV_SEQ_NO";
				//System.out.println("SINV: AppRV: FMS7_DR_CR_NOTE: "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next()){
					String doc_no=rset.getString(27)==null?"":rset.getString(27);
					if(!DLNG_VDR_CR_DOC_NO.contains(doc_no)){
					
						queryString = "Select  MAPPING_ID,NEW_INV_SEQ_NO FROM DLNG_INVOICE_MST WHERE  hlpl_inv_seq_no='"+rset.getString(1)+"' "
								+ "and contract_type='"+rset.getString(18)+"' and financial_year='"+rset.getString(10)+"' and customer_cd='"+rset.getString(11)+"'";
								//System.out.println("Sales Details Query = "+queryString);
								rset1 = stmt1.executeQuery(queryString);
								if(rset1.next()){
									DLNG_Vmapping_id.add(rset1.getString(1)==null?"":rset1.getString(1));
									DLNG_NEW_INV_SEQ_NO_CRDR.add(rset1.getString(2)==null?"":rset1.getString(2));
								}else{
									DLNG_Vmapping_id.add("");
									DLNG_NEW_INV_SEQ_NO_CRDR.add("");
								}
						
						DLNG_Vcrdr_inv_seq_no.add(rset.getString(1)==null?"":rset.getString(1));
						DLNG_Vcrdr_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
						//SALE_PRICE_NUMERIC.add(nf2.format(Double.parseDouble(rset.getString(3))));
						//Vcrdr_inv_total_qty.add(nf.format(Double.parseDouble(rset.getString(5)==null?"0":rset.getString(5))));
						String cr_dr_exgrt=rset.getString(28)==null?"":rset.getString(28);
						String sup_st_cd=rset.getString(29)==null?"":rset.getString(29);
	//					if(sup_st_cd.equals("0")){
	//						sup_st_cd="24";
	//					}
						if(!sup_st_cd.equals("0")){
							String queryTax = "select sales_cost_center_cd from state_mst where state_code='"+sup_st_cd+"' ";
							rset1=stmt1.executeQuery(queryTax);
							if(rset1.next())
							{
								String cost_cd=rset1.getString(1)==null?"-":rset1.getString(1);
								if(!cost_cd.equals("-")){
									DLNG_Vcrdr_cost_center.add("Y");
								}else{
									DLNG_Vcrdr_cost_center.add("N");
								}
							}else{
								DLNG_Vcrdr_cost_center.add("N");
							}
						}else{
							DLNG_Vcrdr_cost_center.add("Y");
						}
						String exg_rt=rset.getString(6)==null?"0.00":rset.getString(6);
						String gross_inr=rset.getString(8)==null?"0.00":rset.getString(8);
						if(!cr_dr_exgrt.equals("")){
							DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(cr_dr_exgrt)));
						}else if(!exg_rt.equals("")){
							DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(gross_inr)/Double.parseDouble(exg_rt)));
						}else{
							DLNG_Vcrdr_inv_gross_amt_USD.add(nf3.format(Double.parseDouble(rset.getString(7)==null?"0.00":rset.getString(7))));
						}
						DLNG_Vcrdr_inv_gross_amt_INR.add(rset.getString(8)==null?"":nf3.format(Double.parseDouble(rset.getString(8))));
						DLNG_Vcrdr_inv_net_amt_INR.add(rset.getString(9)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(9))));
						DLNG_Vcrdr_inv_financial_year.add(rset.getString(10)==null?"":rset.getString(10));
						String tmp_cust_cd = rset.getString(11)==null?"0":rset.getString(11);
						String tmp_fgsa_no = rset.getString(15)==null?"0":rset.getString(15);
						String tmp_sn_no = rset.getString(13)==null?"0":rset.getString(13);
						
						String contract_no = "";
						String contract_name = "";
						String cont_type = rset.getString(18)==null?"":rset.getString(18);
						if(cont_type.equalsIgnoreCase("S"))
						{
							queryString2 = "SELECT SN_REF_NO FROM DLNG_SN_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "FLSA_NO="+tmp_fgsa_no+" AND SN_NO="+tmp_sn_no+" AND SN_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							queryString2 = "SELECT LOA_REF_NO FROM FMS7_LOA_MST WHERE CUSTOMER_CD="+tmp_cust_cd+" AND " +
									   	   "TENDER_NO="+tmp_fgsa_no+" AND LOA_NO="+tmp_sn_no+" AND LOA_REF_NO IS NOT NULL";
							rset2 = stmt2.executeQuery(queryString2);
							if(rset2.next())
							{
								contract_no = rset2.getString(1);
								if(contract_no.trim().equals(""))
								{
									contract_no = tmp_sn_no;
								}
							}
							else
							{
								contract_no = tmp_sn_no;
							}
						}
						
						if(cont_type.equalsIgnoreCase("S"))
						{
							contract_name = "SN-"+contract_no;
							//SEGMENT_NAME.add("Sales");
						}
						else if(cont_type.equalsIgnoreCase("L"))
						{
							contract_name = "LOA-"+contract_no;
							//SEGMENT_NAME.add("LOA");
						}
						else if(cont_type.equalsIgnoreCase("R"))
						{
							contract_name = "RE-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("Regas");
						}else if(cont_type.equalsIgnoreCase("C"))
						{
							contract_name = "CN-"+(rset.getString(17)==null?"":rset.getString(17))+" ("+(rset.getString(15)==null?"":rset.getString(15))+")";
							//SEGMENT_NAME.add("CN");
						}else{
							//SEGMENT_NAME.add("");
						}
						/*Vcrdr_sn_no.add(contract_name);
						Vcrdr_sn_rev_no.add(rset.getString(14)==null?"":rset.getString(14));
						Vcrdr_fgsa_no.add(rset.getString(15)==null?"":rset.getString(15));
						Vcrdr_fgsa_rev_no.add(rset.getString(16)==null?"":rset.getString(16));*/
						DLNG_Vcrdr_contract_type.add(rset.getString(18)==null?"":rset.getString(18));
						DLNG_Vcrdr_no.add(rset.getString(20)==null?"":rset.getString(20));
						DLNG_Vcrdr_criteria.add(rset.getString(22)==null?"":rset.getString(22));
						DLNG_Vcrdr_SUN_aprv_flag.add(rset.getString(23)==null?"":rset.getString(23));
						DLNG_Vcrdr_SUN_aprv_by.add(rset.getString(24)==null?"":rset.getString(24));
						DLNG_Vcrdr_SUN_aprv_dt.add(rset.getString(25)==null?"":rset.getString(25));
						DLNG_Vcrdr_flag.add(rset.getString(26)==null?"":rset.getString(26));
						DLNG_VDR_CR_DOC_NO.add(rset.getString(27)==null?"":rset.getString(27));
					}
				}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Databean_Accounting--->fetch_Stock_Details()-->"+e.getMessage());
			e.printStackTrace();
		}
	
	}
	Vector Vinvoice_FLag=new Vector(); 
	Vector Vmapping_id=new Vector();
	Vector Vcrdr_inv_seq_no=new Vector();
	Vector Vcrdr_inv_dt=new Vector();
	Vector Vcrdr_inv_total_qty=new Vector();
	Vector Vcrdr_inv_gross_amt_USD=new Vector();
	Vector Vcrdr_inv_gross_amt_INR=new Vector();
	Vector Vcrdr_inv_net_amt_INR=new Vector();
	Vector Vcrdr_inv_financial_year=new Vector();
	Vector Vcrdr_financial_year=new Vector();
	Vector Vcrdr_sn_no=new Vector();
	Vector Vcrdr_sn_rev_no=new Vector();
	Vector Vcrdr_fgsa_no=new Vector();
	Vector Vcrdr_fgsa_rev_no=new Vector(); 
	Vector Vcrdr_no=new Vector();
	Vector Vcrdr_criteria=new Vector();
	Vector Vcrdr_SUN_aprv_flag=new Vector();
	Vector Vcrdr_SUN_aprv_by=new Vector();
	Vector Vcrdr_SUN_aprv_dt=new Vector();
	Vector Vcrdr_flag=new Vector(); 
	Vector VDR_CR_DOC_NO = new Vector();
	Vector XML_GEN_FLAG_DRCR=new Vector();
	Vector DLNG_Vmapping_id=new Vector();
	public Vector getDLNG_Vmapping_id() {
		return DLNG_Vmapping_id;
	}

	public void setDLNG_Vmapping_id(Vector dLNG_Vmapping_id) {
		DLNG_Vmapping_id = dLNG_Vmapping_id;
	}

	Vector DLNG_Vcrdr_inv_seq_no=new Vector();
	Vector DLNG_Vcrdr_inv_dt=new Vector();
	Vector DLNG_Vcrdr_inv_total_qty=new Vector();
	Vector DLNG_Vcrdr_inv_gross_amt_USD=new Vector();
	Vector DLNG_Vcrdr_cost_center=new Vector();
	Vector DLNG_Vcrdr_inv_gross_amt_INR=new Vector();
	Vector DLNG_Vcrdr_inv_net_amt_INR=new Vector();
	Vector DLNG_Vcrdr_inv_financial_year=new Vector();
	Vector DLNG_Vcrdr_no=new Vector();
	Vector DLNG_Vcrdr_criteria=new Vector();
	Vector DLNG_Vcrdr_SUN_aprv_flag=new Vector();
	Vector DLNG_Vcrdr_SUN_aprv_by=new Vector();
	Vector DLNG_Vcrdr_SUN_aprv_dt=new Vector();
	Vector DLNG_Vcrdr_flag=new Vector(); 
	Vector DLNG_VDR_CR_DOC_NO = new Vector();
	
	public Vector getVinvoice_FLag() {return Vinvoice_FLag;}
	public Vector getVcrdr_criteria() {return Vcrdr_criteria;}
	public Vector getVcrdr_inv_seq_no() {return Vcrdr_inv_seq_no;}
	public Vector getVcrdr_inv_dt() {return Vcrdr_inv_dt;}
	public Vector getVcrdr_no() {return Vcrdr_no;}
	Vector Vcrdr_contract_type=new Vector();
	Vector DLNG_Vcrdr_contract_type=new Vector();
	public Vector getDLNG_NEW_INV_SEQ_NO_CRDR() {
		return DLNG_NEW_INV_SEQ_NO_CRDR;
	}

	public void setDLNG_NEW_INV_SEQ_NO_CRDR(Vector dLNG_NEW_INV_SEQ_NO_CRDR) {
		DLNG_NEW_INV_SEQ_NO_CRDR = dLNG_NEW_INV_SEQ_NO_CRDR;
	}

	public Vector getDLNG_Vcrdr_inv_seq_no() {
		return DLNG_Vcrdr_inv_seq_no;
	}

	public void setDLNG_Vcrdr_inv_seq_no(Vector dLNG_Vcrdr_inv_seq_no) {
		DLNG_Vcrdr_inv_seq_no = dLNG_Vcrdr_inv_seq_no;
	}

	public Vector getDLNG_Vcrdr_inv_dt() {
		return DLNG_Vcrdr_inv_dt;
	}

	public void setDLNG_Vcrdr_inv_dt(Vector dLNG_Vcrdr_inv_dt) {
		DLNG_Vcrdr_inv_dt = dLNG_Vcrdr_inv_dt;
	}

	public Vector getDLNG_Vcrdr_inv_total_qty() {
		return DLNG_Vcrdr_inv_total_qty;
	}

	public void setDLNG_Vcrdr_inv_total_qty(Vector dLNG_Vcrdr_inv_total_qty) {
		DLNG_Vcrdr_inv_total_qty = dLNG_Vcrdr_inv_total_qty;
	}

	public Vector getDLNG_Vcrdr_inv_gross_amt_USD() {
		return DLNG_Vcrdr_inv_gross_amt_USD;
	}

	public void setDLNG_Vcrdr_inv_gross_amt_USD(Vector dLNG_Vcrdr_inv_gross_amt_USD) {
		DLNG_Vcrdr_inv_gross_amt_USD = dLNG_Vcrdr_inv_gross_amt_USD;
	}

	public Vector getDLNG_Vcrdr_inv_gross_amt_INR() {
		return DLNG_Vcrdr_inv_gross_amt_INR;
	}

	public void setDLNG_Vcrdr_inv_gross_amt_INR(Vector dLNG_Vcrdr_inv_gross_amt_INR) {
		DLNG_Vcrdr_inv_gross_amt_INR = dLNG_Vcrdr_inv_gross_amt_INR;
	}

	public Vector getDLNG_Vcrdr_inv_net_amt_INR() {
		return DLNG_Vcrdr_inv_net_amt_INR;
	}

	public void setDLNG_Vcrdr_inv_net_amt_INR(Vector dLNG_Vcrdr_inv_net_amt_INR) {
		DLNG_Vcrdr_inv_net_amt_INR = dLNG_Vcrdr_inv_net_amt_INR;
	}

	public Vector getDLNG_Vcrdr_inv_financial_year() {
		return DLNG_Vcrdr_inv_financial_year;
	}

	public void setDLNG_Vcrdr_inv_financial_year(Vector dLNG_Vcrdr_inv_financial_year) {
		DLNG_Vcrdr_inv_financial_year = dLNG_Vcrdr_inv_financial_year;
	}

	public Vector getDLNG_Vcrdr_no() {
		return DLNG_Vcrdr_no;
	}

	public void setDLNG_Vcrdr_no(Vector dLNG_Vcrdr_no) {
		DLNG_Vcrdr_no = dLNG_Vcrdr_no;
	}

	public Vector getDLNG_Vcrdr_criteria() {
		return DLNG_Vcrdr_criteria;
	}

	public void setDLNG_Vcrdr_criteria(Vector dLNG_Vcrdr_criteria) {
		DLNG_Vcrdr_criteria = dLNG_Vcrdr_criteria;
	}

	public Vector getDLNG_Vcrdr_SUN_aprv_flag() {
		return DLNG_Vcrdr_SUN_aprv_flag;
	}

	public void setDLNG_Vcrdr_SUN_aprv_flag(Vector dLNG_Vcrdr_SUN_aprv_flag) {
		DLNG_Vcrdr_SUN_aprv_flag = dLNG_Vcrdr_SUN_aprv_flag;
	}

	public Vector getDLNG_Vcrdr_SUN_aprv_by() {
		return DLNG_Vcrdr_SUN_aprv_by;
	}

	public void setDLNG_Vcrdr_SUN_aprv_by(Vector dLNG_Vcrdr_SUN_aprv_by) {
		DLNG_Vcrdr_SUN_aprv_by = dLNG_Vcrdr_SUN_aprv_by;
	}

	public Vector getDLNG_Vcrdr_SUN_aprv_dt() {
		return DLNG_Vcrdr_SUN_aprv_dt;
	}

	public void setDLNG_Vcrdr_SUN_aprv_dt(Vector dLNG_Vcrdr_SUN_aprv_dt) {
		DLNG_Vcrdr_SUN_aprv_dt = dLNG_Vcrdr_SUN_aprv_dt;
	}

	public Vector getDLNG_Vcrdr_flag() {
		return DLNG_Vcrdr_flag;
	}

	public void setDLNG_Vcrdr_flag(Vector dLNG_Vcrdr_flag) {
		DLNG_Vcrdr_flag = dLNG_Vcrdr_flag;
	}

	public Vector getDLNG_VDR_CR_DOC_NO() {
		return DLNG_VDR_CR_DOC_NO;
	}

	public void setDLNG_VDR_CR_DOC_NO(Vector dLNG_VDR_CR_DOC_NO) {
		DLNG_VDR_CR_DOC_NO = dLNG_VDR_CR_DOC_NO;
	}

	public Vector getDLNG_Vcrdr_contract_type() {
		return DLNG_Vcrdr_contract_type;
	}

	public void setDLNG_Vcrdr_contract_type(Vector dLNG_Vcrdr_contract_type) {
		DLNG_Vcrdr_contract_type = dLNG_Vcrdr_contract_type;
	}

	public Vector getVcrdr_inv_total_qty() {return Vcrdr_inv_total_qty;}
	public Vector getVcrdr_inv_gross_amt_USD() {return Vcrdr_inv_gross_amt_USD;}
	public Vector getVcrdr_inv_gross_amt_INR() {return Vcrdr_inv_gross_amt_INR;}
	public Vector getVcrdr_inv_net_amt_INR() {return Vcrdr_inv_net_amt_INR;}
	public Vector getVcrdr_inv_financial_year() {return Vcrdr_inv_financial_year;}
	public Vector getVcrdr_SUN_aprv_flag() {return Vcrdr_SUN_aprv_flag;}
	public Vector getVcrdr_SUN_aprv_by() {return Vcrdr_SUN_aprv_by;}
	public Vector getVcrdr_SUN_aprv_dt() {return Vcrdr_SUN_aprv_dt;}
	public Vector getVmapping_id() {return Vmapping_id;}
	public Vector getVcrdr_contract_type() {return Vcrdr_contract_type;}
	public Vector getVcrdr_flag() {return Vcrdr_flag;}
////////////////////////////////////////////////////////////////////////////////////	

	public Vector getSug_hlpl_inv_seq_no() {
		return sug_hlpl_inv_seq_no;
	}

	public void setSug_hlpl_inv_seq_no(Vector sug_hlpl_inv_seq_no) {
		this.sug_hlpl_inv_seq_no = sug_hlpl_inv_seq_no;
	}

	public Vector getSug_invoice_dt() {
		return sug_invoice_dt;
	}

	public void setSug_invoice_dt(Vector sug_invoice_dt) {
		this.sug_invoice_dt = sug_invoice_dt;
	}

	public Vector getSug_period_start_dt() {
		return sug_period_start_dt;
	}

	public void setSug_period_start_dt(Vector sug_period_start_dt) {
		this.sug_period_start_dt = sug_period_start_dt;
	}

	public Vector getSug_period_end_dt() {
		return sug_period_end_dt;
	}

	public void setSug_period_end_dt(Vector sug_period_end_dt) {
		this.sug_period_end_dt = sug_period_end_dt;
	}

	public Vector getSug_sale_price() {
		return sug_sale_price;
	}

	public void setSug_sale_price(Vector sug_sale_price) {
		this.sug_sale_price = sug_sale_price;
	}

	public Vector getSug_due_dt() {
		return sug_due_dt;
	}

	public void setSug_due_dt(Vector sug_due_dt) {
		this.sug_due_dt = sug_due_dt;
	}

	public Vector getSug_total_qty() {
		return sug_total_qty;
	}

	public void setSug_total_qty(Vector sug_total_qty) {
		this.sug_total_qty = sug_total_qty;
	}

	public Vector getSug_gross_amt_inr() {
		return sug_gross_amt_inr;
	}

	public void setSug_gross_amt_inr(Vector sug_gross_amt_inr) {
		this.sug_gross_amt_inr = sug_gross_amt_inr;
	}

	public Vector getSug_net_amt_inr() {
		return sug_net_amt_inr;
	}

	public void setSug_net_amt_inr(Vector sug_net_amt_inr) {
		this.sug_net_amt_inr = sug_net_amt_inr;
	}

	public Vector getSug_financial_year() {
		return sug_financial_year;
	}

	public void setSug_financial_year(Vector sug_financial_year) {
		this.sug_financial_year = sug_financial_year;
	}

	public Vector getSug_customer_cd() {
		return sug_customer_cd;
	}

	public void setSug_customer_cd(Vector sug_customer_cd) {
		this.sug_customer_cd = sug_customer_cd;
	}

	public Vector getSug_tax_struct_cd() {
		return sug_tax_struct_cd;
	}

	public void setSug_tax_struct_cd(Vector sug_tax_struct_cd) {
		this.sug_tax_struct_cd = sug_tax_struct_cd;
	}

	public Vector getSug_sn_no() {
		return sug_sn_no;
	}

	public void setSug_sn_no(Vector sug_sn_no) {
		this.sug_sn_no = sug_sn_no;
	}

	public Vector getSug_sn_rev_no() {
		return sug_sn_rev_no;
	}

	public void setSug_sn_rev_no(Vector sug_sn_rev_no) {
		this.sug_sn_rev_no = sug_sn_rev_no;
	}

	public Vector getSug_fgsa_no() {
		return sug_fgsa_no;
	}

	public void setSug_fgsa_no(Vector sug_fgsa_no) {
		this.sug_fgsa_no = sug_fgsa_no;
	}

	public Vector getSug_fgsa_rev_no() {
		return sug_fgsa_rev_no;
	}

	public void setSug_fgsa_rev_no(Vector sug_fgsa_rev_no) {
		this.sug_fgsa_rev_no = sug_fgsa_rev_no;
	}

	public Vector getSug_invoice_month() {
		return sug_invoice_month;
	}

	public void setSug_invoice_month(Vector sug_invoice_month) {
		this.sug_invoice_month = sug_invoice_month;
	}

	public Vector getSug_contract_type() {
		return sug_contract_type;
	}

	public void setSug_contract_type(Vector sug_contract_type) {
		this.sug_contract_type = sug_contract_type;
	}

	public Vector getSug_contact_person_cd() {
		return sug_contact_person_cd;
	}

	public void setSug_contact_person_cd(Vector sug_contact_person_cd) {
		this.sug_contact_person_cd = sug_contact_person_cd;
	}

	public Vector getSug_tax_amt_inr() {
		return sug_tax_amt_inr;
	}

	public void setSug_tax_amt_inr(Vector sug_tax_amt_inr) {
		this.sug_tax_amt_inr = sug_tax_amt_inr;
	}

	public Vector getSug_plant_seq_no() {
		return sug_plant_seq_no;
	}

	public void setSug_plant_seq_no(Vector sug_plant_seq_no) {
		this.sug_plant_seq_no = sug_plant_seq_no;
	}

	public Vector getSug_tax_flag() {
		return sug_tax_flag;
	}

	public void setSug_tax_flag(Vector sug_tax_flag) {
		this.sug_tax_flag = sug_tax_flag;
	}

	public Vector getSug_cust_inv_seq_no() {
		return sug_cust_inv_seq_no;
	}

	public void setSug_cust_inv_seq_no(Vector sug_cust_inv_seq_no) {
		this.sug_cust_inv_seq_no = sug_cust_inv_seq_no;
	}

	public Vector getSug_sun_approval() {
		return sug_sun_approval;
	}

	public void setSug_sun_approval(Vector sug_sun_approval) {
		this.sug_sun_approval = sug_sun_approval;
	}

	public Vector getSug_mapping_id() {
		return sug_mapping_id;
	}

	public void setSug_mapping_id(Vector sug_mapping_id) {
		this.sug_mapping_id = sug_mapping_id;
	}

	public Vector getSug_customer_name() {
		return sug_customer_name;
	}

	public void setSug_customer_name(Vector sug_customer_name) {
		this.sug_customer_name = sug_customer_name;
	}

	public void setSug_inr_mmbtu(String sug_inr_mmbtu) {
		Sug_inr_mmbtu = sug_inr_mmbtu;
	}

	public Vector getSug_qty() {
		return sug_qty;
	}

	public void setSug_qty(Vector sug_qty) {
		this.sug_qty = sug_qty;
	}

	public Vector getSug_customer_Invoice_Tax_Code() {
		return sug_customer_Invoice_Tax_Code;
	}

	public void setSug_customer_Invoice_Tax_Code(Vector sug_customer_Invoice_Tax_Code) {
		this.sug_customer_Invoice_Tax_Code = sug_customer_Invoice_Tax_Code;
	}

	public Vector getSug_customer_Invoice_Tax_Amt() {
		return sug_customer_Invoice_Tax_Amt;
	}

	public void setSug_customer_Invoice_Tax_Amt(Vector sug_customer_Invoice_Tax_Amt) {
		this.sug_customer_Invoice_Tax_Amt = sug_customer_Invoice_Tax_Amt;
	}

	public Vector getSug_customer_Invoice_Tax_Name() {
		return sug_customer_Invoice_Tax_Name;
	}

	public void setSug_customer_Invoice_Tax_Name(Vector sug_customer_Invoice_Tax_Name) {
		this.sug_customer_Invoice_Tax_Name = sug_customer_Invoice_Tax_Name;
	}

	public Vector getSug_customer_Invoice_Tax_Rate() {
		return sug_customer_Invoice_Tax_Rate;
	}

	public void setSug_customer_Invoice_Tax_Rate(Vector sug_customer_Invoice_Tax_Rate) {
		this.sug_customer_Invoice_Tax_Rate = sug_customer_Invoice_Tax_Rate;
	}

	public Vector getSug_customer_Invoice_Tax_Abbr() {
		return sug_customer_Invoice_Tax_Abbr;
	}

	public void setSug_customer_Invoice_Tax_Abbr(Vector sug_customer_Invoice_Tax_Abbr) {
		this.sug_customer_Invoice_Tax_Abbr = sug_customer_Invoice_Tax_Abbr;
	}

	public Map getSug_customer_tax_cd() {
		return sug_customer_tax_cd;
	}

	public void setSug_customer_tax_cd(Map sug_customer_tax_cd) {
		this.sug_customer_tax_cd = sug_customer_tax_cd;
	}

	public Map getSug_customer_tax_amt() {
		return sug_customer_tax_amt;
	}

	public void setSug_customer_tax_amt(Map sug_customer_tax_amt) {
		this.sug_customer_tax_amt = sug_customer_tax_amt;
	}

	public Map getSug_customer_tax_name() {
		return sug_customer_tax_name;
	}

	public void setSug_customer_tax_name(Map sug_customer_tax_name) {
		this.sug_customer_tax_name = sug_customer_tax_name;
	}

	public Map getSug_customer_tax_abbr() {
		return sug_customer_tax_abbr;
	}

	public void setSug_customer_tax_abbr(Map sug_customer_tax_abbr) {
		this.sug_customer_tax_abbr = sug_customer_tax_abbr;
	}

	public Map getSug_customer_tax_rate() {
		return sug_customer_tax_rate;
	}

	public void setSug_customer_tax_rate(Map sug_customer_tax_rate) {
		this.sug_customer_tax_rate = sug_customer_tax_rate;
	}

	public Vector getSug_XML_GEN_FLAG() {
		return sug_XML_GEN_FLAG;
	}

	public void setSug_XML_GEN_FLAG(Vector sug_XML_GEN_FLAG) {
		this.sug_XML_GEN_FLAG = sug_XML_GEN_FLAG;
	}

	public Vector getIGST_TAX() {
		return IGST_TAX;
	}

	public void setIGST_TAX(Vector iGST_TAX) {
		IGST_TAX = iGST_TAX;
	}

	public Vector getIGST_TAX_USD() {
		return IGST_TAX_USD;
	}

	public void setIGST_TAX_USD(Vector iGST_TAX_USD) {
		IGST_TAX_USD = iGST_TAX_USD;
	}

	public Vector getIGST_TAX_NUMERIC() {
		return IGST_TAX_NUMERIC;
	}

	public void setIGST_TAX_NUMERIC(Vector iGST_TAX_NUMERIC) {
		IGST_TAX_NUMERIC = iGST_TAX_NUMERIC;
	}

	public Vector getIGST_TAX_USD_NUMERIC() {
		return IGST_TAX_USD_NUMERIC;
	}

	public void setIGST_TAX_USD_NUMERIC(Vector iGST_TAX_USD_NUMERIC) {
		IGST_TAX_USD_NUMERIC = iGST_TAX_USD_NUMERIC;
	}

	public Vector getSGST_TAX() {
		return SGST_TAX;
	}

	public void setSGST_TAX(Vector sGST_TAX) {
		SGST_TAX = sGST_TAX;
	}

	public Vector getSGST_TAX_USD() {
		return SGST_TAX_USD;
	}

	public void setSGST_TAX_USD(Vector sGST_TAX_USD) {
		SGST_TAX_USD = sGST_TAX_USD;
	}

	public Vector getSGST_TAX_NUMERIC() {
		return SGST_TAX_NUMERIC;
	}

	public void setSGST_TAX_NUMERIC(Vector sGST_TAX_NUMERIC) {
		SGST_TAX_NUMERIC = sGST_TAX_NUMERIC;
	}

	public Vector getSGST_TAX_USD_NUMERIC() {
		return SGST_TAX_USD_NUMERIC;
	}

	public void setSGST_TAX_USD_NUMERIC(Vector sGST_TAX_USD_NUMERIC) {
		SGST_TAX_USD_NUMERIC = sGST_TAX_USD_NUMERIC;
	}

	public Vector getCGST_TAX() {
		return CGST_TAX;
	}

	public void setCGST_TAX(Vector cGST_TAX) {
		CGST_TAX = cGST_TAX;
	}

	public Vector getCGST_TAX_USD() {
		return CGST_TAX_USD;
	}

	public void setCGST_TAX_USD(Vector cGST_TAX_USD) {
		CGST_TAX_USD = cGST_TAX_USD;
	}

	public Vector getCGST_TAX_NUMERIC() {
		return CGST_TAX_NUMERIC;
	}

	public void setCGST_TAX_NUMERIC(Vector cGST_TAX_NUMERIC) {
		CGST_TAX_NUMERIC = cGST_TAX_NUMERIC;
	}

	public Vector getCGST_TAX_USD_NUMERIC() {
		return CGST_TAX_USD_NUMERIC;
	}

	public void setCGST_TAX_USD_NUMERIC(Vector cGST_TAX_USD_NUMERIC) {
		CGST_TAX_USD_NUMERIC = cGST_TAX_USD_NUMERIC;
	}

	public Vector getZGST_TAX() {
		return ZGST_TAX;
	}

	public void setZGST_TAX(Vector zGST_TAX) {
		ZGST_TAX = zGST_TAX;
	}

	public Vector getZGST_TAX_USD() {
		return ZGST_TAX_USD;
	}

	public void setZGST_TAX_USD(Vector zGST_TAX_USD) {
		ZGST_TAX_USD = zGST_TAX_USD;
	}

	public Vector getZGST_TAX_NUMERIC() {
		return ZGST_TAX_NUMERIC;
	}

	public void setZGST_TAX_NUMERIC(Vector zGST_TAX_NUMERIC) {
		ZGST_TAX_NUMERIC = zGST_TAX_NUMERIC;
	}

	public Vector getZGST_TAX_USD_NUMERIC() {
		return ZGST_TAX_USD_NUMERIC;
	}

	public void setZGST_TAX_USD_NUMERIC(Vector zGST_TAX_USD_NUMERIC) {
		ZGST_TAX_USD_NUMERIC = zGST_TAX_USD_NUMERIC;
	}

	public double getSales_igst_tax_inr_total() {
		return sales_igst_tax_inr_total;
	}

	public void setSales_igst_tax_inr_total(double sales_igst_tax_inr_total) {
		this.sales_igst_tax_inr_total = sales_igst_tax_inr_total;
	}

	public double getSales_sgst_tax_inr_total() {
		return sales_sgst_tax_inr_total;
	}

	public void setSales_sgst_tax_inr_total(double sales_sgst_tax_inr_total) {
		this.sales_sgst_tax_inr_total = sales_sgst_tax_inr_total;
	}

	public double getSales_cgst_tax_inr_total() {
		return sales_cgst_tax_inr_total;
	}

	public void setSales_cgst_tax_inr_total(double sales_cgst_tax_inr_total) {
		this.sales_cgst_tax_inr_total = sales_cgst_tax_inr_total;
	}

	public double getSales_zgst_tax_inr_total() {
		return sales_zgst_tax_inr_total;
	}

	public void setSales_zgst_tax_inr_total(double sales_zgst_tax_inr_total) {
		this.sales_zgst_tax_inr_total = sales_zgst_tax_inr_total;
	}

	public double getSales_igst_tax_usd_total() {
		return sales_igst_tax_usd_total;
	}

	public void setSales_igst_tax_usd_total(double sales_igst_tax_usd_total) {
		this.sales_igst_tax_usd_total = sales_igst_tax_usd_total;
	}

	public double getSales_cgst_tax_usd_total() {
		return sales_cgst_tax_usd_total;
	}

	public void setSales_cgst_tax_usd_total(double sales_cgst_tax_usd_total) {
		this.sales_cgst_tax_usd_total = sales_cgst_tax_usd_total;
	}

	public double getSales_sgst_tax_usd_total() {
		return sales_sgst_tax_usd_total;
	}

	public void setSales_sgst_tax_usd_total(double sales_sgst_tax_usd_total) {
		this.sales_sgst_tax_usd_total = sales_sgst_tax_usd_total;
	}

	public double getSales_zgst_tax_usd_total() {
		return sales_zgst_tax_usd_total;
	}

	public void setSales_zgst_tax_usd_total(double sales_zgst_tax_usd_total) {
		this.sales_zgst_tax_usd_total = sales_zgst_tax_usd_total;
	}

	public double getRegas_igst_tax_inr_total() {
		return regas_igst_tax_inr_total;
	}

	public void setRegas_igst_tax_inr_total(double regas_igst_tax_inr_total) {
		this.regas_igst_tax_inr_total = regas_igst_tax_inr_total;
	}

	public double getRegas_sgst_tax_inr_total() {
		return regas_sgst_tax_inr_total;
	}

	public void setRegas_sgst_tax_inr_total(double regas_sgst_tax_inr_total) {
		this.regas_sgst_tax_inr_total = regas_sgst_tax_inr_total;
	}

	public double getRegas_cgst_tax_inr_total() {
		return regas_cgst_tax_inr_total;
	}

	public void setRegas_cgst_tax_inr_total(double regas_cgst_tax_inr_total) {
		this.regas_cgst_tax_inr_total = regas_cgst_tax_inr_total;
	}

	public double getRegas_zgst_tax_inr_total() {
		return regas_zgst_tax_inr_total;
	}

	public void setRegas_zgst_tax_inr_total(double regas_zgst_tax_inr_total) {
		this.regas_zgst_tax_inr_total = regas_zgst_tax_inr_total;
	}

	public double getRegas_igst_tax_usd_total() {
		return regas_igst_tax_usd_total;
	}

	public void setRegas_igst_tax_usd_total(double regas_igst_tax_usd_total) {
		this.regas_igst_tax_usd_total = regas_igst_tax_usd_total;
	}

	public double getRegas_sgst_tax_usd_total() {
		return regas_sgst_tax_usd_total;
	}

	public void setRegas_sgst_tax_usd_total(double regas_sgst_tax_usd_total) {
		this.regas_sgst_tax_usd_total = regas_sgst_tax_usd_total;
	}

	public double getRegas_cgst_tax_usd_total() {
		return regas_cgst_tax_usd_total;
	}

	public void setRegas_cgst_tax_usd_total(double regas_cgst_tax_usd_total) {
		this.regas_cgst_tax_usd_total = regas_cgst_tax_usd_total;
	}

	public double getRegas_zgst_tax_usd_total() {
		return regas_zgst_tax_usd_total;
	}

	public void setRegas_zgst_tax_usd_total(double regas_zgst_tax_usd_total) {
		this.regas_zgst_tax_usd_total = regas_zgst_tax_usd_total;
	}

	public double getLTCORA_CN_igst_tax_usd_total() {
		return LTCORA_CN_igst_tax_usd_total;
	}

	public void setLTCORA_CN_igst_tax_usd_total(double lTCORA_CN_igst_tax_usd_total) {
		LTCORA_CN_igst_tax_usd_total = lTCORA_CN_igst_tax_usd_total;
	}

	public double getLTCORA_CN_sgst_tax_usd_total() {
		return LTCORA_CN_sgst_tax_usd_total;
	}

	public void setLTCORA_CN_sgst_tax_usd_total(double lTCORA_CN_sgst_tax_usd_total) {
		LTCORA_CN_sgst_tax_usd_total = lTCORA_CN_sgst_tax_usd_total;
	}

	public double getLTCORA_CN_cgst_tax_usd_total() {
		return LTCORA_CN_cgst_tax_usd_total;
	}

	public void setLTCORA_CN_cgst_tax_usd_total(double lTCORA_CN_cgst_tax_usd_total) {
		LTCORA_CN_cgst_tax_usd_total = lTCORA_CN_cgst_tax_usd_total;
	}

	public double getLTCORA_CN_zgst_tax_usd_total() {
		return LTCORA_CN_zgst_tax_usd_total;
	}

	public void setLTCORA_CN_zgst_tax_usd_total(double lTCORA_CN_zgst_tax_usd_total) {
		LTCORA_CN_zgst_tax_usd_total = lTCORA_CN_zgst_tax_usd_total;
	}

	public double getLTCORA_CN_igst_tax_inr_total() {
		return LTCORA_CN_igst_tax_inr_total;
	}

	public void setLTCORA_CN_igst_tax_inr_total(double lTCORA_CN_igst_tax_inr_total) {
		LTCORA_CN_igst_tax_inr_total = lTCORA_CN_igst_tax_inr_total;
	}

	public double getLTCORA_CN_sgst_tax_inr_total() {
		return LTCORA_CN_sgst_tax_inr_total;
	}

	public void setLTCORA_CN_sgst_tax_inr_total(double lTCORA_CN_sgst_tax_inr_total) {
		LTCORA_CN_sgst_tax_inr_total = lTCORA_CN_sgst_tax_inr_total;
	}

	public double getLTCORA_CN_cgst_tax_inr_total() {
		return LTCORA_CN_cgst_tax_inr_total;
	}

	public void setLTCORA_CN_cgst_tax_inr_total(double lTCORA_CN_cgst_tax_inr_total) {
		LTCORA_CN_cgst_tax_inr_total = lTCORA_CN_cgst_tax_inr_total;
	}

	public double getLTCORA_CN_zgst_tax_inr_total() {
		return LTCORA_CN_zgst_tax_inr_total;
	}

	public void setLTCORA_CN_zgst_tax_inr_total(double lTCORA_CN_zgst_tax_inr_total) {
		LTCORA_CN_zgst_tax_inr_total = lTCORA_CN_zgst_tax_inr_total;
	}

	public Vector getNEW_INV_SEQ_NO() {
		return NEW_INV_SEQ_NO;
	}

	public void setNEW_INV_SEQ_NO(Vector nEW_INV_SEQ_NO) {
		NEW_INV_SEQ_NO = nEW_INV_SEQ_NO;
	}

	public Vector getSUMMRY_IGST_TAX_USD() {
		return SUMMRY_IGST_TAX_USD;
	}

	public void setSUMMRY_IGST_TAX_USD(Vector sUMMRY_IGST_TAX_USD) {
		SUMMRY_IGST_TAX_USD = sUMMRY_IGST_TAX_USD;
	}

	public Vector getSUMMRY_CGST_TAX_USD() {
		return SUMMRY_CGST_TAX_USD;
	}

	public void setSUMMRY_CGST_TAX_USD(Vector sUMMRY_CGST_TAX_USD) {
		SUMMRY_CGST_TAX_USD = sUMMRY_CGST_TAX_USD;
	}

	public Vector getSUMMRY_SGST_TAX_USD() {
		return SUMMRY_SGST_TAX_USD;
	}

	public void setSUMMRY_SGST_TAX_USD(Vector sUMMRY_SGST_TAX_USD) {
		SUMMRY_SGST_TAX_USD = sUMMRY_SGST_TAX_USD;
	}

	public Vector getSUMMRY_ZGST_TAX_USD() {
		return SUMMRY_ZGST_TAX_USD;
	}

	public void setSUMMRY_ZGST_TAX_USD(Vector sUMMRY_ZGST_TAX_USD) {
		SUMMRY_ZGST_TAX_USD = sUMMRY_ZGST_TAX_USD;
	}

	public Vector getSUMMRY_IGST_TAX() {
		return SUMMRY_IGST_TAX;
	}

	public void setSUMMRY_IGST_TAX(Vector sUMMRY_IGST_TAX) {
		SUMMRY_IGST_TAX = sUMMRY_IGST_TAX;
	}

	public Vector getSUMMRY_CGST_TAX() {
		return SUMMRY_CGST_TAX;
	}

	public void setSUMMRY_CGST_TAX(Vector sUMMRY_CGST_TAX) {
		SUMMRY_CGST_TAX = sUMMRY_CGST_TAX;
	}

	public Vector getSUMMRY_SGST_TAX() {
		return SUMMRY_SGST_TAX;
	}

	public void setSUMMRY_SGST_TAX(Vector sUMMRY_SGST_TAX) {
		SUMMRY_SGST_TAX = sUMMRY_SGST_TAX;
	}

	public Vector getSUMMRY_ZGST_TAX() {
		return SUMMRY_ZGST_TAX;
	}

	public void setSUMMRY_ZGST_TAX(Vector sUMMRY_ZGST_TAX) {
		SUMMRY_ZGST_TAX = sUMMRY_ZGST_TAX;
	}

	public Vector getVDR_CR_DOC_NO() {
		return VDR_CR_DOC_NO;
	}

	public void setVDR_CR_DOC_NO(Vector vDR_CR_DOC_NO) {
		VDR_CR_DOC_NO = vDR_CR_DOC_NO;
	}

	public Vector getSug_new_inv_seq_no() {
		return sug_new_inv_seq_no;
	}

	public void setSug_new_inv_seq_no(Vector sug_new_inv_seq_no) {
		this.sug_new_inv_seq_no = sug_new_inv_seq_no;
	}

	public String getInvoice_type() {
		return invoice_type;
	}

	public void setInvoice_type(String invoice_type) {
		this.invoice_type = invoice_type;
	}

	public Vector getGSTIN_NO() {
		return GSTIN_NO;
	}

	public void setGSTIN_NO(Vector gSTIN_NO) {
		GSTIN_NO = gSTIN_NO;
	}

	public Vector getSac_code() {
		return sac_code;
	}

	public void setSac_code(Vector sac_code) {
		this.sac_code = sac_code;
	}

	public Vector getTAX_RATE_CGST() {
		return TAX_RATE_CGST;
	}

	public void setTAX_RATE_CGST(Vector tAX_RATE_CGST) {
		TAX_RATE_CGST = tAX_RATE_CGST;
	}

	public Vector getTAX_RATE_SGST() {
		return TAX_RATE_SGST;
	}

	public void setTAX_RATE_SGST(Vector tAX_RATE_SGST) {
		TAX_RATE_SGST = tAX_RATE_SGST;
	}

	public Vector getTAX_RATE_IGST() {
		return TAX_RATE_IGST;
	}

	public void setTAX_RATE_IGST(Vector tAX_RATE_IGST) {
		TAX_RATE_IGST = tAX_RATE_IGST;
	}

	public Vector getPOS_STATE() {
		return POS_STATE;
	}

	public void setPOS_STATE(Vector pOS_STATE) {
		POS_STATE = pOS_STATE;
	}

	public Vector getCR_DR_NEW_INV_SEQ_NO() {
		return CR_DR_NEW_INV_SEQ_NO;
	}

	public void setCR_DR_NEW_INV_SEQ_NO(Vector cR_DR_NEW_INV_SEQ_NO) {
		CR_DR_NEW_INV_SEQ_NO = cR_DR_NEW_INV_SEQ_NO;
	}

	public Vector getInvDt() {
		return InvDt;
	}

	public void setInvDt(Vector invDt) {
		InvDt = invDt;
	}

	public Vector getVcrdr_doc_no() {
		return Vcrdr_doc_no;
	}

	public void setVcrdr_doc_no(Vector vcrdr_doc_no) {
		Vcrdr_doc_no = vcrdr_doc_no;
	}

	public Vector getVCRDR_GSTIN_NO() {
		return VCRDR_GSTIN_NO;
	}

	public void setVCRDR_GSTIN_NO(Vector vCRDR_GSTIN_NO) {
		VCRDR_GSTIN_NO = vCRDR_GSTIN_NO;
	}

	public Vector getIGST_TAX_RATE_CRDR() {
		return IGST_TAX_RATE_CRDR;
	}

	public void setIGST_TAX_RATE_CRDR(Vector iGST_TAX_RATE_CRDR) {
		IGST_TAX_RATE_CRDR = iGST_TAX_RATE_CRDR;
	}

	public Vector getSGST_TAX_RATE_CRDR() {
		return SGST_TAX_RATE_CRDR;
	}

	public void setSGST_TAX_RATE_CRDR(Vector sGST_TAX_RATE_CRDR) {
		SGST_TAX_RATE_CRDR = sGST_TAX_RATE_CRDR;
	}

	public Vector getCGST_TAX_RATE_CRDR() {
		return CGST_TAX_RATE_CRDR;
	}

	public void setCGST_TAX_RATE_CRDR(Vector cGST_TAX_RATE_CRDR) {
		CGST_TAX_RATE_CRDR = cGST_TAX_RATE_CRDR;
	}

	public Vector getZGST_TAX_RATE_CRDR() {
		return ZGST_TAX_RATE_CRDR;
	}

	public void setZGST_TAX_RATE_CRDR(Vector zGST_TAX_RATE_CRDR) {
		ZGST_TAX_RATE_CRDR = zGST_TAX_RATE_CRDR;
	}

	public Vector getIGST_TAX_CRDR() {
		return IGST_TAX_CRDR;
	}

	public void setIGST_TAX_CRDR(Vector iGST_TAX_CRDR) {
		IGST_TAX_CRDR = iGST_TAX_CRDR;
	}

	public Vector getSGST_TAX_CRDR() {
		return SGST_TAX_CRDR;
	}

	public void setSGST_TAX_CRDR(Vector sGST_TAX_CRDR) {
		SGST_TAX_CRDR = sGST_TAX_CRDR;
	}

	public Vector getCGST_TAX_CRDR() {
		return CGST_TAX_CRDR;
	}

	public void setCGST_TAX_CRDR(Vector cGST_TAX_CRDR) {
		CGST_TAX_CRDR = cGST_TAX_CRDR;
	}

	public Vector getZGST_TAX_CRDR() {
		return ZGST_TAX_CRDR;
	}

	public void setZGST_TAX_CRDR(Vector zGST_TAX_CRDR) {
		ZGST_TAX_CRDR = zGST_TAX_CRDR;
	}

	public Vector getVCRDR_DIFF_GROSS_AMT() {
		return VCRDR_DIFF_GROSS_AMT;
	}

	public void setVCRDR_DIFF_GROSS_AMT(Vector vCRDR_DIFF_GROSS_AMT) {
		VCRDR_DIFF_GROSS_AMT = vCRDR_DIFF_GROSS_AMT;
	}

	public Vector getAHLPL_INV_SEQ_NO() {
		return AHLPL_INV_SEQ_NO;
	}

	public void setAHLPL_INV_SEQ_NO(Vector aHLPL_INV_SEQ_NO) {
		AHLPL_INV_SEQ_NO = aHLPL_INV_SEQ_NO;
	}

	public Vector getANEW_INV_SEQ_NO() {
		return ANEW_INV_SEQ_NO;
	}

	public void setANEW_INV_SEQ_NO(Vector aNEW_INV_SEQ_NO) {
		ANEW_INV_SEQ_NO = aNEW_INV_SEQ_NO;
	}

	public Vector getAINVOICE_DT() {
		return AINVOICE_DT;
	}

	public void setAINVOICE_DT(Vector aINVOICE_DT) {
		AINVOICE_DT = aINVOICE_DT;
	}

	public Vector getACUSTOMER_CD() {
		return ACUSTOMER_CD;
	}

	public void setACUSTOMER_CD(Vector aCUSTOMER_CD) {
		ACUSTOMER_CD = aCUSTOMER_CD;
	}

	public Vector getAPLANT_SEQ_NO() {
		return APLANT_SEQ_NO;
	}

	public void setAPLANT_SEQ_NO(Vector aPLANT_SEQ_NO) {
		APLANT_SEQ_NO = aPLANT_SEQ_NO;
	}

	public Vector getATAX_STRUCT_CD() {
		return ATAX_STRUCT_CD;
	}

	public void setATAX_STRUCT_CD(Vector aTAX_STRUCT_CD) {
		ATAX_STRUCT_CD = aTAX_STRUCT_CD;
	}

	public Vector getAGROSS_AMT_INR() {
		return AGROSS_AMT_INR;
	}

	public void setAGROSS_AMT_INR(Vector aGROSS_AMT_INR) {
		AGROSS_AMT_INR = aGROSS_AMT_INR;
	}

	public Vector getAGROSS_AMT_USD() {
		return AGROSS_AMT_USD;
	}

	public void setAGROSS_AMT_USD(Vector aGROSS_AMT_USD) {
		AGROSS_AMT_USD = aGROSS_AMT_USD;
	}

	public Vector getATOTAL_QTY() {
		return ATOTAL_QTY;
	}

	public void setATOTAL_QTY(Vector aTOTAL_QTY) {
		ATOTAL_QTY = aTOTAL_QTY;
	}

	public Vector getAPAY_TYPE() {
		return APAY_TYPE;
	}

	public void setAPAY_TYPE(Vector aPAY_TYPE) {
		APAY_TYPE = aPAY_TYPE;
	}

	public Vector getAPRICE_UNIT() {
		return APRICE_UNIT;
	}

	public void setAPRICE_UNIT(Vector aPRICE_UNIT) {
		APRICE_UNIT = aPRICE_UNIT;
	}

	public Vector getAGSTIN_NO() {
		return AGSTIN_NO;
	}

	public void setAGSTIN_NO(Vector aGSTIN_NO) {
		AGSTIN_NO = aGSTIN_NO;
	}

	public Vector getAPLANT_STATE() {
		return APLANT_STATE;
	}

	public void setAPLANT_STATE(Vector aPLANT_STATE) {
		APLANT_STATE = aPLANT_STATE;
	}

	public Vector getASAC_CODE() {
		return ASAC_CODE;
	}

	public void setASAC_CODE(Vector aSAC_CODE) {
		ASAC_CODE = aSAC_CODE;
	}

	public Vector getIGST_TAX_RATE_A() {
		return IGST_TAX_RATE_A;
	}

	public void setIGST_TAX_RATE_A(Vector iGST_TAX_RATE_A) {
		IGST_TAX_RATE_A = iGST_TAX_RATE_A;
	}

	public Vector getSGST_TAX_RATE_A() {
		return SGST_TAX_RATE_A;
	}

	public void setSGST_TAX_RATE_A(Vector sGST_TAX_RATE_A) {
		SGST_TAX_RATE_A = sGST_TAX_RATE_A;
	}

	public Vector getCGST_TAX_RATE_A() {
		return CGST_TAX_RATE_A;
	}

	public void setCGST_TAX_RATE_A(Vector cGST_TAX_RATE_A) {
		CGST_TAX_RATE_A = cGST_TAX_RATE_A;
	}

	public Vector getZGST_TAX_RATE_A() {
		return ZGST_TAX_RATE_A;
	}

	public void setZGST_TAX_RATE_A(Vector zGST_TAX_RATE_A) {
		ZGST_TAX_RATE_A = zGST_TAX_RATE_A;
	}

	public Vector getIGST_TAX_A() {
		return IGST_TAX_A;
	}

	public void setIGST_TAX_A(Vector iGST_TAX_A) {
		IGST_TAX_A = iGST_TAX_A;
	}

	public Vector getSGST_TAX_A() {
		return SGST_TAX_A;
	}

	public void setSGST_TAX_A(Vector sGST_TAX_A) {
		SGST_TAX_A = sGST_TAX_A;
	}

	public Vector getCGST_TAX_A() {
		return CGST_TAX_A;
	}

	public void setCGST_TAX_A(Vector cGST_TAX_A) {
		CGST_TAX_A = cGST_TAX_A;
	}

	public Vector getZGST_TAX_A() {
		return ZGST_TAX_A;
	}

	public void setZGST_TAX_A(Vector zGST_TAX_A) {
		ZGST_TAX_A = zGST_TAX_A;
	}

	public Vector getAPLANT_NAME() {
		return APLANT_NAME;
	}

	public void setAPLANT_NAME(Vector aPLANT_NAME) {
		APLANT_NAME = aPLANT_NAME;
	}

	public Vector getAADV_INV_NO() {
		return AADV_INV_NO;
	}

	public void setAADV_INV_NO(Vector aADV_INV_NO) {
		AADV_INV_NO = aADV_INV_NO;
	}

	public Vector getAADV_INV_DT() {
		return AADV_INV_DT;
	}

	public void setAADV_INV_DT(Vector aADV_INV_DT) {
		AADV_INV_DT = aADV_INV_DT;
	}

	public Vector getNEW_INV_SEQ_NO_CRDR() {
		return NEW_INV_SEQ_NO_CRDR;
	}

	public void setNEW_INV_SEQ_NO_CRDR(Vector nEW_INV_SEQ_NO_CRDR) {
		NEW_INV_SEQ_NO_CRDR = nEW_INV_SEQ_NO_CRDR;
	}

	public String getIgst_code() {
		return igst_code;
	}

	public void setIgst_code(String igst_code) {
		this.igst_code = igst_code;
	}

	public String getSgst_code() {
		return sgst_code;
	}

	public void setSgst_code(String sgst_code) {
		this.sgst_code = sgst_code;
	}

	public String getCgst_code() {
		return cgst_code;
	}

	public void setCgst_code(String cgst_code) {
		this.cgst_code = cgst_code;
	}

	public String getZgst_code() {
		return zgst_code;
	}

	public void setZgst_code(String zgst_code) {
		this.zgst_code = zgst_code;
	}

	public Vector getVPAY_NEW_INV_SEQ_NO() {
		return VPAY_NEW_INV_SEQ_NO;
	}

	public void setVPAY_NEW_INV_SEQ_NO(Vector vPAY_NEW_INV_SEQ_NO) {
		VPAY_NEW_INV_SEQ_NO = vPAY_NEW_INV_SEQ_NO;
	}

	public Vector getVPAY_FLAG() {
		return VPAY_FLAG;
	}

	public void setVPAY_FLAG(Vector vPAY_FLAG) {
		VPAY_FLAG = vPAY_FLAG;
	}

	public Vector getPROJECT_CODE() {
		return PROJECT_CODE;
	}

	public void setPROJECT_CODE(Vector pROJECT_CODE) {
		PROJECT_CODE = pROJECT_CODE;
	}

	public Vector getASST_COMPO() {
		return ASST_COMPO;
	}

	public void setASST_COMPO(Vector aSST_COMPO) {
		ASST_COMPO = aSST_COMPO;
	}

	public Vector getGOODS_SERVICE_FLAG() {
		return GOODS_SERVICE_FLAG;
	}

	public void setGOODS_SERVICE_FLAG(Vector gOODS_SERVICE_FLAG) {
		GOODS_SERVICE_FLAG = gOODS_SERVICE_FLAG;
	}

	public Vector getREV_CHARGE() {
		return REV_CHARGE;
	}

	public void setREV_CHARGE(Vector rEV_CHARGE) {
		REV_CHARGE = rEV_CHARGE;
	}

	public Vector getHSN_SAC() {
		return HSN_SAC;
	}

	public void setHSN_SAC(Vector hSN_SAC) {
		HSN_SAC = hSN_SAC;
	}

	public Vector getPOS() {
		return POS;
	}

	public void setPOS(Vector pOS) {
		POS = pOS;
	}

	public Vector getTAX_AMT() {
		return TAX_AMT;
	}

	public void setTAX_AMT(Vector tAX_AMT) {
		TAX_AMT = tAX_AMT;
	}

	public Vector getSUPPLY_TYPE() {
		return SUPPLY_TYPE;
	}

	public void setSUPPLY_TYPE(Vector sUPPLY_TYPE) {
		SUPPLY_TYPE = sUPPLY_TYPE;
	}

	public Vector getTOTAL_INV_AMT() {
		return TOTAL_INV_AMT;
	}

	public void setTOTAL_INV_AMT(Vector tOTAL_INV_AMT) {
		TOTAL_INV_AMT = tOTAL_INV_AMT;
	}

	public Vector getORI_INV_NO() {
		return ORI_INV_NO;
	}

	public void setORI_INV_NO(Vector oRI_INV_NO) {
		ORI_INV_NO = oRI_INV_NO;
	}

	public Vector getAdv_hlpl_inv_seq_no() {
		return adv_hlpl_inv_seq_no;
	}

	public void setAdv_hlpl_inv_seq_no(Vector adv_hlpl_inv_seq_no) {
		this.adv_hlpl_inv_seq_no = adv_hlpl_inv_seq_no;
	}

	public Vector getAdv_invoice_dt() {
		return adv_invoice_dt;
	}

	public void setAdv_invoice_dt(Vector adv_invoice_dt) {
		this.adv_invoice_dt = adv_invoice_dt;
	}

	public Vector getAdv_period_start_dt() {
		return adv_period_start_dt;
	}

	public void setAdv_period_start_dt(Vector adv_period_start_dt) {
		this.adv_period_start_dt = adv_period_start_dt;
	}

	public Vector getAdv_period_end_dt() {
		return adv_period_end_dt;
	}

	public void setAdv_period_end_dt(Vector adv_period_end_dt) {
		this.adv_period_end_dt = adv_period_end_dt;
	}

	public Vector getAdv_sale_price() {
		return adv_sale_price;
	}

	public void setAdv_sale_price(Vector adv_sale_price) {
		this.adv_sale_price = adv_sale_price;
	}

	public Vector getAdv_due_dt() {
		return adv_due_dt;
	}

	public void setAdv_due_dt(Vector adv_due_dt) {
		this.adv_due_dt = adv_due_dt;
	}

	public Vector getAdv_total_qty() {
		return adv_total_qty;
	}

	public void setAdv_total_qty(Vector adv_total_qty) {
		this.adv_total_qty = adv_total_qty;
	}

	public Vector getAdv_gross_amt_inr() {
		return adv_gross_amt_inr;
	}

	public void setAdv_gross_amt_inr(Vector adv_gross_amt_inr) {
		this.adv_gross_amt_inr = adv_gross_amt_inr;
	}

	public Vector getAdv_net_amt_inr() {
		return adv_net_amt_inr;
	}

	public void setAdv_net_amt_inr(Vector adv_net_amt_inr) {
		this.adv_net_amt_inr = adv_net_amt_inr;
	}

	public Vector getAdv_financial_year() {
		return adv_financial_year;
	}

	public void setAdv_financial_year(Vector adv_financial_year) {
		this.adv_financial_year = adv_financial_year;
	}

	public Vector getAdv_customer_cd() {
		return adv_customer_cd;
	}

	public void setAdv_customer_cd(Vector adv_customer_cd) {
		this.adv_customer_cd = adv_customer_cd;
	}

	public Vector getAdv_tax_struct_cd() {
		return adv_tax_struct_cd;
	}

	public void setAdv_tax_struct_cd(Vector adv_tax_struct_cd) {
		this.adv_tax_struct_cd = adv_tax_struct_cd;
	}

	public Vector getAdv_sn_no() {
		return adv_sn_no;
	}

	public void setAdv_sn_no(Vector adv_sn_no) {
		this.adv_sn_no = adv_sn_no;
	}

	public Vector getAdv_sn_rev_no() {
		return adv_sn_rev_no;
	}

	public void setAdv_sn_rev_no(Vector adv_sn_rev_no) {
		this.adv_sn_rev_no = adv_sn_rev_no;
	}

	public Vector getAdv_fgsa_no() {
		return adv_fgsa_no;
	}

	public void setAdv_fgsa_no(Vector adv_fgsa_no) {
		this.adv_fgsa_no = adv_fgsa_no;
	}

	public Vector getAdv_fgsa_rev_no() {
		return adv_fgsa_rev_no;
	}

	public void setAdv_fgsa_rev_no(Vector adv_fgsa_rev_no) {
		this.adv_fgsa_rev_no = adv_fgsa_rev_no;
	}

	public Vector getAdv_invoice_month() {
		return adv_invoice_month;
	}

	public void setAdv_invoice_month(Vector adv_invoice_month) {
		this.adv_invoice_month = adv_invoice_month;
	}

	public Vector getAdv_contract_type() {
		return adv_contract_type;
	}

	public void setAdv_contract_type(Vector adv_contract_type) {
		this.adv_contract_type = adv_contract_type;
	}

	public Vector getAdv_contact_person_cd() {
		return adv_contact_person_cd;
	}

	public void setAdv_contact_person_cd(Vector adv_contact_person_cd) {
		this.adv_contact_person_cd = adv_contact_person_cd;
	}

	public Vector getAdv_tax_amt_inr() {
		return adv_tax_amt_inr;
	}

	public void setAdv_tax_amt_inr(Vector adv_tax_amt_inr) {
		this.adv_tax_amt_inr = adv_tax_amt_inr;
	}

	public Vector getAdv_plant_seq_no() {
		return adv_plant_seq_no;
	}

	public void setAdv_plant_seq_no(Vector adv_plant_seq_no) {
		this.adv_plant_seq_no = adv_plant_seq_no;
	}

	public Vector getAdv_tax_flag() {
		return adv_tax_flag;
	}

	public void setAdv_tax_flag(Vector adv_tax_flag) {
		this.adv_tax_flag = adv_tax_flag;
	}

	public Vector getAdv_cust_inv_seq_no() {
		return adv_cust_inv_seq_no;
	}

	public void setAdv_cust_inv_seq_no(Vector adv_cust_inv_seq_no) {
		this.adv_cust_inv_seq_no = adv_cust_inv_seq_no;
	}

	public Vector getAdv_sun_approval() {
		return adv_sun_approval;
	}

	public void setAdv_sun_approval(Vector adv_sun_approval) {
		this.adv_sun_approval = adv_sun_approval;
	}

	public Vector getAdv_mapping_id() {
		return adv_mapping_id;
	}

	public void setAdv_mapping_id(Vector adv_mapping_id) {
		this.adv_mapping_id = adv_mapping_id;
	}

	public Vector getAdv_new_inv_seq_no() {
		return adv_new_inv_seq_no;
	}

	public void setAdv_new_inv_seq_no(Vector adv_new_inv_seq_no) {
		this.adv_new_inv_seq_no = adv_new_inv_seq_no;
	}

	public Vector getAdv_customer_name() {
		return adv_customer_name;
	}

	public void setAdv_customer_name(Vector adv_customer_name) {
		this.adv_customer_name = adv_customer_name;
	}

	public Vector getAdv_qty() {
		return adv_qty;
	}

	public void setAdv_qty(Vector adv_qty) {
		this.adv_qty = adv_qty;
	}

	public Vector getAdv_XML_GEN_FLAG() {
		return adv_XML_GEN_FLAG;
	}

	public void setAdv_XML_GEN_FLAG(Vector adv_XML_GEN_FLAG) {
		this.adv_XML_GEN_FLAG = adv_XML_GEN_FLAG;
	}

	public Vector getAdv_customer_Invoice_Tax_Code() {
		return adv_customer_Invoice_Tax_Code;
	}

	public void setAdv_customer_Invoice_Tax_Code(Vector adv_customer_Invoice_Tax_Code) {
		this.adv_customer_Invoice_Tax_Code = adv_customer_Invoice_Tax_Code;
	}

	public Vector getAdv_customer_Invoice_Tax_Amt() {
		return adv_customer_Invoice_Tax_Amt;
	}

	public void setAdv_customer_Invoice_Tax_Amt(Vector adv_customer_Invoice_Tax_Amt) {
		this.adv_customer_Invoice_Tax_Amt = adv_customer_Invoice_Tax_Amt;
	}

	public Vector getAdv_customer_Invoice_Tax_Name() {
		return adv_customer_Invoice_Tax_Name;
	}

	public void setAdv_customer_Invoice_Tax_Name(Vector adv_customer_Invoice_Tax_Name) {
		this.adv_customer_Invoice_Tax_Name = adv_customer_Invoice_Tax_Name;
	}

	public Vector getAdv_customer_Invoice_Tax_Rate() {
		return adv_customer_Invoice_Tax_Rate;
	}

	public void setAdv_customer_Invoice_Tax_Rate(Vector adv_customer_Invoice_Tax_Rate) {
		this.adv_customer_Invoice_Tax_Rate = adv_customer_Invoice_Tax_Rate;
	}

	public Vector getAdv_customer_Invoice_Tax_Abbr() {
		return adv_customer_Invoice_Tax_Abbr;
	}

	public void setAdv_customer_Invoice_Tax_Abbr(Vector adv_customer_Invoice_Tax_Abbr) {
		this.adv_customer_Invoice_Tax_Abbr = adv_customer_Invoice_Tax_Abbr;
	}

	public Map getAdv_customer_tax_cd() {
		return adv_customer_tax_cd;
	}

	public void setAdv_customer_tax_cd(Map adv_customer_tax_cd) {
		this.adv_customer_tax_cd = adv_customer_tax_cd;
	}

	public Map getAdv_customer_tax_amt() {
		return adv_customer_tax_amt;
	}

	public void setAdv_customer_tax_amt(Map adv_customer_tax_amt) {
		this.adv_customer_tax_amt = adv_customer_tax_amt;
	}

	public Map getAdv_customer_tax_name() {
		return adv_customer_tax_name;
	}

	public void setAdv_customer_tax_name(Map adv_customer_tax_name) {
		this.adv_customer_tax_name = adv_customer_tax_name;
	}

	public Map getAdv_customer_tax_abbr() {
		return adv_customer_tax_abbr;
	}

	public void setAdv_customer_tax_abbr(Map adv_customer_tax_abbr) {
		this.adv_customer_tax_abbr = adv_customer_tax_abbr;
	}

	public Map getAdv_customer_tax_rate() {
		return adv_customer_tax_rate;
	}

	public void setAdv_customer_tax_rate(Map adv_customer_tax_rate) {
		this.adv_customer_tax_rate = adv_customer_tax_rate;
	}

	public Vector getAdv_pay_type() {
		return adv_pay_type;
	}

	public void setAdv_pay_type(Vector adv_pay_type) {
		this.adv_pay_type = adv_pay_type;
	}

	public Vector getUHLPL_INV_SEQ_NO() {
		return UHLPL_INV_SEQ_NO;
	}

	public void setUHLPL_INV_SEQ_NO(Vector uHLPL_INV_SEQ_NO) {
		UHLPL_INV_SEQ_NO = uHLPL_INV_SEQ_NO;
	}

	public Vector getUNEW_INV_SEQ_NO() {
		return UNEW_INV_SEQ_NO;
	}

	public void setUNEW_INV_SEQ_NO(Vector uNEW_INV_SEQ_NO) {
		UNEW_INV_SEQ_NO = uNEW_INV_SEQ_NO;
	}

	public Vector getUINVOICE_DT() {
		return UINVOICE_DT;
	}

	public void setUINVOICE_DT(Vector uINVOICE_DT) {
		UINVOICE_DT = uINVOICE_DT;
	}

	public Vector getUCUSTOMER_CD() {
		return UCUSTOMER_CD;
	}

	public void setUCUSTOMER_CD(Vector uCUSTOMER_CD) {
		UCUSTOMER_CD = uCUSTOMER_CD;
	}

	public Vector getUPLANT_SEQ_NO() {
		return UPLANT_SEQ_NO;
	}

	public void setUPLANT_SEQ_NO(Vector uPLANT_SEQ_NO) {
		UPLANT_SEQ_NO = uPLANT_SEQ_NO;
	}

	public Vector getUTAX_STRUCT_CD() {
		return UTAX_STRUCT_CD;
	}

	public void setUTAX_STRUCT_CD(Vector uTAX_STRUCT_CD) {
		UTAX_STRUCT_CD = uTAX_STRUCT_CD;
	}

	public Vector getUGROSS_AMT_INR() {
		return UGROSS_AMT_INR;
	}

	public void setUGROSS_AMT_INR(Vector uGROSS_AMT_INR) {
		UGROSS_AMT_INR = uGROSS_AMT_INR;
	}

	public Vector getUGROSS_AMT_USD() {
		return UGROSS_AMT_USD;
	}

	public void setUGROSS_AMT_USD(Vector uGROSS_AMT_USD) {
		UGROSS_AMT_USD = uGROSS_AMT_USD;
	}

	public Vector getUTOTAL_QTY() {
		return UTOTAL_QTY;
	}

	public void setUTOTAL_QTY(Vector uTOTAL_QTY) {
		UTOTAL_QTY = uTOTAL_QTY;
	}

	public Vector getUPAY_TYPE() {
		return UPAY_TYPE;
	}

	public void setUPAY_TYPE(Vector uPAY_TYPE) {
		UPAY_TYPE = uPAY_TYPE;
	}

	public Vector getUPRICE_UNIT() {
		return UPRICE_UNIT;
	}

	public void setUPRICE_UNIT(Vector uPRICE_UNIT) {
		UPRICE_UNIT = uPRICE_UNIT;
	}

	public Vector getUGSTIN_NO() {
		return UGSTIN_NO;
	}

	public void setUGSTIN_NO(Vector uGSTIN_NO) {
		UGSTIN_NO = uGSTIN_NO;
	}

	public Vector getUPLANT_STATE() {
		return UPLANT_STATE;
	}

	public void setUPLANT_STATE(Vector uPLANT_STATE) {
		UPLANT_STATE = uPLANT_STATE;
	}

	public Vector getUSAC_CODE() {
		return USAC_CODE;
	}

	public void setUSAC_CODE(Vector uSAC_CODE) {
		USAC_CODE = uSAC_CODE;
	}

	public Vector getUPLANT_NAME() {
		return UPLANT_NAME;
	}

	public void setUPLANT_NAME(Vector uPLANT_NAME) {
		UPLANT_NAME = uPLANT_NAME;
	}

	public Vector getUSUG_VAL() {
		return USUG_VAL;
	}

	public void setUSUG_VAL(Vector uSUG_VAL) {
		USUG_VAL = uSUG_VAL;
	}

	public Vector getUSUG_QTY() {
		return USUG_QTY;
	}

	public void setUSUG_QTY(Vector uSUG_QTY) {
		USUG_QTY = uSUG_QTY;
	}

	public Vector getIGST_TAX_RATE_U() {
		return IGST_TAX_RATE_U;
	}

	public void setIGST_TAX_RATE_U(Vector iGST_TAX_RATE_U) {
		IGST_TAX_RATE_U = iGST_TAX_RATE_U;
	}

	public Vector getSGST_TAX_RATE_U() {
		return SGST_TAX_RATE_U;
	}

	public void setSGST_TAX_RATE_U(Vector sGST_TAX_RATE_U) {
		SGST_TAX_RATE_U = sGST_TAX_RATE_U;
	}

	public Vector getCGST_TAX_RATE_U() {
		return CGST_TAX_RATE_U;
	}

	public void setCGST_TAX_RATE_U(Vector cGST_TAX_RATE_U) {
		CGST_TAX_RATE_U = cGST_TAX_RATE_U;
	}

	public Vector getZGST_TAX_RATE_U() {
		return ZGST_TAX_RATE_U;
	}

	public void setZGST_TAX_RATE_U(Vector zGST_TAX_RATE_U) {
		ZGST_TAX_RATE_U = zGST_TAX_RATE_U;
	}

	public Vector getIGST_TAX_U() {
		return IGST_TAX_U;
	}

	public void setIGST_TAX_U(Vector iGST_TAX_U) {
		IGST_TAX_U = iGST_TAX_U;
	}

	public Vector getSGST_TAX_U() {
		return SGST_TAX_U;
	}

	public void setSGST_TAX_U(Vector sGST_TAX_U) {
		SGST_TAX_U = sGST_TAX_U;
	}

	public Vector getCGST_TAX_U() {
		return CGST_TAX_U;
	}

	public void setCGST_TAX_U(Vector cGST_TAX_U) {
		CGST_TAX_U = cGST_TAX_U;
	}

	public Vector getZGST_TAX_U() {
		return ZGST_TAX_U;
	}

	public void setZGST_TAX_U(Vector zGST_TAX_U) {
		ZGST_TAX_U = zGST_TAX_U;
	}

	public Vector getGROSS_AMT_INR_NEW() {
		return GROSS_AMT_INR_NEW;
	}

	public void setGROSS_AMT_INR_NEW(Vector gROSS_AMT_INR_NEW) {
		GROSS_AMT_INR_NEW = gROSS_AMT_INR_NEW;
	}

	public Vector getGROSS_AMT_USD_NEW() {
		return GROSS_AMT_USD_NEW;
	}

	public void setGROSS_AMT_USD_NEW(Vector gROSS_AMT_USD_NEW) {
		GROSS_AMT_USD_NEW = gROSS_AMT_USD_NEW;
	}

	public Vector getADVANCE_ADJ_GROSS_AMT_INR() {
		return ADVANCE_ADJ_GROSS_AMT_INR;
	}

	public void setADVANCE_ADJ_GROSS_AMT_INR(Vector aDVANCE_ADJ_GROSS_AMT_INR) {
		ADVANCE_ADJ_GROSS_AMT_INR = aDVANCE_ADJ_GROSS_AMT_INR;
	}

	public Vector getADVANCE_ADJ_GROSS_AMT_USD() {
		return ADVANCE_ADJ_GROSS_AMT_USD;
	}

	public void setADVANCE_ADJ_GROSS_AMT_USD(Vector aDVANCE_ADJ_GROSS_AMT_USD) {
		ADVANCE_ADJ_GROSS_AMT_USD = aDVANCE_ADJ_GROSS_AMT_USD;
	}

	public Vector getADVANCE_ADJ_AMT_NEW() {
		return ADVANCE_ADJ_AMT_NEW;
	}

	public void setADVANCE_ADJ_AMT_NEW(Vector aDVANCE_ADJ_AMT_NEW) {
		ADVANCE_ADJ_AMT_NEW = aDVANCE_ADJ_AMT_NEW;
	}

	public Map getOTH_HLPL_INV_SEQ_NO() {
		return OTH_HLPL_INV_SEQ_NO;
	}

	public void setOTH_HLPL_INV_SEQ_NO(Map oTH_HLPL_INV_SEQ_NO) {
		OTH_HLPL_INV_SEQ_NO = oTH_HLPL_INV_SEQ_NO;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_X() {
		return OTH_NEW_INV_SEQ_NO_X;
	}

	public void setOTH_NEW_INV_SEQ_NO_X(Vector oTH_NEW_INV_SEQ_NO_X) {
		OTH_NEW_INV_SEQ_NO_X = oTH_NEW_INV_SEQ_NO_X;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_Y() {
		return OTH_NEW_INV_SEQ_NO_Y;
	}

	public void setOTH_NEW_INV_SEQ_NO_Y(Vector oTH_NEW_INV_SEQ_NO_Y) {
		OTH_NEW_INV_SEQ_NO_Y = oTH_NEW_INV_SEQ_NO_Y;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_Z() {
		return OTH_NEW_INV_SEQ_NO_Z;
	}

	public void setOTH_NEW_INV_SEQ_NO_Z(Vector oTH_NEW_INV_SEQ_NO_Z) {
		OTH_NEW_INV_SEQ_NO_Z = oTH_NEW_INV_SEQ_NO_Z;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_1() {
		return OTH_NEW_INV_SEQ_NO_1;
	}

	public void setOTH_NEW_INV_SEQ_NO_1(Vector oTH_NEW_INV_SEQ_NO_1) {
		OTH_NEW_INV_SEQ_NO_1 = oTH_NEW_INV_SEQ_NO_1;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_2() {
		return OTH_NEW_INV_SEQ_NO_2;
	}

	public void setOTH_NEW_INV_SEQ_NO_2(Vector oTH_NEW_INV_SEQ_NO_2) {
		OTH_NEW_INV_SEQ_NO_2 = oTH_NEW_INV_SEQ_NO_2;
	}

	public Map getOTH_CUSTOMER_CD() {
		return OTH_CUSTOMER_CD;
	}

	public void setOTH_CUSTOMER_CD(Map oTH_CUSTOMER_CD) {
		OTH_CUSTOMER_CD = oTH_CUSTOMER_CD;
	}

	public Map getOTH_NET_AMT_INR() {
		return OTH_NET_AMT_INR;
	}

	public void setOTH_NET_AMT_INR(Map oTH_NET_AMT_INR) {
		OTH_NET_AMT_INR = oTH_NET_AMT_INR;
	}

	public Map getOTH_INVOICE_DT() {
		return OTH_INVOICE_DT;
	}

	public void setOTH_INVOICE_DT(Map oTH_INVOICE_DT) {
		OTH_INVOICE_DT = oTH_INVOICE_DT;
	}

	public Map getOTH_INVOICE_TYPE() {
		return OTH_INVOICE_TYPE;
	}

	public void setOTH_INVOICE_TYPE(Map oTH_INVOICE_TYPE) {
		OTH_INVOICE_TYPE = oTH_INVOICE_TYPE;
	}

	public Map getOTH_GROSS_AMT_INR() {
		return OTH_GROSS_AMT_INR;
	}

	public void setOTH_GROSS_AMT_INR(Map oTH_GROSS_AMT_INR) {
		OTH_GROSS_AMT_INR = oTH_GROSS_AMT_INR;
	}

	public Map getOTH_TAX_AMT() {
		return OTH_TAX_AMT;
	}

	public void setOTH_TAX_AMT(Map oTH_TAX_AMT) {
		OTH_TAX_AMT = oTH_TAX_AMT;
	}

	public Map getOTH_SUPPLIER_CD() {
		return OTH_SUPPLIER_CD;
	}

	public void setOTH_SUPPLIER_CD(Map oTH_SUPPLIER_CD) {
		OTH_SUPPLIER_CD = oTH_SUPPLIER_CD;
	}

	public Map getOTH_SUPPLIER_NAME() {
		return OTH_SUPPLIER_NAME;
	}

	public void setOTH_SUPPLIER_NAME(Map oTH_SUPPLIER_NAME) {
		OTH_SUPPLIER_NAME = oTH_SUPPLIER_NAME;
	}

	public Map getOTH_TAX_STRUCT_CD() {
		return OTH_TAX_STRUCT_CD;
	}

	public void setOTH_TAX_STRUCT_CD(Map oTH_TAX_STRUCT_CD) {
		OTH_TAX_STRUCT_CD = oTH_TAX_STRUCT_CD;
	}

	public Map getOTH_CUSTOMER_ABBR() {
		return OTH_CUSTOMER_ABBR;
	}

	public void setOTH_CUSTOMER_ABBR(Map oTH_CUSTOMER_ABBR) {
		OTH_CUSTOMER_ABBR = oTH_CUSTOMER_ABBR;
	}

	public Map getOTH_IGST_TAX() {
		return OTH_IGST_TAX;
	}

	public void setOTH_IGST_TAX(Map oTH_IGST_TAX) {
		OTH_IGST_TAX = oTH_IGST_TAX;
	}

	public Map getOTH_IGST_TAX_RATE() {
		return OTH_IGST_TAX_RATE;
	}

	public void setOTH_IGST_TAX_RATE(Map oTH_IGST_TAX_RATE) {
		OTH_IGST_TAX_RATE = oTH_IGST_TAX_RATE;
	}

	public Map getOTH_CGST_TAX() {
		return OTH_CGST_TAX;
	}

	public void setOTH_CGST_TAX(Map oTH_CGST_TAX) {
		OTH_CGST_TAX = oTH_CGST_TAX;
	}

	public Map getOTH_CGST_TAX_RATE() {
		return OTH_CGST_TAX_RATE;
	}

	public void setOTH_CGST_TAX_RATE(Map oTH_CGST_TAX_RATE) {
		OTH_CGST_TAX_RATE = oTH_CGST_TAX_RATE;
	}

	public Map getOTH_SGST_TAX() {
		return OTH_SGST_TAX;
	}

	public void setOTH_SGST_TAX(Map oTH_SGST_TAX) {
		OTH_SGST_TAX = oTH_SGST_TAX;
	}

	public Map getOTH_SGST_TAX_RATE() {
		return OTH_SGST_TAX_RATE;
	}

	public void setOTH_SGST_TAX_RATE(Map oTH_SGST_TAX_RATE) {
		OTH_SGST_TAX_RATE = oTH_SGST_TAX_RATE;
	}

	public Map getOTH_ZGST_TAX() {
		return OTH_ZGST_TAX;
	}

	public void setOTH_ZGST_TAX(Map oTH_ZGST_TAX) {
		OTH_ZGST_TAX = oTH_ZGST_TAX;
	}

	public Map getOTH_ZGST_TAX_RATE() {
		return OTH_ZGST_TAX_RATE;
	}

	public void setOTH_ZGST_TAX_RATE(Map oTH_ZGST_TAX_RATE) {
		OTH_ZGST_TAX_RATE = oTH_ZGST_TAX_RATE;
	}

	public Map getOTH_ITEM_DESCRIPTION() {
		return OTH_ITEM_DESCRIPTION;
	}

	public void setOTH_ITEM_DESCRIPTION(Map oTH_ITEM_DESCRIPTION) {
		OTH_ITEM_DESCRIPTION = oTH_ITEM_DESCRIPTION;
	}

	public Map getOTH_SAC_CODE() {
		return OTH_SAC_CODE;
	}

	public void setOTH_SAC_CODE(Map oTH_SAC_CODE) {
		OTH_SAC_CODE = oTH_SAC_CODE;
	}

	public Map getOTH_CUSTOMER_STATE_CODE() {
		return OTH_CUSTOMER_STATE_CODE;
	}

	public void setOTH_CUSTOMER_STATE_CODE(Map oTH_CUSTOMER_STATE_CODE) {
		OTH_CUSTOMER_STATE_CODE = oTH_CUSTOMER_STATE_CODE;
	}

	public Map getOTH_SUPPLIER_STATE_CODE() {
		return OTH_SUPPLIER_STATE_CODE;
	}

	public void setOTH_SUPPLIER_STATE_CODE(Map oTH_SUPPLIER_STATE_CODE) {
		OTH_SUPPLIER_STATE_CODE = oTH_SUPPLIER_STATE_CODE;
	}

	public Map getOTH_TAX_CODE() {
		return OTH_TAX_CODE;
	}

	public void setOTH_TAX_CODE(Map oTH_TAX_CODE) {
		OTH_TAX_CODE = oTH_TAX_CODE;
	}

	public Map getOTH_GSTIN_NO() {
		return OTH_GSTIN_NO;
	}

	public void setOTH_GSTIN_NO(Map oTH_GSTIN_NO) {
		OTH_GSTIN_NO = oTH_GSTIN_NO;
	}

	public Map getOTH_PACER_NO() {
		return OTH_PACER_NO;
	}

	public void setOTH_PACER_NO(Map oTH_PACER_NO) {
		OTH_PACER_NO = oTH_PACER_NO;
	}

	public Map getOTH_VENDOR_SUPP_INV_REF_NO() {
		return OTH_VENDOR_SUPP_INV_REF_NO;
	}

	public void setOTH_VENDOR_SUPP_INV_REF_NO(Map oTH_VENDOR_SUPP_INV_REF_NO) {
		OTH_VENDOR_SUPP_INV_REF_NO = oTH_VENDOR_SUPP_INV_REF_NO;
	}

	public Map getOTH_HRS_BERTHING() {
		return OTH_HRS_BERTHING;
	}

	public void setOTH_HRS_BERTHING(Map oTH_HRS_BERTHING) {
		OTH_HRS_BERTHING = oTH_HRS_BERTHING;
	}

	public Map getOTH_SLOTS_BERTHING() {
		return OTH_SLOTS_BERTHING;
	}

	public void setOTH_SLOTS_BERTHING(Map oTH_SLOTS_BERTHING) {
		OTH_SLOTS_BERTHING = oTH_SLOTS_BERTHING;
	}

	public Map getOTH_GRT() {
		return OTH_GRT;
	}

	public void setOTH_GRT(Map oTH_GRT) {
		OTH_GRT = oTH_GRT;
	}

	public Map getOTH_DUE_DATE() {
		return OTH_DUE_DATE;
	}

	public void setOTH_DUE_DATE(Map oTH_DUE_DATE) {
		OTH_DUE_DATE = oTH_DUE_DATE;
	}

	public Map getOTH_SALE_PRICE() {
		return OTH_SALE_PRICE;
	}

	public void setOTH_SALE_PRICE(Map oTH_SALE_PRICE) {
		OTH_SALE_PRICE = oTH_SALE_PRICE;
	}

	public Vector getOTH_NEW_INV_SEQ_NO_N() {
		return OTH_NEW_INV_SEQ_NO_N;
	}

	public void setOTH_NEW_INV_SEQ_NO_N(Vector oTH_NEW_INV_SEQ_NO_N) {
		OTH_NEW_INV_SEQ_NO_N = oTH_NEW_INV_SEQ_NO_N;
	}
	public Vector getVcustomer_name() {
		return Vcustomer_name;
	}

	public void setVcustomer_name(Vector vcustomer_name) {
		Vcustomer_name = vcustomer_name;
	}

	public Vector getVcont_typ() {
		return Vcont_typ;
	}

	public void setVcont_typ(Vector vcont_typ) {
		Vcont_typ = vcont_typ;
	}

	public Vector getVAgreement_no() {
		return VAgreement_no;
	}

	public void setVAgreement_no(Vector vAgreement_no) {
		VAgreement_no = vAgreement_no;
	}

	public Vector getVAgreement_rev_no() {
		return VAgreement_rev_no;
	}

	public void setVAgreement_rev_no(Vector vAgreement_rev_no) {
		VAgreement_rev_no = vAgreement_rev_no;
	}

	public Vector getVcont_no() {
		return Vcont_no;
	}

	public void setVcont_no(Vector vcont_no) {
		Vcont_no = vcont_no;
	}

	public Vector getVcont_rev_no() {
		return Vcont_rev_no;
	}

	public void setVcont_rev_no(Vector vcont_rev_no) {
		Vcont_rev_no = vcont_rev_no;
	}

	public String getMonthRpt() {
		return monthRpt;
	}

	public void setMonthRpt(String monthRpt) {
		this.monthRpt = monthRpt;
	}

	public String getYearRpt() {
		return yearRpt;
	}

	public void setYearRpt(String yearRpt) {
		this.yearRpt = yearRpt;
	}

	public int getMaxYear() {
		return maxYear;
	}

	public void setMaxYear(int maxYear) {
		this.maxYear = maxYear;
	}

	public int getMinYear() {
		return minYear;
	}

	public void setMinYear(int minYear) {
		this.minYear = minYear;
	}

	public Vector getRpt_customer_name() {
		return rpt_customer_name;
	}

	public void setRpt_customer_name(Vector rpt_customer_name) {
		this.rpt_customer_name = rpt_customer_name;
	}

	public Vector getRpt_vessel_name() {
		return rpt_vessel_name;
	}

	public void setRpt_vessel_name(Vector rpt_vessel_name) {
		this.rpt_vessel_name = rpt_vessel_name;
	}

	public Vector getRpt_supp_name() {
		return rpt_supp_name;
	}

	public void setRpt_supp_name(Vector rpt_supp_name) {
		this.rpt_supp_name = rpt_supp_name;
	}

	public Vector getRpt_act_recpt_date() {
		return rpt_act_recpt_date;
	}

	public void setRpt_act_recpt_date(Vector rpt_act_recpt_date) {
		this.rpt_act_recpt_date = rpt_act_recpt_date;
	}

	public Vector getRpt_adq_qty() {
		return rpt_adq_qty;
	}

	public void setRpt_adq_qty(Vector rpt_adq_qty) {
		this.rpt_adq_qty = rpt_adq_qty;
	}

	public Vector getRpt_cargo_ref_no() {
		return rpt_cargo_ref_no;
	}

	public void setRpt_cargo_ref_no(Vector rpt_cargo_ref_no) {
		this.rpt_cargo_ref_no = rpt_cargo_ref_no;
	}

	public Vector getTrans_charges() {
		return trans_charges;
	}

	public void setTrans_charges(Vector trans_charges) {
		this.trans_charges = trans_charges;
	}

	public Vector getTrans_gross_inr() {
		return trans_gross_inr;
	}

	public void setTrans_gross_inr(Vector trans_gross_inr) {
		this.trans_gross_inr = trans_gross_inr;
	}

	public double getTot_trans_grossinr() {
		return tot_trans_grossinr;
	}

	public void setTot_trans_grossinr(double tot_trans_grossinr) {
		this.tot_trans_grossinr = tot_trans_grossinr;
	}

	public Vector getStorage_hlpl_inv_seq_no() {
		return storage_hlpl_inv_seq_no;
	}

	public void setStorage_hlpl_inv_seq_no(Vector storage_hlpl_inv_seq_no) {
		this.storage_hlpl_inv_seq_no = storage_hlpl_inv_seq_no;
	}

	public Vector getStorage_invoice_dt() {
		return storage_invoice_dt;
	}

	public void setStorage_invoice_dt(Vector storage_invoice_dt) {
		this.storage_invoice_dt = storage_invoice_dt;
	}

	public Vector getStorage_period_start_dt() {
		return storage_period_start_dt;
	}

	public void setStorage_period_start_dt(Vector storage_period_start_dt) {
		this.storage_period_start_dt = storage_period_start_dt;
	}

	public Vector getStorage_period_end_dt() {
		return storage_period_end_dt;
	}

	public void setStorage_period_end_dt(Vector storage_period_end_dt) {
		this.storage_period_end_dt = storage_period_end_dt;
	}

	public Vector getStorage_sale_price() {
		return storage_sale_price;
	}

	public void setStorage_sale_price(Vector storage_sale_price) {
		this.storage_sale_price = storage_sale_price;
	}

	public Vector getStorage_due_dt() {
		return storage_due_dt;
	}

	public void setStorage_due_dt(Vector storage_due_dt) {
		this.storage_due_dt = storage_due_dt;
	}

	public Vector getStorage_total_qty() {
		return storage_total_qty;
	}

	public void setStorage_total_qty(Vector storage_total_qty) {
		this.storage_total_qty = storage_total_qty;
	}

	public Vector getStorage_gross_amt_inr() {
		return storage_gross_amt_inr;
	}

	public void setStorage_gross_amt_inr(Vector storage_gross_amt_inr) {
		this.storage_gross_amt_inr = storage_gross_amt_inr;
	}

	public Vector getStorage_net_amt_inr() {
		return storage_net_amt_inr;
	}

	public void setStorage_net_amt_inr(Vector storage_net_amt_inr) {
		this.storage_net_amt_inr = storage_net_amt_inr;
	}

	public Vector getStorage_financial_year() {
		return storage_financial_year;
	}

	public void setStorage_financial_year(Vector storage_financial_year) {
		this.storage_financial_year = storage_financial_year;
	}

	public Vector getStorage_customer_cd() {
		return storage_customer_cd;
	}

	public void setStorage_customer_cd(Vector storage_customer_cd) {
		this.storage_customer_cd = storage_customer_cd;
	}

	public Vector getStorage_tax_struct_cd() {
		return storage_tax_struct_cd;
	}

	public void setStorage_tax_struct_cd(Vector storage_tax_struct_cd) {
		this.storage_tax_struct_cd = storage_tax_struct_cd;
	}

	public Vector getStorage_sn_no() {
		return storage_sn_no;
	}

	public void setStorage_sn_no(Vector storage_sn_no) {
		this.storage_sn_no = storage_sn_no;
	}

	public Vector getStorage_sn_rev_no() {
		return storage_sn_rev_no;
	}

	public void setStorage_sn_rev_no(Vector storage_sn_rev_no) {
		this.storage_sn_rev_no = storage_sn_rev_no;
	}

	public Vector getStorage_fgsa_no() {
		return storage_fgsa_no;
	}

	public void setStorage_fgsa_no(Vector storage_fgsa_no) {
		this.storage_fgsa_no = storage_fgsa_no;
	}

	public Vector getStorage_fgsa_rev_no() {
		return storage_fgsa_rev_no;
	}

	public void setStorage_fgsa_rev_no(Vector storage_fgsa_rev_no) {
		this.storage_fgsa_rev_no = storage_fgsa_rev_no;
	}

	public Vector getStorage_invoice_month() {
		return storage_invoice_month;
	}

	public void setStorage_invoice_month(Vector storage_invoice_month) {
		this.storage_invoice_month = storage_invoice_month;
	}

	public Vector getStorage_contract_type() {
		return storage_contract_type;
	}

	public void setStorage_contract_type(Vector storage_contract_type) {
		this.storage_contract_type = storage_contract_type;
	}

	public Vector getStorage_mapping_id() {
		return storage_mapping_id;
	}

	public void setStorage_mapping_id(Vector storage_mapping_id) {
		this.storage_mapping_id = storage_mapping_id;
	}

	public Vector getStorage_sun_approval() {
		return storage_sun_approval;
	}

	public void setStorage_sun_approval(Vector storage_sun_approval) {
		this.storage_sun_approval = storage_sun_approval;
	}

	public Vector getStorage_cust_inv_seq_no() {
		return storage_cust_inv_seq_no;
	}

	public void setStorage_cust_inv_seq_no(Vector storage_cust_inv_seq_no) {
		this.storage_cust_inv_seq_no = storage_cust_inv_seq_no;
	}

	public Vector getStorage_plant_seq_no() {
		return storage_plant_seq_no;
	}

	public void setStorage_plant_seq_no(Vector storage_plant_seq_no) {
		this.storage_plant_seq_no = storage_plant_seq_no;
	}

	public Vector getStorage_tax_flag() {
		return storage_tax_flag;
	}

	public void setStorage_tax_flag(Vector storage_tax_flag) {
		this.storage_tax_flag = storage_tax_flag;
	}

	public Vector getStorage_tax_amt_inr() {
		return storage_tax_amt_inr;
	}

	public void setStorage_tax_amt_inr(Vector storage_tax_amt_inr) {
		this.storage_tax_amt_inr = storage_tax_amt_inr;
	}

	public Vector getStorage_contact_person_cd() {
		return storage_contact_person_cd;
	}

	public void setStorage_contact_person_cd(Vector storage_contact_person_cd) {
		this.storage_contact_person_cd = storage_contact_person_cd;
	}

	public Vector getStorage_new_inv_seq_no() {
		return storage_new_inv_seq_no;
	}

	public void setStorage_new_inv_seq_no(Vector storage_new_inv_seq_no) {
		this.storage_new_inv_seq_no = storage_new_inv_seq_no;
	}

	public Vector getStorage_customer_name() {
		return storage_customer_name;
	}

	public void setStorage_customer_name(Vector storage_customer_name) {
		this.storage_customer_name = storage_customer_name;
	}

	public Vector getStorage_XML_GEN_FLAG() {
		return storage_XML_GEN_FLAG;
	}

	public void setStorage_XML_GEN_FLAG(Vector storage_XML_GEN_FLAG) {
		this.storage_XML_GEN_FLAG = storage_XML_GEN_FLAG;
	}

	public Vector getStorage_qty() {
		return storage_qty;
	}

	public void setStorage_qty(Vector storage_qty) {
		this.storage_qty = storage_qty;
	}

	public Vector getStorage_customer_Invoice_Tax_Abbr() {
		return storage_customer_Invoice_Tax_Abbr;
	}

	public void setStorage_customer_Invoice_Tax_Abbr(Vector storage_customer_Invoice_Tax_Abbr) {
		this.storage_customer_Invoice_Tax_Abbr = storage_customer_Invoice_Tax_Abbr;
	}

	public Vector getStorage_customer_Invoice_Tax_Name() {
		return storage_customer_Invoice_Tax_Name;
	}

	public void setStorage_customer_Invoice_Tax_Name(Vector storage_customer_Invoice_Tax_Name) {
		this.storage_customer_Invoice_Tax_Name = storage_customer_Invoice_Tax_Name;
	}

	public Map getStorage_customer_tax_name() {
		return storage_customer_tax_name;
	}

	public void setStorage_customer_tax_name(Map storage_customer_tax_name) {
		this.storage_customer_tax_name = storage_customer_tax_name;
	}

	public Map getStorage_customer_tax_abbr() {
		return storage_customer_tax_abbr;
	}

	public void setStorage_customer_tax_abbr(Map storage_customer_tax_abbr) {
		this.storage_customer_tax_abbr = storage_customer_tax_abbr;
	}

	public Vector getStorage_customer_Invoice_Tax_Rate() {
		return storage_customer_Invoice_Tax_Rate;
	}

	public void setStorage_customer_Invoice_Tax_Rate(Vector storage_customer_Invoice_Tax_Rate) {
		this.storage_customer_Invoice_Tax_Rate = storage_customer_Invoice_Tax_Rate;
	}

	public Vector getStorage_customer_Invoice_Tax_Amt() {
		return storage_customer_Invoice_Tax_Amt;
	}

	public void setStorage_customer_Invoice_Tax_Amt(Vector storage_customer_Invoice_Tax_Amt) {
		this.storage_customer_Invoice_Tax_Amt = storage_customer_Invoice_Tax_Amt;
	}

	public Map getStorage_customer_tax_cd() {
		return storage_customer_tax_cd;
	}

	public void setStorage_customer_tax_cd(Map storage_customer_tax_cd) {
		this.storage_customer_tax_cd = storage_customer_tax_cd;
	}

	public Map getStorage_customer_tax_rate() {
		return storage_customer_tax_rate;
	}

	public void setStorage_customer_tax_rate(Map storage_customer_tax_rate) {
		this.storage_customer_tax_rate = storage_customer_tax_rate;
	}

	public Map getStorage_customer_tax_amt() {
		return storage_customer_tax_amt;
	}

	public void setStorage_customer_tax_amt(Map storage_customer_tax_amt) {
		this.storage_customer_tax_amt = storage_customer_tax_amt;
	}

	public Vector getStorage_customer_Invoice_Tax_Code() {
		return storage_customer_Invoice_Tax_Code;
	}

	public void setStorage_customer_Invoice_Tax_Code(Vector storage_customer_Invoice_Tax_Code) {
		this.storage_customer_Invoice_Tax_Code = storage_customer_Invoice_Tax_Code;
	}

	public String getScust_cd() {
		return Scust_cd;
	}

	public void setScust_cd(String scust_cd) {
		Scust_cd = scust_cd;
	}

	public String getSmapp_id() {
		return Smapp_id;
	}

	public void setSmapp_id(String smapp_id) {
		Smapp_id = smapp_id;
	}

	public String getShlpl_inv_seq_no() {
		return Shlpl_inv_seq_no;
	}

	public void setShlpl_inv_seq_no(String shlpl_inv_seq_no) {
		Shlpl_inv_seq_no = shlpl_inv_seq_no;
	}

	public Vector getMalloc_dt() {
		return Malloc_dt;
	}

	public void setMalloc_dt(Vector malloc_dt) {
		Malloc_dt = malloc_dt;
	}

	public Vector getMofftake_qty() {
		return Mofftake_qty;
	}

	public void setMofftake_qty(Vector mofftake_qty) {
		Mofftake_qty = mofftake_qty;
	}

	public Vector getMamount() {
		return Mamount;
	}

	public void setMamount(Vector mamount) {
		Mamount = mamount;
	}

	public Vector getDisc_day() {
		return disc_day;
	}

	public void setDisc_day(Vector disc_day) {
		this.disc_day = disc_day;
	}

	public Vector getMopening_balance_qty() {
		return Mopening_balance_qty;
	}

	public void setMopening_balance_qty(Vector mopening_balance_qty) {
		Mopening_balance_qty = mopening_balance_qty;
	}

	public Vector getMst_charges() {
		return Mst_charges;
	}

	public void setMst_charges(Vector mst_charges) {
		Mst_charges = mst_charges;
	}

	public String getTotamount() {
		return totamount;
	}

	public void setTotamount(String totamount) {
		this.totamount = totamount;
	}

	public Vector getStorage_currency_typ() {
		return storage_currency_typ;
	}

	public void setStorage_currency_typ(Vector storage_currency_typ) {
		this.storage_currency_typ = storage_currency_typ;
	}

	public String getCont_type() {
		return cont_type;
	}

	public void setCont_type(String cont_type) {
		this.cont_type = cont_type;
	}

	public Vector getStorage_GROSS_AMT_USD() {
		return storage_GROSS_AMT_USD;
	}

	public void setStorage_GROSS_AMT_USD(Vector storage_GROSS_AMT_USD) {
		this.storage_GROSS_AMT_USD = storage_GROSS_AMT_USD;
	}

	public Vector getStorage_exch_rate_val() {
		return storage_exch_rate_val;
	}

	public void setStorage_exch_rate_val(Vector storage_exch_rate_val) {
		this.storage_exch_rate_val = storage_exch_rate_val;
	}

	public Vector getLM_hlpl_inv_seq_no() {
		return LM_hlpl_inv_seq_no;
	}

	public void setLM_hlpl_inv_seq_no(Vector lM_hlpl_inv_seq_no) {
		LM_hlpl_inv_seq_no = lM_hlpl_inv_seq_no;
	}

	public Vector getLM_invoice_dt() {
		return LM_invoice_dt;
	}

	public void setLM_invoice_dt(Vector lM_invoice_dt) {
		LM_invoice_dt = lM_invoice_dt;
	}

	public Vector getLM_period_start_dt() {
		return LM_period_start_dt;
	}

	public void setLM_period_start_dt(Vector lM_period_start_dt) {
		LM_period_start_dt = lM_period_start_dt;
	}

	public Vector getLM_period_end_dt() {
		return LM_period_end_dt;
	}

	public void setLM_period_end_dt(Vector lM_period_end_dt) {
		LM_period_end_dt = lM_period_end_dt;
	}

	public Vector getLM_sale_price() {
		return LM_sale_price;
	}

	public void setLM_sale_price(Vector lM_sale_price) {
		LM_sale_price = lM_sale_price;
	}

	public Vector getLM_due_dt() {
		return LM_due_dt;
	}

	public void setLM_due_dt(Vector lM_due_dt) {
		LM_due_dt = lM_due_dt;
	}

	public Vector getLM_total_qty() {
		return LM_total_qty;
	}

	public void setLM_total_qty(Vector lM_total_qty) {
		LM_total_qty = lM_total_qty;
	}

	public Vector getLM_gross_amt_inr() {
		return LM_gross_amt_inr;
	}

	public void setLM_gross_amt_inr(Vector lM_gross_amt_inr) {
		LM_gross_amt_inr = lM_gross_amt_inr;
	}

	public Vector getLM_net_amt_inr() {
		return LM_net_amt_inr;
	}

	public void setLM_net_amt_inr(Vector lM_net_amt_inr) {
		LM_net_amt_inr = lM_net_amt_inr;
	}

	public Vector getLM_financial_year() {
		return LM_financial_year;
	}

	public void setLM_financial_year(Vector lM_financial_year) {
		LM_financial_year = lM_financial_year;
	}

	public Vector getLM_customer_cd() {
		return LM_customer_cd;
	}

	public void setLM_customer_cd(Vector lM_customer_cd) {
		LM_customer_cd = lM_customer_cd;
	}

	public Vector getLM_tax_struct_cd() {
		return LM_tax_struct_cd;
	}

	public void setLM_tax_struct_cd(Vector lM_tax_struct_cd) {
		LM_tax_struct_cd = lM_tax_struct_cd;
	}

	public Vector getLM_sn_no() {
		return LM_sn_no;
	}

	public void setLM_sn_no(Vector lM_sn_no) {
		LM_sn_no = lM_sn_no;
	}

	public Vector getLM_currency_typ() {
		return LM_currency_typ;
	}

	public void setLM_currency_typ(Vector lM_currency_typ) {
		LM_currency_typ = lM_currency_typ;
	}

	public Vector getLM_sn_rev_no() {
		return LM_sn_rev_no;
	}

	public void setLM_sn_rev_no(Vector lM_sn_rev_no) {
		LM_sn_rev_no = lM_sn_rev_no;
	}

	public Vector getLM_fgsa_no() {
		return LM_fgsa_no;
	}

	public void setLM_fgsa_no(Vector lM_fgsa_no) {
		LM_fgsa_no = lM_fgsa_no;
	}

	public Vector getLM_fgsa_rev_no() {
		return LM_fgsa_rev_no;
	}

	public void setLM_fgsa_rev_no(Vector lM_fgsa_rev_no) {
		LM_fgsa_rev_no = lM_fgsa_rev_no;
	}

	public Vector getLM_invoice_month() {
		return LM_invoice_month;
	}

	public void setLM_invoice_month(Vector lM_invoice_month) {
		LM_invoice_month = lM_invoice_month;
	}

	public Vector getLM_GROSS_AMT_USD() {
		return LM_GROSS_AMT_USD;
	}

	public void setLM_GROSS_AMT_USD(Vector lM_GROSS_AMT_USD) {
		LM_GROSS_AMT_USD = lM_GROSS_AMT_USD;
	}

	public Vector getLM_exch_rate_val() {
		return LM_exch_rate_val;
	}

	public void setLM_exch_rate_val(Vector lM_exch_rate_val) {
		LM_exch_rate_val = lM_exch_rate_val;
	}

	public Vector getLM_contract_type() {
		return LM_contract_type;
	}

	public void setLM_contract_type(Vector lM_contract_type) {
		LM_contract_type = lM_contract_type;
	}

	public Vector getLM_mapping_id() {
		return LM_mapping_id;
	}

	public void setLM_mapping_id(Vector lM_mapping_id) {
		LM_mapping_id = lM_mapping_id;
	}

	public Vector getLM_sun_approval() {
		return LM_sun_approval;
	}

	public void setLM_sun_approval(Vector lM_sun_approval) {
		LM_sun_approval = lM_sun_approval;
	}

	public Vector getLM_cust_inv_seq_no() {
		return LM_cust_inv_seq_no;
	}

	public void setLM_cust_inv_seq_no(Vector lM_cust_inv_seq_no) {
		LM_cust_inv_seq_no = lM_cust_inv_seq_no;
	}

	public Vector getLM_plant_seq_no() {
		return LM_plant_seq_no;
	}

	public void setLM_plant_seq_no(Vector lM_plant_seq_no) {
		LM_plant_seq_no = lM_plant_seq_no;
	}

	public Vector getLM_tax_flag() {
		return LM_tax_flag;
	}

	public void setLM_tax_flag(Vector lM_tax_flag) {
		LM_tax_flag = lM_tax_flag;
	}

	public Vector getLM_tax_amt_inr() {
		return LM_tax_amt_inr;
	}

	public void setLM_tax_amt_inr(Vector lM_tax_amt_inr) {
		LM_tax_amt_inr = lM_tax_amt_inr;
	}

	public Vector getLM_contact_person_cd() {
		return LM_contact_person_cd;
	}

	public void setLM_contact_person_cd(Vector lM_contact_person_cd) {
		LM_contact_person_cd = lM_contact_person_cd;
	}

	public Vector getLM_new_inv_seq_no() {
		return LM_new_inv_seq_no;
	}

	public void setLM_new_inv_seq_no(Vector lM_new_inv_seq_no) {
		LM_new_inv_seq_no = lM_new_inv_seq_no;
	}

	public Vector getLM_customer_name() {
		return LM_customer_name;
	}

	public void setLM_customer_name(Vector lM_customer_name) {
		LM_customer_name = lM_customer_name;
	}

	public Vector getLM_XML_GEN_FLAG() {
		return LM_XML_GEN_FLAG;
	}

	public void setLM_XML_GEN_FLAG(Vector lM_XML_GEN_FLAG) {
		LM_XML_GEN_FLAG = lM_XML_GEN_FLAG;
	}

	public Vector getLM_qty() {
		return LM_qty;
	}

	public void setLM_qty(Vector lM_qty) {
		LM_qty = lM_qty;
	}

	public Vector getLM_customer_Invoice_Tax_Abbr() {
		return LM_customer_Invoice_Tax_Abbr;
	}

	public void setLM_customer_Invoice_Tax_Abbr(Vector lM_customer_Invoice_Tax_Abbr) {
		LM_customer_Invoice_Tax_Abbr = lM_customer_Invoice_Tax_Abbr;
	}

	public Vector getLM_customer_Invoice_Tax_Name() {
		return LM_customer_Invoice_Tax_Name;
	}

	public void setLM_customer_Invoice_Tax_Name(Vector lM_customer_Invoice_Tax_Name) {
		LM_customer_Invoice_Tax_Name = lM_customer_Invoice_Tax_Name;
	}

	public Map getLM_customer_tax_name() {
		return LM_customer_tax_name;
	}

	public void setLM_customer_tax_name(Map lM_customer_tax_name) {
		LM_customer_tax_name = lM_customer_tax_name;
	}

	public Map getLM_customer_tax_abbr() {
		return LM_customer_tax_abbr;
	}

	public void setLM_customer_tax_abbr(Map lM_customer_tax_abbr) {
		LM_customer_tax_abbr = lM_customer_tax_abbr;
	}

	public Vector getLM_customer_Invoice_Tax_Rate() {
		return LM_customer_Invoice_Tax_Rate;
	}

	public void setLM_customer_Invoice_Tax_Rate(Vector lM_customer_Invoice_Tax_Rate) {
		LM_customer_Invoice_Tax_Rate = lM_customer_Invoice_Tax_Rate;
	}

	public Vector getLM_customer_Invoice_Tax_Amt() {
		return LM_customer_Invoice_Tax_Amt;
	}

	public void setLM_customer_Invoice_Tax_Amt(Vector lM_customer_Invoice_Tax_Amt) {
		LM_customer_Invoice_Tax_Amt = lM_customer_Invoice_Tax_Amt;
	}

	public Map getLM_customer_tax_cd() {
		return LM_customer_tax_cd;
	}

	public void setLM_customer_tax_cd(Map lM_customer_tax_cd) {
		LM_customer_tax_cd = lM_customer_tax_cd;
	}

	public Map getLM_customer_tax_rate() {
		return LM_customer_tax_rate;
	}

	public void setLM_customer_tax_rate(Map lM_customer_tax_rate) {
		LM_customer_tax_rate = lM_customer_tax_rate;
	}

	public Map getLM_customer_tax_amt() {
		return LM_customer_tax_amt;
	}

	public void setLM_customer_tax_amt(Map lM_customer_tax_amt) {
		LM_customer_tax_amt = lM_customer_tax_amt;
	}

	public Vector getLM_customer_Invoice_Tax_Code() {
		return LM_customer_Invoice_Tax_Code;
	}

	public void setLM_customer_Invoice_Tax_Code(Vector lM_customer_Invoice_Tax_Code) {
		LM_customer_Invoice_Tax_Code = lM_customer_Invoice_Tax_Code;
	}

	public Vector getLM_INT_RATE() {
		return LM_INT_RATE;
	}

	public void setLM_INT_RATE(Vector lM_INT_RATE) {
		LM_INT_RATE = lM_INT_RATE;
	}

	public Map getOTH_VESSEL_NM() {
		return OTH_VESSEL_NM;
	}

	public void setOTH_VESSEL_NM(Map oTH_VESSEL_NM) {
		OTH_VESSEL_NM = oTH_VESSEL_NM;
	}

	public Map getOTH_VESSEL_FLAG() {
		return OTH_VESSEL_FLAG;
	}

	public void setOTH_VESSEL_FLAG(Map oTH_VESSEL_FLAG) {
		OTH_VESSEL_FLAG = oTH_VESSEL_FLAG;
	}

	public Map getOTH_IMPORTER() {
		return OTH_IMPORTER;
	}

	public void setOTH_IMPORTER(Map oTH_IMPORTER) {
		OTH_IMPORTER = oTH_IMPORTER;
	}

	public Map getOTH_QUANTITY() {
		return OTH_QUANTITY;
	}

	public void setOTH_QUANTITY(Map oTH_QUANTITY) {
		OTH_QUANTITY = oTH_QUANTITY;
	}

	public Vector getSALE_VAT_TAX_PERC() {
		return SALE_VAT_TAX_PERC;
	}

	public Vector getSALE_CST_TAX_PERC() {
		return SALE_CST_TAX_PERC;
	}

	public void setSALE_CST_TAX_PERC(Vector sALE_CST_TAX_PERC) {
		SALE_CST_TAX_PERC = sALE_CST_TAX_PERC;
	}

	public Vector getVtcs_amt() {
		return Vtcs_amt;
	}

	public void setVtcs_amt(Vector vtcs_amt) {
		Vtcs_amt = vtcs_amt;
	}

	public Vector getFlag_inv() {
		return flag_inv;
	}

	public void setFlag_inv(Vector flag_inv) {
		this.flag_inv = flag_inv;
	}

	public String getTcs_nm() {
		return tcs_nm;
	}

	public void setTcs_nm(String tcs_nm) {
		this.tcs_nm = tcs_nm;
	}

	public String getTcs_fact() {
		return tcs_fact;
	}

	public void setTcs_fact(String tcs_fact) {
		this.tcs_fact = tcs_fact;
	}

	public Vector getSUMMRY_TAX_TCS_AMT() {
		return SUMMRY_TAX_TCS_AMT;
	}

	public void setSUMMRY_TAX_TCS_AMT(Vector sUMMRY_TAX_TCS_AMT) {
		SUMMRY_TAX_TCS_AMT = sUMMRY_TAX_TCS_AMT;
	}

	public String getTcs_cd() {
		return tcs_cd;
	}

	public void setTcs_cd(String tcs_cd) {
		this.tcs_cd = tcs_cd;
	}

	public double getTcs_inr_total() {
		return tcs_inr_total;
	}

	public void setTcs_inr_total(double tcs_inr_total) {
		this.tcs_inr_total = tcs_inr_total;
	}

	public int getStart_index_4() {
		return start_index_4;
	}

	public int getEnd_index_4() {
		return end_index_4;
	}

	public void setStart_index_4(int start_index_4) {
		this.start_index_4 = start_index_4;
	}

	public void setEnd_index_4(int end_index_4) {
		this.end_index_4 = end_index_4;
	}

	public void setSales_qty_total(double sales_qty_total) {
		this.sales_qty_total = sales_qty_total;
	}

	public double getDlng_sales_qty_total() {
		return dlng_sales_qty_total;
	}

	public void setDlng_sales_qty_total(double dlng_sales_qty_total) {
		this.dlng_sales_qty_total = dlng_sales_qty_total;
	}

	public double getSum_tcq_dlng() {
		return sum_tcq_dlng;
	}

	public void setSum_tcq_dlng(double sum_tcq_dlng) {
		this.sum_tcq_dlng = sum_tcq_dlng;
	}

	public double getDlng_sales_gross_amt_usd_total() {
		return dlng_sales_gross_amt_usd_total;
	}

	public void setDlng_sales_gross_amt_usd_total(double dlng_sales_gross_amt_usd_total) {
		this.dlng_sales_gross_amt_usd_total = dlng_sales_gross_amt_usd_total;
	}

	public double getDlng_sales_qty_amt_inr_total() {
		return dlng_sales_qty_amt_inr_total;
	}

	public double getDlng_sales_gross_amt_inr_total() {
		return dlng_sales_gross_amt_inr_total;
	}

	public void setDlng_sales_qty_amt_inr_total(double dlng_sales_qty_amt_inr_total) {
		this.dlng_sales_qty_amt_inr_total = dlng_sales_qty_amt_inr_total;
	}

	public void setDlng_sales_gross_amt_inr_total(double dlng_sales_gross_amt_inr_total) {
		this.dlng_sales_gross_amt_inr_total = dlng_sales_gross_amt_inr_total;
	}

	public double getDlng_sales_vat_inr_total() {
		return dlng_sales_vat_inr_total;
	}

	public double getDlng_sales_addl_tax_inr_total() {
		return dlng_sales_addl_tax_inr_total;
	}

	public double getDlng_sales_tax_inr_total() {
		return dlng_sales_tax_inr_total;
	}

	public double getDlng_sales_sbc_tax_inr_total() {
		return dlng_sales_sbc_tax_inr_total;
	}

	public double getDlng_sales_service_tax_inr_total() {
		return dlng_sales_service_tax_inr_total;
	}

	public double getDlng_sales_kkc_tax_inr_total() {
		return dlng_sales_kkc_tax_inr_total;
	}

	public double getDlng_sales_edu_cess_inr_total() {
		return dlng_sales_edu_cess_inr_total;
	}

	public double getDlng_sales_cgst_tax_inr_total() {
		return dlng_sales_cgst_tax_inr_total;
	}

	public double getDlng_sales_high_edu_cess_inr_total() {
		return dlng_sales_high_edu_cess_inr_total;
	}

	public double getDlng_sales_igst_tax_inr_total() {
		return dlng_sales_igst_tax_inr_total;
	}

	public double getDlng_sales_sgst_tax_inr_total() {
		return dlng_sales_sgst_tax_inr_total;
	}

	public void setDlng_sales_vat_inr_total(double dlng_sales_vat_inr_total) {
		this.dlng_sales_vat_inr_total = dlng_sales_vat_inr_total;
	}

	public void setDlng_sales_addl_tax_inr_total(double dlng_sales_addl_tax_inr_total) {
		this.dlng_sales_addl_tax_inr_total = dlng_sales_addl_tax_inr_total;
	}

	public void setDlng_sales_tax_inr_total(double dlng_sales_tax_inr_total) {
		this.dlng_sales_tax_inr_total = dlng_sales_tax_inr_total;
	}

	public void setDlng_sales_sbc_tax_inr_total(double dlng_sales_sbc_tax_inr_total) {
		this.dlng_sales_sbc_tax_inr_total = dlng_sales_sbc_tax_inr_total;
	}

	public void setDlng_sales_service_tax_inr_total(double dlng_sales_service_tax_inr_total) {
		this.dlng_sales_service_tax_inr_total = dlng_sales_service_tax_inr_total;
	}

	public void setDlng_sales_kkc_tax_inr_total(double dlng_sales_kkc_tax_inr_total) {
		this.dlng_sales_kkc_tax_inr_total = dlng_sales_kkc_tax_inr_total;
	}

	public void setDlng_sales_edu_cess_inr_total(double dlng_sales_edu_cess_inr_total) {
		this.dlng_sales_edu_cess_inr_total = dlng_sales_edu_cess_inr_total;
	}

	public void setDlng_sales_cgst_tax_inr_total(double dlng_sales_cgst_tax_inr_total) {
		this.dlng_sales_cgst_tax_inr_total = dlng_sales_cgst_tax_inr_total;
	}

	public void setDlng_sales_high_edu_cess_inr_total(double dlng_sales_high_edu_cess_inr_total) {
		this.dlng_sales_high_edu_cess_inr_total = dlng_sales_high_edu_cess_inr_total;
	}

	public void setDlng_sales_igst_tax_inr_total(double dlng_sales_igst_tax_inr_total) {
		this.dlng_sales_igst_tax_inr_total = dlng_sales_igst_tax_inr_total;
	}

	public void setDlng_sales_sgst_tax_inr_total(double dlng_sales_sgst_tax_inr_total) {
		this.dlng_sales_sgst_tax_inr_total = dlng_sales_sgst_tax_inr_total;
	}

	public double getDlng_sales_net_amt_inr_total() {
		return dlng_sales_net_amt_inr_total;
	}

	public void setDlng_sales_net_amt_inr_total(double dlng_sales_net_amt_inr_total) {
		this.dlng_sales_net_amt_inr_total = dlng_sales_net_amt_inr_total;
	}

	public Vector getInv_flag() {
		return inv_flag;
	}

	public void setInv_flag(Vector inv_flag) {
		this.inv_flag = inv_flag;
	}

	public double getDlng_sales_total_tax_inr_total() {
		return dlng_sales_total_tax_inr_total;
	}

	public double getDlng_sales_vat_usd_total() {
		return dlng_sales_vat_usd_total;
	}

	public double getDlng_sales_sales_tax_usd_total() {
		return dlng_sales_sales_tax_usd_total;
	}

	public double getDlng_sales_zgst_tax_usd_total() {
		return dlng_sales_zgst_tax_usd_total;
	}

	public double getDlng_sales_igst_tax_usd_total() {
		return dlng_sales_igst_tax_usd_total;
	}

	public double getDlng_sales_cgst_tax_usd_total() {
		return dlng_sales_cgst_tax_usd_total;
	}

	public double getDlng_sales_total_tax_usd_total() {
		return dlng_sales_total_tax_usd_total;
	}

	public double getDlng_sales_service_tax_usd_total() {
		return dlng_sales_service_tax_usd_total;
	}

	public double getDlng_sales_high_edu_cess_usd_total() {
		return dlng_sales_high_edu_cess_usd_total;
	}

	public double getDlng_sales_sbc_tax_usd_total() {
		return dlng_sales_sbc_tax_usd_total;
	}

	public double getDlng_sales_kkc_tax_usd_total() {
		return dlng_sales_kkc_tax_usd_total;
	}

	public double getDlng_sales_edu_cess_usd_total() {
		return dlng_sales_edu_cess_usd_total;
	}

	public double getDlng_sales_sgst_tax_usd_total() {
		return dlng_sales_sgst_tax_usd_total;
	}

	public double getDlng_sales_net_amt_usd_total() {
		return dlng_sales_net_amt_usd_total;
	}

	public double getDlng_sales_addl_tax_usd_total() {
		return dlng_sales_addl_tax_usd_total;
	}

	public void setDlng_sales_total_tax_inr_total(double dlng_sales_total_tax_inr_total) {
		this.dlng_sales_total_tax_inr_total = dlng_sales_total_tax_inr_total;
	}

	public void setDlng_sales_vat_usd_total(double dlng_sales_vat_usd_total) {
		this.dlng_sales_vat_usd_total = dlng_sales_vat_usd_total;
	}

	public void setDlng_sales_sales_tax_usd_total(double dlng_sales_sales_tax_usd_total) {
		this.dlng_sales_sales_tax_usd_total = dlng_sales_sales_tax_usd_total;
	}

	public void setDlng_sales_zgst_tax_usd_total(double dlng_sales_zgst_tax_usd_total) {
		this.dlng_sales_zgst_tax_usd_total = dlng_sales_zgst_tax_usd_total;
	}

	public void setDlng_sales_igst_tax_usd_total(double dlng_sales_igst_tax_usd_total) {
		this.dlng_sales_igst_tax_usd_total = dlng_sales_igst_tax_usd_total;
	}

	public void setDlng_sales_cgst_tax_usd_total(double dlng_sales_cgst_tax_usd_total) {
		this.dlng_sales_cgst_tax_usd_total = dlng_sales_cgst_tax_usd_total;
	}

	public void setDlng_sales_total_tax_usd_total(double dlng_sales_total_tax_usd_total) {
		this.dlng_sales_total_tax_usd_total = dlng_sales_total_tax_usd_total;
	}

	public void setDlng_sales_service_tax_usd_total(double dlng_sales_service_tax_usd_total) {
		this.dlng_sales_service_tax_usd_total = dlng_sales_service_tax_usd_total;
	}

	public void setDlng_sales_high_edu_cess_usd_total(double dlng_sales_high_edu_cess_usd_total) {
		this.dlng_sales_high_edu_cess_usd_total = dlng_sales_high_edu_cess_usd_total;
	}

	public void setDlng_sales_sbc_tax_usd_total(double dlng_sales_sbc_tax_usd_total) {
		this.dlng_sales_sbc_tax_usd_total = dlng_sales_sbc_tax_usd_total;
	}

	public void setDlng_sales_kkc_tax_usd_total(double dlng_sales_kkc_tax_usd_total) {
		this.dlng_sales_kkc_tax_usd_total = dlng_sales_kkc_tax_usd_total;
	}

	public void setDlng_sales_edu_cess_usd_total(double dlng_sales_edu_cess_usd_total) {
		this.dlng_sales_edu_cess_usd_total = dlng_sales_edu_cess_usd_total;
	}

	public void setDlng_sales_sgst_tax_usd_total(double dlng_sales_sgst_tax_usd_total) {
		this.dlng_sales_sgst_tax_usd_total = dlng_sales_sgst_tax_usd_total;
	}

	public void setDlng_sales_net_amt_usd_total(double dlng_sales_net_amt_usd_total) {
		this.dlng_sales_net_amt_usd_total = dlng_sales_net_amt_usd_total;
	}

	public void setDlng_sales_addl_tax_usd_total(double dlng_sales_addl_tax_usd_total) {
		this.dlng_sales_addl_tax_usd_total = dlng_sales_addl_tax_usd_total;
	}

	public double getDlng_sales_group_foreign_gross_amt_usd_total() {
		return dlng_sales_group_foreign_gross_amt_usd_total;
	}

	public void setDlng_sales_group_foreign_gross_amt_usd_total(double dlng_sales_group_foreign_gross_amt_usd_total) {
		this.dlng_sales_group_foreign_gross_amt_usd_total = dlng_sales_group_foreign_gross_amt_usd_total;
	}

	public Vector getVOTH_SGST_TAX_RATE() {
		return VOTH_SGST_TAX_RATE;
	}

	public void setVOTH_SGST_TAX_RATE(Vector vOTH_SGST_TAX_RATE) {
		VOTH_SGST_TAX_RATE = vOTH_SGST_TAX_RATE;
	}

	public Vector getVOTH_UAMNO() {
		return VOTH_UAMNO;
	}

	public void setVOTH_UAMNO(Vector vOTH_UAMNO) {
		VOTH_UAMNO = vOTH_UAMNO;
	}

	public Vector getVOTH_IGST_TAX() {
		return VOTH_IGST_TAX;
	}

	public void setVOTH_IGST_TAX(Vector vOTH_IGST_TAX) {
		VOTH_IGST_TAX = vOTH_IGST_TAX;
	}

	public Vector getVOTH_CGST_TAX() {
		return VOTH_CGST_TAX;
	}

	public void setVOTH_CGST_TAX(Vector vOTH_CGST_TAX) {
		VOTH_CGST_TAX = vOTH_CGST_TAX;
	}

	public Vector getVOTH_SGST_TAX() {
		return VOTH_SGST_TAX;
	}

	public void setVOTH_SGST_TAX(Vector vOTH_SGST_TAX) {
		VOTH_SGST_TAX = vOTH_SGST_TAX;
	}

	public Vector getDLNG_SUMMRY_CONT_TYP() {
		return DLNG_SUMMRY_CONT_TYP;
	}

	public void setDLNG_SUMMRY_CONT_TYP(Vector dLNG_SUMMRY_CONT_TYP) {
		DLNG_SUMMRY_CONT_TYP = dLNG_SUMMRY_CONT_TYP;
	}

	public Vector getDLNG_SALE_PRICE() {
		return DLNG_SALE_PRICE;
	}

	public void setDLNG_SALE_PRICE(Vector dLNG_SALE_PRICE) {
		DLNG_SALE_PRICE = dLNG_SALE_PRICE;
	}

	public Vector getDLNG_SALE_PRICE_NUMERIC() {
		return DLNG_SALE_PRICE_NUMERIC;
	}

	public void setDLNG_SALE_PRICE_NUMERIC(Vector dLNG_SALE_PRICE_NUMERIC) {
		DLNG_SALE_PRICE_NUMERIC = dLNG_SALE_PRICE_NUMERIC;
	}

	public Vector getDLNG_TOTAL_QTY() {
		return DLNG_TOTAL_QTY;
	}

	public void setDLNG_TOTAL_QTY(Vector dLNG_TOTAL_QTY) {
		DLNG_TOTAL_QTY = dLNG_TOTAL_QTY;
	}

	public Vector getDLNG_TOTAL_QTY_NUMERIC() {
		return DLNG_TOTAL_QTY_NUMERIC;
	}

	public void setDLNG_TOTAL_QTY_NUMERIC(Vector dLNG_TOTAL_QTY_NUMERIC) {
		DLNG_TOTAL_QTY_NUMERIC = dLNG_TOTAL_QTY_NUMERIC;
	}

	public double getDLNG_sales_qty_amt_usd_total() {
		return DLNG_sales_qty_amt_usd_total;
	}

	public void setDLNG_sales_qty_amt_usd_total(double dLNG_sales_qty_amt_usd_total) {
		DLNG_sales_qty_amt_usd_total = dLNG_sales_qty_amt_usd_total;
	}

	public Vector getDLNG_tmp_group_gross_usd_amt() {
		return DLNG_tmp_group_gross_usd_amt;
	}

	public void setDLNG_tmp_group_gross_usd_amt(Vector dLNG_tmp_group_gross_usd_amt) {
		DLNG_tmp_group_gross_usd_amt = dLNG_tmp_group_gross_usd_amt;
	}

	public Vector getDLNG_temp_net_amt() {
		return DLNG_temp_net_amt;
	}

	public void setDLNG_temp_net_amt(Vector dLNG_temp_net_amt) {
		DLNG_temp_net_amt = dLNG_temp_net_amt;
	}

	public Vector getDLNG_TAX_STRUCT_CD() {
		return DLNG_TAX_STRUCT_CD;
	}

	public void setDLNG_TAX_STRUCT_CD(Vector dLNG_TAX_STRUCT_CD) {
		DLNG_TAX_STRUCT_CD = dLNG_TAX_STRUCT_CD;
	}

	public Vector getDLNG_SEGMENT_NAME() {
		return DLNG_SEGMENT_NAME;
	}

	public void setDLNG_SEGMENT_NAME(Vector dLNG_SEGMENT_NAME) {
		DLNG_SEGMENT_NAME = dLNG_SEGMENT_NAME;
	}

	public Vector getDLNG_SN_NO() {
		return DLNG_SN_NO;
	}

	public void setDLNG_SN_NO(Vector dLNG_SN_NO) {
		DLNG_SN_NO = dLNG_SN_NO;
	}

	public Vector getDLNG_temp_sn_no() {
		return DLNG_temp_sn_no;
	}

	public void setDLNG_temp_sn_no(Vector dLNG_temp_sn_no) {
		DLNG_temp_sn_no = dLNG_temp_sn_no;
	}

	public Vector getDLNG_SN_REV_NO() {
		return DLNG_SN_REV_NO;
	}

	public void setDLNG_SN_REV_NO(Vector dLNG_SN_REV_NO) {
		DLNG_SN_REV_NO = dLNG_SN_REV_NO;
	}

	public Vector getDLNG_temp_fgsa_no() {
		return DLNG_temp_fgsa_no;
	}

	public void setDLNG_temp_fgsa_no(Vector dLNG_temp_fgsa_no) {
		DLNG_temp_fgsa_no = dLNG_temp_fgsa_no;
	}

	public Vector getDLNG_SUN_APPROVAL() {
		return DLNG_SUN_APPROVAL;
	}

	public void setDLNG_SUN_APPROVAL(Vector dLNG_SUN_APPROVAL) {
		DLNG_SUN_APPROVAL = dLNG_SUN_APPROVAL;
	}

	public Vector getDLNG_Vtcs_amt() {
		return DLNG_Vtcs_amt;
	}

	public void setDLNG_Vtcs_amt(Vector dLNG_Vtcs_amt) {
		DLNG_Vtcs_amt = dLNG_Vtcs_amt;
	}

	public Vector getDLNG_trans_charges() {
		return DLNG_trans_charges;
	}

	public void setDLNG_trans_charges(Vector dLNG_trans_charges) {
		DLNG_trans_charges = dLNG_trans_charges;
	}

	public Vector getDLNG_temp_gross_amt() {
		return DLNG_temp_gross_amt;
	}

	public void setDLNG_temp_gross_amt(Vector dLNG_temp_gross_amt) {
		DLNG_temp_gross_amt = dLNG_temp_gross_amt;
	}

	public Vector getDLNG_trans_gross_inr() {
		return DLNG_trans_gross_inr;
	}

	public void setDLNG_trans_gross_inr(Vector dLNG_trans_gross_inr) {
		DLNG_trans_gross_inr = dLNG_trans_gross_inr;
	}

	public Vector getDLNG_START_DT() {
		return DLNG_START_DT;
	}

	public void setDLNG_START_DT(Vector dLNG_START_DT) {
		DLNG_START_DT = dLNG_START_DT;
	}

	public Vector getDLNG_TCQ() {
		return DLNG_TCQ;
	}

	public void setDLNG_TCQ(Vector dLNG_TCQ) {
		DLNG_TCQ = dLNG_TCQ;
	}

	public Vector getDLNG_TCQ_NUMERIC() {
		return DLNG_TCQ_NUMERIC;
	}

	public void setDLNG_TCQ_NUMERIC(Vector dLNG_TCQ_NUMERIC) {
		DLNG_TCQ_NUMERIC = dLNG_TCQ_NUMERIC;
	}

	public Vector getDLNG_REM_SUPPLY_NUMERIC() {
		return DLNG_REM_SUPPLY_NUMERIC;
	}

	public void setDLNG_REM_SUPPLY_NUMERIC(Vector dLNG_REM_SUPPLY_NUMERIC) {
		DLNG_REM_SUPPLY_NUMERIC = dLNG_REM_SUPPLY_NUMERIC;
	}

	public Vector getDLNG_TAX_CODE() {
		return DLNG_TAX_CODE;
	}

	public void setDLNG_TAX_CODE(Vector dLNG_TAX_CODE) {
		DLNG_TAX_CODE = dLNG_TAX_CODE;
	}

	public Vector getDLNG_TAX_AMOUNT() {
		return DLNG_TAX_AMOUNT;
	}

	public void setDLNG_TAX_AMOUNT(Vector dLNG_TAX_AMOUNT) {
		DLNG_TAX_AMOUNT = dLNG_TAX_AMOUNT;
	}

	public Vector getDLNG_TAX_ON_TITLE() {
		return DLNG_TAX_ON_TITLE;
	}

	public void setDLNG_TAX_ON_TITLE(Vector dLNG_TAX_ON_TITLE) {
		DLNG_TAX_ON_TITLE = dLNG_TAX_ON_TITLE;
	}

	public Vector getDLNG_SALES_TAX_AMT() {
		return DLNG_SALES_TAX_AMT;
	}

	public void setDLNG_SALES_TAX_AMT(Vector dLNG_SALES_TAX_AMT) {
		DLNG_SALES_TAX_AMT = dLNG_SALES_TAX_AMT;
	}

	public Vector getDLNG_SALES_TAX_AMT_NUMERIC() {
		return DLNG_SALES_TAX_AMT_NUMERIC;
	}

	public void setDLNG_SALES_TAX_AMT_NUMERIC(Vector dLNG_SALES_TAX_AMT_NUMERIC) {
		DLNG_SALES_TAX_AMT_NUMERIC = dLNG_SALES_TAX_AMT_NUMERIC;
	}

	public Vector getDLNG_tmp_sales_tax() {
		return DLNG_tmp_sales_tax;
	}

	public void setDLNG_tmp_sales_tax(Vector dLNG_tmp_sales_tax) {
		DLNG_tmp_sales_tax = dLNG_tmp_sales_tax;
	}

	public Vector getDLNG_VAT_AMT() {
		return DLNG_VAT_AMT;
	}

	public void setDLNG_VAT_AMT(Vector dLNG_VAT_AMT) {
		DLNG_VAT_AMT = dLNG_VAT_AMT;
	}

	public Vector getDLNG_SALE_VAT_TAX_PERC() {
		return DLNG_SALE_VAT_TAX_PERC;
	}

	public void setDLNG_SALE_VAT_TAX_PERC(Vector dLNG_SALE_VAT_TAX_PERC) {
		DLNG_SALE_VAT_TAX_PERC = dLNG_SALE_VAT_TAX_PERC;
	}

	public Vector getDLNG_SALE_CST_TAX_PERC() {
		return DLNG_SALE_CST_TAX_PERC;
	}

	public void setDLNG_SALE_CST_TAX_PERC(Vector dLNG_SALE_CST_TAX_PERC) {
		DLNG_SALE_CST_TAX_PERC = dLNG_SALE_CST_TAX_PERC;
	}

	public Vector getDLNG_TAX_AMT_INR() {
		return DLNG_TAX_AMT_INR;
	}

	public void setDLNG_TAX_AMT_INR(Vector dLNG_TAX_AMT_INR) {
		DLNG_TAX_AMT_INR = dLNG_TAX_AMT_INR;
	}

	public Vector getDLNG_TAX_AMT_USD() {
		return DLNG_TAX_AMT_USD;
	}

	public void setDLNG_TAX_AMT_USD(Vector dLNG_TAX_AMT_USD) {
		DLNG_TAX_AMT_USD = dLNG_TAX_AMT_USD;
	}

	public Vector getDLNG_SALES_TAX_AMT_USD() {
		return DLNG_SALES_TAX_AMT_USD;
	}

	public void setDLNG_SALES_TAX_AMT_USD(Vector dLNG_SALES_TAX_AMT_USD) {
		DLNG_SALES_TAX_AMT_USD = dLNG_SALES_TAX_AMT_USD;
	}

	public Vector getDLNG_VAT_AMT_USD() {
		return DLNG_VAT_AMT_USD;
	}

	public void setDLNG_VAT_AMT_USD(Vector dLNG_VAT_AMT_USD) {
		DLNG_VAT_AMT_USD = dLNG_VAT_AMT_USD;
	}

	public Vector getDLNG_tmp_addl_tax() {
		return DLNG_tmp_addl_tax;
	}

	public void setDLNG_tmp_addl_tax(Vector dLNG_tmp_addl_tax) {
		DLNG_tmp_addl_tax = dLNG_tmp_addl_tax;
	}

	public Vector getDLNG_tmp_vat() {
		return DLNG_tmp_vat;
	}

	public void setDLNG_tmp_vat(Vector dLNG_tmp_vat) {
		DLNG_tmp_vat = dLNG_tmp_vat;
	}

	public Vector getDLNG_SERVICE_TAX_USD() {
		return DLNG_SERVICE_TAX_USD;
	}

	public void setDLNG_SERVICE_TAX_USD(Vector dLNG_SERVICE_TAX_USD) {
		DLNG_SERVICE_TAX_USD = dLNG_SERVICE_TAX_USD;
	}

	public Vector getDLNG_tmp_service_tax() {
		return DLNG_tmp_service_tax;
	}

	public void setDLNG_tmp_service_tax(Vector dLNG_tmp_service_tax) {
		DLNG_tmp_service_tax = dLNG_tmp_service_tax;
	}

	public Vector getDLNG_XML_GEN_FLAG() {
		return DLNG_XML_GEN_FLAG;
	}

	public void setDLNG_XML_GEN_FLAG(Vector dLNG_XML_GEN_FLAG) {
		DLNG_XML_GEN_FLAG = dLNG_XML_GEN_FLAG;
	}

	public Vector getDLNG_inv_flag() {
		return DLNG_inv_flag;
	}

	public void setDLNG_inv_flag(Vector dLNG_inv_flag) {
		DLNG_inv_flag = dLNG_inv_flag;
	}

	public Vector getDLNG_HLPL_INV_SEQ_NO() {
		return DLNG_HLPL_INV_SEQ_NO;
	}

	public void setDLNG_HLPL_INV_SEQ_NO(Vector dLNG_HLPL_INV_SEQ_NO) {
		DLNG_HLPL_INV_SEQ_NO = dLNG_HLPL_INV_SEQ_NO;
	}

	public Vector getDLNG_INVOICE_DT() {
		return DLNG_INVOICE_DT;
	}

	public void setDLNG_INVOICE_DT(Vector dLNG_INVOICE_DT) {
		DLNG_INVOICE_DT = dLNG_INVOICE_DT;
	}

	public Vector getDLNG_GROSS_AMT_USD() {
		return DLNG_GROSS_AMT_USD;
	}

	public void setDLNG_GROSS_AMT_USD(Vector dLNG_GROSS_AMT_USD) {
		DLNG_GROSS_AMT_USD = dLNG_GROSS_AMT_USD;
	}

	public Vector getDLNG_GROSS_AMT_USD_NUMERIC() {
		return DLNG_GROSS_AMT_USD_NUMERIC;
	}

	public void setDLNG_GROSS_AMT_USD_NUMERIC(Vector dLNG_GROSS_AMT_USD_NUMERIC) {
		DLNG_GROSS_AMT_USD_NUMERIC = dLNG_GROSS_AMT_USD_NUMERIC;
	}

	public Vector getDLNG_GROSS_AMT_INR_NUMERIC() {
		return DLNG_GROSS_AMT_INR_NUMERIC;
	}

	public void setDLNG_GROSS_AMT_INR_NUMERIC(Vector dLNG_GROSS_AMT_INR_NUMERIC) {
		DLNG_GROSS_AMT_INR_NUMERIC = dLNG_GROSS_AMT_INR_NUMERIC;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;
	}

	public void setDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG(Vector dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG) {
		DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2;
	}

	public void setDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2(Vector dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2) {
		DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2 = dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC;
	}

	public void setDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC(Vector dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC) {
		DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC = dLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC;
	}

	public Vector getDLNG_NET_AMT_INR() {
		return DLNG_NET_AMT_INR;
	}

	public void setDLNG_NET_AMT_INR(Vector dLNG_NET_AMT_INR) {
		DLNG_NET_AMT_INR = dLNG_NET_AMT_INR;
	}

	public Vector getDLNG_MONTH() {
		return DLNG_MONTH;
	}

	public void setDLNG_MONTH(Vector dLNG_MONTH) {
		DLNG_MONTH = dLNG_MONTH;
	}

	public Vector getDLNG_GROUP_FOREIGN_EXCHG_RATE() {
		return DLNG_GROUP_FOREIGN_EXCHG_RATE;
	}

	public void setDLNG_GROUP_FOREIGN_EXCHG_RATE(Vector dLNG_GROUP_FOREIGN_EXCHG_RATE) {
		DLNG_GROUP_FOREIGN_EXCHG_RATE = dLNG_GROUP_FOREIGN_EXCHG_RATE;
	}

	public Vector getDLNG_PERIOD_START_DT() {
		return DLNG_PERIOD_START_DT;
	}

	public void setDLNG_PERIOD_START_DT(Vector dLNG_PERIOD_START_DT) {
		DLNG_PERIOD_START_DT = dLNG_PERIOD_START_DT;
	}

	public Vector getDLNG_PERIOD_END_DT() {
		return DLNG_PERIOD_END_DT;
	}

	public void setDLNG_PERIOD_END_DT(Vector dLNG_PERIOD_END_DT) {
		DLNG_PERIOD_END_DT = dLNG_PERIOD_END_DT;
	}

	public Vector getDLNG_DUE_DT() {
		return DLNG_DUE_DT;
	}

	public void setDLNG_DUE_DT(Vector dLNG_DUE_DT) {
		DLNG_DUE_DT = dLNG_DUE_DT;
	}

	public Vector getDLNG_EXCHG_RATE() {
		return DLNG_EXCHG_RATE;
	}

	public void setDLNG_EXCHG_RATE(Vector dLNG_EXCHG_RATE) {
		DLNG_EXCHG_RATE = dLNG_EXCHG_RATE;
	}

	public Vector getDLNG_GROSS_AMT_INR() {
		return DLNG_GROSS_AMT_INR;
	}

	public void setDLNG_GROSS_AMT_INR(Vector dLNG_GROSS_AMT_INR) {
		DLNG_GROSS_AMT_INR = dLNG_GROSS_AMT_INR;
	}

	public Vector getDLNG_GROSS_AMT_INR_2() {
		return DLNG_GROSS_AMT_INR_2;
	}

	public void setDLNG_GROSS_AMT_INR_2(Vector dLNG_GROSS_AMT_INR_2) {
		DLNG_GROSS_AMT_INR_2 = dLNG_GROSS_AMT_INR_2;
	}

	public Vector getDLNG_NET_AMT_INR_NUMERIC() {
		return DLNG_NET_AMT_INR_NUMERIC;
	}

	public void setDLNG_NET_AMT_INR_NUMERIC(Vector dLNG_NET_AMT_INR_NUMERIC) {
		DLNG_NET_AMT_INR_NUMERIC = dLNG_NET_AMT_INR_NUMERIC;
	}

	public Vector getDLNG_FINANCIAL_YEAR() {
		return DLNG_FINANCIAL_YEAR;
	}

	public void setDLNG_FINANCIAL_YEAR(Vector dLNG_FINANCIAL_YEAR) {
		DLNG_FINANCIAL_YEAR = dLNG_FINANCIAL_YEAR;
	}

	public Vector getDLNG_CUSTOMER_CD() {
		return DLNG_CUSTOMER_CD;
	}

	public void setDLNG_CUSTOMER_CD(Vector dLNG_CUSTOMER_CD) {
		DLNG_CUSTOMER_CD = dLNG_CUSTOMER_CD;
	}

	public Vector getDLNG_Agreement_base() {
		return DLNG_Agreement_base;
	}

	public void setDLNG_Agreement_base(Vector dLNG_Agreement_base) {
		DLNG_Agreement_base = dLNG_Agreement_base;
	}

	public Vector getDLNG_FGSA_NO() {
		return DLNG_FGSA_NO;
	}

	public void setDLNG_FGSA_NO(Vector dLNG_FGSA_NO) {
		DLNG_FGSA_NO = dLNG_FGSA_NO;
	}

	public Vector getDLNG_FGSA_REV_NO() {
		return DLNG_FGSA_REV_NO;
	}

	public void setDLNG_FGSA_REV_NO(Vector dLNG_FGSA_REV_NO) {
		DLNG_FGSA_REV_NO = dLNG_FGSA_REV_NO;
	}

	public Vector getDLNG_CONTRACT_TYPE() {
		return DLNG_CONTRACT_TYPE;
	}

	public void setDLNG_CONTRACT_TYPE(Vector dLNG_CONTRACT_TYPE) {
		DLNG_CONTRACT_TYPE = dLNG_CONTRACT_TYPE;
	}

	public Vector getDLNG_PLANT_SEQ_NO() {
		return DLNG_PLANT_SEQ_NO;
	}

	public void setDLNG_PLANT_SEQ_NO(Vector dLNG_PLANT_SEQ_NO) {
		DLNG_PLANT_SEQ_NO = dLNG_PLANT_SEQ_NO;
	}

	public Vector getDLNG_Account_Mapping_id() {
		return DLNG_Account_Mapping_id;
	}

	public void setDLNG_Account_Mapping_id(Vector dLNG_Account_Mapping_id) {
		DLNG_Account_Mapping_id = dLNG_Account_Mapping_id;
	}

	public Vector getDLNG_NEW_INV_SEQ_NO() {
		return DLNG_NEW_INV_SEQ_NO;
	}

	public void setDLNG_NEW_INV_SEQ_NO(Vector dLNG_NEW_INV_SEQ_NO) {
		DLNG_NEW_INV_SEQ_NO = dLNG_NEW_INV_SEQ_NO;
	}

	public Vector getDLNG_AdvADJ_FLAG() {
		return DLNG_AdvADJ_FLAG;
	}

	public void setDLNG_AdvADJ_FLAG(Vector dLNG_AdvADJ_FLAG) {
		DLNG_AdvADJ_FLAG = dLNG_AdvADJ_FLAG;
	}

	public Vector getDLNG_CUSTOMER_NAME() {
		return DLNG_CUSTOMER_NAME;
	}

	public void setDLNG_CUSTOMER_NAME(Vector dLNG_CUSTOMER_NAME) {
		DLNG_CUSTOMER_NAME = dLNG_CUSTOMER_NAME;
	}

	public Vector getDLNG_CUSTOMER_ABBR() {
		return DLNG_CUSTOMER_ABBR;
	}

	public void setDLNG_CUSTOMER_ABBR(Vector dLNG_CUSTOMER_ABBR) {
		DLNG_CUSTOMER_ABBR = dLNG_CUSTOMER_ABBR;
	}

	public Vector getDLNG_AVG_PRICE_MMBTU() {
		return DLNG_AVG_PRICE_MMBTU;
	}

	public void setDLNG_AVG_PRICE_MMBTU(Vector dLNG_AVG_PRICE_MMBTU) {
		DLNG_AVG_PRICE_MMBTU = dLNG_AVG_PRICE_MMBTU;
	}

	public Vector getDLNG_EXCHG_RATE_VALUE() {
		return DLNG_EXCHG_RATE_VALUE;
	}

	public void setDLNG_EXCHG_RATE_VALUE(Vector dLNG_EXCHG_RATE_VALUE) {
		DLNG_EXCHG_RATE_VALUE = dLNG_EXCHG_RATE_VALUE;
	}

	public Vector getDLNG_END_DT() {
		return DLNG_END_DT;
	}

	public void setDLNG_END_DT(Vector dLNG_END_DT) {
		DLNG_END_DT = dLNG_END_DT;
	}

	public Vector getDLNG_RATE() {
		return DLNG_RATE;
	}

	public void setDLNG_RATE(Vector dLNG_RATE) {
		DLNG_RATE = dLNG_RATE;
	}

	public Vector getDLNG_RATE_NUMERIC() {
		return DLNG_RATE_NUMERIC;
	}

	public void setDLNG_RATE_NUMERIC(Vector dLNG_RATE_NUMERIC) {
		DLNG_RATE_NUMERIC = dLNG_RATE_NUMERIC;
	}

	public Vector getDLNG_CUM_SUPPLY() {
		return DLNG_CUM_SUPPLY;
	}

	public void setDLNG_CUM_SUPPLY(Vector dLNG_CUM_SUPPLY) {
		DLNG_CUM_SUPPLY = dLNG_CUM_SUPPLY;
	}

	public Vector getDLNG_REM_SUPPLY() {
		return DLNG_REM_SUPPLY;
	}

	public void setDLNG_REM_SUPPLY(Vector dLNG_REM_SUPPLY) {
		DLNG_REM_SUPPLY = dLNG_REM_SUPPLY;
	}

	public Vector getDLNG_HLPL_INV_SEQ() {
		return DLNG_HLPL_INV_SEQ;
	}

	public void setDLNG_HLPL_INV_SEQ(Vector dLNG_HLPL_INV_SEQ) {
		DLNG_HLPL_INV_SEQ = dLNG_HLPL_INV_SEQ;
	}

	public Vector getDLNG_FACTOR() {
		return DLNG_FACTOR;
	}

	public void setDLNG_FACTOR(Vector dLNG_FACTOR) {
		DLNG_FACTOR = dLNG_FACTOR;
	}

	public Vector getDLNG_ADD_TAX() {
		return DLNG_ADD_TAX;
	}

	public void setDLNG_ADD_TAX(Vector dLNG_ADD_TAX) {
		DLNG_ADD_TAX = dLNG_ADD_TAX;
	}

	public Vector getDLNG_NET_AMT_USD() {
		return DLNG_NET_AMT_USD;
	}

	public void setDLNG_NET_AMT_USD(Vector dLNG_NET_AMT_USD) {
		DLNG_NET_AMT_USD = dLNG_NET_AMT_USD;
	}

	public Vector getDLNG_ADD_TAX_USD() {
		return DLNG_ADD_TAX_USD;
	}

	public void setDLNG_ADD_TAX_USD(Vector dLNG_ADD_TAX_USD) {
		DLNG_ADD_TAX_USD = dLNG_ADD_TAX_USD;
	}

	public Vector getDLNG_REMAINING_SUPPLY() {
		return DLNG_REMAINING_SUPPLY;
	}

	public void setDLNG_REMAINING_SUPPLY(Vector dLNG_REMAINING_SUPPLY) {
		DLNG_REMAINING_SUPPLY = dLNG_REMAINING_SUPPLY;
	}

	public Vector getDLNG_EXCESS_SUPPLY() {
		return DLNG_EXCESS_SUPPLY;
	}

	public void setDLNG_EXCESS_SUPPLY(Vector dLNG_EXCESS_SUPPLY) {
		DLNG_EXCESS_SUPPLY = dLNG_EXCESS_SUPPLY;
	}

	public Vector getDLNG_TCQ_tmp() {
		return DLNG_TCQ_tmp;
	}

	public void setDLNG_TCQ_tmp(Vector dLNG_TCQ_tmp) {
		DLNG_TCQ_tmp = dLNG_TCQ_tmp;
	}

	public Vector getDLNG_REMARK() {
		return DLNG_REMARK;
	}

	public void setDLNG_REMARK(Vector dLNG_REMARK) {
		DLNG_REMARK = dLNG_REMARK;
	}

	public Vector getDLNG_SN_SUMRY_CUSTOMER_CD() {
		return DLNG_SN_SUMRY_CUSTOMER_CD;
	}

	public void setDLNG_SN_SUMRY_CUSTOMER_CD(Vector dLNG_SN_SUMRY_CUSTOMER_CD) {
		DLNG_SN_SUMRY_CUSTOMER_CD = dLNG_SN_SUMRY_CUSTOMER_CD;
	}

	public Vector getDLNG_SN_SIGNING_DT() {
		return DLNG_SN_SIGNING_DT;
	}

	public void setDLNG_SN_SIGNING_DT(Vector dLNG_SN_SIGNING_DT) {
		DLNG_SN_SIGNING_DT = dLNG_SN_SIGNING_DT;
	}

	public Vector getDLNG_START_DT_ZR_RV() {
		return DLNG_START_DT_ZR_RV;
	}

	public void setDLNG_START_DT_ZR_RV(Vector dLNG_START_DT_ZR_RV) {
		DLNG_START_DT_ZR_RV = dLNG_START_DT_ZR_RV;
	}

	public Vector getDLNG_END_DT_ZR_RV() {
		return DLNG_END_DT_ZR_RV;
	}

	public void setDLNG_END_DT_ZR_RV(Vector dLNG_END_DT_ZR_RV) {
		DLNG_END_DT_ZR_RV = dLNG_END_DT_ZR_RV;
	}

	public Vector getDLNG_SN_REF_NO() {
		return DLNG_SN_REF_NO;
	}

	public void setDLNG_SN_REF_NO(Vector dLNG_SN_REF_NO) {
		DLNG_SN_REF_NO = dLNG_SN_REF_NO;
	}

	public Vector getDLNG_TCQ_ZERO_REV_tmp() {
		return DLNG_TCQ_ZERO_REV_tmp;
	}

	public void setDLNG_TCQ_ZERO_REV_tmp(Vector dLNG_TCQ_ZERO_REV_tmp) {
		DLNG_TCQ_ZERO_REV_tmp = dLNG_TCQ_ZERO_REV_tmp;
	}

	public Vector getDLNG_TCQ_APP_DT_MAX_REV() {
		return DLNG_TCQ_APP_DT_MAX_REV;
	}

	public void setDLNG_TCQ_APP_DT_MAX_REV(Vector dLNG_TCQ_APP_DT_MAX_REV) {
		DLNG_TCQ_APP_DT_MAX_REV = dLNG_TCQ_APP_DT_MAX_REV;
	}

	public Vector getDLNG_CURR_YR_SUPPLY() {
		return DLNG_CURR_YR_SUPPLY;
	}

	public void setDLNG_CURR_YR_SUPPLY(Vector dLNG_CURR_YR_SUPPLY) {
		DLNG_CURR_YR_SUPPLY = dLNG_CURR_YR_SUPPLY;
	}

	public Vector getDLNG_SN_SUMRY_CUSTOMER_NAME() {
		return DLNG_SN_SUMRY_CUSTOMER_NAME;
	}

	public void setDLNG_SN_SUMRY_CUSTOMER_NAME(Vector dLNG_SN_SUMRY_CUSTOMER_NAME) {
		DLNG_SN_SUMRY_CUSTOMER_NAME = dLNG_SN_SUMRY_CUSTOMER_NAME;
	}

	public Vector getDLNG_PREV_YR_SUPPLY() {
		return DLNG_PREV_YR_SUPPLY;
	}

	public void setDLNG_PREV_YR_SUPPLY(Vector dLNG_PREV_YR_SUPPLY) {
		DLNG_PREV_YR_SUPPLY = dLNG_PREV_YR_SUPPLY;
	}

	public Vector getDLNG_TCQ_ZERO_REV() {
		return DLNG_TCQ_ZERO_REV;
	}

	public void setDLNG_TCQ_ZERO_REV(Vector dLNG_TCQ_ZERO_REV) {
		DLNG_TCQ_ZERO_REV = dLNG_TCQ_ZERO_REV;
	}

	public Vector getDLNG_SIGNING_DT() {
		return DLNG_SIGNING_DT;
	}

	public void setDLNG_SIGNING_DT(Vector dLNG_SIGNING_DT) {
		DLNG_SIGNING_DT = dLNG_SIGNING_DT;
	}

	public Vector getDLNG_TOT_QTY() {
		return DLNG_TOT_QTY;
	}

	public void setDLNG_TOT_QTY(Vector dLNG_TOT_QTY) {
		DLNG_TOT_QTY = dLNG_TOT_QTY;
	}

	public Vector getDLNG_SN_RATE() {
		return DLNG_SN_RATE;
	}

	public void setDLNG_SN_RATE(Vector dLNG_SN_RATE) {
		DLNG_SN_RATE = dLNG_SN_RATE;
	}

	public Vector getDLNG_TOT_SALE_USD() {
		return DLNG_TOT_SALE_USD;
	}

	public void setDLNG_TOT_SALE_USD(Vector dLNG_TOT_SALE_USD) {
		DLNG_TOT_SALE_USD = dLNG_TOT_SALE_USD;
	}

	public Vector getDLNG_QTY() {
		return DLNG_QTY;
	}

	public void setDLNG_QTY(Vector dLNG_QTY) {
		DLNG_QTY = dLNG_QTY;
	}

	public Vector getDLNG_SALE_USD() {
		return DLNG_SALE_USD;
	}

	public void setDLNG_SALE_USD(Vector dLNG_SALE_USD) {
		DLNG_SALE_USD = dLNG_SALE_USD;
	}

	public Vector getDLNG_SN_DTL_CUSTOMER_CD() {
		return DLNG_SN_DTL_CUSTOMER_CD;
	}

	public void setDLNG_SN_DTL_CUSTOMER_CD(Vector dLNG_SN_DTL_CUSTOMER_CD) {
		DLNG_SN_DTL_CUSTOMER_CD = dLNG_SN_DTL_CUSTOMER_CD;
	}

	public Vector getDLNG_SN_DTL_CUSTOMER_NAME() {
		return DLNG_SN_DTL_CUSTOMER_NAME;
	}

	public void setDLNG_SN_DTL_CUSTOMER_NAME(Vector dLNG_SN_DTL_CUSTOMER_NAME) {
		DLNG_SN_DTL_CUSTOMER_NAME = dLNG_SN_DTL_CUSTOMER_NAME;
	}

	public Vector getDLNG_CONT_TYPE1() {
		return DLNG_CONT_TYPE1;
	}

	public void setDLNG_CONT_TYPE1(Vector dLNG_CONT_TYPE1) {
		DLNG_CONT_TYPE1 = dLNG_CONT_TYPE1;
	}

	public Vector getDLNG_CONT_TYPE_NAME1() {
		return DLNG_CONT_TYPE_NAME1;
	}

	public void setDLNG_CONT_TYPE_NAME1(Vector dLNG_CONT_TYPE_NAME1) {
		DLNG_CONT_TYPE_NAME1 = dLNG_CONT_TYPE_NAME1;
	}

	public Vector getDLNG_TCQ1() {
		return DLNG_TCQ1;
	}

	public void setDLNG_TCQ1(Vector dLNG_TCQ1) {
		DLNG_TCQ1 = dLNG_TCQ1;
	}

	public Vector getDLNG_RATE1() {
		return DLNG_RATE1;
	}

	public void setDLNG_RATE1(Vector dLNG_RATE1) {
		DLNG_RATE1 = dLNG_RATE1;
	}

	public Vector getDLNG_SN_NO1() {
		return DLNG_SN_NO1;
	}

	public void setDLNG_SN_NO1(Vector dLNG_SN_NO1) {
		DLNG_SN_NO1 = dLNG_SN_NO1;
	}

	public Vector getDLNG_SIGNING_DT1() {
		return DLNG_SIGNING_DT1;
	}

	public void setDLNG_SIGNING_DT1(Vector dLNG_SIGNING_DT1) {
		DLNG_SIGNING_DT1 = dLNG_SIGNING_DT1;
	}

	public Vector getDLNG_START_DT1() {
		return DLNG_START_DT1;
	}

	public void setDLNG_START_DT1(Vector dLNG_START_DT1) {
		DLNG_START_DT1 = dLNG_START_DT1;
	}

	public Vector getDLNG_QTY1() {
		return DLNG_QTY1;
	}

	public void setDLNG_QTY1(Vector dLNG_QTY1) {
		DLNG_QTY1 = dLNG_QTY1;
	}

	public Vector getDLNG_SN_REF_NO1() {
		return DLNG_SN_REF_NO1;
	}

	public void setDLNG_SN_REF_NO1(Vector dLNG_SN_REF_NO1) {
		DLNG_SN_REF_NO1 = dLNG_SN_REF_NO1;
	}

	public Vector getDLNG_SALE_USD1() {
		return DLNG_SALE_USD1;
	}

	public void setDLNG_SALE_USD1(Vector dLNG_SALE_USD1) {
		DLNG_SALE_USD1 = dLNG_SALE_USD1;
	}

	public Vector getDLNG_QTY2() {
		return DLNG_QTY2;
	}

	public void setDLNG_QTY2(Vector dLNG_QTY2) {
		DLNG_QTY2 = dLNG_QTY2;
	}

	public Vector getDLNG_SALE_USD2() {
		return DLNG_SALE_USD2;
	}

	public void setDLNG_SALE_USD2(Vector dLNG_SALE_USD2) {
		DLNG_SALE_USD2 = dLNG_SALE_USD2;
	}

	public Vector getDLNG_FGSA_NO1() {
		return DLNG_FGSA_NO1;
	}

	public void setDLNG_FGSA_NO1(Vector dLNG_FGSA_NO1) {
		DLNG_FGSA_NO1 = dLNG_FGSA_NO1;
	}

	public Vector getDLNG_SN_REV_NO1() {
		return DLNG_SN_REV_NO1;
	}

	public void setDLNG_SN_REV_NO1(Vector dLNG_SN_REV_NO1) {
		DLNG_SN_REV_NO1 = dLNG_SN_REV_NO1;
	}

	public Vector getDLNG_FGSA_REV_NO1() {
		return DLNG_FGSA_REV_NO1;
	}

	public void setDLNG_FGSA_REV_NO1(Vector dLNG_FGSA_REV_NO1) {
		DLNG_FGSA_REV_NO1 = dLNG_FGSA_REV_NO1;
	}

	public Vector getDLNG_END_DT1() {
		return DLNG_END_DT1;
	}

	public void setDLNG_END_DT1(Vector dLNG_END_DT1) {
		DLNG_END_DT1 = dLNG_END_DT1;
	}

	public String getDLNG_Final_qty() {
		return DLNG_Final_qty;
	}

	public void setDLNG_Final_qty(String dLNG_Final_qty) {
		DLNG_Final_qty = dLNG_Final_qty;
	}

	public String getDLNG_Final_sale_USD() {
		return DLNG_Final_sale_USD;
	}

	public void setDLNG_Final_sale_USD(String dLNG_Final_sale_USD) {
		DLNG_Final_sale_USD = dLNG_Final_sale_USD;
	}

	public String getDLNG_Final_qty2() {
		return DLNG_Final_qty2;
	}

	public void setDLNG_Final_qty2(String dLNG_Final_qty2) {
		DLNG_Final_qty2 = dLNG_Final_qty2;
	}

	public String getDLNG_Final_sale_USD2() {
		return DLNG_Final_sale_USD2;
	}

	public void setDLNG_Final_sale_USD2(String dLNG_Final_sale_USD2) {
		DLNG_Final_sale_USD2 = dLNG_Final_sale_USD2;
	}

	public String getDLNG_Final_SN_rate() {
		return DLNG_Final_SN_rate;
	}

	public void setDLNG_Final_SN_rate(String dLNG_Final_SN_rate) {
		DLNG_Final_SN_rate = dLNG_Final_SN_rate;
	}

	public Vector getTax_diff_val() {
		return tax_diff_val;
	}

	public void setTax_diff_val(Vector tax_diff_val) {
		this.tax_diff_val = tax_diff_val;
	}

	public Vector getVdiff_tcs_flg() {
		return Vdiff_tcs_flg;
	}

	public Vector getVdiff_tcs() {
		return Vdiff_tcs;
	}

	public Vector getVcrdr_financial_year() {
		return Vcrdr_financial_year;
	}

	public int getStart_index_5() {
		return start_index_5;
	}

	public double getDEF_cgst_inr_total() {
		return DEF_cgst_inr_total;
	}

	public double getDEF_sgst_inr_total() {
		return DEF_sgst_inr_total;
	}

	public double getDEF_qty_amt_usd_total() {
		return DEF_qty_amt_usd_total;
	}

	public void setDEF_qty_amt_usd_total(double dEF_qty_amt_usd_total) {
		DEF_qty_amt_usd_total = dEF_qty_amt_usd_total;
	}

	public double getDEF_group_foreign_gross_amt_usd_total() {
		return DEF_group_foreign_gross_amt_usd_total;
	}

	public void setDEF_group_foreign_gross_amt_usd_total(double dEF_group_foreign_gross_amt_usd_total) {
		DEF_group_foreign_gross_amt_usd_total = dEF_group_foreign_gross_amt_usd_total;
	}

	public Vector getDef_hlpl_inv_seq_no() {
		return def_hlpl_inv_seq_no;
	}

	public void setDef_hlpl_inv_seq_no(Vector def_hlpl_inv_seq_no) {
		this.def_hlpl_inv_seq_no = def_hlpl_inv_seq_no;
	}

	public Vector getDef_invoice_dt() {
		return def_invoice_dt;
	}

	public void setDef_invoice_dt(Vector def_invoice_dt) {
		this.def_invoice_dt = def_invoice_dt;
	}

	public Vector getDef_period_start_dt() {
		return def_period_start_dt;
	}

	public void setDef_period_start_dt(Vector def_period_start_dt) {
		this.def_period_start_dt = def_period_start_dt;
	}

	public Vector getDef_period_end_dt() {
		return def_period_end_dt;
	}

	public void setDef_period_end_dt(Vector def_period_end_dt) {
		this.def_period_end_dt = def_period_end_dt;
	}

	public Vector getDef_sale_price() {
		return def_sale_price;
	}

	public void setDef_sale_price(Vector def_sale_price) {
		this.def_sale_price = def_sale_price;
	}

	public Vector getDef_due_dt() {
		return def_due_dt;
	}

	public void setDef_due_dt(Vector def_due_dt) {
		this.def_due_dt = def_due_dt;
	}

	public Vector getDef_total_qty() {
		return def_total_qty;
	}

	public void setDef_total_qty(Vector def_total_qty) {
		this.def_total_qty = def_total_qty;
	}

	public Vector getDef_gross_amt_inr() {
		return def_gross_amt_inr;
	}

	public void setDef_gross_amt_inr(Vector def_gross_amt_inr) {
		this.def_gross_amt_inr = def_gross_amt_inr;
	}

	public Vector getDef_net_amt_inr() {
		return def_net_amt_inr;
	}

	public void setDef_net_amt_inr(Vector def_net_amt_inr) {
		this.def_net_amt_inr = def_net_amt_inr;
	}

	public Vector getDef_financial_year() {
		return def_financial_year;
	}

	public void setDef_financial_year(Vector def_financial_year) {
		this.def_financial_year = def_financial_year;
	}

	public Vector getDef_customer_cd() {
		return def_customer_cd;
	}

	public void setDef_customer_cd(Vector def_customer_cd) {
		this.def_customer_cd = def_customer_cd;
	}

	public Vector getDef_tax_struct_cd() {
		return def_tax_struct_cd;
	}

	public void setDef_tax_struct_cd(Vector def_tax_struct_cd) {
		this.def_tax_struct_cd = def_tax_struct_cd;
	}

	public Vector getDef_sn_no() {
		return def_sn_no;
	}

	public void setDef_sn_no(Vector def_sn_no) {
		this.def_sn_no = def_sn_no;
	}

	public Vector getDef_sn_rev_no() {
		return def_sn_rev_no;
	}

	public void setDef_sn_rev_no(Vector def_sn_rev_no) {
		this.def_sn_rev_no = def_sn_rev_no;
	}

	public Vector getDef_fgsa_no() {
		return def_fgsa_no;
	}

	public void setDef_fgsa_no(Vector def_fgsa_no) {
		this.def_fgsa_no = def_fgsa_no;
	}

	public Vector getDef_fgsa_rev_no() {
		return def_fgsa_rev_no;
	}

	public void setDef_fgsa_rev_no(Vector def_fgsa_rev_no) {
		this.def_fgsa_rev_no = def_fgsa_rev_no;
	}

	public Vector getDef_invoice_month() {
		return def_invoice_month;
	}

	public void setDef_invoice_month(Vector def_invoice_month) {
		this.def_invoice_month = def_invoice_month;
	}

	public Vector getDef_contract_type() {
		return def_contract_type;
	}

	public void setDef_contract_type(Vector def_contract_type) {
		this.def_contract_type = def_contract_type;
	}

	public Vector getDef_contact_person_cd() {
		return def_contact_person_cd;
	}

	public void setDef_contact_person_cd(Vector def_contact_person_cd) {
		this.def_contact_person_cd = def_contact_person_cd;
	}

	public Vector getDef_tax_amt_inr() {
		return def_tax_amt_inr;
	}

	public void setDef_tax_amt_inr(Vector def_tax_amt_inr) {
		this.def_tax_amt_inr = def_tax_amt_inr;
	}

	public Vector getDef_plant_seq_no() {
		return def_plant_seq_no;
	}

	public void setDef_plant_seq_no(Vector def_plant_seq_no) {
		this.def_plant_seq_no = def_plant_seq_no;
	}

	public Vector getDef_tax_flag() {
		return def_tax_flag;
	}

	public void setDef_tax_flag(Vector def_tax_flag) {
		this.def_tax_flag = def_tax_flag;
	}

	public Vector getDef_cust_inv_seq_no() {
		return def_cust_inv_seq_no;
	}

	public void setDef_cust_inv_seq_no(Vector def_cust_inv_seq_no) {
		this.def_cust_inv_seq_no = def_cust_inv_seq_no;
	}

	public Vector getDef_sun_approval() {
		return def_sun_approval;
	}

	public void setDef_sun_approval(Vector def_sun_approval) {
		this.def_sun_approval = def_sun_approval;
	}

	public Vector getDef_mapping_id() {
		return def_mapping_id;
	}

	public void setDef_mapping_id(Vector def_mapping_id) {
		this.def_mapping_id = def_mapping_id;
	}

	public Vector getDef_new_inv_seq_no() {
		return def_new_inv_seq_no;
	}

	public void setDef_new_inv_seq_no(Vector def_new_inv_seq_no) {
		this.def_new_inv_seq_no = def_new_inv_seq_no;
	}

	public Vector getDef_customer_name() {
		return def_customer_name;
	}

	public void setDef_customer_name(Vector def_customer_name) {
		this.def_customer_name = def_customer_name;
	}

	public Vector getDef_qty() {
		return def_qty;
	}

	public void setDef_qty(Vector def_qty) {
		this.def_qty = def_qty;
	}

	public Vector getDef_XML_GEN_FLAG() {
		return def_XML_GEN_FLAG;
	}

	public void setDef_XML_GEN_FLAG(Vector def_XML_GEN_FLAG) {
		this.def_XML_GEN_FLAG = def_XML_GEN_FLAG;
	}

	public Vector getDef_customer_Invoice_Tax_Code() {
		return def_customer_Invoice_Tax_Code;
	}

	public void setDef_customer_Invoice_Tax_Code(Vector def_customer_Invoice_Tax_Code) {
		this.def_customer_Invoice_Tax_Code = def_customer_Invoice_Tax_Code;
	}

	public Vector getDef_customer_Invoice_Tax_Amt() {
		return def_customer_Invoice_Tax_Amt;
	}

	public void setDef_customer_Invoice_Tax_Amt(Vector def_customer_Invoice_Tax_Amt) {
		this.def_customer_Invoice_Tax_Amt = def_customer_Invoice_Tax_Amt;
	}

	public Vector getDef_customer_Invoice_Tax_Name() {
		return def_customer_Invoice_Tax_Name;
	}

	public void setDef_customer_Invoice_Tax_Name(Vector def_customer_Invoice_Tax_Name) {
		this.def_customer_Invoice_Tax_Name = def_customer_Invoice_Tax_Name;
	}

	public Vector getDef_customer_Invoice_Tax_Rate() {
		return def_customer_Invoice_Tax_Rate;
	}

	public void setDef_customer_Invoice_Tax_Rate(Vector def_customer_Invoice_Tax_Rate) {
		this.def_customer_Invoice_Tax_Rate = def_customer_Invoice_Tax_Rate;
	}

	public Vector getDef_customer_Invoice_Tax_Abbr() {
		return def_customer_Invoice_Tax_Abbr;
	}

	public void setDef_customer_Invoice_Tax_Abbr(Vector def_customer_Invoice_Tax_Abbr) {
		this.def_customer_Invoice_Tax_Abbr = def_customer_Invoice_Tax_Abbr;
	}

	public Map getDef_customer_tax_cd() {
		return def_customer_tax_cd;
	}

	public void setDef_customer_tax_cd(Map def_customer_tax_cd) {
		this.def_customer_tax_cd = def_customer_tax_cd;
	}

	public Map getDef_customer_tax_amt() {
		return def_customer_tax_amt;
	}

	public void setDef_customer_tax_amt(Map def_customer_tax_amt) {
		this.def_customer_tax_amt = def_customer_tax_amt;
	}

	public Map getDef_customer_tax_name() {
		return def_customer_tax_name;
	}

	public void setDef_customer_tax_name(Map def_customer_tax_name) {
		this.def_customer_tax_name = def_customer_tax_name;
	}

	public Map getDef_customer_tax_abbr() {
		return def_customer_tax_abbr;
	}

	public void setDef_customer_tax_abbr(Map def_customer_tax_abbr) {
		this.def_customer_tax_abbr = def_customer_tax_abbr;
	}

	public Map getDef_customer_tax_rate() {
		return def_customer_tax_rate;
	}

	public void setDef_customer_tax_rate(Map def_customer_tax_rate) {
		this.def_customer_tax_rate = def_customer_tax_rate;
	}

	public void setDEF_qty_amt_inr_total(double dEF_qty_amt_inr_total) {
		DEF_qty_amt_inr_total = dEF_qty_amt_inr_total;
	}

	public void setDEF_gross_amt_inr_total(double dEF_gross_amt_inr_total) {
		DEF_gross_amt_inr_total = dEF_gross_amt_inr_total;
	}

	public void setDEF_net_amt_inr_total(double dEF_net_amt_inr_total) {
		DEF_net_amt_inr_total = dEF_net_amt_inr_total;
	}

	public void setDEF_gross_amt_usd_total(double dEF_gross_amt_usd_total) {
		DEF_gross_amt_usd_total = dEF_gross_amt_usd_total;
	}

	public void setDEF_qty_total(double dEF_qty_total) {
		DEF_qty_total = dEF_qty_total;
	}

	public void setDEF_total_tax_inr_total(double dEF_total_tax_inr_total) {
		DEF_total_tax_inr_total = dEF_total_tax_inr_total;
	}

	public void setDEF_igst_inr_total(double dEF_igst_inr_total) {
		DEF_igst_inr_total = dEF_igst_inr_total;
	}

	public void setDEF_sgst_inr_total(double dEF_sgst_inr_total) {
		DEF_sgst_inr_total = dEF_sgst_inr_total;
	}

	public Vector getDEF_IGST_TAX() {
		return DEF_IGST_TAX;
	}

	public void setDEF_IGST_TAX(Vector dEF_IGST_TAX) {
		DEF_IGST_TAX = dEF_IGST_TAX;
	}

	public Vector getDEF_SGST_TAX() {
		return DEF_SGST_TAX;
	}

	public void setDEF_SGST_TAX(Vector dEF_SGST_TAX) {
		DEF_SGST_TAX = dEF_SGST_TAX;
	}

	public Vector getVAgreement_base() {
		return VAgreement_base;
	}

	public void setVAgreement_base(Vector vAgreement_base) {
		VAgreement_base = vAgreement_base;
	}

	public Vector getVgross_trans() {
		return Vgross_trans;
	}

	public void setVgross_trans(Vector vgross_trans) {
		Vgross_trans = vgross_trans;
	}

	public Vector getVgross_trans_inr() {
		return Vgross_trans_inr;
	}

	public void setVgross_trans_inr(Vector vgross_trans_inr) {
		Vgross_trans_inr = vgross_trans_inr;
	}

	public Vector getVdrcrcriteria() {
		return Vdrcrcriteria;
	}

	public void setVdrcrcriteria(Vector vdrcrcriteria) {
		Vdrcrcriteria = vdrcrcriteria;
	}

	public Vector getVdrcrflag() {
		return Vdrcrflag;
	}

	public void setVdrcrflag(Vector vdrcrflag) {
		Vdrcrflag = vdrcrflag;
	}

	public Vector getVtds_app_flag() {
		return Vtds_app_flag;
	}

	public Vector getVtds_app_amt() {
		return Vtds_app_amt;
	}

	/*
	 
	  public void get_Sales_SummaryOLD()
	{
		//System.out.println(TCQ);
		//System.out.println(start_index_1);
		//System.out.println(end_index_1);
		//System.out.println(start_index_2);
		//System.out.println(end_index_2);
		
		long summry_start_index_1 = 0;
		long summry_end_index_1 = 0;
		long summry_start_index_2 = 0;
		long summry_end_index_2 = 0;
		
		if(end_index_1<0)
		{ 
			//NO SALES DATA long 
			//summry_start_index_1 = 0;
			// summry_end_index_1 = 0;
		}
		else
		{
			String chk1 = "";
			String chk2 = "";
			String chk3 = "";
			String chk4 = "";
			String chk5 = "";
			String chk6 = "";
			String chk7 = "";
			String chk8 = "";
			String chk9 = "";
			String chk10 = "";
			
			summry_start_index_1 = 0 ;
			summry_end_index_1 = 0;
			String month = MONTH.elementAt(0).toString().trim();
			double tcq = 0;
			double rem_supply = 0;
			double tot_qty = 0;
			double gross_amt_usd = 0;
			double gross_amt_inr = 0;
			double vat_amt = 0;
			double add_tax = 0;
			double sales_tax_amt = 0;
			double service_tax = 0;
			double edu_cess_tax = 0;
			//EDU_CESS_TAX
			for(int i=start_index_1; i<=end_index_1; i++)
		  	{ 
				if(month.equals(MONTH.elementAt(i).toString().trim()))
				{
					String val = get_tot(TCQ.elementAt(i).toString().trim());
					if(!TCQ.elementAt(i).toString().trim().equals("-"))
					{
						tcq += Double.parseDouble(TCQ.elementAt(i).toString().trim());
						chk1 += "y";
					}
					else
					{
						tcq += 0;
						chk1 += "-";
					}
					
					if(!REM_SUPPLY.elementAt(i).toString().trim().equals("-"))
					{
						rem_supply += Double.parseDouble(REM_SUPPLY.elementAt(i).toString().trim());
						chk2 += "y";
					}
					else
					{
						rem_supply += 0;
						chk2 += "-";
					}
					if(!TOTAL_QTY.elementAt(i).toString().trim().equals("-"))
					{
						tot_qty += Double.parseDouble(TOTAL_QTY.elementAt(i).toString().trim());
						chk3 += "y";
					}
					else
					{
						tot_qty += 0;
						chk3 += "-";
					}
					if(!GROSS_AMT_USD.elementAt(i).toString().trim().equals("-"))
					{
						gross_amt_usd += Double.parseDouble(GROSS_AMT_USD.elementAt(i).toString().trim());
						chk4 += "y";
					}
					else
					{
						gross_amt_usd += 0;
						chk4 += "-";
					}
					if(!GROSS_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						gross_amt_inr += Double.parseDouble(GROSS_AMT_INR.elementAt(i).toString().trim());
						chk5 += "y";
					}
					else
					{
						gross_amt_inr += 0;
						chk5 += "-";
					}
					if(!VAT_AMT.elementAt(i).toString().trim().equals("-"))
					{
						vat_amt += Double.parseDouble(VAT_AMT.elementAt(i).toString().trim());
						chk6 += "y";
					}
					else
					{
						vat_amt += 0;
						chk6 += "-";
					}
					if(!ADD_TAX.elementAt(i).toString().trim().equals("-"))
					{
						add_tax += Double.parseDouble(ADD_TAX.elementAt(i).toString().trim());
						chk7 += "y";
					}
					else
					{
						add_tax += 0;
						chk7 += "-";
					}
					if(!SALES_TAX_AMT.elementAt(i).toString().trim().equals("-"))
					{
						sales_tax_amt += Double.parseDouble(SALES_TAX_AMT.elementAt(i).toString().trim());
						chk8 += "y";
					}
					else
					{
						sales_tax_amt += 0;
						chk8 += "-";
					}
					if(!SERVICE_TAX.elementAt(i).toString().trim().equals("-"))
					{
						service_tax += Double.parseDouble(SERVICE_TAX.elementAt(i).toString().trim());
						chk9 += "y";
					}
					else
					{
						service_tax += 0;
						chk9 += "-";
					}
					if(!EDU_CESS_TAX.elementAt(i).toString().trim().equals("-"))
					{
						edu_cess_tax += Double.parseDouble(EDU_CESS_TAX.elementAt(i).toString().trim());
						chk10 += "y";
					}
					else
					{
						edu_cess_tax += 0;
						chk10 += "-";
					}
					//
				}
				else
				{
					summry_end_index_1 +=1;
					SUMMRY_MONTH.add(month);
					if(chk1.contains("y"))
					{
						SUMMRY_TCQ.add(nf3.format(tcq));
					}
					else
					{
						SUMMRY_TCQ.add("-");
					}
					if(chk2.contains("y"))
					{
						SUMMRY_REM_SUPPLY.add(nf3.format(rem_supply));
					}
					else
					{
						SUMMRY_REM_SUPPLY.add("-");
					}
					if(chk3.contains("y"))
					{
						SUMMRY_TOTAL_QTY.add(nf3.format(tot_qty));
					}
					else
					{
						SUMMRY_TOTAL_QTY.add("-");
					}
					if(chk4.contains("y"))
					{
						SUMMRY_GROSS_AMT_USD.add(nf3.format(gross_amt_usd));
					}
					else
					{
						SUMMRY_GROSS_AMT_USD.add("-");
					}
					if(chk5.contains("y"))
					{
						SUMMRY_GROSS_AMT_INR.add(nf3.format(gross_amt_inr));
					}
					else
					{
						SUMMRY_GROSS_AMT_INR.add("-");
					}
					
					if(tot_qty != 0)
					{
						SUMMRY_inr_per_mmbtu.add(nf2.format(gross_amt_inr/tot_qty));
					}
					else
					{
						SUMMRY_inr_per_mmbtu.add("-");
					}
					
					if(chk6.contains("y"))
					{
						SUMMRY_VAT_AMT.add(nf3.format(vat_amt));
					}
					else
					{
						SUMMRY_VAT_AMT.add("-");
					}
					if(chk7.contains("y"))
					{
						SUMMRY_ADD_TAX.add(nf3.format(add_tax));
					}
					else
					{
						SUMMRY_ADD_TAX.add("-");
					}
					if(chk8.contains("y"))
					{
						SUMMRY_SALES_TAX_AMT.add(nf3.format(sales_tax_amt));
					}
					else
					{
						SUMMRY_SALES_TAX_AMT.add("-");
					}
					if(chk9.contains("y"))
					{
						SUMMRY_SERVICE_TAX.add(nf3.format(service_tax));
					}
					else
					{
						SUMMRY_SERVICE_TAX.add("-");
					}
					if(chk10.contains("y"))
					{
						SUMMRY_EDU_CESS_TAX.add(nf3.format(edu_cess_tax));
					}
					else
					{
						SUMMRY_EDU_CESS_TAX.add("-");
					}
					
					//=========================================================================
					if(!TCQ.elementAt(i).toString().trim().equals("-"))
					{
						tcq = Double.parseDouble(TCQ.elementAt(i).toString().trim());
						chk1 = "y";
					}
					else
					{
						tcq = 0;
						chk1 = "-";
					}
					if(!REM_SUPPLY.elementAt(i).toString().trim().equals("-"))
					{
						rem_supply += Double.parseDouble(REM_SUPPLY.elementAt(i).toString().trim());
						chk2 = "y";
					}
					else
					{
						rem_supply += 0;
						chk2 = "-";
					}
					if(!TOTAL_QTY.elementAt(i).toString().trim().equals("-"))
					{
						tot_qty = Double.parseDouble(TOTAL_QTY.elementAt(i).toString().trim());
						chk3 = "y";
					}
					else
					{
						tot_qty = 0;
						chk3 = "-";
					}
					if(!GROSS_AMT_USD.elementAt(i).toString().trim().equals("-"))
					{
						gross_amt_usd = Double.parseDouble(GROSS_AMT_USD.elementAt(i).toString().trim());
						chk4 = "y";
					}
					else
					{
						gross_amt_usd = 0;
						chk4 = "-";
					}
					if(!GROSS_AMT_INR.elementAt(i).toString().trim().equals("-"))
					{
						gross_amt_inr = Double.parseDouble(GROSS_AMT_INR.elementAt(i).toString().trim());
						chk5 = "y";
					}
					else
					{
						gross_amt_inr = 0;
						chk5 = "-";					
					}
					if(!VAT_AMT.elementAt(i).toString().trim().equals("-"))
					{
						vat_amt = Double.parseDouble(VAT_AMT.elementAt(i).toString().trim());
						chk6 = "y";
					}
					else
					{
						vat_amt = 0;
						chk6 = "-";
					}
					if(!ADD_TAX.elementAt(i).toString().trim().equals("-"))
					{
						add_tax = Double.parseDouble(ADD_TAX.elementAt(i).toString().trim());
						chk7 = "y";
					}
					else
					{
						add_tax = 0;
						chk7 = "-";
					}
					if(!SALES_TAX_AMT.elementAt(i).toString().trim().equals("-"))
					{
						sales_tax_amt = Double.parseDouble(SALES_TAX_AMT.elementAt(i).toString().trim());
						chk8 = "y";
					}
					else
					{
						sales_tax_amt = 0;
						chk8 = "-";
					}
					if(!SERVICE_TAX.elementAt(i).toString().trim().equals("-"))
					{
						service_tax = Double.parseDouble(SERVICE_TAX.elementAt(i).toString().trim());
						chk9 = "y";
					}
					else
					{
						service_tax = 0;
						chk9 = "-";
					}
					if(!EDU_CESS_TAX.elementAt(i).toString().trim().equals("-"))
					{
						edu_cess_tax = Double.parseDouble(EDU_CESS_TAX.elementAt(i).toString().trim());
						chk10 = "y";
					}
					else
					{
						edu_cess_tax = 0;
						chk10 = "-";
					}
					
				}
				
				month = MONTH.elementAt(i).toString().trim();
		  	}
		}
		
		if((end_index_2-start_index_2)<0)
		{
			//NO REGAS DATA
		}
		else
		{
			for(int i=start_index_2; i<=end_index_2; i++)
		  	{ 
				
		  	}
		}
		
		
		/*
		
		//-	Transportation & Shrinkage
		//GROSS_AMT_INR
		
		//Usd>>
		public Vector SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = new Vector();
	//	-	Transportation & Shrinkage
		//public Vector SUMMRY_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = new Vector();
		public Vector SUMMRY_SALE_PRICE = new Vector(); //  USD/MMBTU 
		public Vector SUMMRY_VAT_AMT_USD = new Vector();
		public Vector SUMMRY_ADD_TAX_USD = new Vector();
		public Vector SUMMRY_SALES_TAX_AMT_USD = new Vector();
		public Vector SUMMRY_SERVICE_TAX_USD = new Vector();
		public Vector SUMMRY_EDU_CESS_TAX_USD = new Vector();
		public Vector SUMMRY_HEDU_CESS_TAX_USD = new Vector();
		public Vector SUMMRY_NET_AMT_USD = new Vector();
		 */
		
		/*
		
		-	Transportation & Shrinkage
		GROSS_AMT_INR
		
		Usd>>
		GROSS_AMT_USD_GROUP_FOREIGN_EXCHG
		-	Transportation & Shrinkage
		GROSS_AMT_USD_GROUP_FOREIGN_EXCHG
		SALE_PRICE  USD/MMBTU
		VAT_AMT_USD
		ADD_TAX_USD
		SALES_TAX_AMT_USD
		?
		SERVICE_TAX_USD
		EDU_CESS_TAX_USD
		HEDU_CESS_TAX_USD
		NET_AMT_USD

		
	}
	//TEST MD20111226
	  
	  
	  
	  
	  REGAS_HLPL_INV_SEQ_NO
	REGAS_INVOICE_DT
	REGAS_INVOICE_MONTH
	REGAS_CUSTOMER_CD_INV
	
	REGAS_CUSTOMER_NM
	REGAS_CUSTOMER_ABBR
	
	REGAS_SUPPL_NM
	REGAS_SUPPL_ABBR
	
	REGAS_TOTAL_QTY
	REGAS_EXCHG_RATE_VALUE
	
	REGAS_GROSS_AMT_USD
	REGAS_GROSS_AMT_INR
	REGAS_NET_AMT_INR
	
	REGAS_CONTRACT_TYPE
	REGAS_CONTACT_PERSON_CD
	REGAS_EXCHG_RATE_CD
	
	REGAS_EXCHG_RATE_DT
	REGAS_EXCHG_RATE_TYPE
	REGAS_PLANT_SEQ_NO
	
	REGAS_CUST_INV_SEQ_NO 
	REGAS_SUN_APPROVAL 
	REGAS_FINANCIAL_YEAR 
	REGAS_TAX_STRUCT_CD 
	REGAS_TAX_SERVICE 
	REGAS_TAX_EDU_CESS 
	REGAS_TAX_HIEDU_CESS 
	
	   
	REGAS_SUG 
	REGAS_CARGO_REF_NO 
	REGAS_CARGO_REF_NO_ON_INV 
	REGAS_ACTUAL_RECPT_DT 
	REGAS_ADQ_QTY 
	REGAS_GAS_TARIF 
	REGAS_SUPP_CD 
	REGAS_SHIP_NAME 
	REGAS_CUSTOMER_CD_CARGO
	REGAS_CUSTOMER_ABBR_CARGO
	
	REGAS_OP_BAL_REGAS
	REGAS_OP_BAL_REGAS_MONTH
	REGAS_OP_BAL_REGAS_YEAR
	REGAS_OFFSPEC_RATE 
	REGAS_OFFSPEC_FLAG
	REGAS_OFFSPEC_REJ_QTY
	REGAS_OFFSPEC_ACC_QTY
	
	
	REGAS_RECIEPT
	REGAS_REGASSIFIED
	REGAS_VARIABLE_COST
	REGAS_CLOSING_STOCK
	REGAS_TOT_INVOICE_VAL_INR*/
	public void getTotalGroupWiseOnlyIGXInvoice(){

		try
		{
			/*System.out.println("TCQ - "+TCQ.size()+"--"+TCQ);
			System.out.println("REM_SUPPLY - "+REM_SUPPLY.size()+"--"+REM_SUPPLY);
			System.out.println("TOTAL_QTY - "+TOTAL_QTY.size()+"--"+TOTAL_QTY);
			System.out.println("GROSS_AMT_INR - "+GROSS_AMT_INR.size()+"--"+GROSS_AMT_INR);
			System.out.println("GROSS_AMT_USD - "+GROSS_AMT_USD.size()+"--"+GROSS_AMT_USD);
			System.out.println("VAT_AMT - "+VAT_AMT.size()+"--"+VAT_AMT);
			System.out.println("ADD_TAX - "+ADD_TAX.size()+"--"+ADD_TAX);
			System.out.println("Vtcs_amt - "+Vtcs_amt.size()+"--"+Vtcs_amt);
			System.out.println("SERVICE_TAX - "+SERVICE_TAX.size()+"--"+SERVICE_TAX);
			System.out.println("SALES_TAX_AMT - "+SALES_TAX_AMT.size()+"--"+SALES_TAX_AMT);
			System.out.println("SBC_TAX - "+SBC_TAX.size()+"--"+SBC_TAX);
			System.out.println("EDU_CESS_TAX - "+EDU_CESS_TAX.size()+"--"+EDU_CESS_TAX);
			System.out.println("HEDU_CESS_TAX - "+HEDU_CESS_TAX.size()+"--"+HEDU_CESS_TAX);
			System.out.println("TAX_AMT_INR - "+TAX_AMT_INR.size()+"--"+TAX_AMT_INR);
			System.out.println("NET_AMT_INR - "+NET_AMT_INR.size()+"--"+NET_AMT_INR);
			System.out.println("GROSS_AMT_USD_GROUP_FOREIGN_EXCHG - "+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.size()+"--"+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG);
			System.out.println("VAT_AMT_USD - "+VAT_AMT_USD.size()+"--"+VAT_AMT_USD);
			System.out.println("ADD_TAX_USD - "+ADD_TAX_USD.size()+"--"+ADD_TAX_USD);
			System.out.println("SERVICE_TAX_USD - "+SERVICE_TAX_USD.size()+"--"+SERVICE_TAX_USD);
			System.out.println("SBC_TAX_USD - "+SBC_TAX_USD.size()+"--"+SBC_TAX_USD);
			System.out.println("EDU_CESS_TAX_USD - "+EDU_CESS_TAX_USD.size()+"--"+EDU_CESS_TAX_USD);
			System.out.println("HEDU_CESS_TAX_USD - "+HEDU_CESS_TAX_USD.size()+"--"+HEDU_CESS_TAX_USD);
			System.out.println("NET_AMT_USD - "+NET_AMT_USD.size()+"--"+NET_AMT_USD);
			*/
			int j=start_index_10; int n=-1;
			for(int i=0; i<IGX_VSTATE_CD.size(); i++)
			{
				double tcq=0;
				double rem_supply=0;
				double total_qty=0;
				double gross_amt_inr=0;
				double gross_amt_usd=0;
				double vat_amt=0;
				double add_tax=0;
				double sales_tax_amt=0;
				double tcs_amt=0;
				double service_tax=0;
				double sbc_tax=0;
				double edu_cess_tax=0;
				double hedu_cess_tax=0;
				double tax_amt_inr=0;
				double net_amt_inr=0;
				double gross_amt_usd_grp_foreign_ex=0;
				double vat_amt_usd=0;
				double add_tax_usd=0;
				double service_tax_usd=0;
				double sbc_tax_usd=0;
				double edu_cess_tax_usd=0;
				double hedu_cess_tax_usd=0;
				double net_amt_usd=0;
				double tra_gross_inr=0;
				
				int index = Integer.parseInt(""+IGX_VST_WISE_INDEX.elementAt(i));
				for(j = j; j<=end_index_10; j++)
				{
					n=n+1;
					if(n==index)
			  		{
			  			n=n-1;
			  			break;
			  		}
			  		else
			  		{
			  			/*System.out.println("TCQ - "+TCQ.size()+"-#"+TCQ.elementAt(j));
			  			System.out.println("REM_SUPPLY - "+REM_SUPPLY.size()+"-#"+REM_SUPPLY.elementAt(j));
			  			System.out.println("TOTAL_QTY - "+TOTAL_QTY.size()+"-#"+TOTAL_QTY.elementAt(j));
			  			System.out.println("GROSS_AMT_INR - "+GROSS_AMT_INR.size()+"-#"+GROSS_AMT_INR.elementAt(j));
			  			System.out.println("GROSS_AMT_USD - "+GROSS_AMT_USD.size()+"-#"+GROSS_AMT_USD.elementAt(j));
			  			System.out.println("VAT_AMT - "+VAT_AMT.size()+"-#"+VAT_AMT.elementAt(j));
			  			System.out.println("ADD_TAX - "+ADD_TAX.size()+"-#"+ADD_TAX.elementAt(j));
			  			System.out.println("Vtcs_amt - "+Vtcs_amt.size()+"-#"+Vtcs_amt.elementAt(j));
			  			System.out.println("SERVICE_TAX - "+SERVICE_TAX.size()+"-#"+SERVICE_TAX.elementAt(j));
			  			System.out.println("SALES_TAX_AMT - "+SALES_TAX_AMT.size()+"-#"+SALES_TAX_AMT.elementAt(j));
			  			System.out.println("SBC_TAX - "+SBC_TAX.size()+"-#"+SBC_TAX.elementAt(j));
			  			System.out.println("EDU_CESS_TAX - "+EDU_CESS_TAX.size()+"-#"+EDU_CESS_TAX.elementAt(j));
			  			System.out.println("HEDU_CESS_TAX - "+HEDU_CESS_TAX.size()+"-#"+HEDU_CESS_TAX.elementAt(j));
			  			System.out.println("TAX_AMT_INR - "+TAX_AMT_INR.size()+"-#"+TAX_AMT_INR.elementAt(j));
			  			System.out.println("NET_AMT_INR - "+NET_AMT_INR.size()+"-#"+NET_AMT_INR.elementAt(j));
			  			System.out.println("GROSS_AMT_USD_GROUP_FOREIGN_EXCHG - "+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.size()+"-#"+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j));
			  			System.out.println("VAT_AMT_USD - "+VAT_AMT_USD.size()+"-#"+VAT_AMT_USD.elementAt(j));
			  			System.out.println("ADD_TAX_USD - "+ADD_TAX_USD.size()+"-#"+ADD_TAX_USD.elementAt(j));
			  			System.out.println("SERVICE_TAX_USD - "+SERVICE_TAX_USD.size()+"-#"+SERVICE_TAX_USD.elementAt(j));
			  			System.out.println("SBC_TAX_USD - "+SBC_TAX_USD.size()+"-#"+SBC_TAX_USD.elementAt(j));
			  			System.out.println("EDU_CESS_TAX_USD - "+EDU_CESS_TAX_USD.size()+"-#"+EDU_CESS_TAX_USD.elementAt(j));
			  			System.out.println("HEDU_CESS_TAX_USD - "+HEDU_CESS_TAX_USD.size()+"-#"+HEDU_CESS_TAX_USD.elementAt(j));
			  			System.out.println("NET_AMT_USD - "+NET_AMT_USD.size()+"-#"+NET_AMT_USD.elementAt(j));*/

			  			if(!IGX_TCQ.elementAt(j).equals("-") && !IGX_TCQ.elementAt(j).equals("")){
			  				tcq += Double.parseDouble(""+IGX_TCQ.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				tcq +=0;
			  			}
			  			if(!IGX_REM_SUPPLY.elementAt(j).equals("-") && !IGX_REM_SUPPLY.elementAt(j).equals("")){
			  				rem_supply += Double.parseDouble(""+IGX_REM_SUPPLY.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				rem_supply +=0;
			  			}
			  			if(!IGX_TOTAL_QTY.elementAt(j).equals("-") && !IGX_TOTAL_QTY.elementAt(j).equals("")){
			  				total_qty += Double.parseDouble(""+IGX_TOTAL_QTY.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				total_qty +=0;
			  			}
			  			if(!IGX_GROSS_AMT_INR.elementAt(j).equals("-") && !IGX_GROSS_AMT_INR.elementAt(j).equals("")){
			  				gross_amt_inr += Double.parseDouble(""+IGX_GROSS_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				gross_amt_inr +=0;
			  			}
			  			if(!IGX_GROSS_AMT_USD.elementAt(j).equals("-") && !IGX_GROSS_AMT_USD.elementAt(j).equals("")){
			  				gross_amt_usd += Double.parseDouble(""+IGX_GROSS_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				gross_amt_usd +=0;
			  			}
			  			if(!IGX_VAT_AMT.elementAt(j).equals("-") && !IGX_VAT_AMT.elementAt(j).equals("")){
			  				vat_amt += Double.parseDouble(""+IGX_VAT_AMT.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				vat_amt+=0;
			  			}
			  			/*if(!ADD_TAX.elementAt(j).equals("-") && !ADD_TAX.elementAt(j).equals("")){
			  				add_tax += Double.parseDouble(""+ADD_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				add_tax=0;	
			  			}*/
			  			if(!IGX_SALES_TAX_AMT.elementAt(j).equals("-") && !IGX_SALES_TAX_AMT.elementAt(j).equals("")){
			  				sales_tax_amt += Double.parseDouble(""+IGX_SALES_TAX_AMT.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sales_tax_amt+=0;
			  			}
			  			if(!IGX_Vtcs_amt.elementAt(j).equals("-") && !IGX_Vtcs_amt.elementAt(j).equals("")){
			  				tcs_amt += Double.parseDouble(""+IGX_Vtcs_amt.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tcs_amt+=0;
			  			}
			  			/*if(!SERVICE_TAX.elementAt(j).equals("-") && !SERVICE_TAX.elementAt(j).equals("")){
			  				service_tax += Double.parseDouble(""+SERVICE_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				service_tax+=0;
			  			}
			  			if(!SBC_TAX.elementAt(j).equals("-") && !SBC_TAX.elementAt(j).equals("")){
			  				sbc_tax += Double.parseDouble(""+SBC_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sbc_tax+=0;
			  			}
			  			if(!EDU_CESS_TAX.elementAt(j).equals("-") && !EDU_CESS_TAX.elementAt(j).equals("")){
			  				edu_cess_tax += Double.parseDouble(""+EDU_CESS_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				edu_cess_tax+=0;
			  			}
			  			if(!HEDU_CESS_TAX.elementAt(j).equals("-") && !HEDU_CESS_TAX.elementAt(j).equals("")){
			  				hedu_cess_tax += Double.parseDouble(""+HEDU_CESS_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				hedu_cess_tax+=0;
			  			}*/
			  			if(!IGX_TAX_AMT_INR.elementAt(j).equals("-") && !IGX_TAX_AMT_INR.elementAt(j).equals("")){
			  				tax_amt_inr += Double.parseDouble(""+IGX_TAX_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tax_amt_inr+=0;
			  			}
			  			if(!IGX_NET_AMT_INR.elementAt(j).equals("-") && !IGX_NET_AMT_INR.elementAt(j).equals("")){
			  				net_amt_inr += Double.parseDouble(""+IGX_NET_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				net_amt_inr+=0;
			  			}
			  			if(!IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).equals("-") && !IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).equals("")){
			  				gross_amt_usd_grp_foreign_ex += Double.parseDouble(""+IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				gross_amt_usd_grp_foreign_ex+=0;
			  			}
			  			if(!IGX_VAT_AMT_USD.elementAt(j).equals("-") && !IGX_VAT_AMT_USD.elementAt(j).equals("")){
			  				vat_amt_usd += Double.parseDouble(""+IGX_VAT_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				vat_amt_usd+=0;
			  			}
			  			/*if(!ADD_TAX_USD.elementAt(j).equals("-") && !ADD_TAX_USD.elementAt(j).equals("")){
			  				add_tax_usd += Double.parseDouble(""+ADD_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				add_tax_usd+=0;
			  			}
			  			if(!SERVICE_TAX_USD.elementAt(j).equals("-") && !SERVICE_TAX_USD.elementAt(j).equals("")){
			  				service_tax_usd += Double.parseDouble(""+SERVICE_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				service_tax_usd+=0;
			  			}
			  			if(!SBC_TAX_USD.elementAt(j).equals("-") && !SBC_TAX_USD.elementAt(j).equals("")){
			  				sbc_tax_usd += Double.parseDouble(""+SBC_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sbc_tax_usd+=0;
			  			}
			  			if(!EDU_CESS_TAX_USD.elementAt(j).equals("-") && !EDU_CESS_TAX_USD.elementAt(j).equals("")){
			  				edu_cess_tax_usd += Double.parseDouble(""+EDU_CESS_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				edu_cess_tax_usd+=0;
			  			}
			  			if(!HEDU_CESS_TAX_USD.elementAt(j).equals("-") && !HEDU_CESS_TAX_USD.elementAt(j).equals("")){
			  				hedu_cess_tax_usd += Double.parseDouble(""+HEDU_CESS_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				hedu_cess_tax_usd+=0;
			  			}*/
			  			if(!IGX_NET_AMT_USD.elementAt(j).equals("-") && !IGX_NET_AMT_USD.elementAt(j).equals("")){
			  				net_amt_usd += Double.parseDouble(""+IGX_NET_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				net_amt_usd+=0;
			  			}
			  			if(!IGX_trans_gross_inr.elementAt(j).equals("-") && !IGX_trans_gross_inr.elementAt(j).equals("")){
			  				tra_gross_inr += Double.parseDouble(""+IGX_trans_gross_inr.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tra_gross_inr+=0;
			  			}
			  		}
				}
				IGX_VFinal_sum_tcq.add(nf.format(tcq));
				IGX_VSum_rem_supply.add(nf.format(rem_supply));
				IGX_Vsales_qty_total.add(nf.format(total_qty));
				IGX_Vsales_gross_amt_usd_total.add(nf.format(gross_amt_usd));
				IGX_Vsales_qty_amt_inr_total.add(nf.format(gross_amt_inr));
				IGX_Vtot_trans_grossinr.add(nf.format(tra_gross_inr));
				IGX_Vsales_gross_amt_inr_total.add(nf.format(gross_amt_inr));
				IGX_Vsales_vat_inr_total.add(nf.format(vat_amt));
//				Vsales_addl_tax_inr_total.add(nf.format(add_tax));
				IGX_Vsales_sales_tax_inr_total.add(nf.format(sales_tax_amt));
//				Vsales_service_tax_inr_total.add(nf.format(service_tax));
//				Vsales_sbc_tax_inr_total.add(nf.format(sbc_tax));
//				Vsales_edu_cess_inr_total.add(nf.format(edu_cess_tax));
//				
//				Vsales_high_edu_cess_inr_total.add(nf.format(hedu_cess_tax));
				//Vsales_other_tax1_inr_total.add(nf.format(edu_cess_tax));
				//Vsales_other_tax2_inr_total.add(nf.format(edu_cess_tax));
				IGX_Vsales_total_tax_inr_total.add(nf.format(tax_amt_inr));
				IGX_Vsales_net_amt_inr_total.add(nf.format(net_amt_inr));
				
				IGX_Vsales_group_foreign_gross_amt_usd_total.add(nf.format(sales_group_foreign_gross_amt_usd_total));
				IGX_Vsales_vat_usd_total.add(nf.format(vat_amt_usd));
//				Vsales_addl_tax_usd_total.add(nf.format(add_tax_usd));
				IGX_Vsales_sales_tax_usd_total.add(nf.format(add_tax_usd));
//				Vsales_service_tax_usd_total.add(nf.format(service_tax_usd));
//				Vsales_sbc_tax_usd_total.add(nf.format(sbc_tax_usd));
//				Vsales_edu_cess_usd_total.add(nf.format(edu_cess_tax_usd));
//				Vsales_high_edu_cess_usd_total.add(nf.format(hedu_cess_tax_usd));
				IGX_Vsales_other_tax1_usd_total.add(nf.format(net_amt_inr));
				IGX_Vsales_net_amt_usd_total.add(nf.format(net_amt_usd));
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	
	}
	//HARSH20210629 NEW FUNCATION
	public void getTotalGroupWiseOnlySalesInvoice()
	{
		try
		{
			/*System.out.println("TCQ - "+TCQ.size()+"--"+TCQ);
			System.out.println("REM_SUPPLY - "+REM_SUPPLY.size()+"--"+REM_SUPPLY);
			System.out.println("TOTAL_QTY - "+TOTAL_QTY.size()+"--"+TOTAL_QTY);
			System.out.println("GROSS_AMT_INR - "+GROSS_AMT_INR.size()+"--"+GROSS_AMT_INR);
			System.out.println("GROSS_AMT_USD - "+GROSS_AMT_USD.size()+"--"+GROSS_AMT_USD);
			System.out.println("VAT_AMT - "+VAT_AMT.size()+"--"+VAT_AMT);
			System.out.println("ADD_TAX - "+ADD_TAX.size()+"--"+ADD_TAX);
			System.out.println("Vtcs_amt - "+Vtcs_amt.size()+"--"+Vtcs_amt);
			System.out.println("SERVICE_TAX - "+SERVICE_TAX.size()+"--"+SERVICE_TAX);
			System.out.println("SALES_TAX_AMT - "+SALES_TAX_AMT.size()+"--"+SALES_TAX_AMT);
			System.out.println("SBC_TAX - "+SBC_TAX.size()+"--"+SBC_TAX);
			System.out.println("EDU_CESS_TAX - "+EDU_CESS_TAX.size()+"--"+EDU_CESS_TAX);
			System.out.println("HEDU_CESS_TAX - "+HEDU_CESS_TAX.size()+"--"+HEDU_CESS_TAX);
			System.out.println("TAX_AMT_INR - "+TAX_AMT_INR.size()+"--"+TAX_AMT_INR);
			System.out.println("NET_AMT_INR - "+NET_AMT_INR.size()+"--"+NET_AMT_INR);
			System.out.println("GROSS_AMT_USD_GROUP_FOREIGN_EXCHG - "+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.size()+"--"+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG);
			System.out.println("VAT_AMT_USD - "+VAT_AMT_USD.size()+"--"+VAT_AMT_USD);
			System.out.println("ADD_TAX_USD - "+ADD_TAX_USD.size()+"--"+ADD_TAX_USD);
			System.out.println("SERVICE_TAX_USD - "+SERVICE_TAX_USD.size()+"--"+SERVICE_TAX_USD);
			System.out.println("SBC_TAX_USD - "+SBC_TAX_USD.size()+"--"+SBC_TAX_USD);
			System.out.println("EDU_CESS_TAX_USD - "+EDU_CESS_TAX_USD.size()+"--"+EDU_CESS_TAX_USD);
			System.out.println("HEDU_CESS_TAX_USD - "+HEDU_CESS_TAX_USD.size()+"--"+HEDU_CESS_TAX_USD);
			System.out.println("NET_AMT_USD - "+NET_AMT_USD.size()+"--"+NET_AMT_USD);
			*/
			int j=start_index_1; int n=-1;
			for(int i=0; i<VSTATE_CD.size(); i++)
			{
				double tcq=0;
				double rem_supply=0;
				double total_qty=0;
				double gross_amt_inr=0;
				double gross_amt_usd=0;
				double vat_amt=0;
				double add_tax=0;
				double sales_tax_amt=0;
				double tcs_amt=0;
				double service_tax=0;
				double sbc_tax=0;
				double edu_cess_tax=0;
				double hedu_cess_tax=0;
				double tax_amt_inr=0;
				double net_amt_inr=0;
				double gross_amt_usd_grp_foreign_ex=0;
				double vat_amt_usd=0;
				double add_tax_usd=0;
				double service_tax_usd=0;
				double sbc_tax_usd=0;
				double edu_cess_tax_usd=0;
				double hedu_cess_tax_usd=0;
				double net_amt_usd=0;
				double tra_gross_inr=0;
				
				int index = Integer.parseInt(""+VST_WISE_INDEX.elementAt(i));
				for(j = j; j<=end_index_1; j++)
				{
					n=n+1;
					if(n==index)
			  		{
			  			n=n-1;
			  			break;
			  		}
			  		else
			  		{
			  			/*System.out.println("TCQ - "+TCQ.size()+"-#"+TCQ.elementAt(j));
			  			System.out.println("REM_SUPPLY - "+REM_SUPPLY.size()+"-#"+REM_SUPPLY.elementAt(j));
			  			System.out.println("TOTAL_QTY - "+TOTAL_QTY.size()+"-#"+TOTAL_QTY.elementAt(j));
			  			System.out.println("GROSS_AMT_INR - "+GROSS_AMT_INR.size()+"-#"+GROSS_AMT_INR.elementAt(j));
			  			System.out.println("GROSS_AMT_USD - "+GROSS_AMT_USD.size()+"-#"+GROSS_AMT_USD.elementAt(j));
			  			System.out.println("VAT_AMT - "+VAT_AMT.size()+"-#"+VAT_AMT.elementAt(j));
			  			System.out.println("ADD_TAX - "+ADD_TAX.size()+"-#"+ADD_TAX.elementAt(j));
			  			System.out.println("Vtcs_amt - "+Vtcs_amt.size()+"-#"+Vtcs_amt.elementAt(j));
			  			System.out.println("SERVICE_TAX - "+SERVICE_TAX.size()+"-#"+SERVICE_TAX.elementAt(j));
			  			System.out.println("SALES_TAX_AMT - "+SALES_TAX_AMT.size()+"-#"+SALES_TAX_AMT.elementAt(j));
			  			System.out.println("SBC_TAX - "+SBC_TAX.size()+"-#"+SBC_TAX.elementAt(j));
			  			System.out.println("EDU_CESS_TAX - "+EDU_CESS_TAX.size()+"-#"+EDU_CESS_TAX.elementAt(j));
			  			System.out.println("HEDU_CESS_TAX - "+HEDU_CESS_TAX.size()+"-#"+HEDU_CESS_TAX.elementAt(j));
			  			System.out.println("TAX_AMT_INR - "+TAX_AMT_INR.size()+"-#"+TAX_AMT_INR.elementAt(j));
			  			System.out.println("NET_AMT_INR - "+NET_AMT_INR.size()+"-#"+NET_AMT_INR.elementAt(j));
			  			System.out.println("GROSS_AMT_USD_GROUP_FOREIGN_EXCHG - "+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.size()+"-#"+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j));
			  			System.out.println("VAT_AMT_USD - "+VAT_AMT_USD.size()+"-#"+VAT_AMT_USD.elementAt(j));
			  			System.out.println("ADD_TAX_USD - "+ADD_TAX_USD.size()+"-#"+ADD_TAX_USD.elementAt(j));
			  			System.out.println("SERVICE_TAX_USD - "+SERVICE_TAX_USD.size()+"-#"+SERVICE_TAX_USD.elementAt(j));
			  			System.out.println("SBC_TAX_USD - "+SBC_TAX_USD.size()+"-#"+SBC_TAX_USD.elementAt(j));
			  			System.out.println("EDU_CESS_TAX_USD - "+EDU_CESS_TAX_USD.size()+"-#"+EDU_CESS_TAX_USD.elementAt(j));
			  			System.out.println("HEDU_CESS_TAX_USD - "+HEDU_CESS_TAX_USD.size()+"-#"+HEDU_CESS_TAX_USD.elementAt(j));
			  			System.out.println("NET_AMT_USD - "+NET_AMT_USD.size()+"-#"+NET_AMT_USD.elementAt(j));*/

			  			if(!TCQ.elementAt(j).equals("-") && !TCQ.elementAt(j).equals("")){
			  				tcq += Double.parseDouble(""+TCQ.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				tcq +=0;
			  			}
			  			if(!REM_SUPPLY.elementAt(j).equals("-") && !REM_SUPPLY.elementAt(j).equals("")){
			  				rem_supply += Double.parseDouble(""+REM_SUPPLY.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				rem_supply +=0;
			  			}
			  			if(!TOTAL_QTY.elementAt(j).equals("-") && !TOTAL_QTY.elementAt(j).equals("")){
			  				total_qty += Double.parseDouble(""+TOTAL_QTY.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				total_qty +=0;
			  			}
			  			if(!GROSS_AMT_INR.elementAt(j).equals("-") && !GROSS_AMT_INR.elementAt(j).equals("")){
			  				gross_amt_inr += Double.parseDouble(""+GROSS_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				gross_amt_inr +=0;
			  			}
			  			if(!GROSS_AMT_USD.elementAt(j).equals("-") && !GROSS_AMT_USD.elementAt(j).equals("")){
			  				gross_amt_usd += Double.parseDouble(""+GROSS_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else {
			  				gross_amt_usd +=0;
			  			}
			  			if(!VAT_AMT.elementAt(j).equals("-") && !VAT_AMT.elementAt(j).equals("")){
			  				vat_amt += Double.parseDouble(""+VAT_AMT.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				vat_amt+=0;
			  			}
			  			if(!ADD_TAX.elementAt(j).equals("-") && !ADD_TAX.elementAt(j).equals("")){
			  				add_tax += Double.parseDouble(""+ADD_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				add_tax=0;	
			  			}
			  			if(!SALES_TAX_AMT.elementAt(j).equals("-") && !SALES_TAX_AMT.elementAt(j).equals("")){
			  				sales_tax_amt += Double.parseDouble(""+SALES_TAX_AMT.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sales_tax_amt+=0;
			  			}
			  			if(!Vtcs_amt.elementAt(j).equals("-") && !Vtcs_amt.elementAt(j).equals("")){
			  				tcs_amt += Double.parseDouble(""+Vtcs_amt.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tcs_amt+=0;
			  			}
			  			if(!SERVICE_TAX.elementAt(j).equals("-") && !SERVICE_TAX.elementAt(j).equals("")){
			  				service_tax += Double.parseDouble(""+SERVICE_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				service_tax+=0;
			  			}
			  			if(!SBC_TAX.elementAt(j).equals("-") && !SBC_TAX.elementAt(j).equals("")){
			  				sbc_tax += Double.parseDouble(""+SBC_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sbc_tax+=0;
			  			}
			  			if(!EDU_CESS_TAX.elementAt(j).equals("-") && !EDU_CESS_TAX.elementAt(j).equals("")){
			  				edu_cess_tax += Double.parseDouble(""+EDU_CESS_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				edu_cess_tax+=0;
			  			}
			  			if(!HEDU_CESS_TAX.elementAt(j).equals("-") && !HEDU_CESS_TAX.elementAt(j).equals("")){
			  				hedu_cess_tax += Double.parseDouble(""+HEDU_CESS_TAX.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				hedu_cess_tax+=0;
			  			}
			  			if(!TAX_AMT_INR.elementAt(j).equals("-") && !TAX_AMT_INR.elementAt(j).equals("")){
			  				tax_amt_inr += Double.parseDouble(""+TAX_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tax_amt_inr+=0;
			  			}
			  			if(!NET_AMT_INR.elementAt(j).equals("-") && !NET_AMT_INR.elementAt(j).equals("")){
			  				net_amt_inr += Double.parseDouble(""+NET_AMT_INR.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				net_amt_inr+=0;
			  			}
			  			if(!GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).equals("-") && !GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).equals("")){
			  				gross_amt_usd_grp_foreign_ex += Double.parseDouble(""+GROSS_AMT_USD_GROUP_FOREIGN_EXCHG.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				gross_amt_usd_grp_foreign_ex+=0;
			  			}
			  			if(!VAT_AMT_USD.elementAt(j).equals("-") && !VAT_AMT_USD.elementAt(j).equals("")){
			  				vat_amt_usd += Double.parseDouble(""+VAT_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				vat_amt_usd+=0;
			  			}
			  			if(!ADD_TAX_USD.elementAt(j).equals("-") && !ADD_TAX_USD.elementAt(j).equals("")){
			  				add_tax_usd += Double.parseDouble(""+ADD_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				add_tax_usd+=0;
			  			}
			  			if(!SERVICE_TAX_USD.elementAt(j).equals("-") && !SERVICE_TAX_USD.elementAt(j).equals("")){
			  				service_tax_usd += Double.parseDouble(""+SERVICE_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				service_tax_usd+=0;
			  			}
			  			if(!SBC_TAX_USD.elementAt(j).equals("-") && !SBC_TAX_USD.elementAt(j).equals("")){
			  				sbc_tax_usd += Double.parseDouble(""+SBC_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				sbc_tax_usd+=0;
			  			}
			  			if(!EDU_CESS_TAX_USD.elementAt(j).equals("-") && !EDU_CESS_TAX_USD.elementAt(j).equals("")){
			  				edu_cess_tax_usd += Double.parseDouble(""+EDU_CESS_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				edu_cess_tax_usd+=0;
			  			}
			  			if(!HEDU_CESS_TAX_USD.elementAt(j).equals("-") && !HEDU_CESS_TAX_USD.elementAt(j).equals("")){
			  				hedu_cess_tax_usd += Double.parseDouble(""+HEDU_CESS_TAX_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				hedu_cess_tax_usd+=0;
			  			}
			  			if(!NET_AMT_USD.elementAt(j).equals("-") && !NET_AMT_USD.elementAt(j).equals("")){
			  				net_amt_usd += Double.parseDouble(""+NET_AMT_USD.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				net_amt_usd+=0;
			  			}
			  			if(!trans_gross_inr.elementAt(j).equals("-") && !trans_gross_inr.elementAt(j).equals("")){
			  				tra_gross_inr += Double.parseDouble(""+trans_gross_inr.elementAt(j).toString().replaceAll(",", ""));
			  			}else{
			  				tra_gross_inr+=0;
			  			}
			  		}
				}
				VFinal_sum_tcq.add(nf.format(tcq));
				VSum_rem_supply.add(nf.format(rem_supply));
				Vsales_qty_total.add(nf.format(total_qty));
				Vsales_gross_amt_usd_total.add(nf.format(gross_amt_usd));
				Vsales_qty_amt_inr_total.add(nf.format(gross_amt_inr));
				Vtot_trans_grossinr.add(nf.format(tra_gross_inr));
				Vsales_gross_amt_inr_total.add(nf.format(gross_amt_inr));
				Vsales_vat_inr_total.add(nf.format(vat_amt));
				Vsales_addl_tax_inr_total.add(nf.format(add_tax));
				Vsales_sales_tax_inr_total.add(nf.format(sales_tax_amt));
				Vsales_service_tax_inr_total.add(nf.format(service_tax));
				Vsales_sbc_tax_inr_total.add(nf.format(sbc_tax));
				Vsales_edu_cess_inr_total.add(nf.format(edu_cess_tax));
				
				Vsales_high_edu_cess_inr_total.add(nf.format(hedu_cess_tax));
				//Vsales_other_tax1_inr_total.add(nf.format(edu_cess_tax));
				//Vsales_other_tax2_inr_total.add(nf.format(edu_cess_tax));
				Vsales_total_tax_inr_total.add(nf.format(tax_amt_inr));
				Vsales_net_amt_inr_total.add(nf.format(net_amt_inr));
				
				Vsales_group_foreign_gross_amt_usd_total.add(nf.format(sales_group_foreign_gross_amt_usd_total));
				Vsales_vat_usd_total.add(nf.format(vat_amt_usd));
				Vsales_addl_tax_usd_total.add(nf.format(add_tax_usd));
				Vsales_sales_tax_usd_total.add(nf.format(add_tax_usd));
				Vsales_service_tax_usd_total.add(nf.format(service_tax_usd));
				Vsales_sbc_tax_usd_total.add(nf.format(sbc_tax_usd));
				Vsales_edu_cess_usd_total.add(nf.format(edu_cess_tax_usd));
				Vsales_high_edu_cess_usd_total.add(nf.format(hedu_cess_tax_usd));
				//Vsales_other_tax1_usd_total.add(nf.format(net_amt_inr));
				Vsales_net_amt_usd_total.add(nf.format(net_amt_usd));
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	Vector VSTATE_CD = new Vector(); //HARSH20210629
	public Vector getVSTATE_CD() {return VSTATE_CD;}
	Vector VSTATE_NM = new Vector(); //HARSH20210629
	public Vector getVSTATE_NM() {return VSTATE_NM;}
	Vector VST_WISE_INDEX = new Vector(); //HARSH20210629
	public Vector getVST_WISE_INDEX() {return VST_WISE_INDEX;}
	
	public String State_cd = "";
	public void setState_cd(String State_cd) {this.State_cd = State_cd;}
	
	Vector VFinal_sum_tcq = new Vector(); //HARSH20210629
	public Vector getVFinal_sum_tcq() {return VFinal_sum_tcq;}
	Vector VSum_rem_supply = new Vector(); //HARSH20210629
	public Vector getVSum_rem_supply() {return VSum_rem_supply;}
	Vector Vsales_qty_total = new Vector();//HARSH20210629
	public Vector getVsales_qty_total() {return Vsales_qty_total;}
	Vector Vsales_gross_amt_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_gross_amt_usd_total() {return Vsales_gross_amt_usd_total;}

	Vector Vsales_qty_amt_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_qty_amt_inr_total() {return Vsales_qty_amt_inr_total;}

	Vector Vtot_trans_grossinr = new Vector();//HARSH20210629
	public Vector getVtot_trans_grossinr() {return Vtot_trans_grossinr;}

	Vector Vsales_gross_amt_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_gross_amt_inr_total() {return Vsales_gross_amt_inr_total;}

	Vector Vsales_vat_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_vat_inr_total() {return Vsales_vat_inr_total;}

	Vector Vsales_addl_tax_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_addl_tax_inr_total() {return Vsales_addl_tax_inr_total;}

	Vector Vsales_sales_tax_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_sales_tax_inr_total() {return Vsales_sales_tax_inr_total;}

	Vector Vtcs_inr_total = new Vector();//HARSH20210629
	public Vector getVtcs_inr_total() {return Vtcs_inr_total;}

	Vector Vsales_service_tax_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_service_tax_inr_total() {return Vsales_service_tax_inr_total;}

	Vector Vsales_sbc_tax_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_sbc_tax_inr_total() {return Vsales_sbc_tax_inr_total;}

	Vector Vsales_edu_cess_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_edu_cess_inr_total() {return Vsales_edu_cess_inr_total;}

	Vector Vsales_high_edu_cess_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_high_edu_cess_inr_total() {return Vsales_high_edu_cess_inr_total;}

	Vector Vsales_other_tax1_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_other_tax1_inr_total() {return Vsales_other_tax1_inr_total;}

	Vector Vsales_other_tax2_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_other_tax2_inr_total() {return Vsales_other_tax2_inr_total;}

	Vector Vsales_total_tax_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_total_tax_inr_total() {return Vsales_total_tax_inr_total;}

	Vector Vsales_net_amt_inr_total = new Vector();//HARSH20210629
	public Vector getVsales_net_amt_inr_total() {return Vsales_net_amt_inr_total;}

	Vector Vsales_group_foreign_gross_amt_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_group_foreign_gross_amt_usd_total() {return Vsales_group_foreign_gross_amt_usd_total;}

	Vector Vsales_vat_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_vat_usd_total() {return Vsales_vat_usd_total;}

	Vector Vsales_addl_tax_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_addl_tax_usd_total() {return Vsales_addl_tax_usd_total;}

	Vector Vsales_sales_tax_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_sales_tax_usd_total() {return Vsales_sales_tax_usd_total;}

	Vector Vsales_service_tax_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_service_tax_usd_total() {return Vsales_service_tax_usd_total;}

	Vector Vsales_sbc_tax_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_sbc_tax_usd_total() {return Vsales_sbc_tax_usd_total;}

	Vector Vsales_edu_cess_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_edu_cess_usd_total() {return Vsales_edu_cess_usd_total;}

	Vector Vsales_high_edu_cess_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_high_edu_cess_usd_total() {return Vsales_high_edu_cess_usd_total;}

	Vector Vsales_other_tax1_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_other_tax1_usd_total() {return Vsales_other_tax1_usd_total;}

	Vector Vsales_other_tax2_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_other_tax2_usd_total() {return Vsales_other_tax2_usd_total;}

	Vector Vsales_net_amt_usd_total = new Vector();//HARSH20210629
	public Vector getVsales_net_amt_usd_total() {return Vsales_net_amt_usd_total;}

	public Vector getVsup_state_cd() {
		return Vsup_state_cd;
	}

	public Vector getDLNG_cost_center_code_() {
		return DLNG_cost_center_code_;
	}

	public Vector getDLNG_Vcrdr_cost_center() {
		return DLNG_Vcrdr_cost_center;
	}

	public void setDLNG_cost_center_code_(Vector dLNG_cost_center_code_) {
		DLNG_cost_center_code_ = dLNG_cost_center_code_;
	}

	public void setDLNG_Vcrdr_cost_center(Vector dLNG_Vcrdr_cost_center) {
		DLNG_Vcrdr_cost_center = dLNG_Vcrdr_cost_center;
	}

	public Vector getCost_center_code_() {
		return cost_center_code_;
	}

	public void setCost_center_code_(Vector cost_center_code_) {
		this.cost_center_code_ = cost_center_code_;
	}

	public Vector getDrcr_cost_center_code_() {
		return drcr_cost_center_code_;
	}

	public void setCOST_CENTER_CD(Vector cOST_CENTER_CD) {
		COST_CENTER_CD = cOST_CENTER_CD;
	}

	public void setDrcr_cost_center_code_(Vector drcr_cost_center_code_) {
		this.drcr_cost_center_code_ = drcr_cost_center_code_;
	}

	public Vector getVCFORM_FLAG() {
		return VCFORM_FLAG;
	}

	public void setVCFORM_FLAG(Vector vCFORM_FLAG) {
		VCFORM_FLAG = vCFORM_FLAG;
	}
	
	
	public Vector DLNG_SUMMRY_CONT_TYP_Ser = new Vector();
	
	Vector DLNG_inv_flag_Ser=new Vector();
	Vector DLNG_HLPL_INV_SEQ_NO_Ser=new Vector();
	Vector DLNG_INVOICE_DT_Ser=new Vector();
	Vector DLNG_PERIOD_START_DT_Ser=new Vector();
	Vector DLNG_PERIOD_END_DT_Ser=new Vector();
	Vector DLNG_SALE_PRICE_Ser=new Vector();
	Vector DLNG_SALE_PRICE_NUMERIC_Ser=new Vector();
	Vector DLNG_DUE_DT_Ser=new Vector();
	Vector DLNG_TOTAL_QTY_Ser=new Vector();
	Vector DLNG_TOTAL_QTY_NUMERIC_Ser=new Vector();
	Vector DLNG_EXCHG_RATE_Ser=new Vector();
	Vector DLNG_GROSS_AMT_USD_Ser=new Vector();
	Vector DLNG_GROSS_AMT_USD_NUMERIC_Ser=new Vector();
	double DLNG_sales_qty_amt_usd_total_Ser=0;
	Vector DLNG_GROSS_AMT_INR_Ser=new Vector();
	Vector DLNG_GROSS_AMT_INR_2_Ser=new Vector();
	Vector DLNG_GROSS_AMT_INR_NUMERIC_Ser=new Vector();
	Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_Ser=new Vector();
	Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2_Ser=new Vector();
	Vector DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC_Ser=new Vector();
	Vector DLNG_tmp_group_gross_usd_amt_Ser=new Vector();
	Vector DLNG_NET_AMT_INR_Ser=new Vector();
	Vector DLNG_NET_AMT_INR_NUMERIC_Ser=new Vector();
	Vector DLNG_temp_net_amt_Ser=new Vector();
	Vector DLNG_FINANCIAL_YEAR_Ser=new Vector();
	Vector DLNG_CUSTOMER_CD_Ser=new Vector();
	Vector DLNG_TAX_STRUCT_CD_Ser=new Vector();
	Vector DLNG_cost_center_code_Ser_=new Vector();
	Vector DLNG_Agreement_base_Ser=new Vector();
	Vector DLNG_SEGMENT_NAME_Ser=new Vector();
	Vector DLNG_SN_NO_Ser=new Vector();
	Vector DLNG_SIGNING_DT_Ser=new Vector();
	Vector DLNG_REMARK_Ser=new Vector();
	Vector DLNG_temp_sn_no_Ser=new Vector();
	Vector DLNG_SN_REV_NO_Ser=new Vector();
	Vector DLNG_SN_SUMRY_CUSTOMER_CD_Ser=new Vector();
	Vector DLNG_FGSA_NO_Ser=new Vector();
	Vector DLNG_temp_fgsa_no_Ser=new Vector();
	Vector DLNG_SN_SIGNING_DT_Ser=new Vector();
	Vector DLNG_FGSA_REV_NO_Ser=new Vector();
	Vector DLNG_MONTH_Ser=new Vector();
	Vector DLNG_CONTRACT_TYPE_Ser=new Vector();
	Vector DLNG_PLANT_SEQ_NO_Ser=new Vector();
	Vector DLNG_SUN_APPROVAL_Ser=new Vector();
	Vector DLNG_Account_Mapping_id_Ser=new Vector();
	Vector DLNG_NEW_INV_SEQ_NO_Ser=new Vector();
	Vector DLNG_AdvADJ_FLAG_Ser=new Vector();
	Vector DLNG_Vtcs_amt_Ser=new Vector();
	Vector DLNG_trans_charges_Ser=new Vector();
	Vector DLNG_temp_gross_amt_Ser=new Vector();
	Vector DLNG_trans_gross_inr_Ser=new Vector();
	Vector DLNG_CUSTOMER_NAME_Ser=new Vector();
	Vector DLNG_CUSTOMER_ABBR_Ser=new Vector();
	Vector DLNG_AVG_PRICE_MMBTU_Ser=new Vector();
	Vector DLNG_EXCHG_RATE_VALUE_Ser=new Vector();
	Vector DLNG_START_DT_Ser=new Vector();
	Vector DLNG_START_DT_ZR_RV_Ser=new Vector();
	Vector DLNG_END_DT_Ser=new Vector();
	Vector DLNG_END_DT_ZR_RV_Ser=new Vector();
	Vector DLNG_TCQ_Ser=new Vector();
	Vector DLNG_TCQ_NUMERIC_Ser=new Vector();
	Vector DLNG_RATE_Ser_Ser=new Vector();
	
	Vector DLNG_RATE_NUMERIC_Ser=new Vector();
	Vector DLNG_CUM_SUPPLY_Ser=new Vector();
	Vector DLNG_REM_SUPPLY_Ser=new Vector();
	Vector DLNG_REM_SUPPLY_NUMERIC_Ser=new Vector();
	Vector DLNG_HLPL_INV_SEQ_Ser=new Vector();
	Vector DLNG_TAX_CODE_Ser=new Vector();
	Vector DLNG_FACTOR_Ser=new Vector();
	Vector DLNG_TAX_AMOUNT_Ser=new Vector();
	Vector DLNG_TAX_ON_TITLE_Ser=new Vector();
	Vector DLNG_SALES_TAX_AMT_Ser=new  Vector();
	Vector DLNG_SALES_TAX_AMT_NUMERIC_Ser=new  Vector();
	Vector DLNG_tmp_sales_tax_Ser=new  Vector();
	Vector DLNG_VAT_AMT_Ser=new  Vector();
	Vector DLNG_SALE_VAT_TAX_PERC_Ser=new Vector();
	Vector DLNG_SALE_CST_TAX_PERC_Ser=new Vector();
	Vector DLNG_ADD_TAX_Ser=new  Vector();
	Vector DLNG_TAX_AMT_INR_Ser=new Vector();
	Vector DLNG_TAX_AMT_USD_Ser=new Vector();
	Vector DLNG_NET_AMT_USD_Ser=new Vector();
	Vector DLNG_GROUP_FOREIGN_EXCHG_RATE_Ser=new Vector();
	Vector DLNG_SALES_TAX_AMT_USD_Ser=new Vector();
	Vector DLNG_VAT_AMT_USD_Ser=new Vector();
	Vector DLNG_tmp_addl_tax_Ser=new Vector();
	Vector DLNG_tmp_vat_Ser=new Vector();
	Vector DLNG_ADD_TAX_USD_Ser=new Vector();
	Vector DLNG_SERVICE_TAX_USD_Ser=new Vector();
	Vector DLNG_tmp_service_tax_Ser=new Vector();
	Vector DLNG_XML_GEN_FLAG_Ser=new Vector();
	Vector DLNG_TOT_QTY_Ser=new Vector();
	Vector DLNG_SN_RATE_Ser=new Vector();
	Vector DLNG_TOT_SALE_USD_Ser=new Vector();
	Vector DLNG_cost_center_code__Ser = new Vector();
	Vector DLNG_vSTAT_NO_Ser = new Vector();
	Vector DLNG_contact_Customer_CST_NO_Ser = new Vector();
	Vector DLNG_RATE_Ser = new Vector();
	Vector DLNG_contact_Customer_MVAT_NO_Ser = new Vector();
	Vector DLNG_contact_Customer_GST_NO_Ser = new Vector();
	Vector DLNG_contact_Customer_GVAT_NO_Ser = new Vector();
	Vector DLNG_IGST_AMT_Ser = new Vector();
	Vector DLNG_CGST_AMT_Ser = new Vector();
	Vector DLNG_SGST_AMT_Ser = new Vector();
	Vector DLNG_IGST_AMT_USD_Ser = new Vector();
	Vector DLNG_CGST_AMT_USD_Ser = new Vector();
	Vector DLNG_SGST_AMT_USD_Ser = new Vector();
	Vector DLNG_TRNS_MODE_Ser = new Vector();
	Vector DLNG_TRNS_RATE_Ser = new Vector();
	Vector DLNG_GSTIN_NO_Ser = new Vector();
	Vector DLNG_POS_STATE_Ser = new Vector();
	Vector DLNG_IGST_RATE_Ser = new Vector();
	Vector DLNG_CGST_RATE_Ser = new Vector();
	Vector DLNG_SGST_RATE_Ser = new Vector();
	Vector DLNG_SAC_CODE_Ser = new Vector();
	Vector DLNG_DISTANCE_KM_Ser = new Vector();
	Vector DLNG_CHARGES_LUMPSUM_Ser = new Vector();
	
	
	public Vector getDLNG_DISTANCE_KM_Ser() {
		return DLNG_DISTANCE_KM_Ser;
	}
	public Vector getDLNG_CHARGES_LUMPSUM_Ser() {
		return DLNG_CHARGES_LUMPSUM_Ser;
	}
	public Vector getDLNG_SAC_CODE_Ser() {
		return DLNG_SAC_CODE_Ser;
	}
	public Vector getDLNG_IGST_RATE_Ser() {
		return DLNG_IGST_RATE_Ser;
	}
	public Vector getDLNG_CGST_RATE_Ser() {
		return DLNG_CGST_RATE_Ser;
	}
	public Vector getDLNG_SGST_RATE_Ser() {
		return DLNG_SGST_RATE_Ser;
	}
	public Vector getDLNG_POS_STATE_Ser() {
		return DLNG_POS_STATE_Ser;
	}
	public Vector getDLNG_GSTIN_NO_Ser() {
		return DLNG_GSTIN_NO_Ser;
	}
	public Vector getDLNG_TRNS_MODE_Ser() {
		return DLNG_TRNS_MODE_Ser;
	}
	public Vector getDLNG_TRNS_RATE_Ser() {
		return DLNG_TRNS_RATE_Ser;
	}
	public Vector getDLNG_IGST_AMT_Ser() {
		return DLNG_IGST_AMT_Ser;
	}
	public Vector getDLNG_CGST_AMT_Ser() {
		return DLNG_CGST_AMT_Ser;
	}
	public Vector getDLNG_SGST_AMT_Ser() {
		return DLNG_SGST_AMT_Ser;
	}
	public Vector getDLNG_IGST_AMT_USD_Ser() {
		return DLNG_IGST_AMT_USD_Ser;
	}
	public Vector getDLNG_CGST_AMT_USD_Ser() {
		return DLNG_CGST_AMT_USD_Ser;
	}
	public Vector getDLNG_SGST_AMT_USD_Ser() {
		return DLNG_SGST_AMT_USD_Ser;
	}
	public Vector getDLNG_contact_Customer_GVAT_NO_Ser() {
		return DLNG_contact_Customer_GVAT_NO_Ser;
	}
	public Vector getDLNG_contact_Customer_GST_NO_Ser() {
		return DLNG_contact_Customer_GST_NO_Ser;
	}
	public Vector getDLNG_contact_Customer_MVAT_NO_Ser() {
		return DLNG_contact_Customer_MVAT_NO_Ser;
	}
	public Vector getDLNG_RATE_Ser() {
		return DLNG_RATE_Ser;
	}
	public Vector getDLNG_contact_Customer_CST_NO_Ser() {
		return DLNG_contact_Customer_CST_NO_Ser;
	}
	public Vector getDLNG_vSTAT_NO_Ser() {
		return DLNG_vSTAT_NO_Ser;
	}
	public Vector getDLNG_cost_center_code__Ser() {
		return DLNG_cost_center_code__Ser;
	}
	public Vector getDLNG_SUMMRY_CONT_TYP_Ser() {
		return DLNG_SUMMRY_CONT_TYP_Ser;
	}

	public Vector getDLNG_inv_flag_Ser() {
		return DLNG_inv_flag_Ser;
	}

	public Vector getDLNG_HLPL_INV_SEQ_NO_Ser() {
		return DLNG_HLPL_INV_SEQ_NO_Ser;
	}

	public Vector getDLNG_INVOICE_DT_Ser() {
		return DLNG_INVOICE_DT_Ser;
	}

	public Vector getDLNG_PERIOD_START_DT_Ser() {
		return DLNG_PERIOD_START_DT_Ser;
	}

	public Vector getDLNG_PERIOD_END_DT_Ser() {
		return DLNG_PERIOD_END_DT_Ser;
	}

	public Vector getDLNG_SALE_PRICE_Ser() {
		return DLNG_SALE_PRICE_Ser;
	}

	public Vector getDLNG_SALE_PRICE_NUMERIC_Ser() {
		return DLNG_SALE_PRICE_NUMERIC_Ser;
	}

	public Vector getDLNG_DUE_DT_Ser() {
		return DLNG_DUE_DT_Ser;
	}

	public Vector getDLNG_TOTAL_QTY_Ser() {
		return DLNG_TOTAL_QTY_Ser;
	}

	public Vector getDLNG_TOTAL_QTY_NUMERIC_Ser() {
		return DLNG_TOTAL_QTY_NUMERIC_Ser;
	}

	public Vector getDLNG_EXCHG_RATE_Ser() {
		return DLNG_EXCHG_RATE_Ser;
	}

	public Vector getDLNG_GROSS_AMT_USD_Ser() {
		return DLNG_GROSS_AMT_USD_Ser;
	}

	public Vector getDLNG_GROSS_AMT_USD_NUMERIC_Ser() {
		return DLNG_GROSS_AMT_USD_NUMERIC_Ser;
	}

	public double getDLNG_sales_qty_amt_usd_total_Ser() {
		return DLNG_sales_qty_amt_usd_total_Ser;
	}

	public Vector getDLNG_GROSS_AMT_INR_Ser() {
		return DLNG_GROSS_AMT_INR_Ser;
	}

	public Vector getDLNG_GROSS_AMT_INR_2_Ser() {
		return DLNG_GROSS_AMT_INR_2_Ser;
	}

	public Vector getDLNG_GROSS_AMT_INR_NUMERIC_Ser() {
		return DLNG_GROSS_AMT_INR_NUMERIC_Ser;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_Ser() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_Ser;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2_Ser() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2_Ser;
	}

	public Vector getDLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC_Ser() {
		return DLNG_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC_Ser;
	}

	public Vector getDLNG_tmp_group_gross_usd_amt_Ser() {
		return DLNG_tmp_group_gross_usd_amt_Ser;
	}

	public Vector getDLNG_NET_AMT_INR_Ser() {
		return DLNG_NET_AMT_INR_Ser;
	}

	public Vector getDLNG_NET_AMT_INR_NUMERIC_Ser() {
		return DLNG_NET_AMT_INR_NUMERIC_Ser;
	}

	public Vector getDLNG_temp_net_amt_Ser() {
		return DLNG_temp_net_amt_Ser;
	}

	public Vector getDLNG_FINANCIAL_YEAR_Ser() {
		return DLNG_FINANCIAL_YEAR_Ser;
	}

	public Vector getDLNG_CUSTOMER_CD_Ser() {
		return DLNG_CUSTOMER_CD_Ser;
	}

	public Vector getDLNG_TAX_STRUCT_CD_Ser() {
		return DLNG_TAX_STRUCT_CD_Ser;
	}

	public Vector getDLNG_cost_center_code_Ser_() {
		return DLNG_cost_center_code_Ser_;
	}

	public Vector getDLNG_Agreement_base_Ser() {
		return DLNG_Agreement_base_Ser;
	}

	public Vector getDLNG_SEGMENT_NAME_Ser() {
		return DLNG_SEGMENT_NAME_Ser;
	}

	public Vector getDLNG_SN_NO_Ser() {
		return DLNG_SN_NO_Ser;
	}

	public Vector getDLNG_SIGNING_DT_Ser() {
		return DLNG_SIGNING_DT_Ser;
	}

	public Vector getDLNG_REMARK_Ser() {
		return DLNG_REMARK_Ser;
	}

	public Vector getDLNG_temp_sn_no_Ser() {
		return DLNG_temp_sn_no_Ser;
	}

	public Vector getDLNG_SN_REV_NO_Ser() {
		return DLNG_SN_REV_NO_Ser;
	}

	public Vector getDLNG_SN_SUMRY_CUSTOMER_CD_Ser() {
		return DLNG_SN_SUMRY_CUSTOMER_CD_Ser;
	}

	public Vector getDLNG_FGSA_NO_Ser() {
		return DLNG_FGSA_NO_Ser;
	}

	public Vector getDLNG_temp_fgsa_no_Ser() {
		return DLNG_temp_fgsa_no_Ser;
	}

	public Vector getDLNG_SN_SIGNING_DT_Ser() {
		return DLNG_SN_SIGNING_DT_Ser;
	}

	public Vector getDLNG_FGSA_REV_NO_Ser() {
		return DLNG_FGSA_REV_NO_Ser;
	}

	public Vector getDLNG_MONTH_Ser() {
		return DLNG_MONTH_Ser;
	}

	public Vector getDLNG_CONTRACT_TYPE_Ser() {
		return DLNG_CONTRACT_TYPE_Ser;
	}

	public Vector getDLNG_PLANT_SEQ_NO_Ser() {
		return DLNG_PLANT_SEQ_NO_Ser;
	}

	public Vector getDLNG_SUN_APPROVAL_Ser() {
		return DLNG_SUN_APPROVAL_Ser;
	}

	public Vector getDLNG_Account_Mapping_id_Ser() {
		return DLNG_Account_Mapping_id_Ser;
	}

	public Vector getDLNG_NEW_INV_SEQ_NO_Ser() {
		return DLNG_NEW_INV_SEQ_NO_Ser;
	}

	public Vector getDLNG_AdvADJ_FLAG_Ser() {
		return DLNG_AdvADJ_FLAG_Ser;
	}

	public Vector getDLNG_Vtcs_amt_Ser() {
		return DLNG_Vtcs_amt_Ser;
	}

	public Vector getDLNG_trans_charges_Ser() {
		return DLNG_trans_charges_Ser;
	}

	public Vector getDLNG_temp_gross_amt_Ser() {
		return DLNG_temp_gross_amt_Ser;
	}

	public Vector getDLNG_trans_gross_inr_Ser() {
		return DLNG_trans_gross_inr_Ser;
	}

	public Vector getDLNG_CUSTOMER_NAME_Ser() {
		return DLNG_CUSTOMER_NAME_Ser;
	}

	public Vector getDLNG_CUSTOMER_ABBR_Ser() {
		return DLNG_CUSTOMER_ABBR_Ser;
	}

	public Vector getDLNG_AVG_PRICE_MMBTU_Ser() {
		return DLNG_AVG_PRICE_MMBTU_Ser;
	}

	public Vector getDLNG_EXCHG_RATE_VALUE_Ser() {
		return DLNG_EXCHG_RATE_VALUE_Ser;
	}

	public Vector getDLNG_START_DT_Ser() {
		return DLNG_START_DT_Ser;
	}

	public Vector getDLNG_START_DT_ZR_RV_Ser() {
		return DLNG_START_DT_ZR_RV_Ser;
	}

	public Vector getDLNG_END_DT_Ser() {
		return DLNG_END_DT_Ser;
	}

	public Vector getDLNG_END_DT_ZR_RV_Ser() {
		return DLNG_END_DT_ZR_RV_Ser;
	}

	public Vector getDLNG_TCQ_Ser() {
		return DLNG_TCQ_Ser;
	}

	public Vector getDLNG_TCQ_NUMERIC_Ser() {
		return DLNG_TCQ_NUMERIC_Ser;
	}

	public Vector getDLNG_RATE_Ser_Ser() {
		return DLNG_RATE_Ser_Ser;
	}

	public Vector getDLNG_RATE_NUMERIC_Ser() {
		return DLNG_RATE_NUMERIC_Ser;
	}

	public Vector getDLNG_CUM_SUPPLY_Ser() {
		return DLNG_CUM_SUPPLY_Ser;
	}

	public Vector getDLNG_REM_SUPPLY_Ser() {
		return DLNG_REM_SUPPLY_Ser;
	}

	public Vector getDLNG_REM_SUPPLY_NUMERIC_Ser() {
		return DLNG_REM_SUPPLY_NUMERIC_Ser;
	}

	public Vector getDLNG_HLPL_INV_SEQ_Ser() {
		return DLNG_HLPL_INV_SEQ_Ser;
	}

	public Vector getDLNG_TAX_CODE_Ser() {
		return DLNG_TAX_CODE_Ser;
	}

	public Vector getDLNG_FACTOR_Ser() {
		return DLNG_FACTOR_Ser;
	}

	public Vector getDLNG_TAX_AMOUNT_Ser() {
		return DLNG_TAX_AMOUNT_Ser;
	}

	public Vector getDLNG_TAX_ON_TITLE_Ser() {
		return DLNG_TAX_ON_TITLE_Ser;
	}

	public Vector getDLNG_SALES_TAX_AMT_Ser() {
		return DLNG_SALES_TAX_AMT_Ser;
	}

	public Vector getDLNG_SALES_TAX_AMT_NUMERIC_Ser() {
		return DLNG_SALES_TAX_AMT_NUMERIC_Ser;
	}

	public Vector getDLNG_tmp_sales_tax_Ser() {
		return DLNG_tmp_sales_tax_Ser;
	}

	public Vector getDLNG_VAT_AMT_Ser() {
		return DLNG_VAT_AMT_Ser;
	}

	public Vector getDLNG_SALE_VAT_TAX_PERC_Ser() {
		return DLNG_SALE_VAT_TAX_PERC_Ser;
	}

	public Vector getDLNG_SALE_CST_TAX_PERC_Ser() {
		return DLNG_SALE_CST_TAX_PERC_Ser;
	}

	public Vector getDLNG_ADD_TAX_Ser() {
		return DLNG_ADD_TAX_Ser;
	}

	public Vector getDLNG_TAX_AMT_INR_Ser() {
		return DLNG_TAX_AMT_INR_Ser;
	}

	public Vector getDLNG_TAX_AMT_USD_Ser() {
		return DLNG_TAX_AMT_USD_Ser;
	}

	public Vector getDLNG_NET_AMT_USD_Ser() {
		return DLNG_NET_AMT_USD_Ser;
	}

	public Vector getDLNG_GROUP_FOREIGN_EXCHG_RATE_Ser() {
		return DLNG_GROUP_FOREIGN_EXCHG_RATE_Ser;
	}

	public Vector getDLNG_SALES_TAX_AMT_USD_Ser() {
		return DLNG_SALES_TAX_AMT_USD_Ser;
	}

	public Vector getDLNG_VAT_AMT_USD_Ser() {
		return DLNG_VAT_AMT_USD_Ser;
	}

	public Vector getDLNG_tmp_addl_tax_Ser() {
		return DLNG_tmp_addl_tax_Ser;
	}

	public Vector getDLNG_tmp_vat_Ser() {
		return DLNG_tmp_vat_Ser;
	}

	public Vector getDLNG_ADD_TAX_USD_Ser() {
		return DLNG_ADD_TAX_USD_Ser;
	}

	public Vector getDLNG_SERVICE_TAX_USD_Ser() {
		return DLNG_SERVICE_TAX_USD_Ser;
	}

	public Vector getDLNG_tmp_service_tax_Ser() {
		return DLNG_tmp_service_tax_Ser;
	}

	public Vector getDLNG_XML_GEN_FLAG_Ser() {
		return DLNG_XML_GEN_FLAG_Ser;
	}

	public Vector getDLNG_TOT_QTY_Ser() {
		return DLNG_TOT_QTY_Ser;
	}

	public Vector getDLNG_SN_RATE_Ser() {
		return DLNG_SN_RATE_Ser;
	}

	public Vector getDLNG_TOT_SALE_USD_Ser() {
		return DLNG_TOT_SALE_USD_Ser;
	}
	
	double dlng_sales_qty_total_Ser=0;
	double dlng_sales_gross_amt_usd_total_Ser=0;
	double dlng_sales_qty_amt_inr_total_Ser=0;
	double dlng_sales_gross_amt_inr_total_Ser=0;
	double dlng_sales_vat_inr_total_Ser=0;
	double dlng_tcs_inr_total_Ser=0;
	double dlng_sales_addl_tax_inr_total_Ser=0;
	double dlng_sales_tax_inr_total_Ser=0;
	double dlng_sales_sbc_tax_inr_total_Ser=0;
	double dlng_sales_service_tax_inr_total_Ser=0;
	double dlng_sales_net_amt_inr_total_Ser=0;
	double dlng_sales_kkc_tax_inr_total_Ser=0;
	double dlng_sales_edu_cess_inr_total_Ser=0;
	double dlng_sales_cgst_tax_inr_total_Ser=0;
	double dlng_sales_high_edu_cess_inr_total_Ser=0;
	double dlng_sales_igst_tax_inr_total_Ser=0;
	double dlng_sales_sgst_tax_inr_total_Ser=0;
	double dlng_sales_total_tax_inr_total_Ser=0;
	double dlng_sales_group_foreign_gross_amt_usd_total_Ser=0;
	double dlng_sales_vat_usd_total_Ser=0;
	double dlng_sales_sales_tax_usd_total_Ser=0;
	double dlng_sales_zgst_tax_usd_total_Ser=0;
	double dlng_sales_igst_tax_usd_total_Ser=0;
	double dlng_sales_cgst_tax_usd_total_Ser=0;
	double dlng_sales_total_tax_usd_total_Ser=0;
	double dlng_sales_service_tax_usd_total_Ser=0;
	double dlng_sales_high_edu_cess_usd_total_Ser=0;
	double dlng_sales_sbc_tax_usd_total_Ser=0;
	double dlng_sales_kkc_tax_usd_total_Ser=0;
	double dlng_sales_edu_cess_usd_total_Ser=0;
	double dlng_sales_sgst_tax_usd_total_Ser=0;
	double dlng_sales_net_amt_usd_total_Ser=0;
	double dlng_sales_addl_tax_usd_total_Ser=0;
	double sum_tcq_dlng_Ser=0;
	double tot_trans_grossinr_Ser=0;
	String Final_sum_tcq_dlng_Ser="";
	String Sum_rem_supply_dlng_Ser="";
	double dlng_sum_igst_amt_Ser=0;
	double dlng_sum_cgst_amt_Ser=0;
	double dlng_sum_sgst_amt_Ser=0;
	double dlng_sum_igst_amt_usd_Ser=0;
	double dlng_sum_cgst_amt_usd_Ser=0;
	double dlng_sum_sgst_amt_usd_Ser=0;
	
	
	public double getdlng_sum_igst_amt_Ser() {
		return dlng_sum_igst_amt_Ser;
	}
	public double getdlng_sum_cgst_amt_Ser() {
		return dlng_sum_cgst_amt_Ser;
	}
	public double getdlng_sum_sgst_amt_Ser() {
		return dlng_sum_sgst_amt_Ser;
	}
	public double getdlng_sum_igst_amt_usd_Ser() {
		return dlng_sum_igst_amt_usd_Ser;
	}
	public double getdlng_sum_cgst_amt_usd_Ser() {
		return dlng_sum_cgst_amt_usd_Ser;
	}
	public double getdlng_sum_sgst_amt_usd_Ser() {
		return dlng_sum_sgst_amt_usd_Ser;
	}
	
	
	
	public String getSum_rem_supply_dlng_Ser() {
		return Sum_rem_supply_dlng_Ser;
	}
	public String getFinal_sum_tcq_dlng_Ser() {
		return Final_sum_tcq_dlng_Ser;
	}
	public double getDlng_sales_qty_total_Ser() {
		return dlng_sales_qty_total_Ser;
	}

	public double getDlng_sales_gross_amt_usd_total_Ser() {
		return dlng_sales_gross_amt_usd_total_Ser;
	}

	public double getDlng_sales_qty_amt_inr_total_Ser() {
		return dlng_sales_qty_amt_inr_total_Ser;
	}

	public double getDlng_sales_gross_amt_inr_total_Ser() {
		return dlng_sales_gross_amt_inr_total_Ser;
	}

	public double getDlng_sales_vat_inr_total_Ser() {
		return dlng_sales_vat_inr_total_Ser;
	}

	public double getDlng_tcs_inr_total_Ser() {
		return dlng_tcs_inr_total_Ser;
	}

	public double getDlng_sales_addl_tax_inr_total_Ser() {
		return dlng_sales_addl_tax_inr_total_Ser;
	}

	public double getDlng_sales_tax_inr_total_Ser() {
		return dlng_sales_tax_inr_total_Ser;
	}

	public double getDlng_sales_sbc_tax_inr_total_Ser() {
		return dlng_sales_sbc_tax_inr_total_Ser;
	}

	public double getDlng_sales_service_tax_inr_total_Ser() {
		return dlng_sales_service_tax_inr_total_Ser;
	}

	public double getDlng_sales_net_amt_inr_total_Ser() {
		return dlng_sales_net_amt_inr_total_Ser;
	}

	public double getDlng_sales_kkc_tax_inr_total_Ser() {
		return dlng_sales_kkc_tax_inr_total_Ser;
	}

	public double getDlng_sales_edu_cess_inr_total_Ser() {
		return dlng_sales_edu_cess_inr_total_Ser;
	}

	public double getDlng_sales_cgst_tax_inr_total_Ser() {
		return dlng_sales_cgst_tax_inr_total_Ser;
	}

	public double getDlng_sales_high_edu_cess_inr_total_Ser() {
		return dlng_sales_high_edu_cess_inr_total_Ser;
	}

	public double getDlng_sales_igst_tax_inr_total_Ser() {
		return dlng_sales_igst_tax_inr_total_Ser;
	}

	public double getDlng_sales_sgst_tax_inr_total_Ser() {
		return dlng_sales_sgst_tax_inr_total_Ser;
	}

	public double getDlng_sales_total_tax_inr_total_Ser() {
		return dlng_sales_total_tax_inr_total_Ser;
	}

	public double getDlng_sales_group_foreign_gross_amt_usd_total_Ser() {
		return dlng_sales_group_foreign_gross_amt_usd_total_Ser;
	}

	public double getDlng_sales_vat_usd_total_Ser() {
		return dlng_sales_vat_usd_total_Ser;
	}

	public double getDlng_sales_sales_tax_usd_total_Ser() {
		return dlng_sales_sales_tax_usd_total_Ser;
	}

	public double getDlng_sales_zgst_tax_usd_total_Ser() {
		return dlng_sales_zgst_tax_usd_total_Ser;
	}

	public double getDlng_sales_igst_tax_usd_total_Ser() {
		return dlng_sales_igst_tax_usd_total_Ser;
	}

	public double getDlng_sales_cgst_tax_usd_total_Ser() {
		return dlng_sales_cgst_tax_usd_total_Ser;
	}

	public double getDlng_sales_total_tax_usd_total_Ser() {
		return dlng_sales_total_tax_usd_total_Ser;
	}

	public double getDlng_sales_service_tax_usd_total_Ser() {
		return dlng_sales_service_tax_usd_total_Ser;
	}

	public double getDlng_sales_high_edu_cess_usd_total_Ser() {
		return dlng_sales_high_edu_cess_usd_total_Ser;
	}

	public double getDlng_sales_sbc_tax_usd_total_Ser() {
		return dlng_sales_sbc_tax_usd_total_Ser;
	}

	public double getDlng_sales_kkc_tax_usd_total_Ser() {
		return dlng_sales_kkc_tax_usd_total_Ser;
	}

	public double getDlng_sales_edu_cess_usd_total_Ser() {
		return dlng_sales_edu_cess_usd_total_Ser;
	}

	public double getDlng_sales_sgst_tax_usd_total_Ser() {
		return dlng_sales_sgst_tax_usd_total_Ser;
	}

	public double getDlng_sales_net_amt_usd_total_Ser() {
		return dlng_sales_net_amt_usd_total_Ser;
	}

	public double getDlng_sales_addl_tax_usd_total_Ser() {
		return dlng_sales_addl_tax_usd_total_Ser;
	}

	public double getsum_tcq_dlng_Ser() {
		return sum_tcq_dlng_Ser;
	}

	public Vector getVtds_tax_percent() {
		return Vtds_tax_percent;
	}

	public Vector getVtds_tax_amt() {
		return Vtds_tax_amt;
	}

	public void setVtds_tax_percent(Vector vtds_tax_percent) {
		Vtds_tax_percent = vtds_tax_percent;
	}

	public void setVtds_tax_amt(Vector vtds_tax_amt) {
		Vtds_tax_amt = vtds_tax_amt;
	}

	public Vector getXML_GEN_FLAG_DRCR() {
		return XML_GEN_FLAG_DRCR;
	}

	public void setXML_GEN_FLAG_DRCR(Vector xML_GEN_FLAG_DRCR) {
		XML_GEN_FLAG_DRCR = xML_GEN_FLAG_DRCR;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	public Vector getDOM_buy_flag() {
		return DOM_buy_flag;
	}

	public void setDOM_buy_flag(Vector dOM_buy_flag) {
		DOM_buy_flag = dOM_buy_flag;
	}

	public Vector getCARGO_REF_CD_DOM() {
		return CARGO_REF_CD_DOM;
	}

	public Vector getCONF_PRICE_DOM() {
		return CONF_PRICE_DOM;
	}

	public Vector getEXCHG_RATE_VALUE_DOM() {
		return EXCHG_RATE_VALUE_DOM;
	}

	public void setCARGO_REF_CD_DOM(Vector cARGO_REF_CD_DOM) {
		CARGO_REF_CD_DOM = cARGO_REF_CD_DOM;
	}

	public void setCONF_PRICE_DOM(Vector cONF_PRICE_DOM) {
		CONF_PRICE_DOM = cONF_PRICE_DOM;
	}

	public void setEXCHG_RATE_VALUE_DOM(Vector eXCHG_RATE_VALUE_DOM) {
		EXCHG_RATE_VALUE_DOM = eXCHG_RATE_VALUE_DOM;
	}

	public Vector getVESSEL_NM_DOM() {
		return VESSEL_NM_DOM;
	}

	public Vector getDUE_DT_DOM() {
		return DUE_DT_DOM;
	}

	public Vector getTRD_CD_DOM() {
		return TRD_CD_DOM;
	}

	public void setVESSEL_NM_DOM(Vector vESSEL_NM_DOM) {
		VESSEL_NM_DOM = vESSEL_NM_DOM;
	}

	public void setDUE_DT_DOM(Vector dUE_DT_DOM) {
		DUE_DT_DOM = dUE_DT_DOM;
	}

	public void setTRD_CD_DOM(Vector tRD_CD_DOM) {
		TRD_CD_DOM = tRD_CD_DOM;
	}

	public Vector getINVOICE_NO_DOM() {
		return INVOICE_NO_DOM;
	}

	public Vector getINVOICE_DT_DOM() {
		return INVOICE_DT_DOM;
	}

	public void setINVOICE_NO_DOM(Vector iNVOICE_NO_DOM) {
		INVOICE_NO_DOM = iNVOICE_NO_DOM;
	}

	public void setINVOICE_DT_DOM(Vector iNVOICE_DT_DOM) {
		INVOICE_DT_DOM = iNVOICE_DT_DOM;
	}

	public Vector getACTUAL_UNLOADED_QTY_DOM() {
		return ACTUAL_UNLOADED_QTY_DOM;
	}

	public Vector getACT_ARRV_DT_DOM() {
		return ACT_ARRV_DT_DOM;
	}

	public Vector getACT_ARRV_MONTH_DOM() {
		return ACT_ARRV_MONTH_DOM;
	}

	public void setACTUAL_UNLOADED_QTY_DOM(Vector aCTUAL_UNLOADED_QTY_DOM) {
		ACTUAL_UNLOADED_QTY_DOM = aCTUAL_UNLOADED_QTY_DOM;
	}

	public void setACT_ARRV_DT_DOM(Vector aCT_ARRV_DT_DOM) {
		ACT_ARRV_DT_DOM = aCT_ARRV_DT_DOM;
	}

	public void setACT_ARRV_MONTH_DOM(Vector aCT_ARRV_MONTH_DOM) {
		ACT_ARRV_MONTH_DOM = aCT_ARRV_MONTH_DOM;
	}

	public Vector getTRADER_NAME_DOM() {
		return TRADER_NAME_DOM;
	}

	public Vector getTRADER_ABBR_DOM() {
		return TRADER_ABBR_DOM;
	}

	public void setTRADER_NAME_DOM(Vector tRADER_NAME_DOM) {
		TRADER_NAME_DOM = tRADER_NAME_DOM;
	}

	public void setTRADER_ABBR_DOM(Vector tRADER_ABBR_DOM) {
		TRADER_ABBR_DOM = tRADER_ABBR_DOM;
	}

	public Vector getCERTIFIED_QTY_DOM() {
		return CERTIFIED_QTY_DOM;
	}

	public void setCERTIFIED_QTY_DOM(Vector cERTIFIED_QTY_DOM) {
		CERTIFIED_QTY_DOM = cERTIFIED_QTY_DOM;
	}

	public Vector getCREDIT_NOTE_QTY_DOM() {
		return CREDIT_NOTE_QTY_DOM;
	}

	public void setCREDIT_NOTE_QTY_DOM(Vector cREDIT_NOTE_QTY_DOM) {
		CREDIT_NOTE_QTY_DOM = cREDIT_NOTE_QTY_DOM;
	}

	public Vector getPROVISIONAL_QTY_DOM() {
		return PROVISIONAL_QTY_DOM;
	}

	public void setPROVISIONAL_QTY_DOM(Vector pROVISIONAL_QTY_DOM) {
		PROVISIONAL_QTY_DOM = pROVISIONAL_QTY_DOM;
	}

	public Vector getUSD_VAL_INVOICE_DOM() {
		return USD_VAL_INVOICE_DOM;
	}

	public void setUSD_VAL_INVOICE_DOM(Vector uSD_VAL_INVOICE_DOM) {
		USD_VAL_INVOICE_DOM = uSD_VAL_INVOICE_DOM;
	}

	public Vector getTOTAL_CD_AMT_DOM() {
		return TOTAL_CD_AMT_DOM;
	}

	public void setTOTAL_CD_AMT_DOM(Vector tOTAL_CD_AMT_DOM) {
		TOTAL_CD_AMT_DOM = tOTAL_CD_AMT_DOM;
	}

	public Vector getTOTAL_PAID_REFUND_DOM() {
		return TOTAL_PAID_REFUND_DOM;
	}

	public void setTOTAL_PAID_REFUND_DOM(Vector tOTAL_PAID_REFUND_DOM) {
		TOTAL_PAID_REFUND_DOM = tOTAL_PAID_REFUND_DOM;
	}

	public Vector getCUSTOM_JBB_DOM() {
		return CUSTOM_JBB_DOM;
	}

	public Vector getCUSTOM_PROVISIONS_DOM() {
		return CUSTOM_PROVISIONS_DOM;
	}

	public void setCUSTOM_JBB_DOM(Vector cUSTOM_JBB_DOM) {
		CUSTOM_JBB_DOM = cUSTOM_JBB_DOM;
	}

	public void setCUSTOM_PROVISIONS_DOM(Vector cUSTOM_PROVISIONS_DOM) {
		CUSTOM_PROVISIONS_DOM = cUSTOM_PROVISIONS_DOM;
	}

	public double getPurchase_total_qty_dom() {
		return purchase_total_qty_dom;
	}

	public double getPurchase_total_invoice_value_dom() {
		return purchase_total_invoice_value_dom;
	}

	public double getPurchase_prov_total_qty_dom() {
		return purchase_prov_total_qty_dom;
	}

	public double getPurchase_credit_note_total_qty_dom() {
		return purchase_credit_note_total_qty_dom;
	}

	public double getPurchase_certified_total_qty_dom() {
		return purchase_certified_total_qty_dom;
	}

	public double getPurchase_total_inv_value_inr_dom() {
		return purchase_total_inv_value_inr_dom;
	}

	public double getPurchase_total_cd_inr_dom() {
		return purchase_total_cd_inr_dom;
	}

	public double getPurchase_total_cost_inr_dom() {
		return purchase_total_cost_inr_dom;
	}

	public double getPurchase_total_cd_usd_dom() {
		return purchase_total_cd_usd_dom;
	}

	public double getPurchase_total_addl_cd_usd_dom() {
		return purchase_total_addl_cd_usd_dom;
	}

	public double getPurchase_total_cost_usd_dom() {
		return purchase_total_cost_usd_dom;
	}

	public double getPurchase_total_inv_value_usd_dom() {
		return purchase_total_inv_value_usd_dom;
	}

	public double getPurchase_total_custom_provisions_dom() {
		return purchase_total_custom_provisions_dom;
	}

	public double getPurchase_total_custom_jbb_dom() {
		return purchase_total_custom_jbb_dom;
	}

	public void setPurchase_total_qty_dom(double purchase_total_qty_dom) {
		this.purchase_total_qty_dom = purchase_total_qty_dom;
	}

	public void setPurchase_total_invoice_value_dom(double purchase_total_invoice_value_dom) {
		this.purchase_total_invoice_value_dom = purchase_total_invoice_value_dom;
	}

	public void setPurchase_prov_total_qty_dom(double purchase_prov_total_qty_dom) {
		this.purchase_prov_total_qty_dom = purchase_prov_total_qty_dom;
	}

	public void setPurchase_credit_note_total_qty_dom(double purchase_credit_note_total_qty_dom) {
		this.purchase_credit_note_total_qty_dom = purchase_credit_note_total_qty_dom;
	}

	public void setPurchase_certified_total_qty_dom(double purchase_certified_total_qty_dom) {
		this.purchase_certified_total_qty_dom = purchase_certified_total_qty_dom;
	}

	public void setPurchase_total_inv_value_inr_dom(double purchase_total_inv_value_inr_dom) {
		this.purchase_total_inv_value_inr_dom = purchase_total_inv_value_inr_dom;
	}

	public void setPurchase_total_cd_inr_dom(double purchase_total_cd_inr_dom) {
		this.purchase_total_cd_inr_dom = purchase_total_cd_inr_dom;
	}

	public void setPurchase_total_cost_inr_dom(double purchase_total_cost_inr_dom) {
		this.purchase_total_cost_inr_dom = purchase_total_cost_inr_dom;
	}

	public void setPurchase_total_cd_usd_dom(double purchase_total_cd_usd_dom) {
		this.purchase_total_cd_usd_dom = purchase_total_cd_usd_dom;
	}

	public void setPurchase_total_addl_cd_usd_dom(double purchase_total_addl_cd_usd_dom) {
		this.purchase_total_addl_cd_usd_dom = purchase_total_addl_cd_usd_dom;
	}

	public void setPurchase_total_cost_usd_dom(double purchase_total_cost_usd_dom) {
		this.purchase_total_cost_usd_dom = purchase_total_cost_usd_dom;
	}

	public void setPurchase_total_inv_value_usd_dom(double purchase_total_inv_value_usd_dom) {
		this.purchase_total_inv_value_usd_dom = purchase_total_inv_value_usd_dom;
	}

	public void setPurchase_total_custom_provisions_dom(double purchase_total_custom_provisions_dom) {
		this.purchase_total_custom_provisions_dom = purchase_total_custom_provisions_dom;
	}

	public void setPurchase_total_custom_jbb_dom(double purchase_total_custom_jbb_dom) {
		this.purchase_total_custom_jbb_dom = purchase_total_custom_jbb_dom;
	}

	public double getPurchase_total_addl_cd_inr_dom() {
		return purchase_total_addl_cd_inr_dom;
	}

	public void setPurchase_total_addl_cd_inr_dom(double purchase_total_addl_cd_inr_dom) {
		this.purchase_total_addl_cd_inr_dom = purchase_total_addl_cd_inr_dom;
	}

	public Vector getApprove_flag_DOM() {
		return Approve_flag_DOM;
	}

	public Vector getAuthorize_flag_DOM() {
		return Authorize_flag_DOM;
	}

	public Vector getCheck_flag_DOM() {
		return Check_flag_DOM;
	}

	public void setApprove_flag_DOM(Vector approve_flag_DOM) {
		Approve_flag_DOM = approve_flag_DOM;
	}

	public void setAuthorize_flag_DOM(Vector authorize_flag_DOM) {
		Authorize_flag_DOM = authorize_flag_DOM;
	}

	public void setCheck_flag_DOM(Vector check_flag_DOM) {
		Check_flag_DOM = check_flag_DOM;
	}

	public Vector getCheck_flag() {
		return Check_flag;
	}

	public Vector getAuthorize_flag() {
		return Authorize_flag;
	}

	public Vector getApprove_flag() {
		return Approve_flag;
	}

	public void setCheck_flag(Vector check_flag) {
		Check_flag = check_flag;
	}

	public void setAuthorize_flag(Vector authorize_flag) {
		Authorize_flag = authorize_flag;
	}

	public void setApprove_flag(Vector approve_flag) {
		Approve_flag = approve_flag;
	}

	public Vector getFINAL_SELLER_INV_AMT_INR_DOM() {
		return FINAL_SELLER_INV_AMT_INR_DOM;
	}

	public Vector getFINAL_SELLER_INV_AMT_INR_NUMERIC_DOM() {
		return FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM;
	}

	public void setFINAL_SELLER_INV_AMT_INR_DOM(Vector fINAL_SELLER_INV_AMT_INR_DOM) {
		FINAL_SELLER_INV_AMT_INR_DOM = fINAL_SELLER_INV_AMT_INR_DOM;
	}

	public void setFINAL_SELLER_INV_AMT_INR_NUMERIC_DOM(Vector fINAL_SELLER_INV_AMT_INR_NUMERIC_DOM) {
		FINAL_SELLER_INV_AMT_INR_NUMERIC_DOM = fINAL_SELLER_INV_AMT_INR_NUMERIC_DOM;
	}

	public Vector getGROUP_FOREIGN_EXCHG_RATE_DOM() {
		return GROUP_FOREIGN_EXCHG_RATE_DOM;
	}

	public void setGROUP_FOREIGN_EXCHG_RATE_DOM(Vector gROUP_FOREIGN_EXCHG_RATE_DOM) {
		GROUP_FOREIGN_EXCHG_RATE_DOM = gROUP_FOREIGN_EXCHG_RATE_DOM;
	}

	public Vector getUSD_PER_MMBTU_NUMERIC_DOM() {
		return USD_PER_MMBTU_NUMERIC_DOM;
	}

	public Vector getUSD_PER_MMBTU_DOM() {
		return USD_PER_MMBTU_DOM;
	}

	public Vector getUSD_VAL_INVOICE_NUMERIC_DOM() {
		return USD_VAL_INVOICE_NUMERIC_DOM;
	}

	public void setUSD_PER_MMBTU_NUMERIC_DOM(Vector uSD_PER_MMBTU_NUMERIC_DOM) {
		USD_PER_MMBTU_NUMERIC_DOM = uSD_PER_MMBTU_NUMERIC_DOM;
	}

	public void setUSD_PER_MMBTU_DOM(Vector uSD_PER_MMBTU_DOM) {
		USD_PER_MMBTU_DOM = uSD_PER_MMBTU_DOM;
	}

	public void setUSD_VAL_INVOICE_NUMERIC_DOM(Vector uSD_VAL_INVOICE_NUMERIC_DOM) {
		USD_VAL_INVOICE_NUMERIC_DOM = uSD_VAL_INVOICE_NUMERIC_DOM;
	}

	public Vector getINR_PER_MMBTU_DOM() {
		return INR_PER_MMBTU_DOM;
	}

	public void setINR_PER_MMBTU_DOM(Vector iNR_PER_MMBTU_DOM) {
		INR_PER_MMBTU_DOM = iNR_PER_MMBTU_DOM;
	}

	public Vector getCUSTOM_DUTY_USD_DOM() {
		return CUSTOM_DUTY_USD_DOM;
	}

	public void setCUSTOM_DUTY_USD_DOM(Vector cUSTOM_DUTY_USD_DOM) {
		CUSTOM_DUTY_USD_DOM = cUSTOM_DUTY_USD_DOM;
	}

	public Vector getCUSTOM_DUTY_DATE_RATE_NOTE_DOM() {
		return CUSTOM_DUTY_DATE_RATE_NOTE_DOM;
	}

	public void setCUSTOM_DUTY_DATE_RATE_NOTE_DOM(Vector cUSTOM_DUTY_DATE_RATE_NOTE_DOM) {
		CUSTOM_DUTY_DATE_RATE_NOTE_DOM = cUSTOM_DUTY_DATE_RATE_NOTE_DOM;
	}

	public Vector getCOST_OF_PURCHASE_USD_DOM() {
		return COST_OF_PURCHASE_USD_DOM;
	}

	public void setCOST_OF_PURCHASE_USD_DOM(Vector cOST_OF_PURCHASE_USD_DOM) {
		COST_OF_PURCHASE_USD_DOM = cOST_OF_PURCHASE_USD_DOM;
	}

	public Vector getARRIVAL_DATE_RATE_NOTE_DOM() {
		return ARRIVAL_DATE_RATE_NOTE_DOM;
	}

	public void setARRIVAL_DATE_RATE_NOTE_DOM(Vector aRRIVAL_DATE_RATE_NOTE_DOM) {
		ARRIVAL_DATE_RATE_NOTE_DOM = aRRIVAL_DATE_RATE_NOTE_DOM;
	}

	public Vector getSUMMRY_ACT_ARRV_MONTH_DOM() {
		return SUMMRY_ACT_ARRV_MONTH_DOM;
	}

	public Vector getSUMMRY_ACTUAL_UNLOADED_QTY_DOM() {
		return SUMMRY_ACTUAL_UNLOADED_QTY_DOM;
	}

	public Vector getSUMMRY_CARGO_REF_CD_DOM() {
		return SUMMRY_CARGO_REF_CD_DOM;
	}

	public Vector getSUMMRY_FINAL_SELLER_INV_AMT_INR_DOM() {
		return SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM;
	}

	public Vector getSUMMRY_CD_PAID_DOM() {
		return SUMMRY_CD_PAID_DOM;
	}

	public Vector getSUMMRY_CUSTOM_DUTY_USD_DOM() {
		return SUMMRY_CUSTOM_DUTY_USD_DOM;
	}

	public Vector getSUMMRY_ADDL_CUSTOM_DUTY_USD_DOM() {
		return SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM;
	}

	public Vector getSUMMRY_COST_OF_PURCHASE_USD_DOM() {
		return SUMMRY_COST_OF_PURCHASE_USD_DOM;
	}

	public void setSUMMRY_ACT_ARRV_MONTH_DOM(Vector sUMMRY_ACT_ARRV_MONTH_DOM) {
		SUMMRY_ACT_ARRV_MONTH_DOM = sUMMRY_ACT_ARRV_MONTH_DOM;
	}

	public void setSUMMRY_ACTUAL_UNLOADED_QTY_DOM(Vector sUMMRY_ACTUAL_UNLOADED_QTY_DOM) {
		SUMMRY_ACTUAL_UNLOADED_QTY_DOM = sUMMRY_ACTUAL_UNLOADED_QTY_DOM;
	}

	public void setSUMMRY_CARGO_REF_CD_DOM(Vector sUMMRY_CARGO_REF_CD_DOM) {
		SUMMRY_CARGO_REF_CD_DOM = sUMMRY_CARGO_REF_CD_DOM;
	}

	public void setSUMMRY_FINAL_SELLER_INV_AMT_INR_DOM(Vector sUMMRY_FINAL_SELLER_INV_AMT_INR_DOM) {
		SUMMRY_FINAL_SELLER_INV_AMT_INR_DOM = sUMMRY_FINAL_SELLER_INV_AMT_INR_DOM;
	}

	public void setSUMMRY_CD_PAID_DOM(Vector sUMMRY_CD_PAID_DOM) {
		SUMMRY_CD_PAID_DOM = sUMMRY_CD_PAID_DOM;
	}

	public void setSUMMRY_CUSTOM_DUTY_USD_DOM(Vector sUMMRY_CUSTOM_DUTY_USD_DOM) {
		SUMMRY_CUSTOM_DUTY_USD_DOM = sUMMRY_CUSTOM_DUTY_USD_DOM;
	}

	public void setSUMMRY_ADDL_CUSTOM_DUTY_USD_DOM(Vector sUMMRY_ADDL_CUSTOM_DUTY_USD_DOM) {
		SUMMRY_ADDL_CUSTOM_DUTY_USD_DOM = sUMMRY_ADDL_CUSTOM_DUTY_USD_DOM;
	}

	public void setSUMMRY_COST_OF_PURCHASE_USD_DOM(Vector sUMMRY_COST_OF_PURCHASE_USD_DOM) {
		SUMMRY_COST_OF_PURCHASE_USD_DOM = sUMMRY_COST_OF_PURCHASE_USD_DOM;
	}

	public Vector getSUMMRY_USD_VAL_INVOICE_DOM() {
		return SUMMRY_USD_VAL_INVOICE_DOM;
	}

	public Vector getSUMMRY_TOTAL_CD_AMT_DOM() {
		return SUMMRY_TOTAL_CD_AMT_DOM;
	}

	public Vector getSUMMRY_TOTAL_PAID_REFUND_DOM() {
		return SUMMRY_TOTAL_PAID_REFUND_DOM;
	}

	public Vector getSUMMRY_USD_PER_MMBTU_DOM() {
		return SUMMRY_USD_PER_MMBTU_DOM;
	}

	public void setSUMMRY_USD_VAL_INVOICE_DOM(Vector sUMMRY_USD_VAL_INVOICE_DOM) {
		SUMMRY_USD_VAL_INVOICE_DOM = sUMMRY_USD_VAL_INVOICE_DOM;
	}

	public void setSUMMRY_TOTAL_CD_AMT_DOM(Vector sUMMRY_TOTAL_CD_AMT_DOM) {
		SUMMRY_TOTAL_CD_AMT_DOM = sUMMRY_TOTAL_CD_AMT_DOM;
	}

	public void setSUMMRY_TOTAL_PAID_REFUND_DOM(Vector sUMMRY_TOTAL_PAID_REFUND_DOM) {
		SUMMRY_TOTAL_PAID_REFUND_DOM = sUMMRY_TOTAL_PAID_REFUND_DOM;
	}

	public void setSUMMRY_USD_PER_MMBTU_DOM(Vector sUMMRY_USD_PER_MMBTU_DOM) {
		SUMMRY_USD_PER_MMBTU_DOM = sUMMRY_USD_PER_MMBTU_DOM;
	}

	public Vector getSUMMRY_INR_PER_MMBTU_DOM() {
		return SUMMRY_INR_PER_MMBTU_DOM;
	}

	public void setSUMMRY_INR_PER_MMBTU(Vector sUMMRY_INR_PER_MMBTU) {
		SUMMRY_INR_PER_MMBTU = sUMMRY_INR_PER_MMBTU;
	}

	public void setSUMMRY_INR_PER_MMBTU_DOM(Vector sUMMRY_INR_PER_MMBTU_DOM) {
		SUMMRY_INR_PER_MMBTU_DOM = sUMMRY_INR_PER_MMBTU_DOM;
	}

	public Vector getCD_PAID_NUMERIC_DOM() {
		return CD_PAID_NUMERIC_DOM;
	}

	public Vector getCUSTOM_DUTY_USD_NUMERIC_DOM() {
		return CUSTOM_DUTY_USD_NUMERIC_DOM;
	}

	public Vector getADDL_CUSTOM_DUTY_USD_NUMERIC_DOM() {
		return ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM;
	}

	public Vector getCOST_OF_PURCHASE_USD_NUMERIC_DOM() {
		return COST_OF_PURCHASE_USD_NUMERIC_DOM;
	}

	public Vector getACTUAL_UNLOADED_QTY_NUMERIC_DOM() {
		return ACTUAL_UNLOADED_QTY_NUMERIC_DOM;
	}

	public Vector getCONF_PRICE_NUMERIC_DOM() {
		return CONF_PRICE_NUMERIC_DOM;
	}

	public Vector getCUSTOM_DUTY_INTEREST_NUMERIC_DOM() {
		return CUSTOM_DUTY_INTEREST_NUMERIC_DOM;
	}

	public void setCD_PAID_NUMERIC_DOM(Vector cD_PAID_NUMERIC_DOM) {
		CD_PAID_NUMERIC_DOM = cD_PAID_NUMERIC_DOM;
	}

	public void setCUSTOM_DUTY_USD_NUMERIC_DOM(Vector cUSTOM_DUTY_USD_NUMERIC_DOM) {
		CUSTOM_DUTY_USD_NUMERIC_DOM = cUSTOM_DUTY_USD_NUMERIC_DOM;
	}

	public void setADDL_CUSTOM_DUTY_USD_NUMERIC_DOM(Vector aDDL_CUSTOM_DUTY_USD_NUMERIC_DOM) {
		ADDL_CUSTOM_DUTY_USD_NUMERIC_DOM = aDDL_CUSTOM_DUTY_USD_NUMERIC_DOM;
	}

	public void setCOST_OF_PURCHASE_USD_NUMERIC_DOM(Vector cOST_OF_PURCHASE_USD_NUMERIC_DOM) {
		COST_OF_PURCHASE_USD_NUMERIC_DOM = cOST_OF_PURCHASE_USD_NUMERIC_DOM;
	}

	public void setACTUAL_UNLOADED_QTY_NUMERIC_DOM(Vector aCTUAL_UNLOADED_QTY_NUMERIC_DOM) {
		ACTUAL_UNLOADED_QTY_NUMERIC_DOM = aCTUAL_UNLOADED_QTY_NUMERIC_DOM;
	}

	public void setCONF_PRICE_NUMERIC_DOM(Vector cONF_PRICE_NUMERIC_DOM) {
		CONF_PRICE_NUMERIC_DOM = cONF_PRICE_NUMERIC_DOM;
	}

	public void setCUSTOM_DUTY_INTEREST_NUMERIC_DOM(Vector cUSTOM_DUTY_INTEREST_NUMERIC_DOM) {
		CUSTOM_DUTY_INTEREST_NUMERIC_DOM = cUSTOM_DUTY_INTEREST_NUMERIC_DOM;
	}

	public Vector getTOTAL_CD_AMT_NUMERIC_DOM() {
		return TOTAL_CD_AMT_NUMERIC_DOM;
	}

	public Vector getTOTAL_PAID_REFUND_NUMERIC_DOM() {
		return TOTAL_PAID_REFUND_NUMERIC_DOM;
	}

	public void setTOTAL_CD_AMT_NUMERIC_DOM(Vector tOTAL_CD_AMT_NUMERIC_DOM) {
		TOTAL_CD_AMT_NUMERIC_DOM = tOTAL_CD_AMT_NUMERIC_DOM;
	}

	public void setTOTAL_PAID_REFUND_NUMERIC_DOM(Vector tOTAL_PAID_REFUND_NUMERIC_DOM) {
		TOTAL_PAID_REFUND_NUMERIC_DOM = tOTAL_PAID_REFUND_NUMERIC_DOM;
	}

	public Vector getINR_PER_MMBTU_NUMERIC_DOM() {
		return INR_PER_MMBTU_NUMERIC_DOM;
	}

	public void setINR_PER_MMBTU_NUMERIC_DOM(Vector iNR_PER_MMBTU_NUMERIC_DOM) {
		INR_PER_MMBTU_NUMERIC_DOM = iNR_PER_MMBTU_NUMERIC_DOM;
	}

	public Vector getGROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM() {
		return GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM;
	}

	public void setGROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM(Vector gROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM) {
		GROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM = gROUP_FOREIGN_EXCHG_RATE_NUMERIC_DOM;
	}

	public Vector getDuration_dom() {
		return duration_dom;
	}

	public void setDuration_dom(Vector duration_dom) {
		this.duration_dom = duration_dom;
	}

	public Vector getExchg_rt_dom() {
		return exchg_rt_dom;
	}

	public void setExchg_rt_dom(Vector exchg_rt_dom) {
		this.exchg_rt_dom = exchg_rt_dom;
	}

	public Vector getINVOICE_AMT_DOM() {
		return INVOICE_AMT_DOM;
	}

	public void setINVOICE_AMT_DOM(Vector iNVOICE_AMT_DOM) {
		INVOICE_AMT_DOM = iNVOICE_AMT_DOM;
	}

	public Vector getINVOICE_TAX_AMT_DOM() {
		return INVOICE_TAX_AMT_DOM;
	}

	public void setINVOICE_TAX_AMT_DOM(Vector iNVOICE_TAX_AMT_DOM) {
		INVOICE_TAX_AMT_DOM = iNVOICE_TAX_AMT_DOM;
	}

	public Vector getTAX_rmk_DOM() {
		return TAX_rmk_DOM;
	}

	public void setTAX_rmk_DOM(Vector tAX_rmk_DOM) {
		TAX_rmk_DOM = tAX_rmk_DOM;
	}

	public Vector getTAX_amt_usd_DOM() {
		return TAX_amt_usd_DOM;
	}

	public void setTAX_amt_usd_DOM(Vector tAX_amt_usd_DOM) {
		TAX_amt_usd_DOM = tAX_amt_usd_DOM;
	}

	public Vector getInvoice_type_DOM() {
		return invoice_type_DOM;
	}

	public void setInvoice_type_DOM(Vector invoice_type_DOM) {
		this.invoice_type_DOM = invoice_type_DOM;
	}

	public Vector getXML_GEN_FLAG_DOM() {
		return XML_GEN_FLAG_DOM;
	}

	public void setXML_GEN_FLAG_DOM(Vector xML_GEN_FLAG_DOM) {
		XML_GEN_FLAG_DOM = xML_GEN_FLAG_DOM;
	}

	public Vector getSUN_APPROVAL_DOM() {
		return SUN_APPROVAL_DOM;
	}

	public void setSUN_APPROVAL_DOM(Vector sUN_APPROVAL_DOM) {
		SUN_APPROVAL_DOM = sUN_APPROVAL_DOM;
	}

	public double getCustom_duty_interest_total_inr_dom() {
		return custom_duty_interest_total_inr_dom;
	}

	public void setCustom_duty_interest_total_inr_dom(double custom_duty_interest_total_inr_dom) {
		this.custom_duty_interest_total_inr_dom = custom_duty_interest_total_inr_dom;
	}

	public String getFlag_accounting() {
		return flag_accounting;
	}

	public void setFlag_accounting(String flag_accounting) {
		this.flag_accounting = flag_accounting;
	}

	public Vector getSUMMRY_TAX_AMT_INR_DOM() {
		return SUMMRY_TAX_AMT_INR_DOM;
	}

	public void setSUMMRY_TAX_AMT_INR_DOM(Vector sUMMRY_TAX_AMT_INR_DOM) {
		SUMMRY_TAX_AMT_INR_DOM = sUMMRY_TAX_AMT_INR_DOM;
	}

	public double getPurchase_total_tax_inr_dom() {
		return purchase_total_tax_inr_dom;
	}

	public double getPurchase_total_tax_usd_dom() {
		return purchase_total_tax_usd_dom;
	}

	public void setPurchase_total_tax_inr_dom(double purchase_total_tax_inr_dom) {
		this.purchase_total_tax_inr_dom = purchase_total_tax_inr_dom;
	}

	public void setPurchase_total_tax_usd_dom(double purchase_total_tax_usd_dom) {
		this.purchase_total_tax_usd_dom = purchase_total_tax_usd_dom;
	}

	public Vector getSUMMRY_TAX_AMT_USD_DOM() {
		return SUMMRY_TAX_AMT_USD_DOM;
	}

	public void setSUMMRY_TAX_AMT_USD_DOM(Vector sUMMRY_TAX_AMT_USD_DOM) {
		SUMMRY_TAX_AMT_USD_DOM = sUMMRY_TAX_AMT_USD_DOM;
	}

	public Vector getDist_CARGO_REF_CD_DOM() {
		return Dist_CARGO_REF_CD_DOM;
	}

	public void setDist_CARGO_REF_CD_DOM(Vector dist_CARGO_REF_CD_DOM) {
		Dist_CARGO_REF_CD_DOM = dist_CARGO_REF_CD_DOM;
	}

	public Vector getDist_INVOICE_NO_DOM() {
		return Dist_INVOICE_NO_DOM;
	}

	public void setDist_INVOICE_NO_DOM(Vector dist_INVOICE_NO_DOM) {
		Dist_INVOICE_NO_DOM = dist_INVOICE_NO_DOM;
	}

	public Vector getINVOICE_AMT_TDS_DOM() {
		return INVOICE_AMT_TDS_DOM;
	}

	public void setINVOICE_AMT_TDS_DOM(Vector iNVOICE_AMT_TDS_DOM) {
		INVOICE_AMT_TDS_DOM = iNVOICE_AMT_TDS_DOM;
	}

	public Vector getSUMMRY_TDS_AMT_INR_DOM() {
		return SUMMRY_TDS_AMT_INR_DOM;
	}

	public void setSUMMRY_TDS_AMT_INR_DOM(Vector sUMMRY_TDS_AMT_INR_DOM) {
		SUMMRY_TDS_AMT_INR_DOM = sUMMRY_TDS_AMT_INR_DOM;
	}

	public Vector getQTY_MSG_DOM() {
		return QTY_MSG_DOM;
	}

	public void setQTY_MSG_DOM(Vector qTY_MSG_DOM) {
		QTY_MSG_DOM = qTY_MSG_DOM;
	}

	public Vector getInv_type_flag() {
		return inv_type_flag;
	}

	public void setInv_type_flag(Vector inv_type_flag) {
		this.inv_type_flag = inv_type_flag;
	}

	public Vector getTRADER_INV_CURRENCY() {
		return TRADER_INV_CURRENCY;
	}

	public void setTRADER_INV_CURRENCY(Vector tRADER_INV_CURRENCY) {
		TRADER_INV_CURRENCY = tRADER_INV_CURRENCY;
	}

	public Vector getTRADER_PAY_CURRENCY() {
		return TRADER_PAY_CURRENCY;
	}

	public void setTRADER_PAY_CURRENCY(Vector tRADER_PAY_CURRENCY) {
		TRADER_PAY_CURRENCY = tRADER_PAY_CURRENCY;
	}

	public String getExchg_rt_dt() {
		return exchg_rt_dt;
	}

	public void setExchg_rt_dt(String exchg_rt_dt) {
		this.exchg_rt_dt = exchg_rt_dt;
	}

	public Vector getExchg_rt_val() {
		return exchg_rt_val;
	}

	public void setExchg_rt_val(Vector exchg_rt_val) {
		this.exchg_rt_val = exchg_rt_val;
	}

	public Vector getGross_inr_DOM() {
		return Gross_inr_DOM;
	}

	public Vector getTax_inr_DOM() {
		return Tax_inr_DOM;
	}

	public Vector getNet_inr_DOM() {
		return net_inr_DOM;
	}

	public Vector getPayable_inr_DOM() {
		return payable_inr_DOM;
	}

	public void setGross_inr_DOM(Vector gross_inr_DOM) {
		Gross_inr_DOM = gross_inr_DOM;
	}

	public void setTax_inr_DOM(Vector tax_inr_DOM) {
		Tax_inr_DOM = tax_inr_DOM;
	}

	public void setNet_inr_DOM(Vector net_inr_DOM) {
		this.net_inr_DOM = net_inr_DOM;
	}

	public void setPayable_inr_DOM(Vector payable_inr_DOM) {
		this.payable_inr_DOM = payable_inr_DOM;
	}

	public Vector getTCS_TDS_AMT_DOM() {
		return TCS_TDS_AMT_DOM;
	}

	public Vector getTCS_APP_FLAG() {
		return TCS_APP_FLAG;
	}

	public Vector getTCS_PERC_DOM() {
		return TCS_PERC_DOM;
	}

	public Vector getTDS_PERC_DOM() {
		return TDS_PERC_DOM;
	}

	public Vector getTDS_APP_FLAG() {
		return TDS_APP_FLAG;
	}

	public void setTCS_TDS_AMT_DOM(Vector tCS_TDS_AMT_DOM) {
		TCS_TDS_AMT_DOM = tCS_TDS_AMT_DOM;
	}

	public void setTCS_APP_FLAG(Vector tCS_APP_FLAG) {
		TCS_APP_FLAG = tCS_APP_FLAG;
	}

	public void setTCS_PERC_DOM(Vector tCS_PERC_DOM) {
		TCS_PERC_DOM = tCS_PERC_DOM;
	}

	public void setTDS_PERC_DOM(Vector tDS_PERC_DOM) {
		TDS_PERC_DOM = tDS_PERC_DOM;
	}

	public void setTDS_APP_FLAG(Vector tDS_APP_FLAG) {
		TDS_APP_FLAG = tDS_APP_FLAG;
	}

	public Vector getVexchg_rt_dt() {
		return Vexchg_rt_dt;
	}

	public void setVexchg_rt_dt(Vector vexchg_rt_dt) {
		Vexchg_rt_dt = vexchg_rt_dt;
	}

	public String getInd() {
		return ind;
	}

	public void setInd(String ind) {
		this.ind = ind;
	}

	public Vector getPAY_EXCHG_RT_DT() {
		return PAY_EXCHG_RT_DT;
	}

	public Vector getPAY_EXCHG_RT_VAL() {
		return PAY_EXCHG_RT_VAL;
	}

	public void setPAY_EXCHG_RT_DT(Vector pAY_EXCHG_RT_DT) {
		PAY_EXCHG_RT_DT = pAY_EXCHG_RT_DT;
	}

	public void setPAY_EXCHG_RT_VAL(Vector pAY_EXCHG_RT_VAL) {
		PAY_EXCHG_RT_VAL = pAY_EXCHG_RT_VAL;
	}

	public String getExchgrt() {
		return exchgrt;
	}

	public void setExchgrt(String exchgrt) {
		this.exchgrt = exchgrt;
	}

	public String getAll_exchg_rtdt() {
		return all_exchg_rtdt;
	}

	public void setAll_exchg_rtdt(String all_exchg_rtdt) {
		this.all_exchg_rtdt = all_exchg_rtdt;
	}

	public Vector getExchg_rt_Dt() {
		return Exchg_rt_Dt;
	}

	public void setExchg_rt_Dt(Vector exchg_rt_Dt) {
		Exchg_rt_Dt = exchg_rt_Dt;
	}

	public Vector getINVOICE_TCS_AMT() {
		return INVOICE_TCS_AMT;
	}

	public void setINVOICE_TCS_AMT(Vector iNVOICE_TCS_AMT) {
		INVOICE_TCS_AMT = iNVOICE_TCS_AMT;
	}

	public Vector getINVOICE_TAX_AMT_DOM_DRCR() {
		return INVOICE_TAX_AMT_DOM_DRCR;
	}

	public Vector getINVOICE_NO_DOM_DRCR() {
		return INVOICE_NO_DOM_DRCR;
	}

	public Vector getINVOICE_TCS_AMT_DRCR() {
		return INVOICE_TCS_AMT_DRCR;
	}

	public void setINVOICE_TAX_AMT_DOM_DRCR(Vector iNVOICE_TAX_AMT_DOM_DRCR) {
		INVOICE_TAX_AMT_DOM_DRCR = iNVOICE_TAX_AMT_DOM_DRCR;
	}

	public void setINVOICE_NO_DOM_DRCR(Vector iNVOICE_NO_DOM_DRCR) {
		INVOICE_NO_DOM_DRCR = iNVOICE_NO_DOM_DRCR;
	}

	public void setINVOICE_TCS_AMT_DRCR(Vector iNVOICE_TCS_AMT_DRCR) {
		INVOICE_TCS_AMT_DRCR = iNVOICE_TCS_AMT_DRCR;
	}

	public Vector getCARGO_REF_CD_DOM_DRCR() {
		return CARGO_REF_CD_DOM_DRCR;
	}

	public void setCARGO_REF_CD_DOM_DRCR(Vector cARGO_REF_CD_DOM_DRCR) {
		CARGO_REF_CD_DOM_DRCR = cARGO_REF_CD_DOM_DRCR;
	}

	public Vector getTRD_CD_DOM_DRCR() {
		return TRD_CD_DOM_DRCR;
	}

	public Vector getUSD_VAL_INVOICE_DOM_DRCR() {
		return USD_VAL_INVOICE_DOM_DRCR;
	}

	public Vector getUSD_VAL_INVOICE_NUMERIC_DOM_DRCR() {
		return USD_VAL_INVOICE_NUMERIC_DOM_DRCR;
	}

	public void setTRD_CD_DOM_DRCR(Vector tRD_CD_DOM_DRCR) {
		TRD_CD_DOM_DRCR = tRD_CD_DOM_DRCR;
	}

	public void setUSD_VAL_INVOICE_DOM_DRCR(Vector uSD_VAL_INVOICE_DOM_DRCR) {
		USD_VAL_INVOICE_DOM_DRCR = uSD_VAL_INVOICE_DOM_DRCR;
	}

	public void setUSD_VAL_INVOICE_NUMERIC_DOM_DRCR(Vector uSD_VAL_INVOICE_NUMERIC_DOM_DRCR) {
		USD_VAL_INVOICE_NUMERIC_DOM_DRCR = uSD_VAL_INVOICE_NUMERIC_DOM_DRCR;
	}

	public Vector getACTUAL_UNLOADED_QTY_DOM_DRCR() {
		return ACTUAL_UNLOADED_QTY_DOM_DRCR;
	}

	public Vector getACT_ARRV_MONTH_DOM_DRCR() {
		return ACT_ARRV_MONTH_DOM_DRCR;
	}

	public Vector getACT_ARRV_DT_DOM_DRCR() {
		return ACT_ARRV_DT_DOM_DRCR;
	}

	public void setACTUAL_UNLOADED_QTY_DOM_DRCR(Vector aCTUAL_UNLOADED_QTY_DOM_DRCR) {
		ACTUAL_UNLOADED_QTY_DOM_DRCR = aCTUAL_UNLOADED_QTY_DOM_DRCR;
	}

	public void setACT_ARRV_MONTH_DOM_DRCR(Vector aCT_ARRV_MONTH_DOM_DRCR) {
		ACT_ARRV_MONTH_DOM_DRCR = aCT_ARRV_MONTH_DOM_DRCR;
	}

	public void setACT_ARRV_DT_DOM_DRCR(Vector aCT_ARRV_DT_DOM_DRCR) {
		ACT_ARRV_DT_DOM_DRCR = aCT_ARRV_DT_DOM_DRCR;
	}

	public Vector getVESSEL_NM_DOM_DRCR() {
		return VESSEL_NM_DOM_DRCR;
	}

	public void setVESSEL_NM_DOM_DRCR(Vector vESSEL_NM_DOM_DRCR) {
		VESSEL_NM_DOM_DRCR = vESSEL_NM_DOM_DRCR;
	}

	public Vector getInvoice_type_DOM_DRCR() {
		return invoice_type_DOM_DRCR;
	}

	public void setInvoice_type_DOM_DRCR(Vector invoice_type_DOM_DRCR) {
		this.invoice_type_DOM_DRCR = invoice_type_DOM_DRCR;
	}

	public Vector getTRADER_ABBR_DOM_DRCR() {
		return TRADER_ABBR_DOM_DRCR;
	}

	public void setTRADER_ABBR_DOM_DRCR(Vector tRADER_ABBR_DOM_DRCR) {
		TRADER_ABBR_DOM_DRCR = tRADER_ABBR_DOM_DRCR;
	}

	public Vector getNet_inr_DOM_DRCR() {
		return net_inr_DOM_DRCR;
	}

	public Vector getPAY_EXCHG_RT_DT_DRCR() {
		return PAY_EXCHG_RT_DT_DRCR;
	}

	public Vector getPAY_EXCHG_RT_VAL_DRCR() {
		return PAY_EXCHG_RT_VAL_DRCR;
	}

	public Vector getInv_type_flag_DRCR() {
		return inv_type_flag_DRCR;
	}

	public Vector getINVOICE_AMT_DOM_DRCR() {
		return INVOICE_AMT_DOM_DRCR;
	}

	public Vector getINVOICE_AMT_TDS_DOM_DRCR() {
		return INVOICE_AMT_TDS_DOM_DRCR;
	}

	public Vector getINVOICE_DT_DOM_DRCR() {
		return INVOICE_DT_DOM_DRCR;
	}

	public double getPurchase_total_inv_value_inr_dom_DRCR() {
		return purchase_total_inv_value_inr_dom_DRCR;
	}

	public double getPurchase_total_cost_inr_dom_DRCR() {
		return purchase_total_cost_inr_dom_DRCR;
	}

	public void setNet_inr_DOM_DRCR(Vector net_inr_DOM_DRCR) {
		this.net_inr_DOM_DRCR = net_inr_DOM_DRCR;
	}

	public void setPAY_EXCHG_RT_DT_DRCR(Vector pAY_EXCHG_RT_DT_DRCR) {
		PAY_EXCHG_RT_DT_DRCR = pAY_EXCHG_RT_DT_DRCR;
	}

	public void setPAY_EXCHG_RT_VAL_DRCR(Vector pAY_EXCHG_RT_VAL_DRCR) {
		PAY_EXCHG_RT_VAL_DRCR = pAY_EXCHG_RT_VAL_DRCR;
	}

	public void setInv_type_flag_DRCR(Vector inv_type_flag_DRCR) {
		this.inv_type_flag_DRCR = inv_type_flag_DRCR;
	}

	public void setINVOICE_AMT_DOM_DRCR(Vector iNVOICE_AMT_DOM_DRCR) {
		INVOICE_AMT_DOM_DRCR = iNVOICE_AMT_DOM_DRCR;
	}

	public void setINVOICE_AMT_TDS_DOM_DRCR(Vector iNVOICE_AMT_TDS_DOM_DRCR) {
		INVOICE_AMT_TDS_DOM_DRCR = iNVOICE_AMT_TDS_DOM_DRCR;
	}

	public void setINVOICE_DT_DOM_DRCR(Vector iNVOICE_DT_DOM_DRCR) {
		INVOICE_DT_DOM_DRCR = iNVOICE_DT_DOM_DRCR;
	}

	public void setPurchase_total_inv_value_inr_dom_DRCR(double purchase_total_inv_value_inr_dom_DRCR) {
		this.purchase_total_inv_value_inr_dom_DRCR = purchase_total_inv_value_inr_dom_DRCR;
	}

	public void setPurchase_total_cost_inr_dom_DRCR(double purchase_total_cost_inr_dom_DRCR) {
		this.purchase_total_cost_inr_dom_DRCR = purchase_total_cost_inr_dom_DRCR;
	}

	public Vector getCONF_PRICE_DOM_DRCR() {
		return CONF_PRICE_DOM_DRCR;
	}

	public void setCONF_PRICE_DOM_DRCR(Vector cONF_PRICE_DOM_DRCR) {
		CONF_PRICE_DOM_DRCR = cONF_PRICE_DOM_DRCR;
	}

	public Vector getEXCHG_RATE_VALUE_DOM_DRCR() {
		return EXCHG_RATE_VALUE_DOM_DRCR;
	}

	public Vector getDUE_DT_DOM_DRCR() {
		return DUE_DT_DOM_DRCR;
	}

	public Vector getDuration_dom_DRCR() {
		return duration_dom_DRCR;
	}

	public void setEXCHG_RATE_VALUE_DOM_DRCR(Vector eXCHG_RATE_VALUE_DOM_DRCR) {
		EXCHG_RATE_VALUE_DOM_DRCR = eXCHG_RATE_VALUE_DOM_DRCR;
	}

	public void setDUE_DT_DOM_DRCR(Vector dUE_DT_DOM_DRCR) {
		DUE_DT_DOM_DRCR = dUE_DT_DOM_DRCR;
	}

	public void setDuration_dom_DRCR(Vector duration_dom_DRCR) {
		this.duration_dom_DRCR = duration_dom_DRCR;
	}

	public Vector getTCS_PERC_DOM_DRCR() {
		return TCS_PERC_DOM_DRCR;
	}

	public Vector getTDS_PERC_DOM_DRCR() {
		return TDS_PERC_DOM_DRCR;
	}

	public Vector getTCS_APP_FLAG_DRCR() {
		return TCS_APP_FLAG_DRCR;
	}

	public Vector getTDS_APP_FLAG_DRCR() {
		return TDS_APP_FLAG_DRCR;
	}

	public Vector getTCS_TDS_AMT_DOM_DRCR() {
		return TCS_TDS_AMT_DOM_DRCR;
	}

	public Vector getPayable_inr_DOM_DRCR() {
		return payable_inr_DOM_DRCR;
	}

	public Vector getCD_PAID_DOM_DRCR() {
		return CD_PAID_DOM_DRCR;
	}

	public Vector getCD_PAID_NUMERIC_DOM_DRCR() {
		return CD_PAID_NUMERIC_DOM_DRCR;
	}

	public Vector getACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR() {
		return ACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR;
	}

	public Vector getTRADER_INV_CURRENCY_DRCR() {
		return TRADER_INV_CURRENCY_DRCR;
	}

	public Vector getTRADER_PAY_CURRENCY_DRCR() {
		return TRADER_PAY_CURRENCY_DRCR;
	}

	public Vector getREMARK_DOM_DRCR() {
		return REMARK_DOM_DRCR;
	}

	public Vector getTAX_rmk_DOM_DRCR() {
		return TAX_rmk_DOM_DRCR;
	}

	public Vector getTAX_amt_usd_DOM_DRCR() {
		return TAX_amt_usd_DOM_DRCR;
	}

	public Vector getCONF_PRICE_NUMERIC_DOM_DRCR() {
		return CONF_PRICE_NUMERIC_DOM_DRCR;
	}

	public Vector getApprove_flag_DOM_DRCR() {
		return Approve_flag_DOM_DRCR;
	}

	public Vector getTRANSACTION_DT_DRCR() {
		return TRANSACTION_DT_DRCR;
	}

	public double getPurchase_total_invoice_value_dom_DRCR() {
		return purchase_total_invoice_value_dom_DRCR;
	}

	public void setTCS_PERC_DOM_DRCR(Vector tCS_PERC_DOM_DRCR) {
		TCS_PERC_DOM_DRCR = tCS_PERC_DOM_DRCR;
	}

	public void setTDS_PERC_DOM_DRCR(Vector tDS_PERC_DOM_DRCR) {
		TDS_PERC_DOM_DRCR = tDS_PERC_DOM_DRCR;
	}

	public void setTCS_APP_FLAG_DRCR(Vector tCS_APP_FLAG_DRCR) {
		TCS_APP_FLAG_DRCR = tCS_APP_FLAG_DRCR;
	}

	public void setTDS_APP_FLAG_DRCR(Vector tDS_APP_FLAG_DRCR) {
		TDS_APP_FLAG_DRCR = tDS_APP_FLAG_DRCR;
	}

	public void setTCS_TDS_AMT_DOM_DRCR(Vector tCS_TDS_AMT_DOM_DRCR) {
		TCS_TDS_AMT_DOM_DRCR = tCS_TDS_AMT_DOM_DRCR;
	}

	public void setPayable_inr_DOM_DRCR(Vector payable_inr_DOM_DRCR) {
		this.payable_inr_DOM_DRCR = payable_inr_DOM_DRCR;
	}

	public void setCD_PAID_DOM_DRCR(Vector cD_PAID_DOM_DRCR) {
		CD_PAID_DOM_DRCR = cD_PAID_DOM_DRCR;
	}

	public void setCD_PAID_NUMERIC_DOM_DRCR(Vector cD_PAID_NUMERIC_DOM_DRCR) {
		CD_PAID_NUMERIC_DOM_DRCR = cD_PAID_NUMERIC_DOM_DRCR;
	}

	public void setACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR(Vector aCTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR) {
		ACTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR = aCTUAL_UNLOADED_QTY_NUMERIC_DOM_DRCR;
	}

	public void setTRADER_INV_CURRENCY_DRCR(Vector tRADER_INV_CURRENCY_DRCR) {
		TRADER_INV_CURRENCY_DRCR = tRADER_INV_CURRENCY_DRCR;
	}

	public void setTRADER_PAY_CURRENCY_DRCR(Vector tRADER_PAY_CURRENCY_DRCR) {
		TRADER_PAY_CURRENCY_DRCR = tRADER_PAY_CURRENCY_DRCR;
	}

	public void setREMARK_DOM_DRCR(Vector rEMARK_DOM_DRCR) {
		REMARK_DOM_DRCR = rEMARK_DOM_DRCR;
	}

	public void setTAX_rmk_DOM_DRCR(Vector tAX_rmk_DOM_DRCR) {
		TAX_rmk_DOM_DRCR = tAX_rmk_DOM_DRCR;
	}

	public void setTAX_amt_usd_DOM_DRCR(Vector tAX_amt_usd_DOM_DRCR) {
		TAX_amt_usd_DOM_DRCR = tAX_amt_usd_DOM_DRCR;
	}

	public void setCONF_PRICE_NUMERIC_DOM_DRCR(Vector cONF_PRICE_NUMERIC_DOM_DRCR) {
		CONF_PRICE_NUMERIC_DOM_DRCR = cONF_PRICE_NUMERIC_DOM_DRCR;
	}

	public void setApprove_flag_DOM_DRCR(Vector approve_flag_DOM_DRCR) {
		Approve_flag_DOM_DRCR = approve_flag_DOM_DRCR;
	}

	public void setTRANSACTION_DT_DRCR(Vector tRANSACTION_DT_DRCR) {
		TRANSACTION_DT_DRCR = tRANSACTION_DT_DRCR;
	}

	public void setPurchase_total_invoice_value_dom_DRCR(double purchase_total_invoice_value_dom_DRCR) {
		this.purchase_total_invoice_value_dom_DRCR = purchase_total_invoice_value_dom_DRCR;
	}

	public Vector getFINAL_SELLER_INV_AMT_INR_DOM_DRCR() {
		return FINAL_SELLER_INV_AMT_INR_DOM_DRCR;
	}

	public void setFINAL_SELLER_INV_AMT_INR_DOM_DRCR(Vector fINAL_SELLER_INV_AMT_INR_DOM_DRCR) {
		FINAL_SELLER_INV_AMT_INR_DOM_DRCR = fINAL_SELLER_INV_AMT_INR_DOM_DRCR;
	}

	public Vector getXML_GEN_FLAG_DOM_DRCR() {
		return XML_GEN_FLAG_DOM_DRCR;
	}

	public Vector getSUN_APPROVAL_DOM_DRCR() {
		return SUN_APPROVAL_DOM_DRCR;
	}

	public void setXML_GEN_FLAG_DOM_DRCR(Vector xML_GEN_FLAG_DOM_DRCR) {
		XML_GEN_FLAG_DOM_DRCR = xML_GEN_FLAG_DOM_DRCR;
	}

	public void setSUN_APPROVAL_DOM_DRCR(Vector sUN_APPROVAL_DOM_DRCR) {
		SUN_APPROVAL_DOM_DRCR = sUN_APPROVAL_DOM_DRCR;
	}

	public Vector getExchg_rt_Dt_DRCR() {
		return Exchg_rt_Dt_DRCR;
	}

	public void setExchg_rt_Dt_DRCR(Vector exchg_rt_Dt_DRCR) {
		Exchg_rt_Dt_DRCR = exchg_rt_Dt_DRCR;
	}

	public Vector getExchg_rt_val_DRCR() {
		return exchg_rt_val_DRCR;
	}

	public void setExchg_rt_val_DRCR(Vector exchg_rt_val_DRCR) {
		this.exchg_rt_val_DRCR = exchg_rt_val_DRCR;
	}

	public Vector getGross_inr_DOM_DRCR() {
		return Gross_inr_DOM_DRCR;
	}

	public Vector getTax_inr_DOM_DRCR() {
		return Tax_inr_DOM_DRCR;
	}

	public void setGross_inr_DOM_DRCR(Vector gross_inr_DOM_DRCR) {
		Gross_inr_DOM_DRCR = gross_inr_DOM_DRCR;
	}

	public void setTax_inr_DOM_DRCR(Vector tax_inr_DOM_DRCR) {
		Tax_inr_DOM_DRCR = tax_inr_DOM_DRCR;
	}

	public double getPurchase_total_qty_dom_DRCR() {
		return purchase_total_qty_dom_DRCR;
	}

	public void setPurchase_total_qty_dom_DRCR(double purchase_total_qty_dom_DRCR) {
		this.purchase_total_qty_dom_DRCR = purchase_total_qty_dom_DRCR;
	}

	public String getExchg_rt_dt_drcr() {
		return exchg_rt_dt_drcr;
	}

	public void setExchg_rt_dt_drcr(String exchg_rt_dt_drcr) {
		this.exchg_rt_dt_drcr = exchg_rt_dt_drcr;
	}

	public String getAll_exchg_rtdt_drcr() {
		return all_exchg_rtdt_drcr;
	}

	public void setAll_exchg_rtdt_drcr(String all_exchg_rtdt_drcr) {
		this.all_exchg_rtdt_drcr = all_exchg_rtdt_drcr;
	}


	public Vector getDR_CR_FLAG_DOM_DRCR() {
		return DR_CR_FLAG_DOM_DRCR;
	}

	public void setDR_CR_FLAG_DOM_DRCR(Vector dR_CR_FLAG_DOM_DRCR) {
		DR_CR_FLAG_DOM_DRCR = dR_CR_FLAG_DOM_DRCR;
	}

	public Vector getDR_CR_ORI_INV_NO() {
		return DR_CR_ORI_INV_NO;
	}

	public void setDR_CR_ORI_INV_NO(Vector dR_CR_ORI_INV_NO) {
		DR_CR_ORI_INV_NO = dR_CR_ORI_INV_NO;
	}

	public Vector getVtitle() {
		return Vtitle;
	}

	public void setVtitle(Vector vtitle) {
		Vtitle = vtitle;
	}

	public Vector getVtitle_DRCR() {
		return Vtitle_DRCR;
	}

	public void setVtitle_DRCR(Vector vtitle_DRCR) {
		Vtitle_DRCR = vtitle_DRCR;
	}

	public Vector getIGX_XML_GEN_FLAG() {
		return IGX_XML_GEN_FLAG;
	}

	public Vector getIGX_INV_TAX_AMT() {
		return IGX_INV_TAX_AMT;
	}

	public Vector getIGX_SUMMRY_CONT_TYP() {
		return IGX_SUMMRY_CONT_TYP;
	}

	public Vector getIGX_HLPL_INV_SEQ_NO() {
		return IGX_HLPL_INV_SEQ_NO;
	}

	public Vector getIGX_sac_code() {
		return IGX_sac_code;
	}

	public Vector getIGX_INVOICE_DT() {
		return IGX_INVOICE_DT;
	}

	public Vector getIGX_HLPL_INV_SEQ() {
		return IGX_HLPL_INV_SEQ;
	}

	public Vector getIGX_TAX_CODE() {
		return IGX_TAX_CODE;
	}

	public Vector getIGX_FACTOR() {
		return IGX_FACTOR;
	}

	public Vector getIGX_TAX_AMOUNT() {
		return IGX_TAX_AMOUNT;
	}

	public Vector getIGX_VAT_AMT() {
		return IGX_VAT_AMT;
	}

	public Vector getIGX_SALE_VAT_TAX_PERC() {
		return IGX_SALE_VAT_TAX_PERC;
	}

	public Vector getIGX_SALE_CST_TAX_PERC() {
		return IGX_SALE_CST_TAX_PERC;
	}

	public double getIGX_sales_vat_inr_total() {
		return IGX_sales_vat_inr_total;
	}

	public double getIGX_tcs_inr_total() {
		return IGX_tcs_inr_total;
	}

	public double getIGX_sales_total_tax_inr_total() {
		return IGX_sales_total_tax_inr_total;
	}

	public double getIGX_sales_total_tax_usd_total() {
		return IGX_sales_total_tax_usd_total;
	}

	public double getIGX_sales_net_amt_usd_total() {
		return IGX_sales_net_amt_usd_total;
	}

	public Vector getIGX_NET_AMT_USD() {
		return IGX_NET_AMT_USD;
	}

	public Vector getIGX_NET_AMT_USD_NUMERIC() {
		return IGX_NET_AMT_USD_NUMERIC;
	}

	public Vector getIGX_SALES_TAX_AMT_USD() {
		return IGX_SALES_TAX_AMT_USD;
	}

	public Vector getIGX_VAT_AMT_USD() {
		return IGX_VAT_AMT_USD;
	}

	public Vector getIGX_SALES_TAX_AMT_USD_NUMERIC() {
		return IGX_SALES_TAX_AMT_USD_NUMERIC;
	}

	public Vector getIGX_VAT_AMT_USD_NUMERIC() {
		return IGX_VAT_AMT_USD_NUMERIC;
	}

	public Vector getIGX_TAX_AMT_USD() {
		return IGX_TAX_AMT_USD;
	}

	public Vector getIGX_TAX_AMT_INR() {
		return IGX_TAX_AMT_INR;
	}

	public Vector getIGX_VAT_AMT_NUMERIC() {
		return IGX_VAT_AMT_NUMERIC;
	}

	public Vector getIGX_SALES_TAX_AMT() {
		return IGX_SALES_TAX_AMT;
	}

	public Vector getIGX_GROUP_FOREIGN_EXCHG_RATE() {
		return IGX_GROUP_FOREIGN_EXCHG_RATE;
	}

	public double getIGX_sales_sales_tax_usd_total() {
		return IGX_sales_sales_tax_usd_total;
	}

	public double getIGX_sales_vat_usd_total() {
		return IGX_sales_vat_usd_total;
	}

	public Vector getIGX_SALES_TAX_AMT_NUMERIC() {
		return IGX_SALES_TAX_AMT_NUMERIC;
	}

	public double getIGX_sales_sales_tax_inr_total() {
		return IGX_sales_sales_tax_inr_total;
	}

	public Vector getIGX_TAX_ON_TITLE() {
		return IGX_TAX_ON_TITLE;
	}

	public Vector getIGX_PERIOD_START_DT() {
		return IGX_PERIOD_START_DT;
	}

	public Vector getIGX_PERIOD_END_DT() {
		return IGX_PERIOD_END_DT;
	}

	public Vector getIGX_cost_center_code_() {
		return IGX_cost_center_code_;
	}

	public Vector getIGX_SALE_PRICE() {
		return IGX_SALE_PRICE;
	}

	public Vector getIGX_SALE_PRICE_NUMERIC() {
		return IGX_SALE_PRICE_NUMERIC;
	}

	public Vector getIGX_DUE_DT() {
		return IGX_DUE_DT;
	}

	public Vector getIGX_TOTAL_QTY() {
		return IGX_TOTAL_QTY;
	}

	public Vector getIGX_TOTAL_QTY_NUMERIC() {
		return IGX_TOTAL_QTY_NUMERIC;
	}

	public double getIGX_sales_qty_total() {
		return IGX_sales_qty_total;
	}

	public Vector getIGX_EXCHG_RATE() {
		return IGX_EXCHG_RATE;
	}

	public Vector getIGX_GROSS_AMT_USD() {
		return IGX_GROSS_AMT_USD;
	}

	public Vector getIGX_GROSS_AMT_USD_NUMERIC() {
		return IGX_GROSS_AMT_USD_NUMERIC;
	}

	public double getIGX_sales_qty_amt_usd_total() {
		return IGX_sales_qty_amt_usd_total;
	}

	public double getIGX_sales_gross_amt_usd_total() {
		return IGX_sales_gross_amt_usd_total;
	}

	public Vector getIGX_GROSS_AMT_INR() {
		return IGX_GROSS_AMT_INR;
	}

	public Vector getIGX_GROSS_AMT_INR_2() {
		return IGX_GROSS_AMT_INR_2;
	}

	public Vector getIGX_GROSS_AMT_INR_NUMERIC() {
		return IGX_GROSS_AMT_INR_NUMERIC;
	}

	public double getIGX_sales_qty_amt_inr_total() {
		return IGX_sales_qty_amt_inr_total;
	}

	public double getIGX_sales_gross_amt_inr_total() {
		return IGX_sales_gross_amt_inr_total;
	}

	public Vector getIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG() {
		return IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;
	}

	public Vector getIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2() {
		return IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2;
	}

	public Vector getIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC() {
		return IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC;
	}

	public Vector getIGX_tmp_group_gross_usd_amt() {
		return IGX_tmp_group_gross_usd_amt;
	}

	public double getIGX_sales_group_foreign_gross_amt_usd_total() {
		return IGX_sales_group_foreign_gross_amt_usd_total;
	}

	public Vector getIGX_NET_AMT_INR() {
		return IGX_NET_AMT_INR;
	}

	public Vector getIGX_NET_AMT_INR_NUMERIC() {
		return IGX_NET_AMT_INR_NUMERIC;
	}

	public double getIGX_sales_net_amt_inr_total() {
		return IGX_sales_net_amt_inr_total;
	}

	public Vector getIGX_FINANCIAL_YEAR() {
		return IGX_FINANCIAL_YEAR;
	}

	public Vector getIGX_CUSTOMER_CD() {
		return IGX_CUSTOMER_CD;
	}

	public Vector getIGX_CUSTOMER_ABBR() {
		return IGX_CUSTOMER_ABBR;
	}

	public Vector getIGX_CUSTOMER_NAME() {
		return IGX_CUSTOMER_NAME;
	}

	public Vector getIGX_TAX_STRUCT_CD() {
		return IGX_TAX_STRUCT_CD;
	}

	public Vector getIGX_SEGMENT_NAME() {
		return IGX_SEGMENT_NAME;
	}

	public Vector getIGX_SN_NO() {
		return IGX_SN_NO;
	}

	public Vector getIGX_REM_SUPPLY() {
		return IGX_REM_SUPPLY;
	}

	public Vector getIGX_REM_SUPPLY_NUMERIC() {
		return IGX_REM_SUPPLY_NUMERIC;
	}

	public Vector getIGX_CUM_SUPPLY() {
		return IGX_CUM_SUPPLY;
	}

	public Vector getIGX_START_DT() {
		return IGX_START_DT;
	}

	public Vector getIGX_END_DT() {
		return IGX_END_DT;
	}

	public Vector getIGX_TCQ() {
		return IGX_TCQ;
	}

	public Vector getIGX_TCQ_NUMERIC() {
		return IGX_TCQ_NUMERIC;
	}

	public Vector getIGX_RATE() {
		return IGX_RATE;
	}

	public Vector getIGX_RATE_NUMERIC() {
		return IGX_RATE_NUMERIC;
	}

	public Vector getIGX_SN_REV_NO() {
		return IGX_SN_REV_NO;
	}

	public Vector getIGX_FGSA_NO() {
		return IGX_FGSA_NO;
	}

	public Vector getIGX_FGSA_REV_NO() {
		return IGX_FGSA_REV_NO;
	}

	public Vector getIGX_MONTH() {
		return IGX_MONTH;
	}

	public Vector getIGX_CONTRACT_TYPE() {
		return IGX_CONTRACT_TYPE;
	}

	public Vector getIGX_PLANT_SEQ_NO() {
		return IGX_PLANT_SEQ_NO;
	}

	public Vector getIGX_SUN_APPROVAL() {
		return IGX_SUN_APPROVAL;
	}

	public Vector getIGX_Account_Mapping_id() {
		return IGX_Account_Mapping_id;
	}

	public Vector getIGX_NEW_INV_SEQ_NO() {
		return IGX_NEW_INV_SEQ_NO;
	}

	public Vector getIGX_SUPPLIER_CD() {
		return IGX_SUPPLIER_CD;
	}

	public Vector getIGX_AdvADJ_FLAG() {
		return IGX_AdvADJ_FLAG;
	}

	public Vector getIGX_Vtcs_amt() {
		return IGX_Vtcs_amt;
	}

	public Vector getIGX_VSTATE_CD() {
		return IGX_VSTATE_CD;
	}

	public Vector getIGX_VSTATE_NM() {
		return IGX_VSTATE_NM;
	}

	public Vector getIGX_trans_gross_inr() {
		return IGX_trans_gross_inr;
	}

	public Vector getIGX_VST_WISE_INDEX() {
		return IGX_VST_WISE_INDEX;
	}

	public Vector getIGX_trans_charges() {
		return IGX_trans_charges;
	}

	public Vector getIGX_AVG_PRICE_MMBTU() {
		return IGX_AVG_PRICE_MMBTU;
	}

	public Vector getIGX_EXCHG_RATE_VALUE() {
		return IGX_EXCHG_RATE_VALUE;
	}

	public Vector getIGX_EXCHG_RATE_VALUE_NUMERIC() {
		return IGX_EXCHG_RATE_VALUE_NUMERIC;
	}

	public Vector getIGX_vSTAT_NO() {
		return IGX_vSTAT_NO;
	}

	public Vector getIGX_contact_Customer_GST_NO() {
		return IGX_contact_Customer_GST_NO;
	}

	public Vector getIGX_contact_Customer_CST_NO() {
		return IGX_contact_Customer_CST_NO;
	}

	public Vector getIGX_contact_Customer_GVAT_NO() {
		return IGX_contact_Customer_GVAT_NO;
	}

	public Vector getIGX_contact_Customer_MVAT_NO() {
		return IGX_contact_Customer_MVAT_NO;
	}

	public void setIGX_XML_GEN_FLAG(Vector iGX_XML_GEN_FLAG) {
		IGX_XML_GEN_FLAG = iGX_XML_GEN_FLAG;
	}

	public void setIGX_INV_TAX_AMT(Vector iGX_INV_TAX_AMT) {
		IGX_INV_TAX_AMT = iGX_INV_TAX_AMT;
	}

	public void setIGX_SUMMRY_CONT_TYP(Vector iGX_SUMMRY_CONT_TYP) {
		IGX_SUMMRY_CONT_TYP = iGX_SUMMRY_CONT_TYP;
	}

	public void setIGX_HLPL_INV_SEQ_NO(Vector iGX_HLPL_INV_SEQ_NO) {
		IGX_HLPL_INV_SEQ_NO = iGX_HLPL_INV_SEQ_NO;
	}

	public void setIGX_sac_code(Vector iGX_sac_code) {
		IGX_sac_code = iGX_sac_code;
	}

	public void setIGX_INVOICE_DT(Vector iGX_INVOICE_DT) {
		IGX_INVOICE_DT = iGX_INVOICE_DT;
	}

	public void setIGX_HLPL_INV_SEQ(Vector iGX_HLPL_INV_SEQ) {
		IGX_HLPL_INV_SEQ = iGX_HLPL_INV_SEQ;
	}

	public void setIGX_TAX_CODE(Vector iGX_TAX_CODE) {
		IGX_TAX_CODE = iGX_TAX_CODE;
	}

	public void setIGX_FACTOR(Vector iGX_FACTOR) {
		IGX_FACTOR = iGX_FACTOR;
	}

	public void setIGX_TAX_AMOUNT(Vector iGX_TAX_AMOUNT) {
		IGX_TAX_AMOUNT = iGX_TAX_AMOUNT;
	}

	public void setIGX_VAT_AMT(Vector iGX_VAT_AMT) {
		IGX_VAT_AMT = iGX_VAT_AMT;
	}

	public void setIGX_SALE_VAT_TAX_PERC(Vector iGX_SALE_VAT_TAX_PERC) {
		IGX_SALE_VAT_TAX_PERC = iGX_SALE_VAT_TAX_PERC;
	}

	public void setIGX_SALE_CST_TAX_PERC(Vector iGX_SALE_CST_TAX_PERC) {
		IGX_SALE_CST_TAX_PERC = iGX_SALE_CST_TAX_PERC;
	}

	public void setIGX_sales_vat_inr_total(double iGX_sales_vat_inr_total) {
		IGX_sales_vat_inr_total = iGX_sales_vat_inr_total;
	}

	public void setIGX_tcs_inr_total(double iGX_tcs_inr_total) {
		IGX_tcs_inr_total = iGX_tcs_inr_total;
	}

	public void setIGX_sales_total_tax_inr_total(double iGX_sales_total_tax_inr_total) {
		IGX_sales_total_tax_inr_total = iGX_sales_total_tax_inr_total;
	}

	public void setIGX_sales_total_tax_usd_total(double iGX_sales_total_tax_usd_total) {
		IGX_sales_total_tax_usd_total = iGX_sales_total_tax_usd_total;
	}

	public void setIGX_sales_net_amt_usd_total(double iGX_sales_net_amt_usd_total) {
		IGX_sales_net_amt_usd_total = iGX_sales_net_amt_usd_total;
	}

	public void setIGX_NET_AMT_USD(Vector iGX_NET_AMT_USD) {
		IGX_NET_AMT_USD = iGX_NET_AMT_USD;
	}

	public void setIGX_NET_AMT_USD_NUMERIC(Vector iGX_NET_AMT_USD_NUMERIC) {
		IGX_NET_AMT_USD_NUMERIC = iGX_NET_AMT_USD_NUMERIC;
	}

	public void setIGX_SALES_TAX_AMT_USD(Vector iGX_SALES_TAX_AMT_USD) {
		IGX_SALES_TAX_AMT_USD = iGX_SALES_TAX_AMT_USD;
	}

	public void setIGX_VAT_AMT_USD(Vector iGX_VAT_AMT_USD) {
		IGX_VAT_AMT_USD = iGX_VAT_AMT_USD;
	}

	public void setIGX_SALES_TAX_AMT_USD_NUMERIC(Vector iGX_SALES_TAX_AMT_USD_NUMERIC) {
		IGX_SALES_TAX_AMT_USD_NUMERIC = iGX_SALES_TAX_AMT_USD_NUMERIC;
	}

	public void setIGX_VAT_AMT_USD_NUMERIC(Vector iGX_VAT_AMT_USD_NUMERIC) {
		IGX_VAT_AMT_USD_NUMERIC = iGX_VAT_AMT_USD_NUMERIC;
	}

	public void setIGX_TAX_AMT_USD(Vector iGX_TAX_AMT_USD) {
		IGX_TAX_AMT_USD = iGX_TAX_AMT_USD;
	}

	public void setIGX_TAX_AMT_INR(Vector iGX_TAX_AMT_INR) {
		IGX_TAX_AMT_INR = iGX_TAX_AMT_INR;
	}

	public void setIGX_VAT_AMT_NUMERIC(Vector iGX_VAT_AMT_NUMERIC) {
		IGX_VAT_AMT_NUMERIC = iGX_VAT_AMT_NUMERIC;
	}

	public void setIGX_SALES_TAX_AMT(Vector iGX_SALES_TAX_AMT) {
		IGX_SALES_TAX_AMT = iGX_SALES_TAX_AMT;
	}

	public void setIGX_GROUP_FOREIGN_EXCHG_RATE(Vector iGX_GROUP_FOREIGN_EXCHG_RATE) {
		IGX_GROUP_FOREIGN_EXCHG_RATE = iGX_GROUP_FOREIGN_EXCHG_RATE;
	}

	public void setIGX_sales_sales_tax_usd_total(double iGX_sales_sales_tax_usd_total) {
		IGX_sales_sales_tax_usd_total = iGX_sales_sales_tax_usd_total;
	}

	public void setIGX_sales_vat_usd_total(double iGX_sales_vat_usd_total) {
		IGX_sales_vat_usd_total = iGX_sales_vat_usd_total;
	}

	public void setIGX_SALES_TAX_AMT_NUMERIC(Vector iGX_SALES_TAX_AMT_NUMERIC) {
		IGX_SALES_TAX_AMT_NUMERIC = iGX_SALES_TAX_AMT_NUMERIC;
	}

	public void setIGX_sales_sales_tax_inr_total(double iGX_sales_sales_tax_inr_total) {
		IGX_sales_sales_tax_inr_total = iGX_sales_sales_tax_inr_total;
	}

	public void setIGX_TAX_ON_TITLE(Vector iGX_TAX_ON_TITLE) {
		IGX_TAX_ON_TITLE = iGX_TAX_ON_TITLE;
	}

	public void setIGX_PERIOD_START_DT(Vector iGX_PERIOD_START_DT) {
		IGX_PERIOD_START_DT = iGX_PERIOD_START_DT;
	}

	public void setIGX_PERIOD_END_DT(Vector iGX_PERIOD_END_DT) {
		IGX_PERIOD_END_DT = iGX_PERIOD_END_DT;
	}

	public void setIGX_cost_center_code_(Vector iGX_cost_center_code_) {
		IGX_cost_center_code_ = iGX_cost_center_code_;
	}

	public void setIGX_SALE_PRICE(Vector iGX_SALE_PRICE) {
		IGX_SALE_PRICE = iGX_SALE_PRICE;
	}

	public void setIGX_SALE_PRICE_NUMERIC(Vector iGX_SALE_PRICE_NUMERIC) {
		IGX_SALE_PRICE_NUMERIC = iGX_SALE_PRICE_NUMERIC;
	}

	public void setIGX_DUE_DT(Vector iGX_DUE_DT) {
		IGX_DUE_DT = iGX_DUE_DT;
	}

	public void setIGX_TOTAL_QTY(Vector iGX_TOTAL_QTY) {
		IGX_TOTAL_QTY = iGX_TOTAL_QTY;
	}

	public void setIGX_TOTAL_QTY_NUMERIC(Vector iGX_TOTAL_QTY_NUMERIC) {
		IGX_TOTAL_QTY_NUMERIC = iGX_TOTAL_QTY_NUMERIC;
	}

	public void setIGX_sales_qty_total(double iGX_sales_qty_total) {
		IGX_sales_qty_total = iGX_sales_qty_total;
	}

	public void setIGX_EXCHG_RATE(Vector iGX_EXCHG_RATE) {
		IGX_EXCHG_RATE = iGX_EXCHG_RATE;
	}

	public void setIGX_GROSS_AMT_USD(Vector iGX_GROSS_AMT_USD) {
		IGX_GROSS_AMT_USD = iGX_GROSS_AMT_USD;
	}

	public void setIGX_GROSS_AMT_USD_NUMERIC(Vector iGX_GROSS_AMT_USD_NUMERIC) {
		IGX_GROSS_AMT_USD_NUMERIC = iGX_GROSS_AMT_USD_NUMERIC;
	}

	public void setIGX_sales_qty_amt_usd_total(double iGX_sales_qty_amt_usd_total) {
		IGX_sales_qty_amt_usd_total = iGX_sales_qty_amt_usd_total;
	}

	public void setIGX_sales_gross_amt_usd_total(double iGX_sales_gross_amt_usd_total) {
		IGX_sales_gross_amt_usd_total = iGX_sales_gross_amt_usd_total;
	}

	public void setIGX_GROSS_AMT_INR(Vector iGX_GROSS_AMT_INR) {
		IGX_GROSS_AMT_INR = iGX_GROSS_AMT_INR;
	}

	public void setIGX_GROSS_AMT_INR_2(Vector iGX_GROSS_AMT_INR_2) {
		IGX_GROSS_AMT_INR_2 = iGX_GROSS_AMT_INR_2;
	}

	public void setIGX_GROSS_AMT_INR_NUMERIC(Vector iGX_GROSS_AMT_INR_NUMERIC) {
		IGX_GROSS_AMT_INR_NUMERIC = iGX_GROSS_AMT_INR_NUMERIC;
	}

	public void setIGX_sales_qty_amt_inr_total(double iGX_sales_qty_amt_inr_total) {
		IGX_sales_qty_amt_inr_total = iGX_sales_qty_amt_inr_total;
	}

	public void setIGX_sales_gross_amt_inr_total(double iGX_sales_gross_amt_inr_total) {
		IGX_sales_gross_amt_inr_total = iGX_sales_gross_amt_inr_total;
	}

	public void setIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG(Vector iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG) {
		IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG = iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG;
	}

	public void setIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2(Vector iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2) {
		IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2 = iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_2;
	}

	public void setIGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC(Vector iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC) {
		IGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC = iGX_GROSS_AMT_USD_GROUP_FOREIGN_EXCHG_NUMERIC;
	}

	public void setIGX_tmp_group_gross_usd_amt(Vector iGX_tmp_group_gross_usd_amt) {
		IGX_tmp_group_gross_usd_amt = iGX_tmp_group_gross_usd_amt;
	}

	public void setIGX_sales_group_foreign_gross_amt_usd_total(double iGX_sales_group_foreign_gross_amt_usd_total) {
		IGX_sales_group_foreign_gross_amt_usd_total = iGX_sales_group_foreign_gross_amt_usd_total;
	}

	public void setIGX_NET_AMT_INR(Vector iGX_NET_AMT_INR) {
		IGX_NET_AMT_INR = iGX_NET_AMT_INR;
	}

	public void setIGX_NET_AMT_INR_NUMERIC(Vector iGX_NET_AMT_INR_NUMERIC) {
		IGX_NET_AMT_INR_NUMERIC = iGX_NET_AMT_INR_NUMERIC;
	}

	public void setIGX_sales_net_amt_inr_total(double iGX_sales_net_amt_inr_total) {
		IGX_sales_net_amt_inr_total = iGX_sales_net_amt_inr_total;
	}

	public void setIGX_FINANCIAL_YEAR(Vector iGX_FINANCIAL_YEAR) {
		IGX_FINANCIAL_YEAR = iGX_FINANCIAL_YEAR;
	}

	public void setIGX_CUSTOMER_CD(Vector iGX_CUSTOMER_CD) {
		IGX_CUSTOMER_CD = iGX_CUSTOMER_CD;
	}

	public void setIGX_CUSTOMER_ABBR(Vector iGX_CUSTOMER_ABBR) {
		IGX_CUSTOMER_ABBR = iGX_CUSTOMER_ABBR;
	}

	public void setIGX_CUSTOMER_NAME(Vector iGX_CUSTOMER_NAME) {
		IGX_CUSTOMER_NAME = iGX_CUSTOMER_NAME;
	}

	public void setIGX_TAX_STRUCT_CD(Vector iGX_TAX_STRUCT_CD) {
		IGX_TAX_STRUCT_CD = iGX_TAX_STRUCT_CD;
	}

	public void setIGX_SEGMENT_NAME(Vector iGX_SEGMENT_NAME) {
		IGX_SEGMENT_NAME = iGX_SEGMENT_NAME;
	}

	public void setIGX_SN_NO(Vector iGX_SN_NO) {
		IGX_SN_NO = iGX_SN_NO;
	}

	public void setIGX_REM_SUPPLY(Vector iGX_REM_SUPPLY) {
		IGX_REM_SUPPLY = iGX_REM_SUPPLY;
	}

	public void setIGX_REM_SUPPLY_NUMERIC(Vector iGX_REM_SUPPLY_NUMERIC) {
		IGX_REM_SUPPLY_NUMERIC = iGX_REM_SUPPLY_NUMERIC;
	}

	public void setIGX_CUM_SUPPLY(Vector iGX_CUM_SUPPLY) {
		IGX_CUM_SUPPLY = iGX_CUM_SUPPLY;
	}

	public void setIGX_START_DT(Vector iGX_START_DT) {
		IGX_START_DT = iGX_START_DT;
	}

	public void setIGX_END_DT(Vector iGX_END_DT) {
		IGX_END_DT = iGX_END_DT;
	}

	public void setIGX_TCQ(Vector iGX_TCQ) {
		IGX_TCQ = iGX_TCQ;
	}

	public void setIGX_TCQ_NUMERIC(Vector iGX_TCQ_NUMERIC) {
		IGX_TCQ_NUMERIC = iGX_TCQ_NUMERIC;
	}

	public void setIGX_RATE(Vector iGX_RATE) {
		IGX_RATE = iGX_RATE;
	}

	public void setIGX_RATE_NUMERIC(Vector iGX_RATE_NUMERIC) {
		IGX_RATE_NUMERIC = iGX_RATE_NUMERIC;
	}

	public void setIGX_SN_REV_NO(Vector iGX_SN_REV_NO) {
		IGX_SN_REV_NO = iGX_SN_REV_NO;
	}

	public void setIGX_FGSA_NO(Vector iGX_FGSA_NO) {
		IGX_FGSA_NO = iGX_FGSA_NO;
	}

	public void setIGX_FGSA_REV_NO(Vector iGX_FGSA_REV_NO) {
		IGX_FGSA_REV_NO = iGX_FGSA_REV_NO;
	}

	public void setIGX_MONTH(Vector iGX_MONTH) {
		IGX_MONTH = iGX_MONTH;
	}

	public void setIGX_CONTRACT_TYPE(Vector iGX_CONTRACT_TYPE) {
		IGX_CONTRACT_TYPE = iGX_CONTRACT_TYPE;
	}

	public void setIGX_PLANT_SEQ_NO(Vector iGX_PLANT_SEQ_NO) {
		IGX_PLANT_SEQ_NO = iGX_PLANT_SEQ_NO;
	}

	public void setIGX_SUN_APPROVAL(Vector iGX_SUN_APPROVAL) {
		IGX_SUN_APPROVAL = iGX_SUN_APPROVAL;
	}

	public void setIGX_Account_Mapping_id(Vector iGX_Account_Mapping_id) {
		IGX_Account_Mapping_id = iGX_Account_Mapping_id;
	}

	public void setIGX_NEW_INV_SEQ_NO(Vector iGX_NEW_INV_SEQ_NO) {
		IGX_NEW_INV_SEQ_NO = iGX_NEW_INV_SEQ_NO;
	}

	public void setIGX_SUPPLIER_CD(Vector iGX_SUPPLIER_CD) {
		IGX_SUPPLIER_CD = iGX_SUPPLIER_CD;
	}

	public void setIGX_AdvADJ_FLAG(Vector iGX_AdvADJ_FLAG) {
		IGX_AdvADJ_FLAG = iGX_AdvADJ_FLAG;
	}

	public void setIGX_Vtcs_amt(Vector iGX_Vtcs_amt) {
		IGX_Vtcs_amt = iGX_Vtcs_amt;
	}

	public void setIGX_VSTATE_CD(Vector iGX_VSTATE_CD) {
		IGX_VSTATE_CD = iGX_VSTATE_CD;
	}

	public void setIGX_VSTATE_NM(Vector iGX_VSTATE_NM) {
		IGX_VSTATE_NM = iGX_VSTATE_NM;
	}

	public void setIGX_trans_gross_inr(Vector iGX_trans_gross_inr) {
		IGX_trans_gross_inr = iGX_trans_gross_inr;
	}

	public void setIGX_VST_WISE_INDEX(Vector iGX_VST_WISE_INDEX) {
		IGX_VST_WISE_INDEX = iGX_VST_WISE_INDEX;
	}

	public void setIGX_trans_charges(Vector iGX_trans_charges) {
		IGX_trans_charges = iGX_trans_charges;
	}

	public void setIGX_AVG_PRICE_MMBTU(Vector iGX_AVG_PRICE_MMBTU) {
		IGX_AVG_PRICE_MMBTU = iGX_AVG_PRICE_MMBTU;
	}

	public void setIGX_EXCHG_RATE_VALUE(Vector iGX_EXCHG_RATE_VALUE) {
		IGX_EXCHG_RATE_VALUE = iGX_EXCHG_RATE_VALUE;
	}

	public void setIGX_EXCHG_RATE_VALUE_NUMERIC(Vector iGX_EXCHG_RATE_VALUE_NUMERIC) {
		IGX_EXCHG_RATE_VALUE_NUMERIC = iGX_EXCHG_RATE_VALUE_NUMERIC;
	}

	public void setIGX_vSTAT_NO(Vector iGX_vSTAT_NO) {
		IGX_vSTAT_NO = iGX_vSTAT_NO;
	}

	public void setIGX_contact_Customer_GST_NO(Vector iGX_contact_Customer_GST_NO) {
		IGX_contact_Customer_GST_NO = iGX_contact_Customer_GST_NO;
	}

	public void setIGX_contact_Customer_CST_NO(Vector iGX_contact_Customer_CST_NO) {
		IGX_contact_Customer_CST_NO = iGX_contact_Customer_CST_NO;
	}

	public void setIGX_contact_Customer_GVAT_NO(Vector iGX_contact_Customer_GVAT_NO) {
		IGX_contact_Customer_GVAT_NO = iGX_contact_Customer_GVAT_NO;
	}

	public void setIGX_contact_Customer_MVAT_NO(Vector iGX_contact_Customer_MVAT_NO) {
		IGX_contact_Customer_MVAT_NO = iGX_contact_Customer_MVAT_NO;
	}

	public int getStart_index_10() {
		return start_index_10;
	}

	public int getEnd_index_10() {
		return end_index_10;
	}

	public void setStart_index_10(int start_index_10) {
		this.start_index_10 = start_index_10;
	}

	public void setEnd_index_10(int end_index_10) {
		this.end_index_10 = end_index_10;
	}

	public double getIGX_sales_service_tax_inr_total() {
		return IGX_sales_service_tax_inr_total;
	}

	public void setIGX_sales_service_tax_inr_total(double iGX_sales_service_tax_inr_total) {
		IGX_sales_service_tax_inr_total = iGX_sales_service_tax_inr_total;
	}

	public Vector getIGX_Currency() {
		return IGX_Currency;
	}

	public void setIGX_Currency(Vector iGX_Currency) {
		IGX_Currency = iGX_Currency;
	}

	public Vector getIGX_VFinal_sum_tcq() {
		return IGX_VFinal_sum_tcq;
	}

	public void setIGX_VFinal_sum_tcq(Vector iGX_VFinal_sum_tcq) {
		IGX_VFinal_sum_tcq = iGX_VFinal_sum_tcq;
	}

	public Vector getIGX_VSum_rem_supply() {
		return IGX_VSum_rem_supply;
	}

	public void setIGX_VSum_rem_supply(Vector iGX_VSum_rem_supply) {
		IGX_VSum_rem_supply = iGX_VSum_rem_supply;
	}

	public Vector getIGX_Vsales_qty_total() {
		return IGX_Vsales_qty_total;
	}

	public void setIGX_Vsales_qty_total(Vector iGX_Vsales_qty_total) {
		IGX_Vsales_qty_total = iGX_Vsales_qty_total;
	}

	public Vector getIGX_Vsales_gross_amt_usd_total() {
		return IGX_Vsales_gross_amt_usd_total;
	}

	public void setIGX_Vsales_gross_amt_usd_total(Vector iGX_Vsales_gross_amt_usd_total) {
		IGX_Vsales_gross_amt_usd_total = iGX_Vsales_gross_amt_usd_total;
	}

	public Vector getIGX_Vsales_qty_amt_inr_total() {
		return IGX_Vsales_qty_amt_inr_total;
	}

	public void setIGX_Vsales_qty_amt_inr_total(Vector iGX_Vsales_qty_amt_inr_total) {
		IGX_Vsales_qty_amt_inr_total = iGX_Vsales_qty_amt_inr_total;
	}

	public Vector getIGX_Vtot_trans_grossinr() {
		return IGX_Vtot_trans_grossinr;
	}

	public void setIGX_Vtot_trans_grossinr(Vector iGX_Vtot_trans_grossinr) {
		IGX_Vtot_trans_grossinr = iGX_Vtot_trans_grossinr;
	}

	public Vector getIGX_Vsales_gross_amt_inr_total() {
		return IGX_Vsales_gross_amt_inr_total;
	}

	public void setIGX_Vsales_gross_amt_inr_total(Vector iGX_Vsales_gross_amt_inr_total) {
		IGX_Vsales_gross_amt_inr_total = iGX_Vsales_gross_amt_inr_total;
	}

	public Vector getIGX_Vsales_vat_inr_total() {
		return IGX_Vsales_vat_inr_total;
	}

	public void setIGX_Vsales_vat_inr_total(Vector iGX_Vsales_vat_inr_total) {
		IGX_Vsales_vat_inr_total = iGX_Vsales_vat_inr_total;
	}

	public Vector getIGX_Vsales_sales_tax_inr_total() {
		return IGX_Vsales_sales_tax_inr_total;
	}

	public void setIGX_Vsales_sales_tax_inr_total(Vector iGX_Vsales_sales_tax_inr_total) {
		IGX_Vsales_sales_tax_inr_total = iGX_Vsales_sales_tax_inr_total;
	}

	public Vector getIGX_Vsales_net_amt_inr_total() {
		return IGX_Vsales_net_amt_inr_total;
	}

	public void setIGX_Vsales_net_amt_inr_total(Vector iGX_Vsales_net_amt_inr_total) {
		IGX_Vsales_net_amt_inr_total = iGX_Vsales_net_amt_inr_total;
	}

	public Vector getIGX_Vsales_group_foreign_gross_amt_usd_total() {
		return IGX_Vsales_group_foreign_gross_amt_usd_total;
	}

	public void setIGX_Vsales_group_foreign_gross_amt_usd_total(Vector iGX_Vsales_group_foreign_gross_amt_usd_total) {
		IGX_Vsales_group_foreign_gross_amt_usd_total = iGX_Vsales_group_foreign_gross_amt_usd_total;
	}

	public Vector getIGX_Vsales_vat_usd_total() {
		return IGX_Vsales_vat_usd_total;
	}

	public void setIGX_Vsales_vat_usd_total(Vector iGX_Vsales_vat_usd_total) {
		IGX_Vsales_vat_usd_total = iGX_Vsales_vat_usd_total;
	}

	public Vector getIGX_Vsales_sales_tax_usd_total() {
		return IGX_Vsales_sales_tax_usd_total;
	}

	public void setIGX_Vsales_sales_tax_usd_total(Vector iGX_Vsales_sales_tax_usd_total) {
		IGX_Vsales_sales_tax_usd_total = iGX_Vsales_sales_tax_usd_total;
	}

	public Vector getIGX_Vsales_other_tax1_usd_total() {
		return IGX_Vsales_other_tax1_usd_total;
	}

	public void setIGX_Vsales_other_tax1_usd_total(Vector iGX_Vsales_other_tax1_usd_total) {
		IGX_Vsales_other_tax1_usd_total = iGX_Vsales_other_tax1_usd_total;
	}

	public Vector getIGX_Vsales_net_amt_usd_total() {
		return IGX_Vsales_net_amt_usd_total;
	}

	public void setIGX_Vsales_net_amt_usd_total(Vector iGX_Vsales_net_amt_usd_total) {
		IGX_Vsales_net_amt_usd_total = iGX_Vsales_net_amt_usd_total;
	}

	public Vector getIGX_Vsales_total_tax_inr_total() {
		return IGX_Vsales_total_tax_inr_total;
	}

	public void setIGX_Vsales_total_tax_inr_total(Vector iGX_Vsales_total_tax_inr_total) {
		IGX_Vsales_total_tax_inr_total = iGX_Vsales_total_tax_inr_total;
	}

	public Vector getVsupp_plant_Abbr() {
		return Vsupp_plant_Abbr;
	}

	public void setVsupp_plant_Abbr(Vector vsupp_plant_Abbr) {
		Vsupp_plant_Abbr = vsupp_plant_Abbr;
	}

	public Vector getVsupp_plant_Abbr_DOM_DRCR() {
		return Vsupp_plant_Abbr_DOM_DRCR;
	}

	public void setVsupp_plant_Abbr_DOM_DRCR(Vector vsupp_plant_Abbr_DOM_DRCR) {
		Vsupp_plant_Abbr_DOM_DRCR = vsupp_plant_Abbr_DOM_DRCR;
	}

	public Vector getCARGO_REF_DOM_FLAG() {
		return CARGO_REF_DOM_FLAG;
	}

	public void setCARGO_REF_DOM_FLAG(Vector cARGO_REF_DOM_FLAG) {
		CARGO_REF_DOM_FLAG = cARGO_REF_DOM_FLAG;
	}

	public Vector getCARGO_DOM_FLAG_DRCR() {
		return CARGO_DOM_FLAG_DRCR;
	}

	public void setCARGO_DOM_FLAG_DRCR(Vector cARGO_DOM_FLAG_DRCR) {
		CARGO_DOM_FLAG_DRCR = cARGO_DOM_FLAG_DRCR;
	}

	public Vector getDLNG_LM_hlpl_inv_seq_no() {
		return DLNG_LM_hlpl_inv_seq_no;
	}

	public void setDLNG_LM_hlpl_inv_seq_no(Vector dLNG_LM_hlpl_inv_seq_no) {
		DLNG_LM_hlpl_inv_seq_no = dLNG_LM_hlpl_inv_seq_no;
	}

	public Vector getDLNG_LM_invoice_dt() {
		return DLNG_LM_invoice_dt;
	}

	public void setDLNG_LM_invoice_dt(Vector dLNG_LM_invoice_dt) {
		DLNG_LM_invoice_dt = dLNG_LM_invoice_dt;
	}

	public Vector getDLNG_LM_period_start_dt() {
		return DLNG_LM_period_start_dt;
	}

	public void setDLNG_LM_period_start_dt(Vector dLNG_LM_period_start_dt) {
		DLNG_LM_period_start_dt = dLNG_LM_period_start_dt;
	}

	public Vector getDLNG_LM_period_end_dt() {
		return DLNG_LM_period_end_dt;
	}

	public void setDLNG_LM_period_end_dt(Vector dLNG_LM_period_end_dt) {
		DLNG_LM_period_end_dt = dLNG_LM_period_end_dt;
	}

	public Vector getDLNG_LM_sale_price() {
		return DLNG_LM_sale_price;
	}

	public void setDLNG_LM_sale_price(Vector dLNG_LM_sale_price) {
		DLNG_LM_sale_price = dLNG_LM_sale_price;
	}

	public Vector getDLNG_LM_due_dt() {
		return DLNG_LM_due_dt;
	}

	public void setDLNG_LM_due_dt(Vector dLNG_LM_due_dt) {
		DLNG_LM_due_dt = dLNG_LM_due_dt;
	}

	public Vector getDLNG_LM_total_qty() {
		return DLNG_LM_total_qty;
	}

	public void setDLNG_LM_total_qty(Vector dLNG_LM_total_qty) {
		DLNG_LM_total_qty = dLNG_LM_total_qty;
	}

	public Vector getDLNG_LM_gross_amt_inr() {
		return DLNG_LM_gross_amt_inr;
	}

	public void setDLNG_LM_gross_amt_inr(Vector dLNG_LM_gross_amt_inr) {
		DLNG_LM_gross_amt_inr = dLNG_LM_gross_amt_inr;
	}

	public Vector getDLNG_LM_net_amt_inr() {
		return DLNG_LM_net_amt_inr;
	}

	public void setDLNG_LM_net_amt_inr(Vector dLNG_LM_net_amt_inr) {
		DLNG_LM_net_amt_inr = dLNG_LM_net_amt_inr;
	}

	public Vector getDLNG_LM_financial_year() {
		return DLNG_LM_financial_year;
	}

	public void setDLNG_LM_financial_year(Vector dLNG_LM_financial_year) {
		DLNG_LM_financial_year = dLNG_LM_financial_year;
	}

	public Vector getDLNG_LM_customer_cd() {
		return DLNG_LM_customer_cd;
	}

	public void setDLNG_LM_customer_cd(Vector dLNG_LM_customer_cd) {
		DLNG_LM_customer_cd = dLNG_LM_customer_cd;
	}

	public Vector getDLNG_LM_tax_struct_cd() {
		return DLNG_LM_tax_struct_cd;
	}

	public void setDLNG_LM_tax_struct_cd(Vector dLNG_LM_tax_struct_cd) {
		DLNG_LM_tax_struct_cd = dLNG_LM_tax_struct_cd;
	}

	public Vector getDLNG_LM_sn_no() {
		return DLNG_LM_sn_no;
	}

	public void setDLNG_LM_sn_no(Vector dLNG_LM_sn_no) {
		DLNG_LM_sn_no = dLNG_LM_sn_no;
	}

	public Vector getDLNG_LM_currency_typ() {
		return DLNG_LM_currency_typ;
	}

	public void setDLNG_LM_currency_typ(Vector dLNG_LM_currency_typ) {
		DLNG_LM_currency_typ = dLNG_LM_currency_typ;
	}

	public Vector getDLNG_LM_sn_rev_no() {
		return DLNG_LM_sn_rev_no;
	}

	public void setDLNG_LM_sn_rev_no(Vector dLNG_LM_sn_rev_no) {
		DLNG_LM_sn_rev_no = dLNG_LM_sn_rev_no;
	}

	public Vector getDLNG_LM_fgsa_no() {
		return DLNG_LM_fgsa_no;
	}

	public void setDLNG_LM_fgsa_no(Vector dLNG_LM_fgsa_no) {
		DLNG_LM_fgsa_no = dLNG_LM_fgsa_no;
	}

	public Vector getDLNG_LM_fgsa_rev_no() {
		return DLNG_LM_fgsa_rev_no;
	}

	public void setDLNG_LM_fgsa_rev_no(Vector dLNG_LM_fgsa_rev_no) {
		DLNG_LM_fgsa_rev_no = dLNG_LM_fgsa_rev_no;
	}

	public Vector getDLNG_LM_invoice_month() {
		return DLNG_LM_invoice_month;
	}

	public void setDLNG_LM_invoice_month(Vector dLNG_LM_invoice_month) {
		DLNG_LM_invoice_month = dLNG_LM_invoice_month;
	}

	public Vector getDLNG_LM_GROSS_AMT_USD() {
		return DLNG_LM_GROSS_AMT_USD;
	}

	public void setDLNG_LM_GROSS_AMT_USD(Vector dLNG_LM_GROSS_AMT_USD) {
		DLNG_LM_GROSS_AMT_USD = dLNG_LM_GROSS_AMT_USD;
	}

	public Vector getDLNG_LM_exch_rate_val() {
		return DLNG_LM_exch_rate_val;
	}

	public void setDLNG_LM_exch_rate_val(Vector dLNG_LM_exch_rate_val) {
		DLNG_LM_exch_rate_val = dLNG_LM_exch_rate_val;
	}

	public Vector getDLNG_LM_INT_DAY() {
		return DLNG_LM_INT_DAY;
	}

	public void setDLNG_LM_INT_DAY(Vector dLNG_LM_INT_DAY) {
		DLNG_LM_INT_DAY = dLNG_LM_INT_DAY;
	}

	public Vector getDLNG_LM_INT_RATE() {
		return DLNG_LM_INT_RATE;
	}

	public void setDLNG_LM_INT_RATE(Vector dLNG_LM_INT_RATE) {
		DLNG_LM_INT_RATE = dLNG_LM_INT_RATE;
	}

	public Vector getDLNG_LM_contract_type() {
		return DLNG_LM_contract_type;
	}

	public void setDLNG_LM_contract_type(Vector dLNG_LM_contract_type) {
		DLNG_LM_contract_type = dLNG_LM_contract_type;
	}

	public Vector getDLNG_LM_mapping_id() {
		return DLNG_LM_mapping_id;
	}

	public void setDLNG_LM_mapping_id(Vector dLNG_LM_mapping_id) {
		DLNG_LM_mapping_id = dLNG_LM_mapping_id;
	}

	public Vector getDLNG_LM_sun_approval() {
		return DLNG_LM_sun_approval;
	}

	public void setDLNG_LM_sun_approval(Vector dLNG_LM_sun_approval) {
		DLNG_LM_sun_approval = dLNG_LM_sun_approval;
	}

	public Vector getDLNG_LM_plant_seq_no() {
		return DLNG_LM_plant_seq_no;
	}

	public void setDLNG_LM_plant_seq_no(Vector dLNG_LM_plant_seq_no) {
		DLNG_LM_plant_seq_no = dLNG_LM_plant_seq_no;
	}

	public Vector getDLNG_LM_tax_flag() {
		return DLNG_LM_tax_flag;
	}

	public void setDLNG_LM_tax_flag(Vector dLNG_LM_tax_flag) {
		DLNG_LM_tax_flag = dLNG_LM_tax_flag;
	}

	public Vector getDLNG_LM_tax_amt_inr() {
		return DLNG_LM_tax_amt_inr;
	}

	public void setDLNG_LM_tax_amt_inr(Vector dLNG_LM_tax_amt_inr) {
		DLNG_LM_tax_amt_inr = dLNG_LM_tax_amt_inr;
	}

	public Vector getDLNG_LM_contact_person_cd() {
		return DLNG_LM_contact_person_cd;
	}

	public void setDLNG_LM_contact_person_cd(Vector dLNG_LM_contact_person_cd) {
		DLNG_LM_contact_person_cd = dLNG_LM_contact_person_cd;
	}

	public Vector getDLNG_LM_new_inv_seq_no() {
		return DLNG_LM_new_inv_seq_no;
	}

	public void setDLNG_LM_new_inv_seq_no(Vector dLNG_LM_new_inv_seq_no) {
		DLNG_LM_new_inv_seq_no = dLNG_LM_new_inv_seq_no;
	}

	public Vector getDLNG_LM_customer_name() {
		return DLNG_LM_customer_name;
	}

	public void setDLNG_LM_customer_name(Vector dLNG_LM_customer_name) {
		DLNG_LM_customer_name = dLNG_LM_customer_name;
	}

	public Vector getDLNG_LM_XML_GEN_FLAG() {
		return DLNG_LM_XML_GEN_FLAG;
	}

	public void setDLNG_LM_XML_GEN_FLAG(Vector dLNG_LM_XML_GEN_FLAG) {
		DLNG_LM_XML_GEN_FLAG = dLNG_LM_XML_GEN_FLAG;
	}

	public Vector getDLNG_LM_qty() {
		return DLNG_LM_qty;
	}

	public void setDLNG_LM_qty(Vector dLNG_LM_qty) {
		DLNG_LM_qty = dLNG_LM_qty;
	}

	public Vector getDLNG_LM_customer_Invoice_Tax_Abbr() {
		return DLNG_LM_customer_Invoice_Tax_Abbr;
	}

	public void setDLNG_LM_customer_Invoice_Tax_Abbr(Vector dLNG_LM_customer_Invoice_Tax_Abbr) {
		DLNG_LM_customer_Invoice_Tax_Abbr = dLNG_LM_customer_Invoice_Tax_Abbr;
	}

	public Vector getDLNG_LM_customer_Invoice_Tax_Name() {
		return DLNG_LM_customer_Invoice_Tax_Name;
	}

	public void setDLNG_LM_customer_Invoice_Tax_Name(Vector dLNG_LM_customer_Invoice_Tax_Name) {
		DLNG_LM_customer_Invoice_Tax_Name = dLNG_LM_customer_Invoice_Tax_Name;
	}

	public Map getDLNG_LM_customer_tax_name() {
		return DLNG_LM_customer_tax_name;
	}

	public void setDLNG_LM_customer_tax_name(Map dLNG_LM_customer_tax_name) {
		DLNG_LM_customer_tax_name = dLNG_LM_customer_tax_name;
	}

	public Map getDLNG_LM_customer_tax_abbr() {
		return DLNG_LM_customer_tax_abbr;
	}

	public void setDLNG_LM_customer_tax_abbr(Map dLNG_LM_customer_tax_abbr) {
		DLNG_LM_customer_tax_abbr = dLNG_LM_customer_tax_abbr;
	}

	public Vector getDLNG_LM_customer_Invoice_Tax_Rate() {
		return DLNG_LM_customer_Invoice_Tax_Rate;
	}

	public void setDLNG_LM_customer_Invoice_Tax_Rate(Vector dLNG_LM_customer_Invoice_Tax_Rate) {
		DLNG_LM_customer_Invoice_Tax_Rate = dLNG_LM_customer_Invoice_Tax_Rate;
	}

	public Vector getDLNG_LM_customer_Invoice_Tax_Amt() {
		return DLNG_LM_customer_Invoice_Tax_Amt;
	}

	public void setDLNG_LM_customer_Invoice_Tax_Amt(Vector dLNG_LM_customer_Invoice_Tax_Amt) {
		DLNG_LM_customer_Invoice_Tax_Amt = dLNG_LM_customer_Invoice_Tax_Amt;
	}

	public Map getDLNG_LM_customer_tax_cd() {
		return DLNG_LM_customer_tax_cd;
	}

	public void setDLNG_LM_customer_tax_cd(Map dLNG_LM_customer_tax_cd) {
		DLNG_LM_customer_tax_cd = dLNG_LM_customer_tax_cd;
	}

	public Map getDLNG_LM_customer_tax_rate() {
		return DLNG_LM_customer_tax_rate;
	}

	public void setDLNG_LM_customer_tax_rate(Map dLNG_LM_customer_tax_rate) {
		DLNG_LM_customer_tax_rate = dLNG_LM_customer_tax_rate;
	}

	public Map getDLNG_LM_customer_tax_amt() {
		return DLNG_LM_customer_tax_amt;
	}

	public void setDLNG_LM_customer_tax_amt(Map dLNG_LM_customer_tax_amt) {
		DLNG_LM_customer_tax_amt = dLNG_LM_customer_tax_amt;
	}

	public Vector getDLNG_LM_customer_Invoice_Tax_Code() {
		return DLNG_LM_customer_Invoice_Tax_Code;
	}

	public void setDLNG_LM_customer_Invoice_Tax_Code(Vector dLNG_LM_customer_Invoice_Tax_Code) {
		DLNG_LM_customer_Invoice_Tax_Code = dLNG_LM_customer_Invoice_Tax_Code;
	}

	public Vector getDLNG_LM_RATE_IGST() {
		return DLNG_LM_RATE_IGST;
	}

	public void setDLNG_LM_RATE_IGST(Vector dLNG_LM_RATE_IGST) {
		DLNG_LM_RATE_IGST = dLNG_LM_RATE_IGST;
	}

	public Vector getDLNG_LM_RATE_CGST() {
		return DLNG_LM_RATE_CGST;
	}

	public void setDLNG_LM_RATE_CGST(Vector dLNG_LM_RATE_CGST) {
		DLNG_LM_RATE_CGST = dLNG_LM_RATE_CGST;
	}

	public Vector getDLNG_LM_RATE_SGST() {
		return DLNG_LM_RATE_SGST;
	}

	public void setDLNG_LM_RATE_SGST(Vector dLNG_LM_RATE_SGST) {
		DLNG_LM_RATE_SGST = dLNG_LM_RATE_SGST;
	}

	public Vector getDLNG_LM_AMT_IGST() {
		return DLNG_LM_AMT_IGST;
	}

	public void setDLNG_LM_AMT_IGST(Vector dLNG_LM_AMT_IGST) {
		DLNG_LM_AMT_IGST = dLNG_LM_AMT_IGST;
	}

	public Vector getDLNG_LM_AMT_CGST() {
		return DLNG_LM_AMT_CGST;
	}

	public void setDLNG_LM_AMT_CGST(Vector dLNG_LM_AMT_CGST) {
		DLNG_LM_AMT_CGST = dLNG_LM_AMT_CGST;
	}

	public Vector getDLNG_LM_AMT_SGST() {
		return DLNG_LM_AMT_SGST;
	}

	public void setDLNG_LM_AMT_SGST(Vector dLNG_LM_AMT_SGST) {
		DLNG_LM_AMT_SGST = dLNG_LM_AMT_SGST;
	}
}
//End Of Class DataBean_Accounting ...
